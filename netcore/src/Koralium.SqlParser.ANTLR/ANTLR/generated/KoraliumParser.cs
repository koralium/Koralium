//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./KoraliumParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class KoraliumParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SCOL=1, DOT=2, OPEN_PAR=3, CLOSE_PAR=4, COMMA=5, ASSIGN=6, STAR=7, PLUS=8, 
		MINUS=9, TILDE=10, PIPE2=11, DIV=12, MOD=13, LT2=14, GT2=15, AMP=16, PIPE=17, 
		LT=18, LT_EQ=19, GT=20, GT_EQ=21, EQ=22, NOT_EQ1=23, NOT_EQ2=24, NLT=25, 
		NGT=26, XOR=27, EXCLAMATION=28, SELECT=29, DISTINCT=30, FROM=31, AS=32, 
		NULL=33, TRUE=34, FALSE=35, WHERE=36, AND=37, OR=38, IS=39, NOT=40, LIKE=41, 
		GROUP=42, BY=43, HAVING=44, IN=45, ORDER=46, ASC=47, DESC=48, LIMIT=49, 
		OFFSET=50, SET=51, CONTAINS=52, CAST=53, BETWEEN=54, LAMBDA_ARROW=55, 
		SPACES=56, IDENTIFIER=57, COMMENT=58, BASE64_LITERAL=59, STRING_LITERAL=60, 
		VARIABLE_ID=61, NUMERIC_LITERAL=62;
	public const int
		RULE_parse = 0, RULE_statements_list = 1, RULE_sql_statement = 2, RULE_set_variable_statement = 3, 
		RULE_set_variable = 4, RULE_stored_procedure_parameter = 5, RULE_stored_procedure_statement = 6, 
		RULE_select_statement = 7, RULE_order_by_clause = 8, RULE_order_by_element = 9, 
		RULE_having_clause = 10, RULE_from_clause = 11, RULE_table_name = 12, 
		RULE_subquery = 13, RULE_orderby_subquery = 14, RULE_group_subquery = 15, 
		RULE_variable_reference = 16, RULE_select_expression = 17, RULE_where_clause = 18, 
		RULE_groupby_clause = 19, RULE_groupby_element = 20, RULE_boolean_expression = 21, 
		RULE_predicate = 22, RULE_is_null_predicate = 23, RULE_search_expression = 24, 
		RULE_in_expression = 25, RULE_like_expression = 26, RULE_in_left_scalar = 27, 
		RULE_between_expression = 28, RULE_boolean_comparison_expression = 29, 
		RULE_boolean_comparison_type = 30, RULE_boolean_binary_type = 31, RULE_column_alias = 32, 
		RULE_scalar_expression2 = 33, RULE_scalar_expression = 34, RULE_error = 35, 
		RULE_binary_expression = 36, RULE_binary_operation_type = 37, RULE_lambda_parameter = 38, 
		RULE_lambda_function = 39, RULE_function_parameter = 40, RULE_function_call = 41, 
		RULE_column_reference = 42, RULE_literal_value = 43, RULE_column_name = 44, 
		RULE_function_name = 45, RULE_table_alias = 46, RULE_any_name = 47;
	public static readonly string[] ruleNames = {
		"parse", "statements_list", "sql_statement", "set_variable_statement", 
		"set_variable", "stored_procedure_parameter", "stored_procedure_statement", 
		"select_statement", "order_by_clause", "order_by_element", "having_clause", 
		"from_clause", "table_name", "subquery", "orderby_subquery", "group_subquery", 
		"variable_reference", "select_expression", "where_clause", "groupby_clause", 
		"groupby_element", "boolean_expression", "predicate", "is_null_predicate", 
		"search_expression", "in_expression", "like_expression", "in_left_scalar", 
		"between_expression", "boolean_comparison_expression", "boolean_comparison_type", 
		"boolean_binary_type", "column_alias", "scalar_expression2", "scalar_expression", 
		"error", "binary_expression", "binary_operation_type", "lambda_parameter", 
		"lambda_function", "function_parameter", "function_call", "column_reference", 
		"literal_value", "column_name", "function_name", "table_alias", "any_name"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'.'", "'('", "')'", "','", "'='", "'*'", "'+'", "'-'", "'~'", 
		"'||'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
		"'>='", "'=='", "'!='", "'<>'", "'!<'", "'!>'", "'^'", "'!'", "'SELECT'", 
		"'DISTINCT'", "'FROM'", "'AS'", "'NULL'", "'TRUE'", "'FALSE'", "'WHERE'", 
		"'AND'", "'OR'", "'IS'", "'NOT'", "'LIKE'", "'GROUP'", "'BY'", "'HAVING'", 
		"'IN'", "'ORDER'", "'ASC'", "'DESC'", "'LIMIT'", "'OFFSET'", "'SET'", 
		"'CONTAINS'", "'CAST'", "'BETWEEN'", "'->'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", "COMMA", "ASSIGN", "STAR", 
		"PLUS", "MINUS", "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
		"PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", "NLT", 
		"NGT", "XOR", "EXCLAMATION", "SELECT", "DISTINCT", "FROM", "AS", "NULL", 
		"TRUE", "FALSE", "WHERE", "AND", "OR", "IS", "NOT", "LIKE", "GROUP", "BY", 
		"HAVING", "IN", "ORDER", "ASC", "DESC", "LIMIT", "OFFSET", "SET", "CONTAINS", 
		"CAST", "BETWEEN", "LAMBDA_ARROW", "SPACES", "IDENTIFIER", "COMMENT", 
		"BASE64_LITERAL", "STRING_LITERAL", "VARIABLE_ID", "NUMERIC_LITERAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KoraliumParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KoraliumParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KoraliumParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KoraliumParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(KoraliumParser.Eof, 0); }
		public Statements_listContext[] statements_list() {
			return GetRuleContexts<Statements_listContext>();
		}
		public Statements_listContext statements_list(int i) {
			return GetRuleContext<Statements_listContext>(i);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SCOL) | (1L << SELECT) | (1L << SET) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 96; statements_list();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 102; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statements_listContext : ParserRuleContext {
		public Sql_statementContext[] sql_statement() {
			return GetRuleContexts<Sql_statementContext>();
		}
		public Sql_statementContext sql_statement(int i) {
			return GetRuleContext<Sql_statementContext>(i);
		}
		public ITerminalNode[] SCOL() { return GetTokens(KoraliumParser.SCOL); }
		public ITerminalNode SCOL(int i) {
			return GetToken(KoraliumParser.SCOL, i);
		}
		public Statements_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterStatements_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitStatements_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statements_listContext statements_list() {
		Statements_listContext _localctx = new Statements_listContext(Context, State);
		EnterRule(_localctx, 2, RULE_statements_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SCOL) {
				{
				{
				State = 104; Match(SCOL);
				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110; sql_statement();
			State = 119;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 111; Match(SCOL);
						}
						}
						State = 114;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==SCOL );
					State = 116; sql_statement();
					}
					} 
				}
				State = 121;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 125;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 122; Match(SCOL);
					}
					} 
				}
				State = 127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sql_statementContext : ParserRuleContext {
		public Set_variable_statementContext set_variable_statement() {
			return GetRuleContext<Set_variable_statementContext>(0);
		}
		public Stored_procedure_statementContext stored_procedure_statement() {
			return GetRuleContext<Stored_procedure_statementContext>(0);
		}
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sql_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterSql_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitSql_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSql_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sql_statementContext sql_statement() {
		Sql_statementContext _localctx = new Sql_statementContext(Context, State);
		EnterRule(_localctx, 4, RULE_sql_statement);
		try {
			State = 131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128; set_variable_statement();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129; stored_procedure_statement();
				}
				break;
			case SELECT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 130; select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_variable_statementContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(KoraliumParser.SET, 0); }
		public Set_variableContext set_variable() {
			return GetRuleContext<Set_variableContext>(0);
		}
		public Set_variable_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_variable_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterSet_variable_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitSet_variable_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_variable_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_variable_statementContext set_variable_statement() {
		Set_variable_statementContext _localctx = new Set_variable_statementContext(Context, State);
		EnterRule(_localctx, 6, RULE_set_variable_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(SET);
			State = 134; set_variable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_variableContext : ParserRuleContext {
		public IToken b64;
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(KoraliumParser.ASSIGN, 0); }
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public ITerminalNode BASE64_LITERAL() { return GetToken(KoraliumParser.BASE64_LITERAL, 0); }
		public Set_variableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_variable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterSet_variable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitSet_variable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_variable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_variableContext set_variable() {
		Set_variableContext _localctx = new Set_variableContext(Context, State);
		EnterRule(_localctx, 8, RULE_set_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; variable_reference();
			State = 137; Match(ASSIGN);
			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BASE64_LITERAL:
				{
				State = 138; _localctx.b64 = Match(BASE64_LITERAL);
				}
				break;
			case OPEN_PAR:
			case NULL:
			case TRUE:
			case FALSE:
			case CAST:
			case IDENTIFIER:
			case STRING_LITERAL:
			case VARIABLE_ID:
			case NUMERIC_LITERAL:
				{
				State = 139; scalar_expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stored_procedure_parameterContext : ParserRuleContext {
		public Set_variableContext variable;
		public Scalar_expressionContext scalar;
		public Set_variableContext set_variable() {
			return GetRuleContext<Set_variableContext>(0);
		}
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Stored_procedure_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stored_procedure_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterStored_procedure_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitStored_procedure_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStored_procedure_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stored_procedure_parameterContext stored_procedure_parameter() {
		Stored_procedure_parameterContext _localctx = new Stored_procedure_parameterContext(Context, State);
		EnterRule(_localctx, 10, RULE_stored_procedure_parameter);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 142; _localctx.variable = set_variable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 143; _localctx.scalar = scalar_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stored_procedure_statementContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode IDENTIFIER() { return GetToken(KoraliumParser.IDENTIFIER, 0); }
		public Stored_procedure_parameterContext[] stored_procedure_parameter() {
			return GetRuleContexts<Stored_procedure_parameterContext>();
		}
		public Stored_procedure_parameterContext stored_procedure_parameter(int i) {
			return GetRuleContext<Stored_procedure_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(KoraliumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KoraliumParser.COMMA, i);
		}
		public Stored_procedure_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stored_procedure_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterStored_procedure_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitStored_procedure_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStored_procedure_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stored_procedure_statementContext stored_procedure_statement() {
		Stored_procedure_statementContext _localctx = new Stored_procedure_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_stored_procedure_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; _localctx.name = Match(IDENTIFIER);
			{
			State = 147; stored_procedure_parameter();
			}
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 148; Match(COMMA);
				State = 149; stored_procedure_parameter();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_statementContext : ParserRuleContext {
		public Scalar_expressionContext limit;
		public Scalar_expressionContext offset;
		public ITerminalNode SELECT() { return GetToken(KoraliumParser.SELECT, 0); }
		public ITerminalNode DISTINCT() { return GetToken(KoraliumParser.DISTINCT, 0); }
		public Select_expressionContext[] select_expression() {
			return GetRuleContexts<Select_expressionContext>();
		}
		public Select_expressionContext select_expression(int i) {
			return GetRuleContext<Select_expressionContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(KoraliumParser.FROM, 0); }
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public ITerminalNode ORDER() { return GetToken(KoraliumParser.ORDER, 0); }
		public ITerminalNode[] BY() { return GetTokens(KoraliumParser.BY); }
		public ITerminalNode BY(int i) {
			return GetToken(KoraliumParser.BY, i);
		}
		public Order_by_clauseContext order_by_clause() {
			return GetRuleContext<Order_by_clauseContext>(0);
		}
		public ITerminalNode LIMIT() { return GetToken(KoraliumParser.LIMIT, 0); }
		public ITerminalNode OFFSET() { return GetToken(KoraliumParser.OFFSET, 0); }
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(KoraliumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KoraliumParser.COMMA, i);
		}
		public ITerminalNode WHERE() { return GetToken(KoraliumParser.WHERE, 0); }
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public ITerminalNode GROUP() { return GetToken(KoraliumParser.GROUP, 0); }
		public Groupby_clauseContext groupby_clause() {
			return GetRuleContext<Groupby_clauseContext>(0);
		}
		public ITerminalNode HAVING() { return GetToken(KoraliumParser.HAVING, 0); }
		public Having_clauseContext having_clause() {
			return GetRuleContext<Having_clauseContext>(0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterSelect_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitSelect_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_statementContext select_statement() {
		Select_statementContext _localctx = new Select_statementContext(Context, State);
		EnterRule(_localctx, 14, RULE_select_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 155; Match(SELECT);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISTINCT) {
				{
				State = 156; Match(DISTINCT);
				}
			}

			State = 167;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 159; select_expression();
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 160; Match(COMMA);
					State = 161; select_expression();
					}
					}
					State = 166;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM) {
				{
				State = 169; Match(FROM);
				State = 170; from_clause();
				State = 173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 171; Match(WHERE);
					State = 172; where_clause();
					}
				}

				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GROUP) {
					{
					State = 175; Match(GROUP);
					State = 176; Match(BY);
					State = 177; groupby_clause();
					}
				}

				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==HAVING) {
					{
					State = 180; Match(HAVING);
					State = 181; having_clause();
					}
				}

				}
			}

			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER) {
				{
				State = 186; Match(ORDER);
				State = 187; Match(BY);
				State = 188; order_by_clause();
				}
			}

			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 191; Match(LIMIT);
				State = 192; _localctx.limit = scalar_expression(0);
				}
			}

			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFSET) {
				{
				State = 195; Match(OFFSET);
				State = 196; _localctx.offset = scalar_expression(0);
				}
			}

			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_clauseContext : ParserRuleContext {
		public Order_by_elementContext[] order_by_element() {
			return GetRuleContexts<Order_by_elementContext>();
		}
		public Order_by_elementContext order_by_element(int i) {
			return GetRuleContext<Order_by_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(KoraliumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KoraliumParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_clauseContext order_by_clause() {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(Context, State);
		EnterRule(_localctx, 16, RULE_order_by_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; order_by_element();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 200; Match(COMMA);
				State = 201; order_by_element();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Order_by_elementContext : ParserRuleContext {
		public Scalar_expressionContext scalar;
		public Orderby_subqueryContext query;
		public IToken order;
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Orderby_subqueryContext orderby_subquery() {
			return GetRuleContext<Orderby_subqueryContext>(0);
		}
		public ITerminalNode ASC() { return GetToken(KoraliumParser.ASC, 0); }
		public ITerminalNode DESC() { return GetToken(KoraliumParser.DESC, 0); }
		public Order_by_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_order_by_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterOrder_by_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitOrder_by_element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrder_by_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Order_by_elementContext order_by_element() {
		Order_by_elementContext _localctx = new Order_by_elementContext(Context, State);
		EnterRule(_localctx, 18, RULE_order_by_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 207; _localctx.scalar = scalar_expression(0);
				}
				break;
			case 2:
				{
				State = 208; _localctx.query = orderby_subquery();
				}
				break;
			}
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				State = 211;
				_localctx.order = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					_localctx.order = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Having_clauseContext : ParserRuleContext {
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_having_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterHaving_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitHaving_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHaving_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Having_clauseContext having_clause() {
		Having_clauseContext _localctx = new Having_clauseContext(Context, State);
		EnterRule(_localctx, 20, RULE_having_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; boolean_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(KoraliumParser.AS, 0); }
		public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 22, RULE_from_clause);
		int _la;
		try {
			State = 224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 216; table_name();
				State = 221;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 218;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 217; Match(AS);
						}
					}

					State = 220; table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223; subquery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_nameContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterTable_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitTable_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_nameContext table_name() {
		Table_nameContext _localctx = new Table_nameContext(Context, State);
		EnterRule(_localctx, 24, RULE_table_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR() { return GetToken(KoraliumParser.OPEN_PAR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(KoraliumParser.CLOSE_PAR, 0); }
		public Table_aliasContext table_alias() {
			return GetRuleContext<Table_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(KoraliumParser.AS, 0); }
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 26, RULE_subquery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228; Match(OPEN_PAR);
			State = 229; select_statement();
			State = 230; Match(CLOSE_PAR);
			State = 235;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS) {
					{
					State = 231; Match(AS);
					}
				}

				State = 234; table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_subqueryContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR() { return GetToken(KoraliumParser.OPEN_PAR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(KoraliumParser.CLOSE_PAR, 0); }
		public Orderby_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterOrderby_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitOrderby_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_subqueryContext orderby_subquery() {
		Orderby_subqueryContext _localctx = new Orderby_subqueryContext(Context, State);
		EnterRule(_localctx, 28, RULE_orderby_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(OPEN_PAR);
			State = 238; select_statement();
			State = 239; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_subqueryContext : ParserRuleContext {
		public ITerminalNode OPEN_PAR() { return GetToken(KoraliumParser.OPEN_PAR, 0); }
		public Select_statementContext select_statement() {
			return GetRuleContext<Select_statementContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(KoraliumParser.CLOSE_PAR, 0); }
		public Group_subqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_subquery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterGroup_subquery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitGroup_subquery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_subquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_subqueryContext group_subquery() {
		Group_subqueryContext _localctx = new Group_subqueryContext(Context, State);
		EnterRule(_localctx, 30, RULE_group_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; Match(OPEN_PAR);
			State = 242; select_statement();
			State = 243; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_referenceContext : ParserRuleContext {
		public IToken variableName;
		public IToken identifier;
		public ITerminalNode VARIABLE_ID() { return GetToken(KoraliumParser.VARIABLE_ID, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(KoraliumParser.IDENTIFIER, 0); }
		public Variable_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterVariable_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitVariable_reference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_referenceContext variable_reference() {
		Variable_referenceContext _localctx = new Variable_referenceContext(Context, State);
		EnterRule(_localctx, 32, RULE_variable_reference);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VARIABLE_ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 245; _localctx.variableName = Match(VARIABLE_ID);
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 246; _localctx.identifier = Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_expressionContext : ParserRuleContext {
		public Table_nameContext tableAlias;
		public ITerminalNode STAR() { return GetToken(KoraliumParser.STAR, 0); }
		public ITerminalNode NULL() { return GetToken(KoraliumParser.NULL, 0); }
		public ITerminalNode DOT() { return GetToken(KoraliumParser.DOT, 0); }
		public Table_nameContext table_name() {
			return GetRuleContext<Table_nameContext>(0);
		}
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Column_aliasContext column_alias() {
			return GetRuleContext<Column_aliasContext>(0);
		}
		public ITerminalNode AS() { return GetToken(KoraliumParser.AS, 0); }
		public Select_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterSelect_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitSelect_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_expressionContext select_expression() {
		Select_expressionContext _localctx = new Select_expressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_select_expression);
		int _la;
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249; Match(STAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; Match(NULL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 251; _localctx.tableAlias = table_name();
				State = 252; Match(DOT);
				State = 253; Match(STAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 255; scalar_expression(0);
				State = 260;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
				case 1:
					{
					State = 257;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS) {
						{
						State = 256; Match(AS);
						}
					}

					State = 259; column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 36, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; boolean_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Groupby_clauseContext : ParserRuleContext {
		public Groupby_elementContext[] groupby_element() {
			return GetRuleContexts<Groupby_elementContext>();
		}
		public Groupby_elementContext groupby_element(int i) {
			return GetRuleContext<Groupby_elementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(KoraliumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KoraliumParser.COMMA, i);
		}
		public Groupby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterGroupby_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitGroupby_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Groupby_clauseContext groupby_clause() {
		Groupby_clauseContext _localctx = new Groupby_clauseContext(Context, State);
		EnterRule(_localctx, 38, RULE_groupby_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; groupby_element();
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 267; Match(COMMA);
				State = 268; groupby_element();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Groupby_elementContext : ParserRuleContext {
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Group_subqueryContext group_subquery() {
			return GetRuleContext<Group_subqueryContext>(0);
		}
		public Groupby_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupby_element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterGroupby_element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitGroupby_element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupby_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Groupby_elementContext groupby_element() {
		Groupby_elementContext _localctx = new Groupby_elementContext(Context, State);
		EnterRule(_localctx, 40, RULE_groupby_element);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 274; scalar_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; group_subquery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_expressionContext : ParserRuleContext {
		public Boolean_expressionContext left;
		public Boolean_expressionContext exclamationexpr;
		public Boolean_expressionContext notexpr;
		public Boolean_expressionContext inner;
		public IToken isValue;
		public Boolean_expressionContext right;
		public ITerminalNode EXCLAMATION() { return GetToken(KoraliumParser.EXCLAMATION, 0); }
		public Boolean_expressionContext[] boolean_expression() {
			return GetRuleContexts<Boolean_expressionContext>();
		}
		public Boolean_expressionContext boolean_expression(int i) {
			return GetRuleContext<Boolean_expressionContext>(i);
		}
		public ITerminalNode NOT() { return GetToken(KoraliumParser.NOT, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(KoraliumParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(KoraliumParser.CLOSE_PAR, 0); }
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode IS() { return GetToken(KoraliumParser.IS, 0); }
		public ITerminalNode TRUE() { return GetToken(KoraliumParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(KoraliumParser.FALSE, 0); }
		public Boolean_binary_typeContext boolean_binary_type() {
			return GetRuleContext<Boolean_binary_typeContext>(0);
		}
		public Boolean_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterBoolean_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitBoolean_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_expressionContext boolean_expression() {
		return boolean_expression(0);
	}

	private Boolean_expressionContext boolean_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Boolean_expressionContext _localctx = new Boolean_expressionContext(Context, _parentState);
		Boolean_expressionContext _prevctx = _localctx;
		int _startState = 42;
		EnterRecursionRule(_localctx, 42, RULE_boolean_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 279; Match(EXCLAMATION);
				State = 280; _localctx.exclamationexpr = boolean_expression(7);
				}
				break;
			case 2:
				{
				State = 281; Match(NOT);
				State = 282; _localctx.notexpr = boolean_expression(6);
				}
				break;
			case 3:
				{
				State = 283; Match(OPEN_PAR);
				State = 284; _localctx.inner = boolean_expression(0);
				State = 285; Match(CLOSE_PAR);
				}
				break;
			case 4:
				{
				State = 287; scalar_expression(0);
				}
				break;
			case 5:
				{
				State = 288; predicate();
				State = 289; Match(IS);
				State = 290; Match(NOT);
				State = 291;
				_localctx.isValue = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
					_localctx.isValue = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				{
				State = 293; predicate();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 302;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Boolean_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_boolean_expression);
					State = 296;
					if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
					State = 297; boolean_binary_type();
					State = 298; _localctx.right = boolean_expression(5);
					}
					} 
				}
				State = 304;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public Between_expressionContext between_expression() {
			return GetRuleContext<Between_expressionContext>(0);
		}
		public Boolean_comparison_expressionContext boolean_comparison_expression() {
			return GetRuleContext<Boolean_comparison_expressionContext>(0);
		}
		public Search_expressionContext search_expression() {
			return GetRuleContext<Search_expressionContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public In_expressionContext in_expression() {
			return GetRuleContext<In_expressionContext>(0);
		}
		public Like_expressionContext like_expression() {
			return GetRuleContext<Like_expressionContext>(0);
		}
		public Is_null_predicateContext is_null_predicate() {
			return GetRuleContext<Is_null_predicateContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 44, RULE_predicate);
		try {
			State = 312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 305; between_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 306; boolean_comparison_expression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 307; search_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 308; function_call();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 309; in_expression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 310; like_expression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 311; is_null_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_null_predicateContext : ParserRuleContext {
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(KoraliumParser.IS, 0); }
		public ITerminalNode NULL() { return GetToken(KoraliumParser.NULL, 0); }
		public ITerminalNode NOT() { return GetToken(KoraliumParser.NOT, 0); }
		public Is_null_predicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_null_predicate; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterIs_null_predicate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitIs_null_predicate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_null_predicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_null_predicateContext is_null_predicate() {
		Is_null_predicateContext _localctx = new Is_null_predicateContext(Context, State);
		EnterRule(_localctx, 46, RULE_is_null_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; scalar_expression(0);
			State = 315; Match(IS);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 316; Match(NOT);
				}
			}

			State = 319; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Search_expressionContext : ParserRuleContext {
		public IToken wildcard;
		public ITerminalNode CONTAINS() { return GetToken(KoraliumParser.CONTAINS, 0); }
		public ITerminalNode[] OPEN_PAR() { return GetTokens(KoraliumParser.OPEN_PAR); }
		public ITerminalNode OPEN_PAR(int i) {
			return GetToken(KoraliumParser.OPEN_PAR, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(KoraliumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KoraliumParser.COMMA, i);
		}
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public ITerminalNode[] CLOSE_PAR() { return GetTokens(KoraliumParser.CLOSE_PAR); }
		public ITerminalNode CLOSE_PAR(int i) {
			return GetToken(KoraliumParser.CLOSE_PAR, i);
		}
		public Column_referenceContext[] column_reference() {
			return GetRuleContexts<Column_referenceContext>();
		}
		public Column_referenceContext column_reference(int i) {
			return GetRuleContext<Column_referenceContext>(i);
		}
		public ITerminalNode STAR() { return GetToken(KoraliumParser.STAR, 0); }
		public Search_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterSearch_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitSearch_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Search_expressionContext search_expression() {
		Search_expressionContext _localctx = new Search_expressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_search_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(CONTAINS);
			State = 322; Match(OPEN_PAR);
			State = 336;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STAR:
				{
				State = 323; _localctx.wildcard = Match(STAR);
				}
				break;
			case OPEN_PAR:
				{
				State = 324; Match(OPEN_PAR);
				State = 325; column_reference();
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 326; Match(COMMA);
					State = 327; column_reference();
					}
					}
					State = 332;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 333; Match(CLOSE_PAR);
				}
				break;
			case IDENTIFIER:
				{
				State = 335; column_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 338; Match(COMMA);
			State = 339; scalar_expression(0);
			State = 340; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_expressionContext : ParserRuleContext {
		public In_left_scalarContext element;
		public ITerminalNode IN() { return GetToken(KoraliumParser.IN, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(KoraliumParser.OPEN_PAR, 0); }
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(KoraliumParser.CLOSE_PAR, 0); }
		public In_left_scalarContext in_left_scalar() {
			return GetRuleContext<In_left_scalarContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(KoraliumParser.NOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(KoraliumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KoraliumParser.COMMA, i);
		}
		public In_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterIn_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitIn_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_expressionContext in_expression() {
		In_expressionContext _localctx = new In_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_in_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; _localctx.element = in_left_scalar();
			State = 344;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 343; Match(NOT);
				}
			}

			State = 346; Match(IN);
			State = 347; Match(OPEN_PAR);
			State = 348; scalar_expression(0);
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 349; Match(COMMA);
				State = 350; scalar_expression(0);
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 356; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Like_expressionContext : ParserRuleContext {
		public In_left_scalarContext element;
		public Scalar_expressionContext right;
		public ITerminalNode LIKE() { return GetToken(KoraliumParser.LIKE, 0); }
		public In_left_scalarContext in_left_scalar() {
			return GetRuleContext<In_left_scalarContext>(0);
		}
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(KoraliumParser.NOT, 0); }
		public Like_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_like_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterLike_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitLike_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLike_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Like_expressionContext like_expression() {
		Like_expressionContext _localctx = new Like_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_like_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; _localctx.element = in_left_scalar();
			State = 360;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 359; Match(NOT);
				}
			}

			State = 362; Match(LIKE);
			State = 363; _localctx.right = scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class In_left_scalarContext : ParserRuleContext {
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public In_left_scalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_in_left_scalar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterIn_left_scalar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitIn_left_scalar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIn_left_scalar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public In_left_scalarContext in_left_scalar() {
		In_left_scalarContext _localctx = new In_left_scalarContext(Context, State);
		EnterRule(_localctx, 54, RULE_in_left_scalar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365; scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Between_expressionContext : ParserRuleContext {
		public Scalar_expressionContext @ref;
		public Scalar_expressionContext left;
		public Scalar_expressionContext right;
		public ITerminalNode BETWEEN() { return GetToken(KoraliumParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(KoraliumParser.AND, 0); }
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public Between_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_between_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterBetween_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitBetween_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetween_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Between_expressionContext between_expression() {
		Between_expressionContext _localctx = new Between_expressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_between_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; _localctx.@ref = scalar_expression(0);
			State = 368; Match(BETWEEN);
			State = 369; _localctx.left = scalar_expression(0);
			State = 370; Match(AND);
			State = 371; _localctx.right = scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_comparison_expressionContext : ParserRuleContext {
		public Scalar_expressionContext left;
		public Scalar_expressionContext right;
		public Boolean_comparison_typeContext boolean_comparison_type() {
			return GetRuleContext<Boolean_comparison_typeContext>(0);
		}
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public Boolean_comparison_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_comparison_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterBoolean_comparison_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitBoolean_comparison_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_comparison_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_comparison_expressionContext boolean_comparison_expression() {
		Boolean_comparison_expressionContext _localctx = new Boolean_comparison_expressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_boolean_comparison_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 373; _localctx.left = scalar_expression(0);
			State = 374; boolean_comparison_type();
			State = 375; _localctx.right = scalar_expression(0);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_comparison_typeContext : ParserRuleContext {
		public ITerminalNode ASSIGN() { return GetToken(KoraliumParser.ASSIGN, 0); }
		public ITerminalNode GT() { return GetToken(KoraliumParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(KoraliumParser.LT, 0); }
		public ITerminalNode GT_EQ() { return GetToken(KoraliumParser.GT_EQ, 0); }
		public ITerminalNode LT_EQ() { return GetToken(KoraliumParser.LT_EQ, 0); }
		public ITerminalNode NOT_EQ1() { return GetToken(KoraliumParser.NOT_EQ1, 0); }
		public ITerminalNode NOT_EQ2() { return GetToken(KoraliumParser.NOT_EQ2, 0); }
		public ITerminalNode NLT() { return GetToken(KoraliumParser.NLT, 0); }
		public ITerminalNode NGT() { return GetToken(KoraliumParser.NGT, 0); }
		public Boolean_comparison_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_comparison_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterBoolean_comparison_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitBoolean_comparison_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_comparison_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_comparison_typeContext boolean_comparison_type() {
		Boolean_comparison_typeContext _localctx = new Boolean_comparison_typeContext(Context, State);
		EnterRule(_localctx, 60, RULE_boolean_comparison_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << LT) | (1L << LT_EQ) | (1L << GT) | (1L << GT_EQ) | (1L << NOT_EQ1) | (1L << NOT_EQ2) | (1L << NLT) | (1L << NGT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_binary_typeContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(KoraliumParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(KoraliumParser.OR, 0); }
		public Boolean_binary_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_binary_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterBoolean_binary_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitBoolean_binary_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_binary_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_binary_typeContext boolean_binary_type() {
		Boolean_binary_typeContext _localctx = new Boolean_binary_typeContext(Context, State);
		EnterRule(_localctx, 62, RULE_boolean_binary_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			_la = TokenStream.LA(1);
			if ( !(_la==AND || _la==OR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_aliasContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(KoraliumParser.IDENTIFIER, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterColumn_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitColumn_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_aliasContext column_alias() {
		Column_aliasContext _localctx = new Column_aliasContext(Context, State);
		EnterRule(_localctx, 64, RULE_column_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 381; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_expression2Context : ParserRuleContext {
		public Scalar_expressionContext left;
		public Scalar_expressionContext right;
		public Column_referenceContext column_reference() {
			return GetRuleContext<Column_referenceContext>(0);
		}
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Binary_operation_typeContext binary_operation_type() {
			return GetRuleContext<Binary_operation_typeContext>(0);
		}
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public Scalar_expression2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_expression2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterScalar_expression2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitScalar_expression2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_expression2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_expression2Context scalar_expression2() {
		Scalar_expression2Context _localctx = new Scalar_expression2Context(Context, State);
		EnterRule(_localctx, 66, RULE_scalar_expression2);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384; column_reference();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 385; literal_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 386; _localctx.left = scalar_expression(0);
				State = 387; binary_operation_type();
				State = 388; _localctx.right = scalar_expression(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 390; function_call();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 391; variable_reference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scalar_expressionContext : ParserRuleContext {
		public Scalar_expressionContext left;
		public Scalar_expressionContext casted;
		public IToken castedidentifier;
		public Scalar_expressionContext inner;
		public Scalar_expressionContext right;
		public ITerminalNode CAST() { return GetToken(KoraliumParser.CAST, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(KoraliumParser.OPEN_PAR, 0); }
		public ITerminalNode AS() { return GetToken(KoraliumParser.AS, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(KoraliumParser.CLOSE_PAR, 0); }
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(KoraliumParser.IDENTIFIER, 0); }
		public Literal_valueContext literal_value() {
			return GetRuleContext<Literal_valueContext>(0);
		}
		public Column_referenceContext column_reference() {
			return GetRuleContext<Column_referenceContext>(0);
		}
		public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public Binary_operation_typeContext binary_operation_type() {
			return GetRuleContext<Binary_operation_typeContext>(0);
		}
		public Scalar_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterScalar_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitScalar_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalar_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scalar_expressionContext scalar_expression() {
		return scalar_expression(0);
	}

	private Scalar_expressionContext scalar_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Scalar_expressionContext _localctx = new Scalar_expressionContext(Context, _parentState);
		Scalar_expressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_scalar_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				{
				State = 395; Match(CAST);
				State = 396; Match(OPEN_PAR);
				State = 397; _localctx.casted = scalar_expression(0);
				State = 398; Match(AS);
				State = 399; _localctx.castedidentifier = Match(IDENTIFIER);
				State = 400; Match(CLOSE_PAR);
				}
				break;
			case 2:
				{
				State = 402; Match(OPEN_PAR);
				State = 403; _localctx.inner = scalar_expression(0);
				State = 404; Match(CLOSE_PAR);
				}
				break;
			case 3:
				{
				State = 406; literal_value();
				}
				break;
			case 4:
				{
				State = 407; column_reference();
				}
				break;
			case 5:
				{
				State = 408; function_call();
				}
				break;
			case 6:
				{
				State = 409; variable_reference();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 418;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Scalar_expressionContext(_parentctx, _parentState);
					_localctx.left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_scalar_expression);
					State = 412;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 413; binary_operation_type();
					State = 414; _localctx.right = scalar_expression(4);
					}
					} 
				}
				State = 420;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ErrorContext : ParserRuleContext {
		public ErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterError(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitError(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorContext error() {
		ErrorContext _localctx = new ErrorContext(Context, State);
		EnterRule(_localctx, 70, RULE_error);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_expressionContext : ParserRuleContext {
		public Scalar_expressionContext[] scalar_expression() {
			return GetRuleContexts<Scalar_expressionContext>();
		}
		public Scalar_expressionContext scalar_expression(int i) {
			return GetRuleContext<Scalar_expressionContext>(i);
		}
		public Binary_operation_typeContext binary_operation_type() {
			return GetRuleContext<Binary_operation_typeContext>(0);
		}
		public Binary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterBinary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitBinary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_expressionContext binary_expression() {
		Binary_expressionContext _localctx = new Binary_expressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_binary_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 423; scalar_expression(0);
			State = 424; binary_operation_type();
			State = 425; scalar_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operation_typeContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(KoraliumParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(KoraliumParser.MINUS, 0); }
		public ITerminalNode STAR() { return GetToken(KoraliumParser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(KoraliumParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(KoraliumParser.MOD, 0); }
		public ITerminalNode AMP() { return GetToken(KoraliumParser.AMP, 0); }
		public ITerminalNode PIPE() { return GetToken(KoraliumParser.PIPE, 0); }
		public ITerminalNode XOR() { return GetToken(KoraliumParser.XOR, 0); }
		public Binary_operation_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operation_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterBinary_operation_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitBinary_operation_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operation_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operation_typeContext binary_operation_type() {
		Binary_operation_typeContext _localctx = new Binary_operation_typeContext(Context, State);
		EnterRule(_localctx, 74, RULE_binary_operation_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STAR) | (1L << PLUS) | (1L << MINUS) | (1L << DIV) | (1L << MOD) | (1L << AMP) | (1L << PIPE) | (1L << XOR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_parameterContext : ParserRuleContext {
		public IToken parameter;
		public ITerminalNode[] IDENTIFIER() { return GetTokens(KoraliumParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(KoraliumParser.IDENTIFIER, i);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(KoraliumParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(KoraliumParser.CLOSE_PAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(KoraliumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KoraliumParser.COMMA, i);
		}
		public Lambda_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterLambda_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitLambda_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_parameterContext lambda_parameter() {
		Lambda_parameterContext _localctx = new Lambda_parameterContext(Context, State);
		EnterRule(_localctx, 76, RULE_lambda_parameter);
		int _la;
		try {
			State = 440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 429; _localctx.parameter = Match(IDENTIFIER);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 430; Match(OPEN_PAR);
				State = 431; _localctx.parameter = Match(IDENTIFIER);
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 432; Match(COMMA);
					State = 433; _localctx.parameter = Match(IDENTIFIER);
					}
					}
					State = 438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 439; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_functionContext : ParserRuleContext {
		public Lambda_parameterContext parameter;
		public Scalar_expressionContext scalar;
		public Boolean_expressionContext boolexpr;
		public ITerminalNode LAMBDA_ARROW() { return GetToken(KoraliumParser.LAMBDA_ARROW, 0); }
		public Lambda_parameterContext lambda_parameter() {
			return GetRuleContext<Lambda_parameterContext>(0);
		}
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Boolean_expressionContext boolean_expression() {
			return GetRuleContext<Boolean_expressionContext>(0);
		}
		public Lambda_functionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_function; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterLambda_function(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitLambda_function(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_function(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_functionContext lambda_function() {
		Lambda_functionContext _localctx = new Lambda_functionContext(Context, State);
		EnterRule(_localctx, 78, RULE_lambda_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 442; _localctx.parameter = lambda_parameter();
			State = 443; Match(LAMBDA_ARROW);
			State = 446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 444; _localctx.scalar = scalar_expression(0);
				}
				break;
			case 2:
				{
				State = 445; _localctx.boolexpr = boolean_expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_parameterContext : ParserRuleContext {
		public Lambda_functionContext lambda;
		public Scalar_expressionContext scalar;
		public Lambda_functionContext lambda_function() {
			return GetRuleContext<Lambda_functionContext>(0);
		}
		public Scalar_expressionContext scalar_expression() {
			return GetRuleContext<Scalar_expressionContext>(0);
		}
		public Function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterFunction_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitFunction_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_parameterContext function_parameter() {
		Function_parameterContext _localctx = new Function_parameterContext(Context, State);
		EnterRule(_localctx, 80, RULE_function_parameter);
		try {
			State = 450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 448; _localctx.lambda = lambda_function();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 449; _localctx.scalar = scalar_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		public Function_nameContext function_name() {
			return GetRuleContext<Function_nameContext>(0);
		}
		public ITerminalNode OPEN_PAR() { return GetToken(KoraliumParser.OPEN_PAR, 0); }
		public ITerminalNode CLOSE_PAR() { return GetToken(KoraliumParser.CLOSE_PAR, 0); }
		public ITerminalNode STAR() { return GetToken(KoraliumParser.STAR, 0); }
		public Function_parameterContext[] function_parameter() {
			return GetRuleContexts<Function_parameterContext>();
		}
		public Function_parameterContext function_parameter(int i) {
			return GetRuleContext<Function_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(KoraliumParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KoraliumParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_call(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 82, RULE_function_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; function_name();
			State = 453; Match(OPEN_PAR);
			State = 463;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_PAR:
			case NULL:
			case TRUE:
			case FALSE:
			case CAST:
			case IDENTIFIER:
			case STRING_LITERAL:
			case VARIABLE_ID:
			case NUMERIC_LITERAL:
				{
				{
				State = 454; function_parameter();
				State = 459;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 455; Match(COMMA);
					State = 456; function_parameter();
					}
					}
					State = 461;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case STAR:
				{
				State = 462; Match(STAR);
				}
				break;
			case CLOSE_PAR:
				break;
			default:
				break;
			}
			State = 465; Match(CLOSE_PAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_referenceContext : ParserRuleContext {
		public Column_nameContext[] column_name() {
			return GetRuleContexts<Column_nameContext>();
		}
		public Column_nameContext column_name(int i) {
			return GetRuleContext<Column_nameContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(KoraliumParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(KoraliumParser.DOT, i);
		}
		public Column_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterColumn_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitColumn_reference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_referenceContext column_reference() {
		Column_referenceContext _localctx = new Column_referenceContext(Context, State);
		EnterRule(_localctx, 84, RULE_column_reference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 467; column_name();
			State = 472;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 468; Match(DOT);
					State = 469; column_name();
					}
					} 
				}
				State = 474;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Literal_valueContext : ParserRuleContext {
		public ITerminalNode NUMERIC_LITERAL() { return GetToken(KoraliumParser.NUMERIC_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(KoraliumParser.STRING_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(KoraliumParser.NULL, 0); }
		public ITerminalNode TRUE() { return GetToken(KoraliumParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(KoraliumParser.FALSE, 0); }
		public Literal_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterLiteral_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitLiteral_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Literal_valueContext literal_value() {
		Literal_valueContext _localctx = new Literal_valueContext(Context, State);
		EnterRule(_localctx, 86, RULE_literal_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 475;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NULL) | (1L << TRUE) | (1L << FALSE) | (1L << STRING_LITERAL) | (1L << NUMERIC_LITERAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Column_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(KoraliumParser.IDENTIFIER, 0); }
		public Column_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterColumn_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitColumn_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Column_nameContext column_name() {
		Column_nameContext _localctx = new Column_nameContext(Context, State);
		EnterRule(_localctx, 88, RULE_column_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(KoraliumParser.IDENTIFIER, 0); }
		public Function_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterFunction_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitFunction_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_nameContext function_name() {
		Function_nameContext _localctx = new Function_nameContext(Context, State);
		EnterRule(_localctx, 90, RULE_function_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 479; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Table_aliasContext : ParserRuleContext {
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterTable_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitTable_alias(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable_alias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Table_aliasContext table_alias() {
		Table_aliasContext _localctx = new Table_aliasContext(Context, State);
		EnterRule(_localctx, 92, RULE_table_alias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 481; any_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(KoraliumParser.IDENTIFIER, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(KoraliumParser.STRING_LITERAL, 0); }
		public ITerminalNode OPEN_PAR() { return GetToken(KoraliumParser.OPEN_PAR, 0); }
		public Any_nameContext any_name() {
			return GetRuleContext<Any_nameContext>(0);
		}
		public ITerminalNode CLOSE_PAR() { return GetToken(KoraliumParser.CLOSE_PAR, 0); }
		public Any_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.EnterAny_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKoraliumParserListener typedListener = listener as IKoraliumParserListener;
			if (typedListener != null) typedListener.ExitAny_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKoraliumParserVisitor<TResult> typedVisitor = visitor as IKoraliumParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_nameContext any_name() {
		Any_nameContext _localctx = new Any_nameContext(Context, State);
		EnterRule(_localctx, 94, RULE_any_name);
		try {
			State = 489;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 483; Match(IDENTIFIER);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 484; Match(STRING_LITERAL);
				}
				break;
			case OPEN_PAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 485; Match(OPEN_PAR);
				State = 486; any_name();
				State = 487; Match(CLOSE_PAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 21: return boolean_expression_sempred((Boolean_expressionContext)_localctx, predIndex);
		case 34: return scalar_expression_sempred((Scalar_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool boolean_expression_sempred(Boolean_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		}
		return true;
	}
	private bool scalar_expression_sempred(Scalar_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '@', '\x1EE', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x3', '\x2', 
		'\a', '\x2', '\x64', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'g', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', 'l', '\n', 
		'\x3', '\f', '\x3', '\xE', '\x3', 'o', '\v', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x6', '\x3', 's', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 't', 
		'\x3', '\x3', '\a', '\x3', 'x', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'{', '\v', '\x3', '\x3', '\x3', '\a', '\x3', '~', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x81', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x86', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x8F', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'\x93', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\a', '\b', '\x99', '\n', '\b', '\f', '\b', '\xE', '\b', '\x9C', '\v', 
		'\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xA0', '\n', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\a', '\t', '\xA5', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\xA8', '\v', '\t', '\x5', '\t', '\xAA', '\n', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB0', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB5', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xB9', '\n', '\t', 
		'\x5', '\t', '\xBB', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x5', '\t', '\xC0', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\xC4', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xC8', '\n', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xCD', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\xD0', '\v', '\n', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\xD4', '\n', '\v', '\x3', '\v', '\x5', '\v', '\xD7', 
		'\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\xDD', '\n', '\r', '\x3', '\r', '\x5', '\r', '\xE0', '\n', '\r', 
		'\x3', '\r', '\x5', '\r', '\xE3', '\n', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xEB', '\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\xEE', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x5', '\x12', '\xFA', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x104', '\n', '\x13', '\x3', '\x13', '\x5', '\x13', 
		'\x107', '\n', '\x13', '\x5', '\x13', '\x109', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\x110', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x113', '\v', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x117', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x129', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x12F', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\x132', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x13B', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x140', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x14B', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x14E', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x153', '\n', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x15B', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x162', '\n', '\x1B', '\f', 
		'\x1B', '\xE', '\x1B', '\x165', '\v', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x16B', '\n', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x5', '#', '\x18B', '\n', '#', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x19D', '\n', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', '\x1A3', '\n', '$', 
		'\f', '$', '\xE', '$', '\x1A6', '\v', '$', '\x3', '%', '\x3', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', '(', '\x1B5', 
		'\n', '(', '\f', '(', '\xE', '(', '\x1B8', '\v', '(', '\x3', '(', '\x5', 
		'(', '\x1BB', '\n', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x1C1', '\n', ')', '\x3', '*', '\x3', '*', '\x5', '*', '\x1C5', 
		'\n', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\a', '+', '\x1CC', '\n', '+', '\f', '+', '\xE', '+', '\x1CF', '\v', '+', 
		'\x3', '+', '\x5', '+', '\x1D2', '\n', '+', '\x3', '+', '\x3', '+', '\x3', 
		',', '\x3', ',', '\x3', ',', '\a', ',', '\x1D9', '\n', ',', '\f', ',', 
		'\xE', ',', '\x1DC', '\v', ',', '\x3', '-', '\x3', '-', '\x3', '.', '\x3', 
		'.', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x5', '\x31', '\x1EC', '\n', '\x31', '\x3', '\x31', '\x2', '\x4', ',', 
		'\x46', '\x32', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x2', '\b', '\x3', '\x2', '\x31', '\x32', 
		'\x3', '\x2', '$', '%', '\x5', '\x2', '\b', '\b', '\x14', '\x17', '\x19', 
		'\x1C', '\x3', '\x2', '\'', '(', '\x6', '\x2', '\t', '\v', '\xE', '\xF', 
		'\x12', '\x13', '\x1D', '\x1D', '\x5', '\x2', '#', '%', '>', '>', '@', 
		'@', '\x2', '\x209', '\x2', '\x65', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'm', '\x3', '\x2', '\x2', '\x2', '\x6', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x87', '\x3', '\x2', '\x2', '\x2', '\n', '\x8A', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x92', '\x3', '\x2', '\x2', '\x2', '\xE', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x14', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\xD8', '\x3', '\x2', '\x2', '\x2', '\x18', '\xE2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\xE6', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xF3', '\x3', '\x2', '\x2', '\x2', '\"', '\xF9', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x108', '\x3', '\x2', '\x2', '\x2', '&', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x116', '\x3', '\x2', '\x2', '\x2', ',', '\x128', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x30', '\x13C', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x143', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x158', '\x3', '\x2', '\x2', '\x2', '\x36', '\x168', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x16F', '\x3', '\x2', '\x2', '\x2', ':', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x17B', '\x3', '\x2', '\x2', '\x2', '@', '\x17D', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x44', '\x18A', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x19C', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x1A7', '\x3', '\x2', '\x2', '\x2', 'J', '\x1A9', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x1AD', '\x3', '\x2', '\x2', '\x2', 'N', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x1BC', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x1C4', '\x3', '\x2', '\x2', '\x2', 'T', '\x1C6', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x1D5', '\x3', '\x2', '\x2', '\x2', 'X', '\x1DD', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x1DF', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x1E1', '\x3', '\x2', '\x2', '\x2', '^', '\x1E3', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', 
		'\x5', '\x4', '\x3', '\x2', '\x63', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\x64', 'g', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'h', 
		'i', '\a', '\x2', '\x2', '\x3', 'i', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'j', 'l', '\a', '\x3', '\x2', '\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 
		'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x3', '\x2', '\x2', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'y', '\x5', '\x6', '\x4', '\x2', 
		'q', 's', '\a', '\x3', '\x2', '\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 
		's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', 'x', '\x5', '\x6', '\x4', '\x2', 'w', 'r', '\x3', '\x2', '\x2', '\x2', 
		'x', '{', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 
		'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '{', 'y', '\x3', '\x2', '\x2', '\x2', '|', '~', '\a', '\x3', '\x2', 
		'\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x81', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x80', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x86', '\x5', '\b', 
		'\x5', '\x2', '\x83', '\x86', '\x5', '\xE', '\b', '\x2', '\x84', '\x86', 
		'\x5', '\x10', '\t', '\x2', '\x85', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '\a', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', 
		'\a', '\x35', '\x2', '\x2', '\x88', '\x89', '\x5', '\n', '\x6', '\x2', 
		'\x89', '\t', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\"', 
		'\x12', '\x2', '\x8B', '\x8E', '\a', '\b', '\x2', '\x2', '\x8C', '\x8F', 
		'\a', '=', '\x2', '\x2', '\x8D', '\x8F', '\x5', '\x46', '$', '\x2', '\x8E', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x8F', '\v', '\x3', '\x2', '\x2', '\x2', '\x90', '\x93', '\x5', 
		'\n', '\x6', '\x2', '\x91', '\x93', '\x5', '\x46', '$', '\x2', '\x92', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\r', '\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', 
		';', '\x2', '\x2', '\x95', '\x9A', '\x5', '\f', '\a', '\x2', '\x96', '\x97', 
		'\a', '\a', '\x2', '\x2', '\x97', '\x99', '\x5', '\f', '\a', '\x2', '\x98', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\xF', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9F', '\a', '\x1F', '\x2', 
		'\x2', '\x9E', '\xA0', '\a', ' ', '\x2', '\x2', '\x9F', '\x9E', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA6', '\x5', '$', '\x13', 
		'\x2', '\xA2', '\xA3', '\a', '\a', '\x2', '\x2', '\xA3', '\xA5', '\x5', 
		'$', '\x13', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', 
		'\xA1', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', 
		'!', '\x2', '\x2', '\xAC', '\xAF', '\x5', '\x18', '\r', '\x2', '\xAD', 
		'\xAE', '\a', '&', '\x2', '\x2', '\xAE', '\xB0', '\x5', '&', '\x14', '\x2', 
		'\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', 
		'\a', ',', '\x2', '\x2', '\xB2', '\xB3', '\a', '-', '\x2', '\x2', '\xB3', 
		'\xB5', '\x5', '(', '\x15', '\x2', '\xB4', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '.', '\x2', '\x2', '\xB7', 
		'\xB9', '\x5', '\x16', '\f', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBB', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xBA', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBC', '\xBD', '\a', '\x30', '\x2', '\x2', '\xBD', '\xBE', '\a', 
		'-', '\x2', '\x2', '\xBE', '\xC0', '\x5', '\x12', '\n', '\x2', '\xBF', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\a', 
		'\x33', '\x2', '\x2', '\xC2', '\xC4', '\x5', '\x46', '$', '\x2', '\xC3', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\a', 
		'\x34', '\x2', '\x2', '\xC6', '\xC8', '\x5', '\x46', '$', '\x2', '\xC7', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\x11', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCE', '\x5', 
		'\x14', '\v', '\x2', '\xCA', '\xCB', '\a', '\a', '\x2', '\x2', '\xCB', 
		'\xCD', '\x5', '\x14', '\v', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD4', '\x5', '\x46', '$', '\x2', '\xD2', '\xD4', '\x5', 
		'\x1E', '\x10', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		'\xD2', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD5', '\xD7', '\t', '\x2', '\x2', '\x2', '\xD6', '\xD5', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x5', ',', '\x17', 
		'\x2', '\xD9', '\x17', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDF', '\x5', 
		'\x1A', '\xE', '\x2', '\xDB', '\xDD', '\a', '\"', '\x2', '\x2', '\xDC', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDD', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE0', '\x5', 
		'^', '\x30', '\x2', '\xDF', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE3', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE3', '\x5', '\x1C', '\xF', '\x2', '\xE2', '\xDA', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x5', '`', '\x31', 
		'\x2', '\xE5', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', 
		'\x5', '\x2', '\x2', '\xE7', '\xE8', '\x5', '\x10', '\t', '\x2', '\xE8', 
		'\xED', '\a', '\x6', '\x2', '\x2', '\xE9', '\xEB', '\a', '\"', '\x2', 
		'\x2', '\xEA', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEC', 
		'\xEE', '\x5', '^', '\x30', '\x2', '\xED', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x5', '\x2', '\x2', '\xF0', 
		'\xF1', '\x5', '\x10', '\t', '\x2', '\xF1', '\xF2', '\a', '\x6', '\x2', 
		'\x2', '\xF2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF4', '\a', 
		'\x5', '\x2', '\x2', '\xF4', '\xF5', '\x5', '\x10', '\t', '\x2', '\xF5', 
		'\xF6', '\a', '\x6', '\x2', '\x2', '\xF6', '!', '\x3', '\x2', '\x2', '\x2', 
		'\xF7', '\xFA', '\a', '?', '\x2', '\x2', '\xF8', '\xFA', '\a', ';', '\x2', 
		'\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xFA', '#', '\x3', '\x2', '\x2', '\x2', '\xFB', 
		'\x109', '\a', '\t', '\x2', '\x2', '\xFC', '\x109', '\a', '#', '\x2', 
		'\x2', '\xFD', '\xFE', '\x5', '\x1A', '\xE', '\x2', '\xFE', '\xFF', '\a', 
		'\x4', '\x2', '\x2', '\xFF', '\x100', '\a', '\t', '\x2', '\x2', '\x100', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x101', '\x106', '\x5', '\x46', 
		'$', '\x2', '\x102', '\x104', '\a', '\"', '\x2', '\x2', '\x103', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x107', '\x5', 
		'\x42', '\"', '\x2', '\x106', '\x103', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x108', '\xFC', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x101', '\x3', '\x2', '\x2', '\x2', '\x109', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x10B', '\x5', ',', '\x17', '\x2', '\x10B', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x111', '\x5', '*', '\x16', '\x2', '\x10D', 
		'\x10E', '\a', '\a', '\x2', '\x2', '\x10E', '\x110', '\x5', '*', '\x16', 
		'\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', '\x114', '\x117', 
		'\x5', '\x46', '$', '\x2', '\x115', '\x117', '\x5', ' ', '\x11', '\x2', 
		'\x116', '\x114', '\x3', '\x2', '\x2', '\x2', '\x116', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '+', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\b', '\x17', '\x1', '\x2', '\x119', '\x11A', '\a', '\x1E', '\x2', 
		'\x2', '\x11A', '\x129', '\x5', ',', '\x17', '\t', '\x11B', '\x11C', '\a', 
		'*', '\x2', '\x2', '\x11C', '\x129', '\x5', ',', '\x17', '\b', '\x11D', 
		'\x11E', '\a', '\x5', '\x2', '\x2', '\x11E', '\x11F', '\x5', ',', '\x17', 
		'\x2', '\x11F', '\x120', '\a', '\x6', '\x2', '\x2', '\x120', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x121', '\x129', '\x5', '\x46', '$', '\x2', 
		'\x122', '\x123', '\x5', '.', '\x18', '\x2', '\x123', '\x124', '\a', ')', 
		'\x2', '\x2', '\x124', '\x125', '\a', '*', '\x2', '\x2', '\x125', '\x126', 
		'\t', '\x3', '\x2', '\x2', '\x126', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x129', '\x5', '.', '\x18', '\x2', '\x128', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x128', '\x121', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x122', '\x3', '\x2', '\x2', '\x2', '\x128', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', '\x12B', '\f', '\x6', '\x2', '\x2', '\x12B', '\x12C', '\x5', 
		'@', '!', '\x2', '\x12C', '\x12D', '\x5', ',', '\x17', '\a', '\x12D', 
		'\x12F', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x132', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\x3', '\x2', '\x2', '\x2', 
		'\x131', '-', '\x3', '\x2', '\x2', '\x2', '\x132', '\x130', '\x3', '\x2', 
		'\x2', '\x2', '\x133', '\x13B', '\x5', ':', '\x1E', '\x2', '\x134', '\x13B', 
		'\x5', '<', '\x1F', '\x2', '\x135', '\x13B', '\x5', '\x32', '\x1A', '\x2', 
		'\x136', '\x13B', '\x5', 'T', '+', '\x2', '\x137', '\x13B', '\x5', '\x34', 
		'\x1B', '\x2', '\x138', '\x13B', '\x5', '\x36', '\x1C', '\x2', '\x139', 
		'\x13B', '\x5', '\x30', '\x19', '\x2', '\x13A', '\x133', '\x3', '\x2', 
		'\x2', '\x2', '\x13A', '\x134', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x136', '\x3', '\x2', '\x2', '\x2', 
		'\x13A', '\x137', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x138', '\x3', 
		'\x2', '\x2', '\x2', '\x13A', '\x139', '\x3', '\x2', '\x2', '\x2', '\x13B', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x5', '\x46', '$', 
		'\x2', '\x13D', '\x13F', '\a', ')', '\x2', '\x2', '\x13E', '\x140', '\a', 
		'*', '\x2', '\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x142', '\a', '#', '\x2', '\x2', '\x142', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x143', '\x144', '\a', '\x36', '\x2', '\x2', '\x144', 
		'\x152', '\a', '\x5', '\x2', '\x2', '\x145', '\x153', '\a', '\t', '\x2', 
		'\x2', '\x146', '\x147', '\a', '\x5', '\x2', '\x2', '\x147', '\x14C', 
		'\x5', 'V', ',', '\x2', '\x148', '\x149', '\a', '\a', '\x2', '\x2', '\x149', 
		'\x14B', '\x5', 'V', ',', '\x2', '\x14A', '\x148', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14A', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x14F', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x14F', '\x150', '\a', '\x6', '\x2', '\x2', '\x150', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x151', '\x153', '\x5', 'V', ',', 
		'\x2', '\x152', '\x145', '\x3', '\x2', '\x2', '\x2', '\x152', '\x146', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x153', '\x154', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\a', 
		'\a', '\x2', '\x2', '\x155', '\x156', '\x5', '\x46', '$', '\x2', '\x156', 
		'\x157', '\a', '\x6', '\x2', '\x2', '\x157', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x158', '\x15A', '\x5', '\x38', '\x1D', '\x2', '\x159', '\x15B', 
		'\a', '*', '\x2', '\x2', '\x15A', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', '\x15D', '\a', '/', '\x2', '\x2', '\x15D', 
		'\x15E', '\a', '\x5', '\x2', '\x2', '\x15E', '\x163', '\x5', '\x46', '$', 
		'\x2', '\x15F', '\x160', '\a', '\a', '\x2', '\x2', '\x160', '\x162', '\x5', 
		'\x46', '$', '\x2', '\x161', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x162', 
		'\x165', '\x3', '\x2', '\x2', '\x2', '\x163', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x167', '\a', '\x6', '\x2', '\x2', '\x167', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x168', '\x16A', '\x5', '\x38', '\x1D', '\x2', '\x169', 
		'\x16B', '\a', '*', '\x2', '\x2', '\x16A', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\a', '+', '\x2', '\x2', 
		'\x16D', '\x16E', '\x5', '\x46', '$', '\x2', '\x16E', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x16F', '\x170', '\x5', '\x46', '$', '\x2', '\x170', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\x5', '\x46', '$', '\x2', 
		'\x172', '\x173', '\a', '\x38', '\x2', '\x2', '\x173', '\x174', '\x5', 
		'\x46', '$', '\x2', '\x174', '\x175', '\a', '\'', '\x2', '\x2', '\x175', 
		'\x176', '\x5', '\x46', '$', '\x2', '\x176', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x177', '\x178', '\x5', '\x46', '$', '\x2', '\x178', '\x179', 
		'\x5', '>', ' ', '\x2', '\x179', '\x17A', '\x5', '\x46', '$', '\x2', '\x17A', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17C', '\t', '\x4', '\x2', 
		'\x2', '\x17C', '?', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\t', 
		'\x5', '\x2', '\x2', '\x17E', '\x41', '\x3', '\x2', '\x2', '\x2', '\x17F', 
		'\x180', '\a', ';', '\x2', '\x2', '\x180', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x181', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x182', '\x18B', 
		'\x5', 'V', ',', '\x2', '\x183', '\x18B', '\x5', 'X', '-', '\x2', '\x184', 
		'\x185', '\x5', '\x46', '$', '\x2', '\x185', '\x186', '\x5', 'L', '\'', 
		'\x2', '\x186', '\x187', '\x5', '\x46', '$', '\x2', '\x187', '\x18B', 
		'\x3', '\x2', '\x2', '\x2', '\x188', '\x18B', '\x5', 'T', '+', '\x2', 
		'\x189', '\x18B', '\x5', '\"', '\x12', '\x2', '\x18A', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x18A', '\x182', '\x3', '\x2', '\x2', '\x2', '\x18A', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x184', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x18D', '\b', '$', '\x1', '\x2', '\x18D', '\x18E', '\a', '\x37', 
		'\x2', '\x2', '\x18E', '\x18F', '\a', '\x5', '\x2', '\x2', '\x18F', '\x190', 
		'\x5', '\x46', '$', '\x2', '\x190', '\x191', '\a', '\"', '\x2', '\x2', 
		'\x191', '\x192', '\a', ';', '\x2', '\x2', '\x192', '\x193', '\a', '\x6', 
		'\x2', '\x2', '\x193', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', 
		'\a', '\x5', '\x2', '\x2', '\x195', '\x196', '\x5', '\x46', '$', '\x2', 
		'\x196', '\x197', '\a', '\x6', '\x2', '\x2', '\x197', '\x19D', '\x3', 
		'\x2', '\x2', '\x2', '\x198', '\x19D', '\x5', 'X', '-', '\x2', '\x199', 
		'\x19D', '\x5', 'V', ',', '\x2', '\x19A', '\x19D', '\x5', 'T', '+', '\x2', 
		'\x19B', '\x19D', '\x5', '\"', '\x12', '\x2', '\x19C', '\x18C', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x194', '\x3', '\x2', '\x2', '\x2', '\x19C', 
		'\x198', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x199', '\x3', '\x2', '\x2', 
		'\x2', '\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x19D', '\x1A4', '\x3', '\x2', '\x2', '\x2', 
		'\x19E', '\x19F', '\f', '\x5', '\x2', '\x2', '\x19F', '\x1A0', '\x5', 
		'L', '\'', '\x2', '\x1A0', '\x1A1', '\x5', '\x46', '$', '\x6', '\x1A1', 
		'\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x19E', '\x3', '\x2', '\x2', 
		'\x2', '\x1A3', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A2', 
		'\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', 'G', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1A4', '\x3', '\x2', 
		'\x2', '\x2', '\x1A7', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1A8', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x5', '\x46', '$', '\x2', 
		'\x1AA', '\x1AB', '\x5', 'L', '\'', '\x2', '\x1AB', '\x1AC', '\x5', '\x46', 
		'$', '\x2', '\x1AC', 'K', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', 
		'\t', '\x6', '\x2', '\x2', '\x1AE', 'M', '\x3', '\x2', '\x2', '\x2', '\x1AF', 
		'\x1BB', '\a', ';', '\x2', '\x2', '\x1B0', '\x1B1', '\a', '\x5', '\x2', 
		'\x2', '\x1B1', '\x1B6', '\a', ';', '\x2', '\x2', '\x1B2', '\x1B3', '\a', 
		'\a', '\x2', '\x2', '\x1B3', '\x1B5', '\a', ';', '\x2', '\x2', '\x1B4', 
		'\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B8', '\x3', '\x2', '\x2', 
		'\x2', '\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1B8', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BB', '\a', 
		'\x6', '\x2', '\x2', '\x1BA', '\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1BA', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1BB', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x1BC', '\x1BD', '\x5', 'N', '(', '\x2', '\x1BD', '\x1C0', '\a', 
		'\x39', '\x2', '\x2', '\x1BE', '\x1C1', '\x5', '\x46', '$', '\x2', '\x1BF', 
		'\x1C1', '\x5', ',', '\x17', '\x2', '\x1C0', '\x1BE', '\x3', '\x2', '\x2', 
		'\x2', '\x1C0', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', 'Q', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1C5', '\x5', 'P', ')', '\x2', '\x1C3', 
		'\x1C5', '\x5', '\x46', '$', '\x2', '\x1C4', '\x1C2', '\x3', '\x2', '\x2', 
		'\x2', '\x1C4', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C5', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x1C6', '\x1C7', '\x5', '\\', '/', '\x2', '\x1C7', 
		'\x1D1', '\a', '\x5', '\x2', '\x2', '\x1C8', '\x1CD', '\x5', 'R', '*', 
		'\x2', '\x1C9', '\x1CA', '\a', '\a', '\x2', '\x2', '\x1CA', '\x1CC', '\x5', 
		'R', '*', '\x2', '\x1CB', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1CC', 
		'\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CB', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1CD', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x1D2', '\a', '\t', '\x2', '\x2', '\x1D1', '\x1C8', '\x3', '\x2', 
		'\x2', '\x2', '\x1D1', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', 
		'\x1D3', '\x1D4', '\a', '\x6', '\x2', '\x2', '\x1D4', 'U', '\x3', '\x2', 
		'\x2', '\x2', '\x1D5', '\x1DA', '\x5', 'Z', '.', '\x2', '\x1D6', '\x1D7', 
		'\a', '\x4', '\x2', '\x2', '\x1D7', '\x1D9', '\x5', 'Z', '.', '\x2', '\x1D8', 
		'\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x1DC', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1DB', 
		'\x3', '\x2', '\x2', '\x2', '\x1DB', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\t', 
		'\a', '\x2', '\x2', '\x1DE', 'Y', '\x3', '\x2', '\x2', '\x2', '\x1DF', 
		'\x1E0', '\a', ';', '\x2', '\x2', '\x1E0', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x1E1', '\x1E2', '\a', ';', '\x2', '\x2', '\x1E2', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x1E3', '\x1E4', '\x5', '`', '\x31', '\x2', '\x1E4', '_', 
		'\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1EC', '\a', ';', '\x2', '\x2', 
		'\x1E6', '\x1EC', '\a', '>', '\x2', '\x2', '\x1E7', '\x1E8', '\a', '\x5', 
		'\x2', '\x2', '\x1E8', '\x1E9', '\x5', '`', '\x31', '\x2', '\x1E9', '\x1EA', 
		'\a', '\x6', '\x2', '\x2', '\x1EA', '\x1EC', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x1E6', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x37', '\x65', 'm', 't', 'y', '\x7F', 
		'\x85', '\x8E', '\x92', '\x9A', '\x9F', '\xA6', '\xA9', '\xAF', '\xB4', 
		'\xB8', '\xBA', '\xBF', '\xC3', '\xC7', '\xCE', '\xD3', '\xD6', '\xDC', 
		'\xDF', '\xE2', '\xEA', '\xED', '\xF9', '\x103', '\x106', '\x108', '\x111', 
		'\x116', '\x128', '\x130', '\x13A', '\x13F', '\x14C', '\x152', '\x15A', 
		'\x163', '\x16A', '\x18A', '\x19C', '\x1A4', '\x1B6', '\x1BA', '\x1C0', 
		'\x1C4', '\x1CD', '\x1D1', '\x1DA', '\x1EB',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}

// Generated from c:\Dev\Koralium.SqlParser\Koralium.SqlParser.ANTLR\ANTLR\TSqlParser.g4 by ANTLR 4.8
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class TSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ADD=1, ALL=2, ALTER=3, AND=4, ANY=5, AS=6, ASC=7, AUTHORIZATION=8, BACKSLASH=9, 
		BACKUP=10, BEGIN=11, BETWEEN=12, BREAK=13, BROWSE=14, BULK=15, BY=16, 
		CASCADE=17, CASE=18, CHECK=19, CHECKPOINT=20, CLOSE=21, CLUSTERED=22, 
		COALESCE=23, COLLATE=24, COLUMN=25, COMMIT=26, COMPUTE=27, CONSTRAINT=28, 
		CONTAINS=29, CONTAINSTABLE=30, CONTINUE=31, CONVERT=32, CREATE=33, CROSS=34, 
		CURRENT=35, CURRENT_DATE=36, CURRENT_TIME=37, CURRENT_TIMESTAMP=38, CURRENT_USER=39, 
		CURSOR=40, DATABASE=41, DBCC=42, DEALLOCATE=43, DECLARE=44, DEFAULT=45, 
		DELETE=46, DENY=47, DESC=48, DISK=49, DISTINCT=50, DISTRIBUTED=51, DOUBLE=52, 
		DOUBLE_BACK_SLASH=53, DOUBLE_FORWARD_SLASH=54, DROP=55, DUMP=56, ELSE=57, 
		END=58, ERRLVL=59, ESCAPE=60, EXCEPT=61, EXECUTE=62, EXISTS=63, EXIT=64, 
		EXTERNAL=65, FETCH=66, FILE=67, FILLFACTOR=68, FOR=69, FOREIGN=70, FREETEXT=71, 
		FREETEXTTABLE=72, FROM=73, FULL=74, FUNCTION=75, GOTO=76, GRANT=77, GROUP=78, 
		HAVING=79, HOLDLOCK=80, IDENTITY=81, IDENTITY_INSERT=82, IDENTITYCOL=83, 
		IF=84, IN=85, INDEX=86, INNER=87, INSERT=88, INTERSECT=89, INTO=90, IS=91, 
		JOIN=92, KEY=93, KILL=94, LEFT=95, LIKE=96, LINENO=97, LOAD=98, MERGE=99, 
		NATIONAL=100, NEGOTIATE=101, NOCHECK=102, NONCLUSTERED=103, NOT=104, NULL=105, 
		NULLIF=106, OF=107, OFF=108, OFFSETS=109, ON=110, OPEN=111, OPENDATASOURCE=112, 
		OPENQUERY=113, OPENROWSET=114, OPENJSON=115, OPENXML=116, OPTION=117, 
		OR=118, ORDER=119, OUTER=120, OVER=121, PERCENT=122, PIVOT=123, PLAN=124, 
		PRECISION=125, PRIMARY=126, PRINT=127, PROC=128, PROCEDURE=129, PUBLIC=130, 
		RAISERROR=131, RAW=132, READ=133, READTEXT=134, RECONFIGURE=135, REFERENCES=136, 
		REPLICATION=137, RESTORE=138, RESTRICT=139, RETURN=140, REVERT=141, REVOKE=142, 
		RIGHT=143, ROLLBACK=144, ROWCOUNT=145, ROWGUIDCOL=146, RULE=147, SAVE=148, 
		SCHEMA=149, SECURITYAUDIT=150, SELECT=151, SEMANTICKEYPHRASETABLE=152, 
		SEMANTICSIMILARITYDETAILSTABLE=153, SEMANTICSIMILARITYTABLE=154, SESSION_USER=155, 
		SET=156, SETUSER=157, SHUTDOWN=158, SOME=159, STATISTICS=160, SYSTEM_USER=161, 
		TABLE=162, TABLESAMPLE=163, TEXTSIZE=164, THEN=165, TO=166, TOP=167, TRAN=168, 
		TRANSACTION=169, TRIGGER=170, TRUNCATE=171, TSEQUAL=172, UNION=173, UNIQUE=174, 
		UNPIVOT=175, UPDATE=176, UPDATETEXT=177, USE=178, USER=179, VALUES=180, 
		VARYING=181, VIEW=182, WAITFOR=183, WHEN=184, WHERE=185, WHILE=186, WITH=187, 
		WITHIN=188, WRITETEXT=189, ABSOLUTE=190, AT_KEYWORD=191, ACCENT_SENSITIVITY=192, 
		ACTION=193, ACTIVATION=194, ACTIVE=195, ADDRESS=196, AES_128=197, AES_192=198, 
		AES_256=199, AFFINITY=200, AFTER=201, AGGREGATE=202, ALGORITHM=203, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=204, 
		ALLOW_SNAPSHOT_ISOLATION=205, ALLOWED=206, ANSI_NULL_DEFAULT=207, ANSI_NULLS=208, 
		ANSI_PADDING=209, ANSI_WARNINGS=210, APPLICATION_LOG=211, APPLY=212, ARITHABORT=213, 
		ASSEMBLY=214, AUDIT=215, AUDIT_GUID=216, AUTO=217, AUTO_CLEANUP=218, AUTO_CLOSE=219, 
		AUTO_CREATE_STATISTICS=220, AUTO_SHRINK=221, AUTO_UPDATE_STATISTICS=222, 
		AUTO_UPDATE_STATISTICS_ASYNC=223, AVAILABILITY=224, AVG=225, BACKUP_PRIORITY=226, 
		BEGIN_DIALOG=227, BIGINT=228, BINARY_KEYWORD=229, BINARY_BASE64=230, BINARY_CHECKSUM=231, 
		BINDING=232, BLOB_STORAGE=233, BROKER=234, BROKER_INSTANCE=235, BULK_LOGGED=236, 
		CALLER=237, CAP_CPU_PERCENT=238, CAST=239, TRY_CAST=240, CATALOG=241, 
		CATCH=242, CHANGE_RETENTION=243, CHANGE_TRACKING=244, CHECKSUM=245, CHECKSUM_AGG=246, 
		CLEANUP=247, COLLECTION=248, COLUMN_MASTER_KEY=249, COMMITTED=250, COMPATIBILITY_LEVEL=251, 
		CONCAT=252, CONCAT_NULL_YIELDS_NULL=253, CONTENT=254, CONTROL=255, COOKIE=256, 
		COUNT=257, COUNT_BIG=258, COUNTER=259, CPU=260, CREATE_NEW=261, CREATION_DISPOSITION=262, 
		CREDENTIAL=263, CRYPTOGRAPHIC=264, CUME_DIST=265, CURSOR_CLOSE_ON_COMMIT=266, 
		CURSOR_DEFAULT=267, DATA=268, DATE_CORRELATION_OPTIMIZATION=269, DATEADD=270, 
		DATEDIFF=271, DATENAME=272, DATEPART=273, DAYS=274, DB_CHAINING=275, DB_FAILOVER=276, 
		DECRYPTION=277, DEFAULT_DOUBLE_QUOTE=278, DEFAULT_FULLTEXT_LANGUAGE=279, 
		DEFAULT_LANGUAGE=280, DELAY=281, DELAYED_DURABILITY=282, DELETED=283, 
		DENSE_RANK=284, DEPENDENTS=285, DES=286, DESCRIPTION=287, DESX=288, DHCP=289, 
		DIALOG=290, DIRECTORY_NAME=291, DISABLE=292, DISABLE_BROKER=293, DISABLED=294, 
		DISK_DRIVE=295, DOCUMENT=296, DYNAMIC=297, ELEMENTS=298, EMERGENCY=299, 
		EMPTY=300, ENABLE=301, ENABLE_BROKER=302, ENCRYPTED_VALUE=303, ENCRYPTION=304, 
		ENDPOINT_URL=305, ERROR_BROKER_CONVERSATIONS=306, EXCLUSIVE=307, EXECUTABLE=308, 
		EXIST=309, EXPAND=310, EXPIRY_DATE=311, EXPLICIT=312, FAIL_OPERATION=313, 
		FAILOVER_MODE=314, FAILURE=315, FAILURE_CONDITION_LEVEL=316, FAST=317, 
		FAST_FORWARD=318, FILEGROUP=319, FILEGROWTH=320, FILENAME=321, FILEPATH=322, 
		FILESTREAM=323, FILTER=324, FIRST=325, FIRST_VALUE=326, FOLLOWING=327, 
		FORCE=328, FORCE_FAILOVER_ALLOW_DATA_LOSS=329, FORCED=330, FORMAT=331, 
		FORWARD_ONLY=332, FULLSCAN=333, FULLTEXT=334, GB=335, GETDATE=336, GETUTCDATE=337, 
		GLOBAL=338, GO_BATCH=339, GO=340, GROUP_MAX_REQUESTS=341, GROUPING=342, 
		GROUPING_ID=343, HADR=344, HASH=345, HEALTH_CHECK_TIMEOUT=346, HIGH=347, 
		HONOR_BROKER_PRIORITY=348, HOURS=349, IDENTITY_VALUE=350, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=351, 
		IMMEDIATE=352, IMPERSONATE=353, IMPORTANCE=354, INCLUDE_NULL_VALUES=355, 
		INCREMENTAL=356, INITIATOR=357, INPUT=358, INSENSITIVE=359, INSERTED=360, 
		INT=361, IP=362, ISOLATION=363, JOB=364, JSON=365, KB=366, KEEP=367, KEEPFIXED=368, 
		KEY_SOURCE=369, KEYS=370, KEYSET=371, LAG=372, LAST=373, LAST_VALUE=374, 
		LEAD=375, LEVEL=376, LIST=377, LISTENER=378, LISTENER_URL=379, LOB_COMPACTION=380, 
		LOCAL=381, LOCATION=382, LOCK=383, LOCK_ESCALATION=384, LOGIN=385, LOOP=386, 
		LOW=387, MANUAL=388, MARK=389, MATERIALIZED=390, MAX=391, MAX_CPU_PERCENT=392, 
		MAX_DOP=393, MAX_FILES=394, MAX_IOPS_PER_VOLUME=395, MAX_MEMORY_PERCENT=396, 
		MAX_PROCESSES=397, MAX_QUEUE_READERS=398, MAX_ROLLOVER_FILES=399, MAXDOP=400, 
		MAXRECURSION=401, MAXSIZE=402, MB=403, MEDIUM=404, MEMORY_OPTIMIZED_DATA=405, 
		MESSAGE=406, MIN=407, MIN_ACTIVE_ROWVERSION=408, MIN_CPU_PERCENT=409, 
		MIN_IOPS_PER_VOLUME=410, MIN_MEMORY_PERCENT=411, MINUTES=412, MIRROR_ADDRESS=413, 
		MIXED_PAGE_ALLOCATION=414, MODE=415, MODIFY=416, MOVE=417, MULTI_USER=418, 
		NAME=419, NESTED_TRIGGERS=420, NEW_ACCOUNT=421, NEW_BROKER=422, NEW_PASSWORD=423, 
		NEXT=424, NO=425, NO_TRUNCATE=426, NO_WAIT=427, NOCOUNT=428, NODES=429, 
		NOEXPAND=430, NON_TRANSACTED_ACCESS=431, NORECOMPUTE=432, NORECOVERY=433, 
		NOWAIT=434, NTILE=435, NUMANODE=436, NUMBER=437, NUMERIC_ROUNDABORT=438, 
		OBJECT=439, OFFLINE=440, OFFSET=441, OLD_ACCOUNT=442, ONLINE=443, ONLY=444, 
		OPEN_EXISTING=445, OPTIMISTIC=446, OPTIMIZE=447, OUT=448, OUTPUT=449, 
		OVERRIDE=450, OWNER=451, PAGE_VERIFY=452, PARAMETERIZATION=453, PARTITION=454, 
		PARTITIONS=455, PARTNER=456, PATH=457, PERCENT_RANK=458, PERCENTILE_CONT=459, 
		PERCENTILE_DISC=460, POISON_MESSAGE_HANDLING=461, POOL=462, PORT=463, 
		PRECEDING=464, PRIMARY_ROLE=465, PRIOR=466, PRIORITY=467, PRIORITY_LEVEL=468, 
		PRIVATE=469, PRIVATE_KEY=470, PRIVILEGES=471, PROCEDURE_NAME=472, PROPERTY=473, 
		PROVIDER=474, PROVIDER_KEY_NAME=475, QUERY=476, QUEUE=477, QUEUE_DELAY=478, 
		QUOTED_IDENTIFIER=479, RANGE=480, RANK=481, RC2=482, RC4=483, RC4_128=484, 
		READ_COMMITTED_SNAPSHOT=485, READ_ONLY=486, READ_ONLY_ROUTING_LIST=487, 
		READ_WRITE=488, READONLY=489, REBUILD=490, RECEIVE=491, RECOMPILE=492, 
		RECOVERY=493, RECURSIVE_TRIGGERS=494, RELATIVE=495, REMOTE=496, REMOTE_SERVICE_NAME=497, 
		REMOVE=498, REORGANIZE=499, REPEATABLE=500, REPLICA=501, REQUEST_MAX_CPU_TIME_SEC=502, 
		REQUEST_MAX_MEMORY_GRANT_PERCENT=503, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=504, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=505, RESERVE_DISK_SPACE=506, 
		RESOURCE=507, RESOURCE_MANAGER_LOCATION=508, RESTRICTED_USER=509, RETENTION=510, 
		ROBUST=511, ROOT=512, ROUTE=513, ROW=514, ROW_NUMBER=515, ROWGUID=516, 
		ROWS=517, SAMPLE=518, SCHEMABINDING=519, SCOPED=520, SCROLL=521, SCROLL_LOCKS=522, 
		SEARCH=523, SECONDARY=524, SECONDARY_ONLY=525, SECONDARY_ROLE=526, SECONDS=527, 
		SECRET=528, SECURITY=529, SECURITY_LOG=530, SEEDING_MODE=531, SELF=532, 
		SEMI_SENSITIVE=533, SEND=534, SENT=535, SEQUENCE=536, SERIALIZABLE=537, 
		SESSION_TIMEOUT=538, SETERROR=539, SHARE=540, SHOWPLAN=541, SIGNATURE=542, 
		SIMPLE=543, SINGLE_USER=544, SIZE=545, SMALLINT=546, SNAPSHOT=547, SPATIAL_WINDOW_MAX_CELLS=548, 
		STANDBY=549, START_DATE=550, STATIC=551, STATS_STREAM=552, STATUS=553, 
		STATUSONLY=554, STDEV=555, STDEVP=556, STOPLIST=557, STRING_AGG=558, STUFF=559, 
		SUBJECT=560, SUBSCRIPTION=561, SUM=562, SUSPEND=563, SYMMETRIC=564, SYNCHRONOUS_COMMIT=565, 
		SYNONYM=566, SYSTEM=567, TAKE=568, TARGET_RECOVERY_TIME=569, TB=570, TEXTIMAGE_ON=571, 
		THROW=572, TIES=573, TIME=574, TIMEOUT=575, TIMER=576, TINYINT=577, TORN_PAGE_DETECTION=578, 
		TRANSFORM_NOISE_WORDS=579, TRIPLE_DES=580, TRIPLE_DES_3KEY=581, TRUSTWORTHY=582, 
		TRY=583, TSQL=584, TWO_DIGIT_YEAR_CUTOFF=585, TYPE=586, TYPE_WARNING=587, 
		UNBOUNDED=588, UNCOMMITTED=589, UNKNOWN=590, UNLIMITED=591, UOW=592, USING=593, 
		VALID_XML=594, VALIDATION=595, VALUE=596, VAR=597, VARBINARY_KEYWORD=598, 
		VARP=599, VIEW_METADATA=600, VIEWS=601, WAIT=602, WELL_FORMED_XML=603, 
		WITHOUT_ARRAY_WRAPPER=604, WORK=605, WORKLOAD=606, XML=607, XMLDATA=608, 
		XMLNAMESPACES=609, XMLSCHEMA=610, XSINIL=611, ZONE=612, DOLLAR_ACTION=613, 
		ABSENT=614, AES=615, ALLOW_CONNECTIONS=616, ALLOW_MULTIPLE_EVENT_LOSS=617, 
		ALLOW_SINGLE_EVENT_LOSS=618, ANONYMOUS=619, APPEND=620, APPLICATION=621, 
		ASYMMETRIC=622, ASYNCHRONOUS_COMMIT=623, AUTHENTICATION=624, AUTOMATED_BACKUP_PREFERENCE=625, 
		AUTOMATIC=626, AVAILABILITY_MODE=627, BEFORE=628, BLOCK=629, BLOCKSIZE=630, 
		BLOCKING_HIERARCHY=631, BUFFER=632, BUFFERCOUNT=633, CACHE=634, CALLED=635, 
		CERTIFICATE=636, CHANGETABLE=637, CHANGES=638, CHECK_POLICY=639, CHECK_EXPIRATION=640, 
		CLASSIFIER_FUNCTION=641, CLUSTER=642, COMPRESSION=643, CONFIGURATION=644, 
		CONTAINMENT=645, CONTEXT=646, CONTINUE_AFTER_ERROR=647, CONTRACT=648, 
		CONTRACT_NAME=649, CONVERSATION=650, COPY_ONLY=651, CYCLE=652, DATA_COMPRESSION=653, 
		DATA_SOURCE=654, DATABASE_MIRRORING=655, DEFAULT_DATABASE=656, DEFAULT_SCHEMA=657, 
		DIAGNOSTICS=658, DIFFERENTIAL=659, DTC_SUPPORT=660, ENABLED=661, ENDPOINT=662, 
		ERROR=663, EVENT=664, EVENTDATA=665, EVENT_RETENTION_MODE=666, EXECUTABLE_FILE=667, 
		EXPIREDATE=668, EXTENSION=669, EXTERNAL_ACCESS=670, FAILOVER=671, FAILURECONDITIONLEVEL=672, 
		FAN_IN=673, FILE_SNAPSHOT=674, FORCESEEK=675, FORCE_SERVICE_ALLOW_DATA_LOSS=676, 
		GET=677, GOVERNOR=678, HASHED=679, HEALTHCHECKTIMEOUT=680, IIF=681, IO=682, 
		INCLUDE=683, INCREMENT=684, INFINITE=685, INIT=686, INSTEAD=687, ISNULL=688, 
		KERBEROS=689, KEY_PATH=690, KEY_STORE_PROVIDER_NAME=691, LANGUAGE=692, 
		LIBRARY=693, LIFETIME=694, LINUX=695, LISTENER_IP=696, LISTENER_PORT=697, 
		LOCAL_SERVICE_NAME=698, LOG=699, MATCHED=700, MASTER=701, MAX_MEMORY=702, 
		MAXTRANSFER=703, MAXVALUE=704, MAX_DISPATCH_LATENCY=705, MAX_EVENT_SIZE=706, 
		MAX_SIZE=707, MAX_OUTSTANDING_IO_PER_VOLUME=708, MEDIADESCRIPTION=709, 
		MEDIANAME=710, MEMBER=711, MEMORY_PARTITION_MODE=712, MESSAGE_FORWARDING=713, 
		MESSAGE_FORWARD_SIZE=714, MINVALUE=715, MIRROR=716, MUST_CHANGE=717, NOFORMAT=718, 
		NOINIT=719, NONE=720, NOREWIND=721, NOSKIP=722, NOUNLOAD=723, NO_CHECKSUM=724, 
		NO_COMPRESSION=725, NO_EVENT_LOSS=726, NOTIFICATION=727, NTLM=728, OLD_PASSWORD=729, 
		ON_FAILURE=730, PAGE=731, PARAM_NODE=732, PARTIAL=733, PASSWORD=734, PERMISSION_SET=735, 
		PER_CPU=736, PER_DB=737, PER_NODE=738, PERSISTED=739, PLATFORM=740, POLICY=741, 
		PREDICATE=742, PROCESS=743, PROFILE=744, PYTHON=745, R=746, READ_WRITE_FILEGROUPS=747, 
		REGENERATE=748, RELATED_CONVERSATION=749, RELATED_CONVERSATION_GROUP=750, 
		REQUIRED=751, RESET=752, RESTART=753, RESUME=754, RETAINDAYS=755, RETURNS=756, 
		REWIND=757, ROLE=758, RSA_512=759, RSA_1024=760, RSA_2048=761, RSA_3072=762, 
		RSA_4096=763, SAFETY=764, SAFE=765, SCHEDULER=766, SCHEME=767, SERVER=768, 
		SERVICE=769, SERVICE_BROKER=770, SERVICE_NAME=771, SESSION=772, SHRINKLOG=773, 
		SID=774, SKIP_KEYWORD=775, SOFTNUMA=776, SOURCE=777, SPECIFICATION=778, 
		SPLIT=779, SQLDUMPERFLAGS=780, SQLDUMPERPATH=781, SQLDUMPERTIMEOUT=782, 
		STATE=783, STATS=784, START=785, STARTED=786, STARTUP_STATE=787, STOP=788, 
		STOPPED=789, STOP_ON_ERROR=790, SUPPORTED=791, TAPE=792, TARGET=793, TCP=794, 
		TRACK_CAUSALITY=795, TRANSFER=796, UNCHECKED=797, UNLOCK=798, UNSAFE=799, 
		URL=800, USED=801, VERBOSELOGGING=802, VISIBILITY=803, WINDOWS=804, WITHOUT=805, 
		WITNESS=806, VARCHAR=807, NVARCHAR=808, SPACE=809, COMMENT=810, LINE_COMMENT=811, 
		DOUBLE_QUOTE_ID=812, SINGLE_QUOTE=813, SQUARE_BRACKET_ID=814, LOCAL_ID=815, 
		DECIMAL=816, ID=817, STRING=818, BINARY=819, FLOAT=820, REAL=821, EQUAL=822, 
		GREATER=823, LESS=824, EXCLAMATION=825, PLUS_ASSIGN=826, MINUS_ASSIGN=827, 
		MULT_ASSIGN=828, DIV_ASSIGN=829, MOD_ASSIGN=830, AND_ASSIGN=831, XOR_ASSIGN=832, 
		OR_ASSIGN=833, DOUBLE_BAR=834, DOT=835, UNDERLINE=836, AT=837, SHARP=838, 
		DOLLAR=839, LR_BRACKET=840, RR_BRACKET=841, COMMA=842, SEMI=843, COLON=844, 
		STAR=845, DIVIDE=846, MODULE=847, PLUS=848, MINUS=849, BIT_NOT=850, BIT_OR=851, 
		BIT_AND=852, BIT_XOR=853, IPV4_ADDR=854, IPV6_ADDR=855, ANSI_DEFAULTS=856, 
		ANSI_NULL_DFLT_OFF=857, ANSI_NULL_DFLT_ON=858, ARITHIGNORE=859, FMTONLY=860, 
		FORCEPLAN=861, IMPLICIT_TRANSACTIONS=862, NOEXEC=863, PARSEONLY=864, REMOTE_PROC_TRANSACTIONS=865, 
		SHOWPLAN_ALL=866, SHOWPLAN_TEXT=867, SHOWPLAN_XML=868, XACT_ABORT=869, 
		VERSION=870;
	public static final int
		RULE_tsql_file = 0, RULE_batch = 1, RULE_batch_level_statement = 2, RULE_sql_clauses = 3, 
		RULE_dml_clause = 4, RULE_ddl_clause = 5, RULE_backup_statement = 6, RULE_cfl_statement = 7, 
		RULE_block_statement = 8, RULE_break_statement = 9, RULE_continue_statement = 10, 
		RULE_goto_statement = 11, RULE_return_statement = 12, RULE_if_statement = 13, 
		RULE_throw_statement = 14, RULE_throw_error_number = 15, RULE_throw_message = 16, 
		RULE_throw_state = 17, RULE_try_catch_statement = 18, RULE_waitfor_statement = 19, 
		RULE_while_statement = 20, RULE_print_statement = 21, RULE_raiseerror_statement = 22, 
		RULE_empty_statement = 23, RULE_another_statement = 24, RULE_alter_application_role = 25, 
		RULE_create_application_role = 26, RULE_drop_aggregate = 27, RULE_drop_application_role = 28, 
		RULE_alter_assembly = 29, RULE_alter_assembly_start = 30, RULE_alter_assembly_clause = 31, 
		RULE_alter_assembly_from_clause = 32, RULE_alter_assembly_from_clause_start = 33, 
		RULE_alter_assembly_drop_clause = 34, RULE_alter_assembly_drop_multiple_files = 35, 
		RULE_alter_assembly_drop = 36, RULE_alter_assembly_add_clause = 37, RULE_alter_asssembly_add_clause_start = 38, 
		RULE_alter_assembly_client_file_clause = 39, RULE_alter_assembly_file_name = 40, 
		RULE_alter_assembly_file_bits = 41, RULE_alter_assembly_as = 42, RULE_alter_assembly_with_clause = 43, 
		RULE_alter_assembly_with = 44, RULE_client_assembly_specifier = 45, RULE_assembly_option = 46, 
		RULE_network_file_share = 47, RULE_network_computer = 48, RULE_network_file_start = 49, 
		RULE_file_path = 50, RULE_file_directory_path_separator = 51, RULE_local_file = 52, 
		RULE_local_drive = 53, RULE_multiple_local_files = 54, RULE_multiple_local_file_start = 55, 
		RULE_create_assembly = 56, RULE_drop_assembly = 57, RULE_alter_asymmetric_key = 58, 
		RULE_alter_asymmetric_key_start = 59, RULE_asymmetric_key_option = 60, 
		RULE_asymmetric_key_option_start = 61, RULE_asymmetric_key_password_change_option = 62, 
		RULE_create_asymmetric_key = 63, RULE_drop_asymmetric_key = 64, RULE_alter_authorization = 65, 
		RULE_authorization_grantee = 66, RULE_entity_to = 67, RULE_colon_colon = 68, 
		RULE_alter_authorization_start = 69, RULE_alter_authorization_for_sql_database = 70, 
		RULE_alter_authorization_for_azure_dw = 71, RULE_alter_authorization_for_parallel_dw = 72, 
		RULE_class_type = 73, RULE_class_type_for_sql_database = 74, RULE_class_type_for_azure_dw = 75, 
		RULE_class_type_for_parallel_dw = 76, RULE_drop_availability_group = 77, 
		RULE_alter_availability_group = 78, RULE_alter_availability_group_start = 79, 
		RULE_alter_availability_group_options = 80, RULE_ip_v4_failover = 81, 
		RULE_ip_v6_failover = 82, RULE_create_or_alter_broker_priority = 83, RULE_drop_broker_priority = 84, 
		RULE_alter_certificate = 85, RULE_alter_column_encryption_key = 86, RULE_create_column_encryption_key = 87, 
		RULE_drop_certificate = 88, RULE_drop_column_encryption_key = 89, RULE_drop_column_master_key = 90, 
		RULE_drop_contract = 91, RULE_drop_credential = 92, RULE_drop_cryptograhic_provider = 93, 
		RULE_drop_database = 94, RULE_drop_database_audit_specification = 95, 
		RULE_drop_database_encryption_key = 96, RULE_drop_database_scoped_credential = 97, 
		RULE_drop_default = 98, RULE_drop_endpoint = 99, RULE_drop_external_data_source = 100, 
		RULE_drop_external_file_format = 101, RULE_drop_external_library = 102, 
		RULE_drop_external_resource_pool = 103, RULE_drop_external_table = 104, 
		RULE_drop_event_notifications = 105, RULE_drop_event_session = 106, RULE_drop_fulltext_catalog = 107, 
		RULE_drop_fulltext_index = 108, RULE_drop_fulltext_stoplist = 109, RULE_drop_login = 110, 
		RULE_drop_master_key = 111, RULE_drop_message_type = 112, RULE_drop_partition_function = 113, 
		RULE_drop_partition_scheme = 114, RULE_drop_queue = 115, RULE_drop_remote_service_binding = 116, 
		RULE_drop_resource_pool = 117, RULE_drop_db_role = 118, RULE_drop_route = 119, 
		RULE_drop_rule = 120, RULE_drop_schema = 121, RULE_drop_search_property_list = 122, 
		RULE_drop_security_policy = 123, RULE_drop_sequence = 124, RULE_drop_server_audit = 125, 
		RULE_drop_server_audit_specification = 126, RULE_drop_server_role = 127, 
		RULE_drop_service = 128, RULE_drop_signature = 129, RULE_drop_statistics_name_azure_dw_and_pdw = 130, 
		RULE_drop_symmetric_key = 131, RULE_drop_synonym = 132, RULE_drop_user = 133, 
		RULE_drop_workload_group = 134, RULE_drop_xml_schema_collection = 135, 
		RULE_disable_trigger = 136, RULE_enable_trigger = 137, RULE_lock_table = 138, 
		RULE_truncate_table = 139, RULE_create_column_master_key = 140, RULE_alter_credential = 141, 
		RULE_create_credential = 142, RULE_alter_cryptographic_provider = 143, 
		RULE_create_cryptographic_provider = 144, RULE_create_event_notification = 145, 
		RULE_create_or_alter_event_session = 146, RULE_event_session_predicate_expression = 147, 
		RULE_event_session_predicate_factor = 148, RULE_event_session_predicate_leaf = 149, 
		RULE_alter_external_data_source = 150, RULE_alter_external_library = 151, 
		RULE_create_external_library = 152, RULE_alter_external_resource_pool = 153, 
		RULE_create_external_resource_pool = 154, RULE_alter_fulltext_catalog = 155, 
		RULE_create_fulltext_catalog = 156, RULE_alter_fulltext_stoplist = 157, 
		RULE_create_fulltext_stoplist = 158, RULE_alter_login_sql_server = 159, 
		RULE_create_login_sql_server = 160, RULE_alter_login_azure_sql = 161, 
		RULE_create_login_azure_sql = 162, RULE_alter_login_azure_sql_dw_and_pdw = 163, 
		RULE_create_login_pdw = 164, RULE_alter_master_key_sql_server = 165, RULE_create_master_key_sql_server = 166, 
		RULE_alter_master_key_azure_sql = 167, RULE_create_master_key_azure_sql = 168, 
		RULE_alter_message_type = 169, RULE_alter_partition_function = 170, RULE_alter_partition_scheme = 171, 
		RULE_alter_remote_service_binding = 172, RULE_create_remote_service_binding = 173, 
		RULE_create_resource_pool = 174, RULE_alter_resource_governor = 175, RULE_alter_db_role = 176, 
		RULE_create_db_role = 177, RULE_create_route = 178, RULE_create_rule = 179, 
		RULE_alter_schema_sql = 180, RULE_create_schema = 181, RULE_create_schema_azure_sql_dw_and_pdw = 182, 
		RULE_alter_schema_azure_sql_dw_and_pdw = 183, RULE_create_search_property_list = 184, 
		RULE_create_security_policy = 185, RULE_alter_sequence = 186, RULE_create_sequence = 187, 
		RULE_alter_server_audit = 188, RULE_create_server_audit = 189, RULE_alter_server_audit_specification = 190, 
		RULE_create_server_audit_specification = 191, RULE_alter_server_configuration = 192, 
		RULE_alter_server_role = 193, RULE_create_server_role = 194, RULE_alter_server_role_pdw = 195, 
		RULE_alter_service = 196, RULE_create_service = 197, RULE_alter_service_master_key = 198, 
		RULE_alter_symmetric_key = 199, RULE_create_symmetric_key = 200, RULE_create_synonym = 201, 
		RULE_alter_user = 202, RULE_create_user = 203, RULE_create_user_azure_sql_dw = 204, 
		RULE_alter_user_azure_sql = 205, RULE_alter_workload_group = 206, RULE_create_workload_group = 207, 
		RULE_create_xml_schema_collection = 208, RULE_create_queue = 209, RULE_queue_settings = 210, 
		RULE_alter_queue = 211, RULE_queue_action = 212, RULE_queue_rebuild_options = 213, 
		RULE_create_contract = 214, RULE_conversation_statement = 215, RULE_message_statement = 216, 
		RULE_merge_statement = 217, RULE_when_matches = 218, RULE_merge_matched = 219, 
		RULE_merge_not_matched = 220, RULE_delete_statement = 221, RULE_delete_statement_from = 222, 
		RULE_insert_statement = 223, RULE_insert_statement_value = 224, RULE_receive_statement = 225, 
		RULE_select_statement_standalone = 226, RULE_select_statement = 227, RULE_time = 228, 
		RULE_update_statement = 229, RULE_output_clause = 230, RULE_output_dml_list_elem = 231, 
		RULE_output_column_name = 232, RULE_create_database = 233, RULE_create_index = 234, 
		RULE_create_xml_index = 235, RULE_create_or_alter_procedure = 236, RULE_create_or_alter_trigger = 237, 
		RULE_create_or_alter_dml_trigger = 238, RULE_dml_trigger_option = 239, 
		RULE_dml_trigger_operation = 240, RULE_create_or_alter_ddl_trigger = 241, 
		RULE_ddl_trigger_operation = 242, RULE_create_or_alter_function = 243, 
		RULE_func_body_returns_select = 244, RULE_func_body_returns_table = 245, 
		RULE_func_body_returns_scalar = 246, RULE_procedure_param = 247, RULE_procedure_option = 248, 
		RULE_function_option = 249, RULE_create_statistics = 250, RULE_update_statistics = 251, 
		RULE_create_table = 252, RULE_table_indices = 253, RULE_table_options = 254, 
		RULE_create_view = 255, RULE_view_attribute = 256, RULE_alter_table = 257, 
		RULE_alter_database = 258, RULE_database_optionspec = 259, RULE_auto_option = 260, 
		RULE_change_tracking_option = 261, RULE_change_tracking_option_list = 262, 
		RULE_containment_option = 263, RULE_cursor_option = 264, RULE_alter_endpoint = 265, 
		RULE_database_mirroring_option = 266, RULE_mirroring_set_option = 267, 
		RULE_mirroring_partner = 268, RULE_mirroring_witness = 269, RULE_witness_partner_equal = 270, 
		RULE_partner_option = 271, RULE_witness_option = 272, RULE_witness_server = 273, 
		RULE_partner_server = 274, RULE_mirroring_host_port_seperator = 275, RULE_partner_server_tcp_prefix = 276, 
		RULE_port_number = 277, RULE_host = 278, RULE_date_correlation_optimization_option = 279, 
		RULE_db_encryption_option = 280, RULE_db_state_option = 281, RULE_db_update_option = 282, 
		RULE_db_user_access_option = 283, RULE_delayed_durability_option = 284, 
		RULE_external_access_option = 285, RULE_hadr_options = 286, RULE_mixed_page_allocation_option = 287, 
		RULE_parameterization_option = 288, RULE_recovery_option = 289, RULE_service_broker_option = 290, 
		RULE_snapshot_option = 291, RULE_sql_option = 292, RULE_target_recovery_time_option = 293, 
		RULE_termination = 294, RULE_drop_index = 295, RULE_drop_relational_or_xml_or_spatial_index = 296, 
		RULE_drop_backward_compatible_index = 297, RULE_drop_procedure = 298, 
		RULE_drop_trigger = 299, RULE_drop_dml_trigger = 300, RULE_drop_ddl_trigger = 301, 
		RULE_drop_function = 302, RULE_drop_statistics = 303, RULE_drop_table = 304, 
		RULE_drop_view = 305, RULE_create_type = 306, RULE_drop_type = 307, RULE_rowset_function_limited = 308, 
		RULE_openquery = 309, RULE_opendatasource = 310, RULE_declare_statement = 311, 
		RULE_xml_declaration = 312, RULE_cursor_statement = 313, RULE_backup_database = 314, 
		RULE_backup_log = 315, RULE_backup_certificate = 316, RULE_backup_master_key = 317, 
		RULE_backup_service_master_key = 318, RULE_kill_statement = 319, RULE_kill_process = 320, 
		RULE_kill_query_notification = 321, RULE_kill_stats_job = 322, RULE_execute_statement = 323, 
		RULE_execute_body_batch = 324, RULE_execute_body = 325, RULE_execute_statement_arg = 326, 
		RULE_execute_statement_arg_named = 327, RULE_execute_statement_arg_unnamed = 328, 
		RULE_execute_parameter = 329, RULE_execute_var_string = 330, RULE_security_statement = 331, 
		RULE_principal_id = 332, RULE_create_certificate = 333, RULE_existing_keys = 334, 
		RULE_private_key_options = 335, RULE_generate_new_keys = 336, RULE_date_options = 337, 
		RULE_open_key = 338, RULE_close_key = 339, RULE_create_key = 340, RULE_key_options = 341, 
		RULE_algorithm = 342, RULE_encryption_mechanism = 343, RULE_decryption_mechanism = 344, 
		RULE_grant_permission = 345, RULE_set_statement = 346, RULE_transaction_statement = 347, 
		RULE_go_batch_statement = 348, RULE_go_statement = 349, RULE_use_statement = 350, 
		RULE_setuser_statement = 351, RULE_reconfigure_statement = 352, RULE_shutdown_statement = 353, 
		RULE_dbcc_special = 354, RULE_dbcc_clause = 355, RULE_dbcc_command = 356, 
		RULE_dbcc_options = 357, RULE_execute_clause = 358, RULE_declare_local = 359, 
		RULE_table_type_definition = 360, RULE_table_type_indices = 361, RULE_xml_type_definition = 362, 
		RULE_xml_schema_collection = 363, RULE_column_def_table_constraints = 364, 
		RULE_column_def_table_constraint = 365, RULE_column_definition = 366, 
		RULE_materialized_column_definition = 367, RULE_column_constraint = 368, 
		RULE_table_constraint = 369, RULE_on_delete = 370, RULE_on_update = 371, 
		RULE_index_options = 372, RULE_index_option = 373, RULE_declare_cursor = 374, 
		RULE_declare_set_cursor_common = 375, RULE_declare_set_cursor_common_partial = 376, 
		RULE_fetch_cursor = 377, RULE_set_special = 378, RULE_constant_LOCAL_ID = 379, 
		RULE_expression = 380, RULE_time_zone = 381, RULE_primitive_expression = 382, 
		RULE_case_expression = 383, RULE_unary_operator_expression = 384, RULE_bracket_expression = 385, 
		RULE_constant_expression = 386, RULE_subquery = 387, RULE_with_expression = 388, 
		RULE_common_table_expression = 389, RULE_update_elem = 390, RULE_update_elem_merge = 391, 
		RULE_search_condition = 392, RULE_predicate_br = 393, RULE_predicate = 394, 
		RULE_query_expression = 395, RULE_sql_union = 396, RULE_query_specification = 397, 
		RULE_top_clause = 398, RULE_top_percent = 399, RULE_top_count = 400, RULE_order_by_clause = 401, 
		RULE_for_clause = 402, RULE_xml_common_directives = 403, RULE_order_by_expression = 404, 
		RULE_group_by_item = 405, RULE_option_clause = 406, RULE_option = 407, 
		RULE_optimize_for_arg = 408, RULE_select_list = 409, RULE_udt_method_arguments = 410, 
		RULE_asterisk = 411, RULE_column_elem = 412, RULE_udt_elem = 413, RULE_expression_elem = 414, 
		RULE_select_list_elem = 415, RULE_table_sources = 416, RULE_table_source = 417, 
		RULE_table_source_item_joined = 418, RULE_table_source_item = 419, RULE_open_xml = 420, 
		RULE_open_json = 421, RULE_json_declaration = 422, RULE_json_column_declaration = 423, 
		RULE_schema_declaration = 424, RULE_column_declaration = 425, RULE_change_table = 426, 
		RULE_change_table_changes = 427, RULE_change_table_version = 428, RULE_join_part = 429, 
		RULE_join_on = 430, RULE_cross_join = 431, RULE_apply = 432, RULE_pivot = 433, 
		RULE_unpivot = 434, RULE_pivot_clause = 435, RULE_unpivot_clause = 436, 
		RULE_full_column_name_list = 437, RULE_table_name_with_hint = 438, RULE_rowset_function = 439, 
		RULE_bulk_option = 440, RULE_derived_table = 441, RULE_function_call = 442, 
		RULE_freetext_function = 443, RULE_freetext_predicate = 444, RULE_build_in_functions = 445, 
		RULE_xml_data_type_methods = 446, RULE_value_method = 447, RULE_value_call = 448, 
		RULE_query_method = 449, RULE_query_call = 450, RULE_exist_method = 451, 
		RULE_exist_call = 452, RULE_modify_method = 453, RULE_modify_call = 454, 
		RULE_nodes_method = 455, RULE_switch_section = 456, RULE_switch_search_condition_section = 457, 
		RULE_as_column_alias = 458, RULE_as_table_alias = 459, RULE_table_alias = 460, 
		RULE_with_table_hints = 461, RULE_insert_with_table_hints = 462, RULE_table_hint = 463, 
		RULE_index_value = 464, RULE_column_alias_list = 465, RULE_column_alias = 466, 
		RULE_table_value_constructor = 467, RULE_expression_list = 468, RULE_ranking_windowed_function = 469, 
		RULE_aggregate_windowed_function = 470, RULE_analytic_windowed_function = 471, 
		RULE_all_distinct_expression = 472, RULE_over_clause = 473, RULE_row_or_range_clause = 474, 
		RULE_window_frame_extent = 475, RULE_window_frame_bound = 476, RULE_window_frame_preceding = 477, 
		RULE_window_frame_following = 478, RULE_create_database_option = 479, 
		RULE_database_filestream_option = 480, RULE_database_file_spec = 481, 
		RULE_file_group = 482, RULE_file_spec = 483, RULE_entity_name = 484, RULE_entity_name_for_azure_dw = 485, 
		RULE_entity_name_for_parallel_dw = 486, RULE_full_table_name = 487, RULE_table_name = 488, 
		RULE_simple_name = 489, RULE_func_proc_name_schema = 490, RULE_func_proc_name_database_schema = 491, 
		RULE_func_proc_name_server_database_schema = 492, RULE_ddl_object = 493, 
		RULE_full_column_name = 494, RULE_column_name_list_with_order = 495, RULE_insert_column_name_list = 496, 
		RULE_insert_column_id = 497, RULE_column_name_list = 498, RULE_cursor_name = 499, 
		RULE_on_off = 500, RULE_clustered = 501, RULE_null_notnull = 502, RULE_null_or_default = 503, 
		RULE_scalar_function_name = 504, RULE_begin_conversation_timer = 505, 
		RULE_begin_conversation_dialog = 506, RULE_contract_name = 507, RULE_service_name = 508, 
		RULE_end_conversation = 509, RULE_waitfor_conversation = 510, RULE_get_conversation = 511, 
		RULE_queue_id = 512, RULE_send_conversation = 513, RULE_data_type = 514, 
		RULE_default_value = 515, RULE_constant = 516, RULE_sign = 517, RULE_keyword = 518, 
		RULE_id = 519, RULE_simple_id = 520, RULE_comparison_operator = 521, RULE_assignment_operator = 522, 
		RULE_file_size = 523;
	private static String[] makeRuleNames() {
		return new String[] {
			"tsql_file", "batch", "batch_level_statement", "sql_clauses", "dml_clause", 
			"ddl_clause", "backup_statement", "cfl_statement", "block_statement", 
			"break_statement", "continue_statement", "goto_statement", "return_statement", 
			"if_statement", "throw_statement", "throw_error_number", "throw_message", 
			"throw_state", "try_catch_statement", "waitfor_statement", "while_statement", 
			"print_statement", "raiseerror_statement", "empty_statement", "another_statement", 
			"alter_application_role", "create_application_role", "drop_aggregate", 
			"drop_application_role", "alter_assembly", "alter_assembly_start", "alter_assembly_clause", 
			"alter_assembly_from_clause", "alter_assembly_from_clause_start", "alter_assembly_drop_clause", 
			"alter_assembly_drop_multiple_files", "alter_assembly_drop", "alter_assembly_add_clause", 
			"alter_asssembly_add_clause_start", "alter_assembly_client_file_clause", 
			"alter_assembly_file_name", "alter_assembly_file_bits", "alter_assembly_as", 
			"alter_assembly_with_clause", "alter_assembly_with", "client_assembly_specifier", 
			"assembly_option", "network_file_share", "network_computer", "network_file_start", 
			"file_path", "file_directory_path_separator", "local_file", "local_drive", 
			"multiple_local_files", "multiple_local_file_start", "create_assembly", 
			"drop_assembly", "alter_asymmetric_key", "alter_asymmetric_key_start", 
			"asymmetric_key_option", "asymmetric_key_option_start", "asymmetric_key_password_change_option", 
			"create_asymmetric_key", "drop_asymmetric_key", "alter_authorization", 
			"authorization_grantee", "entity_to", "colon_colon", "alter_authorization_start", 
			"alter_authorization_for_sql_database", "alter_authorization_for_azure_dw", 
			"alter_authorization_for_parallel_dw", "class_type", "class_type_for_sql_database", 
			"class_type_for_azure_dw", "class_type_for_parallel_dw", "drop_availability_group", 
			"alter_availability_group", "alter_availability_group_start", "alter_availability_group_options", 
			"ip_v4_failover", "ip_v6_failover", "create_or_alter_broker_priority", 
			"drop_broker_priority", "alter_certificate", "alter_column_encryption_key", 
			"create_column_encryption_key", "drop_certificate", "drop_column_encryption_key", 
			"drop_column_master_key", "drop_contract", "drop_credential", "drop_cryptograhic_provider", 
			"drop_database", "drop_database_audit_specification", "drop_database_encryption_key", 
			"drop_database_scoped_credential", "drop_default", "drop_endpoint", "drop_external_data_source", 
			"drop_external_file_format", "drop_external_library", "drop_external_resource_pool", 
			"drop_external_table", "drop_event_notifications", "drop_event_session", 
			"drop_fulltext_catalog", "drop_fulltext_index", "drop_fulltext_stoplist", 
			"drop_login", "drop_master_key", "drop_message_type", "drop_partition_function", 
			"drop_partition_scheme", "drop_queue", "drop_remote_service_binding", 
			"drop_resource_pool", "drop_db_role", "drop_route", "drop_rule", "drop_schema", 
			"drop_search_property_list", "drop_security_policy", "drop_sequence", 
			"drop_server_audit", "drop_server_audit_specification", "drop_server_role", 
			"drop_service", "drop_signature", "drop_statistics_name_azure_dw_and_pdw", 
			"drop_symmetric_key", "drop_synonym", "drop_user", "drop_workload_group", 
			"drop_xml_schema_collection", "disable_trigger", "enable_trigger", "lock_table", 
			"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
			"alter_cryptographic_provider", "create_cryptographic_provider", "create_event_notification", 
			"create_or_alter_event_session", "event_session_predicate_expression", 
			"event_session_predicate_factor", "event_session_predicate_leaf", "alter_external_data_source", 
			"alter_external_library", "create_external_library", "alter_external_resource_pool", 
			"create_external_resource_pool", "alter_fulltext_catalog", "create_fulltext_catalog", 
			"alter_fulltext_stoplist", "create_fulltext_stoplist", "alter_login_sql_server", 
			"create_login_sql_server", "alter_login_azure_sql", "create_login_azure_sql", 
			"alter_login_azure_sql_dw_and_pdw", "create_login_pdw", "alter_master_key_sql_server", 
			"create_master_key_sql_server", "alter_master_key_azure_sql", "create_master_key_azure_sql", 
			"alter_message_type", "alter_partition_function", "alter_partition_scheme", 
			"alter_remote_service_binding", "create_remote_service_binding", "create_resource_pool", 
			"alter_resource_governor", "alter_db_role", "create_db_role", "create_route", 
			"create_rule", "alter_schema_sql", "create_schema", "create_schema_azure_sql_dw_and_pdw", 
			"alter_schema_azure_sql_dw_and_pdw", "create_search_property_list", "create_security_policy", 
			"alter_sequence", "create_sequence", "alter_server_audit", "create_server_audit", 
			"alter_server_audit_specification", "create_server_audit_specification", 
			"alter_server_configuration", "alter_server_role", "create_server_role", 
			"alter_server_role_pdw", "alter_service", "create_service", "alter_service_master_key", 
			"alter_symmetric_key", "create_symmetric_key", "create_synonym", "alter_user", 
			"create_user", "create_user_azure_sql_dw", "alter_user_azure_sql", "alter_workload_group", 
			"create_workload_group", "create_xml_schema_collection", "create_queue", 
			"queue_settings", "alter_queue", "queue_action", "queue_rebuild_options", 
			"create_contract", "conversation_statement", "message_statement", "merge_statement", 
			"when_matches", "merge_matched", "merge_not_matched", "delete_statement", 
			"delete_statement_from", "insert_statement", "insert_statement_value", 
			"receive_statement", "select_statement_standalone", "select_statement", 
			"time", "update_statement", "output_clause", "output_dml_list_elem", 
			"output_column_name", "create_database", "create_index", "create_xml_index", 
			"create_or_alter_procedure", "create_or_alter_trigger", "create_or_alter_dml_trigger", 
			"dml_trigger_option", "dml_trigger_operation", "create_or_alter_ddl_trigger", 
			"ddl_trigger_operation", "create_or_alter_function", "func_body_returns_select", 
			"func_body_returns_table", "func_body_returns_scalar", "procedure_param", 
			"procedure_option", "function_option", "create_statistics", "update_statistics", 
			"create_table", "table_indices", "table_options", "create_view", "view_attribute", 
			"alter_table", "alter_database", "database_optionspec", "auto_option", 
			"change_tracking_option", "change_tracking_option_list", "containment_option", 
			"cursor_option", "alter_endpoint", "database_mirroring_option", "mirroring_set_option", 
			"mirroring_partner", "mirroring_witness", "witness_partner_equal", "partner_option", 
			"witness_option", "witness_server", "partner_server", "mirroring_host_port_seperator", 
			"partner_server_tcp_prefix", "port_number", "host", "date_correlation_optimization_option", 
			"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
			"delayed_durability_option", "external_access_option", "hadr_options", 
			"mixed_page_allocation_option", "parameterization_option", "recovery_option", 
			"service_broker_option", "snapshot_option", "sql_option", "target_recovery_time_option", 
			"termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
			"drop_backward_compatible_index", "drop_procedure", "drop_trigger", "drop_dml_trigger", 
			"drop_ddl_trigger", "drop_function", "drop_statistics", "drop_table", 
			"drop_view", "create_type", "drop_type", "rowset_function_limited", "openquery", 
			"opendatasource", "declare_statement", "xml_declaration", "cursor_statement", 
			"backup_database", "backup_log", "backup_certificate", "backup_master_key", 
			"backup_service_master_key", "kill_statement", "kill_process", "kill_query_notification", 
			"kill_stats_job", "execute_statement", "execute_body_batch", "execute_body", 
			"execute_statement_arg", "execute_statement_arg_named", "execute_statement_arg_unnamed", 
			"execute_parameter", "execute_var_string", "security_statement", "principal_id", 
			"create_certificate", "existing_keys", "private_key_options", "generate_new_keys", 
			"date_options", "open_key", "close_key", "create_key", "key_options", 
			"algorithm", "encryption_mechanism", "decryption_mechanism", "grant_permission", 
			"set_statement", "transaction_statement", "go_batch_statement", "go_statement", 
			"use_statement", "setuser_statement", "reconfigure_statement", "shutdown_statement", 
			"dbcc_special", "dbcc_clause", "dbcc_command", "dbcc_options", "execute_clause", 
			"declare_local", "table_type_definition", "table_type_indices", "xml_type_definition", 
			"xml_schema_collection", "column_def_table_constraints", "column_def_table_constraint", 
			"column_definition", "materialized_column_definition", "column_constraint", 
			"table_constraint", "on_delete", "on_update", "index_options", "index_option", 
			"declare_cursor", "declare_set_cursor_common", "declare_set_cursor_common_partial", 
			"fetch_cursor", "set_special", "constant_LOCAL_ID", "expression", "time_zone", 
			"primitive_expression", "case_expression", "unary_operator_expression", 
			"bracket_expression", "constant_expression", "subquery", "with_expression", 
			"common_table_expression", "update_elem", "update_elem_merge", "search_condition", 
			"predicate_br", "predicate", "query_expression", "sql_union", "query_specification", 
			"top_clause", "top_percent", "top_count", "order_by_clause", "for_clause", 
			"xml_common_directives", "order_by_expression", "group_by_item", "option_clause", 
			"option", "optimize_for_arg", "select_list", "udt_method_arguments", 
			"asterisk", "column_elem", "udt_elem", "expression_elem", "select_list_elem", 
			"table_sources", "table_source", "table_source_item_joined", "table_source_item", 
			"open_xml", "open_json", "json_declaration", "json_column_declaration", 
			"schema_declaration", "column_declaration", "change_table", "change_table_changes", 
			"change_table_version", "join_part", "join_on", "cross_join", "apply", 
			"pivot", "unpivot", "pivot_clause", "unpivot_clause", "full_column_name_list", 
			"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
			"function_call", "freetext_function", "freetext_predicate", "build_in_functions", 
			"xml_data_type_methods", "value_method", "value_call", "query_method", 
			"query_call", "exist_method", "exist_call", "modify_method", "modify_call", 
			"nodes_method", "switch_section", "switch_search_condition_section", 
			"as_column_alias", "as_table_alias", "table_alias", "with_table_hints", 
			"insert_with_table_hints", "table_hint", "index_value", "column_alias_list", 
			"column_alias", "table_value_constructor", "expression_list", "ranking_windowed_function", 
			"aggregate_windowed_function", "analytic_windowed_function", "all_distinct_expression", 
			"over_clause", "row_or_range_clause", "window_frame_extent", "window_frame_bound", 
			"window_frame_preceding", "window_frame_following", "create_database_option", 
			"database_filestream_option", "database_file_spec", "file_group", "file_spec", 
			"entity_name", "entity_name_for_azure_dw", "entity_name_for_parallel_dw", 
			"full_table_name", "table_name", "simple_name", "func_proc_name_schema", 
			"func_proc_name_database_schema", "func_proc_name_server_database_schema", 
			"ddl_object", "full_column_name", "column_name_list_with_order", "insert_column_name_list", 
			"insert_column_id", "column_name_list", "cursor_name", "on_off", "clustered", 
			"null_notnull", "null_or_default", "scalar_function_name", "begin_conversation_timer", 
			"begin_conversation_dialog", "contract_name", "service_name", "end_conversation", 
			"waitfor_conversation", "get_conversation", "queue_id", "send_conversation", 
			"data_type", "default_value", "constant", "sign", "keyword", "id", "simple_id", 
			"comparison_operator", "assignment_operator", "file_size"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'ADD'", "'ALL'", "'ALTER'", "'AND'", "'ANY'", "'AS'", "'ASC'", 
			"'AUTHORIZATION'", "'\\'", "'BACKUP'", "'BEGIN'", "'BETWEEN'", "'BREAK'", 
			"'BROWSE'", "'BULK'", "'BY'", "'CASCADE'", "'CASE'", "'CHECK'", "'CHECKPOINT'", 
			"'CLOSE'", "'CLUSTERED'", "'COALESCE'", "'COLLATE'", "'COLUMN'", "'COMMIT'", 
			"'COMPUTE'", "'CONSTRAINT'", "'CONTAINS'", "'CONTAINSTABLE'", "'CONTINUE'", 
			null, "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
			"'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DBCC'", 
			"'DEALLOCATE'", "'DECLARE'", "'DEFAULT'", "'DELETE'", "'DENY'", "'DESC'", 
			"'DISK'", "'DISTINCT'", "'DISTRIBUTED'", "'DOUBLE'", "'\\\\'", "'//'", 
			"'DROP'", "'DUMP'", "'ELSE'", "'END'", "'ERRLVL'", "'ESCAPE'", "'EXCEPT'", 
			null, "'EXISTS'", "'EXIT'", "'EXTERNAL'", "'FETCH'", "'FILE'", "'FILLFACTOR'", 
			"'FOR'", "'FOREIGN'", "'FREETEXT'", "'FREETEXTTABLE'", "'FROM'", "'FULL'", 
			"'FUNCTION'", "'GOTO'", "'GRANT'", "'GROUP'", "'HAVING'", "'HOLDLOCK'", 
			"'IDENTITY'", "'IDENTITY_INSERT'", "'IDENTITYCOL'", "'IF'", "'IN'", "'INDEX'", 
			"'INNER'", "'INSERT'", "'INTERSECT'", "'INTO'", "'IS'", "'JOIN'", "'KEY'", 
			"'KILL'", "'LEFT'", "'LIKE'", "'LINENO'", "'LOAD'", "'MERGE'", "'NATIONAL'", 
			"'NEGOTIATE'", "'NOCHECK'", "'NONCLUSTERED'", "'NOT'", "'NULL'", "'NULLIF'", 
			"'OF'", "'OFF'", "'OFFSETS'", "'ON'", "'OPEN'", "'OPENDATASOURCE'", "'OPENQUERY'", 
			"'OPENROWSET'", "'OPENJSON'", "'OPENXML'", "'OPTION'", "'OR'", "'ORDER'", 
			"'OUTER'", "'OVER'", "'PERCENT'", "'PIVOT'", "'PLAN'", "'PRECISION'", 
			"'PRIMARY'", "'PRINT'", "'PROC'", "'PROCEDURE'", "'PUBLIC'", "'RAISERROR'", 
			"'RAW'", "'READ'", "'READTEXT'", "'RECONFIGURE'", "'REFERENCES'", "'REPLICATION'", 
			"'RESTORE'", "'RESTRICT'", "'RETURN'", "'REVERT'", "'REVOKE'", "'RIGHT'", 
			"'ROLLBACK'", "'ROWCOUNT'", "'ROWGUIDCOL'", "'RULE'", "'SAVE'", "'SCHEMA'", 
			"'SECURITYAUDIT'", "'SELECT'", "'SEMANTICKEYPHRASETABLE'", "'SEMANTICSIMILARITYDETAILSTABLE'", 
			"'SEMANTICSIMILARITYTABLE'", "'SESSION_USER'", "'SET'", "'SETUSER'", 
			"'SHUTDOWN'", "'SOME'", "'STATISTICS'", "'SYSTEM_USER'", "'TABLE'", "'TABLESAMPLE'", 
			"'TEXTSIZE'", "'THEN'", "'TO'", "'TOP'", "'TRAN'", "'TRANSACTION'", "'TRIGGER'", 
			"'TRUNCATE'", "'TSEQUAL'", "'UNION'", "'UNIQUE'", "'UNPIVOT'", "'UPDATE'", 
			"'UPDATETEXT'", "'USE'", "'USER'", "'VALUES'", "'VARYING'", "'VIEW'", 
			"'WAITFOR'", "'WHEN'", "'WHERE'", "'WHILE'", "'WITH'", "'WITHIN'", "'WRITETEXT'", 
			"'ABSOLUTE'", "'AT'", "'ACCENT_SENSITIVITY'", "'ACTION'", "'ACTIVATION'", 
			"'ACTIVE'", "'ADDRESS'", "'AES_128'", "'AES_192'", "'AES_256'", "'AFFINITY'", 
			"'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ALLOW_ENCRYPTED_VALUE_MODIFICATIONS'", 
			"'ALLOW_SNAPSHOT_ISOLATION'", "'ALLOWED'", "'ANSI_NULL_DEFAULT'", "'ANSI_NULLS'", 
			"'ANSI_PADDING'", "'ANSI_WARNINGS'", "'APPLICATION_LOG'", "'APPLY'", 
			"'ARITHABORT'", "'ASSEMBLY'", "'AUDIT'", "'AUDIT_GUID'", "'AUTO'", "'AUTO_CLEANUP'", 
			"'AUTO_CLOSE'", "'AUTO_CREATE_STATISTICS'", "'AUTO_SHRINK'", "'AUTO_UPDATE_STATISTICS'", 
			"'AUTO_UPDATE_STATISTICS_ASYNC'", "'AVAILABILITY'", "'AVG'", "'BACKUP_PRIORITY'", 
			"'BEGIN_DIALOG'", "'BIGINT'", "'BINARY'", "'BINARY BASE64'", "'BINARY_CHECKSUM'", 
			"'BINDING'", "'BLOB_STORAGE'", "'BROKER'", "'BROKER_INSTANCE'", "'BULK_LOGGED'", 
			"'CALLER'", "'CAP_CPU_PERCENT'", "'CAST'", "'TRY_CAST'", "'CATALOG'", 
			"'CATCH'", "'CHANGE_RETENTION'", "'CHANGE_TRACKING'", "'CHECKSUM'", "'CHECKSUM_AGG'", 
			"'CLEANUP'", "'COLLECTION'", "'COLUMN_MASTER_KEY'", "'COMMITTED'", "'COMPATIBILITY_LEVEL'", 
			"'CONCAT'", "'CONCAT_NULL_YIELDS_NULL'", "'CONTENT'", "'CONTROL'", "'COOKIE'", 
			"'COUNT'", "'COUNT_BIG'", "'COUNTER'", "'CPU'", "'CREATE_NEW'", "'CREATION_DISPOSITION'", 
			"'CREDENTIAL'", "'CRYPTOGRAPHIC'", "'CUME_DIST'", "'CURSOR_CLOSE_ON_COMMIT'", 
			"'CURSOR_DEFAULT'", "'DATA'", "'DATE_CORRELATION_OPTIMIZATION'", "'DATEADD'", 
			"'DATEDIFF'", "'DATENAME'", "'DATEPART'", "'DAYS'", "'DB_CHAINING'", 
			"'DB_FAILOVER'", "'DECRYPTION'", null, "'DEFAULT_FULLTEXT_LANGUAGE'", 
			"'DEFAULT_LANGUAGE'", "'DELAY'", "'DELAYED_DURABILITY'", "'DELETED'", 
			"'DENSE_RANK'", "'DEPENDENTS'", "'DES'", "'DESCRIPTION'", "'DESX'", "'DHCP'", 
			"'DIALOG'", "'DIRECTORY_NAME'", "'DISABLE'", "'DISABLE_BROKER'", "'DISABLED'", 
			null, "'DOCUMENT'", "'DYNAMIC'", "'ELEMENTS'", "'EMERGENCY'", "'EMPTY'", 
			"'ENABLE'", "'ENABLE_BROKER'", "'ENCRYPTED_VALUE'", "'ENCRYPTION'", "'ENDPOINT_URL'", 
			"'ERROR_BROKER_CONVERSATIONS'", "'EXCLUSIVE'", "'EXECUTABLE'", "'EXIST'", 
			"'EXPAND'", "'EXPIRY_DATE'", "'EXPLICIT'", "'FAIL_OPERATION'", "'FAILOVER_MODE'", 
			"'FAILURE'", "'FAILURE_CONDITION_LEVEL'", "'FAST'", "'FAST_FORWARD'", 
			"'FILEGROUP'", "'FILEGROWTH'", "'FILENAME'", "'FILEPATH'", "'FILESTREAM'", 
			"'FILTER'", "'FIRST'", "'FIRST_VALUE'", "'FOLLOWING'", "'FORCE'", "'FORCE_FAILOVER_ALLOW_DATA_LOSS'", 
			"'FORCED'", "'FORMAT'", "'FORWARD_ONLY'", "'FULLSCAN'", "'FULLTEXT'", 
			"'GB'", "'GETDATE'", "'GETUTCDATE'", "'GLOBAL'", null, "'GO'", "'GROUP_MAX_REQUESTS'", 
			"'GROUPING'", "'GROUPING_ID'", "'HADR'", "'HASH'", "'HEALTH_CHECK_TIMEOUT'", 
			"'HIGH'", "'HONOR_BROKER_PRIORITY'", "'HOURS'", "'IDENTITY_VALUE'", "'IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX'", 
			"'IMMEDIATE'", "'IMPERSONATE'", "'IMPORTANCE'", "'INCLUDE_NULL_VALUES'", 
			"'INCREMENTAL'", "'INITIATOR'", "'INPUT'", "'INSENSITIVE'", "'INSERTED'", 
			"'INT'", "'IP'", "'ISOLATION'", "'JOB'", "'JSON'", "'KB'", "'KEEP'", 
			"'KEEPFIXED'", "'KEY_SOURCE'", "'KEYS'", "'KEYSET'", "'LAG'", "'LAST'", 
			"'LAST_VALUE'", "'LEAD'", "'LEVEL'", "'LIST'", "'LISTENER'", "'LISTENER_URL'", 
			"'LOB_COMPACTION'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCK_ESCALATION'", 
			"'LOGIN'", "'LOOP'", "'LOW'", "'MANUAL'", "'MARK'", "'MATERIALIZED'", 
			"'MAX'", "'MAX_CPU_PERCENT'", "'MAX_DOP'", "'MAX_FILES'", "'MAX_IOPS_PER_VOLUME'", 
			"'MAX_MEMORY_PERCENT'", "'MAX_PROCESSES'", "'MAX_QUEUE_READERS'", "'MAX_ROLLOVER_FILES'", 
			"'MAXDOP'", "'MAXRECURSION'", "'MAXSIZE'", "'MB'", "'MEDIUM'", "'MEMORY_OPTIMIZED_DATA'", 
			"'MESSAGE'", "'MIN'", "'MIN_ACTIVE_ROWVERSION'", "'MIN_CPU_PERCENT'", 
			"'MIN_IOPS_PER_VOLUME'", "'MIN_MEMORY_PERCENT'", "'MINUTES'", "'MIRROR_ADDRESS'", 
			"'MIXED_PAGE_ALLOCATION'", "'MODE'", "'MODIFY'", "'MOVE'", "'MULTI_USER'", 
			"'NAME'", "'NESTED_TRIGGERS'", "'NEW_ACCOUNT'", "'NEW_BROKER'", "'NEW_PASSWORD'", 
			"'NEXT'", "'NO'", "'NO_TRUNCATE'", "'NO_WAIT'", "'NOCOUNT'", "'NODES'", 
			"'NOEXPAND'", "'NON_TRANSACTED_ACCESS'", "'NORECOMPUTE'", "'NORECOVERY'", 
			"'NOWAIT'", "'NTILE'", "'NUMANODE'", "'NUMBER'", "'NUMERIC_ROUNDABORT'", 
			"'OBJECT'", "'OFFLINE'", "'OFFSET'", "'OLD_ACCOUNT'", "'ONLINE'", "'ONLY'", 
			"'OPEN_EXISTING'", "'OPTIMISTIC'", "'OPTIMIZE'", "'OUT'", "'OUTPUT'", 
			"'OVERRIDE'", "'OWNER'", "'PAGE_VERIFY'", "'PARAMETERIZATION'", "'PARTITION'", 
			"'PARTITIONS'", "'PARTNER'", "'PATH'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
			"'PERCENTILE_DISC'", "'POISON_MESSAGE_HANDLING'", "'POOL'", "'PORT'", 
			"'PRECEDING'", "'PRIMARY_ROLE'", "'PRIOR'", "'PRIORITY'", "'PRIORITY_LEVEL'", 
			"'PRIVATE'", "'PRIVATE_KEY'", "'PRIVILEGES'", "'PROCEDURE_NAME'", "'PROPERTY'", 
			"'PROVIDER'", "'PROVIDER_KEY_NAME'", "'QUERY'", "'QUEUE'", "'QUEUE_DELAY'", 
			"'QUOTED_IDENTIFIER'", "'RANGE'", "'RANK'", "'RC2'", "'RC4'", "'RC4_128'", 
			"'READ_COMMITTED_SNAPSHOT'", "'READ_ONLY'", "'READ_ONLY_ROUTING_LIST'", 
			"'READ_WRITE'", "'READONLY'", "'REBUILD'", "'RECEIVE'", "'RECOMPILE'", 
			"'RECOVERY'", "'RECURSIVE_TRIGGERS'", "'RELATIVE'", "'REMOTE'", "'REMOTE_SERVICE_NAME'", 
			"'REMOVE'", "'REORGANIZE'", "'REPEATABLE'", "'REPLICA'", "'REQUEST_MAX_CPU_TIME_SEC'", 
			"'REQUEST_MAX_MEMORY_GRANT_PERCENT'", "'REQUEST_MEMORY_GRANT_TIMEOUT_SEC'", 
			"'REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT'", "'RESERVE_DISK_SPACE'", 
			"'RESOURCE'", "'RESOURCE_MANAGER_LOCATION'", "'RESTRICTED_USER'", "'RETENTION'", 
			"'ROBUST'", "'ROOT'", "'ROUTE'", "'ROW'", "'ROW_NUMBER'", "'ROWGUID'", 
			"'ROWS'", "'SAMPLE'", "'SCHEMABINDING'", "'SCOPED'", "'SCROLL'", "'SCROLL_LOCKS'", 
			"'SEARCH'", "'SECONDARY'", "'SECONDARY_ONLY'", "'SECONDARY_ROLE'", "'SECONDS'", 
			"'SECRET'", "'SECURITY'", "'SECURITY_LOG'", "'SEEDING_MODE'", "'SELF'", 
			"'SEMI_SENSITIVE'", "'SEND'", "'SENT'", "'SEQUENCE'", "'SERIALIZABLE'", 
			"'SESSION_TIMEOUT'", "'SETERROR'", "'SHARE'", "'SHOWPLAN'", "'SIGNATURE'", 
			"'SIMPLE'", "'SINGLE_USER'", "'SIZE'", "'SMALLINT'", "'SNAPSHOT'", "'SPATIAL_WINDOW_MAX_CELLS'", 
			"'STANDBY'", "'START_DATE'", "'STATIC'", "'STATS_STREAM'", "'STATUS'", 
			"'STATUSONLY'", "'STDEV'", "'STDEVP'", "'STOPLIST'", "'STRING_AGG'", 
			"'STUFF'", "'SUBJECT'", "'SUBSCRIPTION'", "'SUM'", "'SUSPEND'", "'SYMMETRIC'", 
			"'SYNCHRONOUS_COMMIT'", "'SYNONYM'", "'SYSTEM'", "'TAKE'", "'TARGET_RECOVERY_TIME'", 
			"'TB'", "'TEXTIMAGE_ON'", "'THROW'", "'TIES'", "'TIME'", "'TIMEOUT'", 
			"'TIMER'", "'TINYINT'", "'TORN_PAGE_DETECTION'", "'TRANSFORM_NOISE_WORDS'", 
			"'TRIPLE_DES'", "'TRIPLE_DES_3KEY'", "'TRUSTWORTHY'", "'TRY'", "'TSQL'", 
			"'TWO_DIGIT_YEAR_CUTOFF'", "'TYPE'", "'TYPE_WARNING'", "'UNBOUNDED'", 
			"'UNCOMMITTED'", "'UNKNOWN'", "'UNLIMITED'", "'UOW'", "'USING'", "'VALID_XML'", 
			"'VALIDATION'", "'VALUE'", "'VAR'", "'VARBINARY'", "'VARP'", "'VIEW_METADATA'", 
			"'VIEWS'", "'WAIT'", "'WELL_FORMED_XML'", "'WITHOUT_ARRAY_WRAPPER'", 
			"'WORK'", "'WORKLOAD'", "'XML'", "'XMLDATA'", "'XMLNAMESPACES'", "'XMLSCHEMA'", 
			"'XSINIL'", "'ZONE'", "'$ACTION'", "'ABSENT'", "'AES'", "'ALLOW_CONNECTIONS'", 
			"'ALLOW_MULTIPLE_EVENT_LOSS'", "'ALLOW_SINGLE_EVENT_LOSS'", "'ANONYMOUS'", 
			"'APPEND'", "'APPLICATION'", "'ASYMMETRIC'", "'ASYNCHRONOUS_COMMIT'", 
			"'AUTHENTICATION'", "'AUTOMATED_BACKUP_PREFERENCE'", "'AUTOMATIC'", "'AVAILABILITY_MODE'", 
			"'BEFORE'", "'BLOCK'", "'BLOCKSIZE'", "'BLOCKING_HIERARCHY'", "'BUFFER'", 
			"'BUFFERCOUNT'", "'CACHE'", "'CALLED'", "'CERTIFICATE'", "'CHANGETABLE'", 
			"'CHANGES'", "'CHECK_POLICY'", "'CHECK_EXPIRATION'", "'CLASSIFIER_FUNCTION'", 
			"'CLUSTER'", "'COMPRESSION'", "'CONFIGURATION'", "'CONTAINMENT'", "'CONTEXT'", 
			"'CONTINUE_AFTER_ERROR'", "'CONTRACT'", "'CONTRACT_NAME'", "'CONVERSATION'", 
			"'COPY_ONLY'", "'CYCLE'", "'DATA_COMPRESSION'", "'DATA_SOURCE'", "'DATABASE_MIRRORING'", 
			"'DEFAULT_DATABASE'", "'DEFAULT_SCHEMA'", "'DIAGNOSTICS'", "'DIFFERENTIAL'", 
			"'DTC_SUPPORT'", "'ENABLED'", "'ENDPOINT'", "'ERROR'", "'EVENT'", null, 
			"'EVENT_RETENTION_MODE'", "'EXECUTABLE_FILE'", "'EXPIREDATE'", "'EXTENSION'", 
			"'EXTERNAL_ACCESS'", "'FAILOVER'", "'FAILURECONDITIONLEVEL'", "'FAN_IN'", 
			"'FILE_SNAPSHOT'", "'FORCESEEK'", "'FORCE_SERVICE_ALLOW_DATA_LOSS'", 
			"'GET'", "'GOVERNOR'", "'HASHED'", "'HEALTHCHECKTIMEOUT'", "'IIF'", "'IO'", 
			"'INCLUDE'", "'INCREMENT'", "'INFINITE'", "'INIT'", "'INSTEAD'", "'ISNULL'", 
			"'KERBEROS'", "'KEY_PATH'", "'KEY_STORE_PROVIDER_NAME'", "'LANGUAGE'", 
			"'LIBRARY'", "'LIFETIME'", "'LINUX'", "'LISTENER_IP'", "'LISTENER_PORT'", 
			"'LOCAL_SERVICE_NAME'", "'LOG'", "'MATCHED'", "'MASTER'", "'MAX_MEMORY'", 
			"'MAXTRANSFER'", "'MAXVALUE'", "'MAX_DISPATCH_LATENCY'", "'MAX_EVENT_SIZE'", 
			"'MAX_SIZE'", "'MAX_OUTSTANDING_IO_PER_VOLUME'", "'MEDIADESCRIPTION'", 
			"'MEDIANAME'", "'MEMBER'", "'MEMORY_PARTITION_MODE'", "'MESSAGE_FORWARDING'", 
			"'MESSAGE_FORWARD_SIZE'", "'MINVALUE'", "'MIRROR'", "'MUST_CHANGE'", 
			"'NOFORMAT'", "'NOINIT'", "'NONE'", "'NOREWIND'", "'NOSKIP'", "'NOUNLOAD'", 
			"'NO_CHECKSUM'", "'NO_COMPRESSION'", "'NO_EVENT_LOSS'", "'NOTIFICATION'", 
			"'NTLM'", "'OLD_PASSWORD'", "'ON_FAILURE'", "'PAGE'", "'PARAM_NODE'", 
			"'PARTIAL'", "'PASSWORD'", "'PERMISSION_SET'", "'PER_CPU'", "'PER_DB'", 
			"'PER_NODE'", "'PERSISTED'", "'PLATFORM'", "'POLICY'", "'PREDICATE'", 
			"'PROCESS'", "'PROFILE'", "'PYTHON'", "'R'", "'READ_WRITE_FILEGROUPS'", 
			"'REGENERATE'", "'RELATED_CONVERSATION'", "'RELATED_CONVERSATION_GROUP'", 
			"'REQUIRED'", "'RESET'", "'RESTART'", "'RESUME'", "'RETAINDAYS'", "'RETURNS'", 
			"'REWIND'", "'ROLE'", "'RSA_512'", "'RSA_1024'", "'RSA_2048'", "'RSA_3072'", 
			"'RSA_4096'", "'SAFETY'", "'SAFE'", "'SCHEDULER'", "'SCHEME'", "'SERVER'", 
			"'SERVICE'", "'SERVICE_BROKER'", "'SERVICE_NAME'", "'SESSION'", "'SHRINKLOG'", 
			"'SID'", "'SKIP'", "'SOFTNUMA'", "'SOURCE'", "'SPECIFICATION'", "'SPLIT'", 
			"'SQLDUMPERFLAGS'", "'SQLDUMPERPATH'", "'SQLDUMPERTIMEOUTS'", "'STATE'", 
			"'STATS'", "'START'", "'STARTED'", "'STARTUP_STATE'", "'STOP'", "'STOPPED'", 
			"'STOP_ON_ERROR'", "'SUPPORTED'", "'TAPE'", "'TARGET'", "'TCP'", "'TRACK_CAUSALITY'", 
			"'TRANSFER'", "'UNCHECKED'", "'UNLOCK'", "'UNSAFE'", "'URL'", "'USED'", 
			"'VERBOSELOGGING'", "'VISIBILITY'", "'WINDOWS'", "'WITHOUT'", "'WITNESS'", 
			"'VARCHAR'", "'NVARCHAR'", null, null, null, null, "'''", null, null, 
			null, null, null, null, null, null, "'='", "'>'", "'<'", "'!'", "'+='", 
			"'-='", "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'||'", "'.'", 
			"'_'", "'@'", "'#'", "'$'", "'('", "')'", "','", "';'", "':'", "'*'", 
			"'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "AUTHORIZATION", 
			"BACKSLASH", "BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", 
			"BY", "CASCADE", "CASE", "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED", 
			"COALESCE", "COLLATE", "COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINS", 
			"CONTAINSTABLE", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", 
			"CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", 
			"DENY", "DESC", "DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DOUBLE_BACK_SLASH", 
			"DOUBLE_FORWARD_SLASH", "DROP", "DUMP", "ELSE", "END", "ERRLVL", "ESCAPE", 
			"EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXTERNAL", "FETCH", "FILE", "FILLFACTOR", 
			"FOR", "FOREIGN", "FREETEXT", "FREETEXTTABLE", "FROM", "FULL", "FUNCTION", 
			"GOTO", "GRANT", "GROUP", "HAVING", "HOLDLOCK", "IDENTITY", "IDENTITY_INSERT", 
			"IDENTITYCOL", "IF", "IN", "INDEX", "INNER", "INSERT", "INTERSECT", "INTO", 
			"IS", "JOIN", "KEY", "KILL", "LEFT", "LIKE", "LINENO", "LOAD", "MERGE", 
			"NATIONAL", "NEGOTIATE", "NOCHECK", "NONCLUSTERED", "NOT", "NULL", "NULLIF", 
			"OF", "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", "OPENQUERY", 
			"OPENROWSET", "OPENJSON", "OPENXML", "OPTION", "OR", "ORDER", "OUTER", 
			"OVER", "PERCENT", "PIVOT", "PLAN", "PRECISION", "PRIMARY", "PRINT", 
			"PROC", "PROCEDURE", "PUBLIC", "RAISERROR", "RAW", "READ", "READTEXT", 
			"RECONFIGURE", "REFERENCES", "REPLICATION", "RESTORE", "RESTRICT", "RETURN", 
			"REVERT", "REVOKE", "RIGHT", "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", 
			"SAVE", "SCHEMA", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
			"SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", "SESSION_USER", 
			"SET", "SETUSER", "SHUTDOWN", "SOME", "STATISTICS", "SYSTEM_USER", "TABLE", 
			"TABLESAMPLE", "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION", 
			"TRIGGER", "TRUNCATE", "TSEQUAL", "UNION", "UNIQUE", "UNPIVOT", "UPDATE", 
			"UPDATETEXT", "USE", "USER", "VALUES", "VARYING", "VIEW", "WAITFOR", 
			"WHEN", "WHERE", "WHILE", "WITH", "WITHIN", "WRITETEXT", "ABSOLUTE", 
			"AT_KEYWORD", "ACCENT_SENSITIVITY", "ACTION", "ACTIVATION", "ACTIVE", 
			"ADDRESS", "AES_128", "AES_192", "AES_256", "AFFINITY", "AFTER", "AGGREGATE", 
			"ALGORITHM", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", "ALLOW_SNAPSHOT_ISOLATION", 
			"ALLOWED", "ANSI_NULL_DEFAULT", "ANSI_NULLS", "ANSI_PADDING", "ANSI_WARNINGS", 
			"APPLICATION_LOG", "APPLY", "ARITHABORT", "ASSEMBLY", "AUDIT", "AUDIT_GUID", 
			"AUTO", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", "AUTO_SHRINK", 
			"AUTO_UPDATE_STATISTICS", "AUTO_UPDATE_STATISTICS_ASYNC", "AVAILABILITY", 
			"AVG", "BACKUP_PRIORITY", "BEGIN_DIALOG", "BIGINT", "BINARY_KEYWORD", 
			"BINARY_BASE64", "BINARY_CHECKSUM", "BINDING", "BLOB_STORAGE", "BROKER", 
			"BROKER_INSTANCE", "BULK_LOGGED", "CALLER", "CAP_CPU_PERCENT", "CAST", 
			"TRY_CAST", "CATALOG", "CATCH", "CHANGE_RETENTION", "CHANGE_TRACKING", 
			"CHECKSUM", "CHECKSUM_AGG", "CLEANUP", "COLLECTION", "COLUMN_MASTER_KEY", 
			"COMMITTED", "COMPATIBILITY_LEVEL", "CONCAT", "CONCAT_NULL_YIELDS_NULL", 
			"CONTENT", "CONTROL", "COOKIE", "COUNT", "COUNT_BIG", "COUNTER", "CPU", 
			"CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", "CRYPTOGRAPHIC", 
			"CUME_DIST", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", "DATA", "DATE_CORRELATION_OPTIMIZATION", 
			"DATEADD", "DATEDIFF", "DATENAME", "DATEPART", "DAYS", "DB_CHAINING", 
			"DB_FAILOVER", "DECRYPTION", "DEFAULT_DOUBLE_QUOTE", "DEFAULT_FULLTEXT_LANGUAGE", 
			"DEFAULT_LANGUAGE", "DELAY", "DELAYED_DURABILITY", "DELETED", "DENSE_RANK", 
			"DEPENDENTS", "DES", "DESCRIPTION", "DESX", "DHCP", "DIALOG", "DIRECTORY_NAME", 
			"DISABLE", "DISABLE_BROKER", "DISABLED", "DISK_DRIVE", "DOCUMENT", "DYNAMIC", 
			"ELEMENTS", "EMERGENCY", "EMPTY", "ENABLE", "ENABLE_BROKER", "ENCRYPTED_VALUE", 
			"ENCRYPTION", "ENDPOINT_URL", "ERROR_BROKER_CONVERSATIONS", "EXCLUSIVE", 
			"EXECUTABLE", "EXIST", "EXPAND", "EXPIRY_DATE", "EXPLICIT", "FAIL_OPERATION", 
			"FAILOVER_MODE", "FAILURE", "FAILURE_CONDITION_LEVEL", "FAST", "FAST_FORWARD", 
			"FILEGROUP", "FILEGROWTH", "FILENAME", "FILEPATH", "FILESTREAM", "FILTER", 
			"FIRST", "FIRST_VALUE", "FOLLOWING", "FORCE", "FORCE_FAILOVER_ALLOW_DATA_LOSS", 
			"FORCED", "FORMAT", "FORWARD_ONLY", "FULLSCAN", "FULLTEXT", "GB", "GETDATE", 
			"GETUTCDATE", "GLOBAL", "GO_BATCH", "GO", "GROUP_MAX_REQUESTS", "GROUPING", 
			"GROUPING_ID", "HADR", "HASH", "HEALTH_CHECK_TIMEOUT", "HIGH", "HONOR_BROKER_PRIORITY", 
			"HOURS", "IDENTITY_VALUE", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", "IMMEDIATE", 
			"IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCREMENTAL", "INITIATOR", 
			"INPUT", "INSENSITIVE", "INSERTED", "INT", "IP", "ISOLATION", "JOB", 
			"JSON", "KB", "KEEP", "KEEPFIXED", "KEY_SOURCE", "KEYS", "KEYSET", "LAG", 
			"LAST", "LAST_VALUE", "LEAD", "LEVEL", "LIST", "LISTENER", "LISTENER_URL", 
			"LOB_COMPACTION", "LOCAL", "LOCATION", "LOCK", "LOCK_ESCALATION", "LOGIN", 
			"LOOP", "LOW", "MANUAL", "MARK", "MATERIALIZED", "MAX", "MAX_CPU_PERCENT", 
			"MAX_DOP", "MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", 
			"MAX_PROCESSES", "MAX_QUEUE_READERS", "MAX_ROLLOVER_FILES", "MAXDOP", 
			"MAXRECURSION", "MAXSIZE", "MB", "MEDIUM", "MEMORY_OPTIMIZED_DATA", "MESSAGE", 
			"MIN", "MIN_ACTIVE_ROWVERSION", "MIN_CPU_PERCENT", "MIN_IOPS_PER_VOLUME", 
			"MIN_MEMORY_PERCENT", "MINUTES", "MIRROR_ADDRESS", "MIXED_PAGE_ALLOCATION", 
			"MODE", "MODIFY", "MOVE", "MULTI_USER", "NAME", "NESTED_TRIGGERS", "NEW_ACCOUNT", 
			"NEW_BROKER", "NEW_PASSWORD", "NEXT", "NO", "NO_TRUNCATE", "NO_WAIT", 
			"NOCOUNT", "NODES", "NOEXPAND", "NON_TRANSACTED_ACCESS", "NORECOMPUTE", 
			"NORECOVERY", "NOWAIT", "NTILE", "NUMANODE", "NUMBER", "NUMERIC_ROUNDABORT", 
			"OBJECT", "OFFLINE", "OFFSET", "OLD_ACCOUNT", "ONLINE", "ONLY", "OPEN_EXISTING", 
			"OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OVERRIDE", "OWNER", "PAGE_VERIFY", 
			"PARAMETERIZATION", "PARTITION", "PARTITIONS", "PARTNER", "PATH", "PERCENT_RANK", 
			"PERCENTILE_CONT", "PERCENTILE_DISC", "POISON_MESSAGE_HANDLING", "POOL", 
			"PORT", "PRECEDING", "PRIMARY_ROLE", "PRIOR", "PRIORITY", "PRIORITY_LEVEL", 
			"PRIVATE", "PRIVATE_KEY", "PRIVILEGES", "PROCEDURE_NAME", "PROPERTY", 
			"PROVIDER", "PROVIDER_KEY_NAME", "QUERY", "QUEUE", "QUEUE_DELAY", "QUOTED_IDENTIFIER", 
			"RANGE", "RANK", "RC2", "RC4", "RC4_128", "READ_COMMITTED_SNAPSHOT", 
			"READ_ONLY", "READ_ONLY_ROUTING_LIST", "READ_WRITE", "READONLY", "REBUILD", 
			"RECEIVE", "RECOMPILE", "RECOVERY", "RECURSIVE_TRIGGERS", "RELATIVE", 
			"REMOTE", "REMOTE_SERVICE_NAME", "REMOVE", "REORGANIZE", "REPEATABLE", 
			"REPLICA", "REQUEST_MAX_CPU_TIME_SEC", "REQUEST_MAX_MEMORY_GRANT_PERCENT", 
			"REQUEST_MEMORY_GRANT_TIMEOUT_SEC", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", 
			"RESERVE_DISK_SPACE", "RESOURCE", "RESOURCE_MANAGER_LOCATION", "RESTRICTED_USER", 
			"RETENTION", "ROBUST", "ROOT", "ROUTE", "ROW", "ROW_NUMBER", "ROWGUID", 
			"ROWS", "SAMPLE", "SCHEMABINDING", "SCOPED", "SCROLL", "SCROLL_LOCKS", 
			"SEARCH", "SECONDARY", "SECONDARY_ONLY", "SECONDARY_ROLE", "SECONDS", 
			"SECRET", "SECURITY", "SECURITY_LOG", "SEEDING_MODE", "SELF", "SEMI_SENSITIVE", 
			"SEND", "SENT", "SEQUENCE", "SERIALIZABLE", "SESSION_TIMEOUT", "SETERROR", 
			"SHARE", "SHOWPLAN", "SIGNATURE", "SIMPLE", "SINGLE_USER", "SIZE", "SMALLINT", 
			"SNAPSHOT", "SPATIAL_WINDOW_MAX_CELLS", "STANDBY", "START_DATE", "STATIC", 
			"STATS_STREAM", "STATUS", "STATUSONLY", "STDEV", "STDEVP", "STOPLIST", 
			"STRING_AGG", "STUFF", "SUBJECT", "SUBSCRIPTION", "SUM", "SUSPEND", "SYMMETRIC", 
			"SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", "TAKE", "TARGET_RECOVERY_TIME", 
			"TB", "TEXTIMAGE_ON", "THROW", "TIES", "TIME", "TIMEOUT", "TIMER", "TINYINT", 
			"TORN_PAGE_DETECTION", "TRANSFORM_NOISE_WORDS", "TRIPLE_DES", "TRIPLE_DES_3KEY", 
			"TRUSTWORTHY", "TRY", "TSQL", "TWO_DIGIT_YEAR_CUTOFF", "TYPE", "TYPE_WARNING", 
			"UNBOUNDED", "UNCOMMITTED", "UNKNOWN", "UNLIMITED", "UOW", "USING", "VALID_XML", 
			"VALIDATION", "VALUE", "VAR", "VARBINARY_KEYWORD", "VARP", "VIEW_METADATA", 
			"VIEWS", "WAIT", "WELL_FORMED_XML", "WITHOUT_ARRAY_WRAPPER", "WORK", 
			"WORKLOAD", "XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XSINIL", 
			"ZONE", "DOLLAR_ACTION", "ABSENT", "AES", "ALLOW_CONNECTIONS", "ALLOW_MULTIPLE_EVENT_LOSS", 
			"ALLOW_SINGLE_EVENT_LOSS", "ANONYMOUS", "APPEND", "APPLICATION", "ASYMMETRIC", 
			"ASYNCHRONOUS_COMMIT", "AUTHENTICATION", "AUTOMATED_BACKUP_PREFERENCE", 
			"AUTOMATIC", "AVAILABILITY_MODE", "BEFORE", "BLOCK", "BLOCKSIZE", "BLOCKING_HIERARCHY", 
			"BUFFER", "BUFFERCOUNT", "CACHE", "CALLED", "CERTIFICATE", "CHANGETABLE", 
			"CHANGES", "CHECK_POLICY", "CHECK_EXPIRATION", "CLASSIFIER_FUNCTION", 
			"CLUSTER", "COMPRESSION", "CONFIGURATION", "CONTAINMENT", "CONTEXT", 
			"CONTINUE_AFTER_ERROR", "CONTRACT", "CONTRACT_NAME", "CONVERSATION", 
			"COPY_ONLY", "CYCLE", "DATA_COMPRESSION", "DATA_SOURCE", "DATABASE_MIRRORING", 
			"DEFAULT_DATABASE", "DEFAULT_SCHEMA", "DIAGNOSTICS", "DIFFERENTIAL", 
			"DTC_SUPPORT", "ENABLED", "ENDPOINT", "ERROR", "EVENT", "EVENTDATA", 
			"EVENT_RETENTION_MODE", "EXECUTABLE_FILE", "EXPIREDATE", "EXTENSION", 
			"EXTERNAL_ACCESS", "FAILOVER", "FAILURECONDITIONLEVEL", "FAN_IN", "FILE_SNAPSHOT", 
			"FORCESEEK", "FORCE_SERVICE_ALLOW_DATA_LOSS", "GET", "GOVERNOR", "HASHED", 
			"HEALTHCHECKTIMEOUT", "IIF", "IO", "INCLUDE", "INCREMENT", "INFINITE", 
			"INIT", "INSTEAD", "ISNULL", "KERBEROS", "KEY_PATH", "KEY_STORE_PROVIDER_NAME", 
			"LANGUAGE", "LIBRARY", "LIFETIME", "LINUX", "LISTENER_IP", "LISTENER_PORT", 
			"LOCAL_SERVICE_NAME", "LOG", "MATCHED", "MASTER", "MAX_MEMORY", "MAXTRANSFER", 
			"MAXVALUE", "MAX_DISPATCH_LATENCY", "MAX_EVENT_SIZE", "MAX_SIZE", "MAX_OUTSTANDING_IO_PER_VOLUME", 
			"MEDIADESCRIPTION", "MEDIANAME", "MEMBER", "MEMORY_PARTITION_MODE", "MESSAGE_FORWARDING", 
			"MESSAGE_FORWARD_SIZE", "MINVALUE", "MIRROR", "MUST_CHANGE", "NOFORMAT", 
			"NOINIT", "NONE", "NOREWIND", "NOSKIP", "NOUNLOAD", "NO_CHECKSUM", "NO_COMPRESSION", 
			"NO_EVENT_LOSS", "NOTIFICATION", "NTLM", "OLD_PASSWORD", "ON_FAILURE", 
			"PAGE", "PARAM_NODE", "PARTIAL", "PASSWORD", "PERMISSION_SET", "PER_CPU", 
			"PER_DB", "PER_NODE", "PERSISTED", "PLATFORM", "POLICY", "PREDICATE", 
			"PROCESS", "PROFILE", "PYTHON", "R", "READ_WRITE_FILEGROUPS", "REGENERATE", 
			"RELATED_CONVERSATION", "RELATED_CONVERSATION_GROUP", "REQUIRED", "RESET", 
			"RESTART", "RESUME", "RETAINDAYS", "RETURNS", "REWIND", "ROLE", "RSA_512", 
			"RSA_1024", "RSA_2048", "RSA_3072", "RSA_4096", "SAFETY", "SAFE", "SCHEDULER", 
			"SCHEME", "SERVER", "SERVICE", "SERVICE_BROKER", "SERVICE_NAME", "SESSION", 
			"SHRINKLOG", "SID", "SKIP_KEYWORD", "SOFTNUMA", "SOURCE", "SPECIFICATION", 
			"SPLIT", "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", "STATE", 
			"STATS", "START", "STARTED", "STARTUP_STATE", "STOP", "STOPPED", "STOP_ON_ERROR", 
			"SUPPORTED", "TAPE", "TARGET", "TCP", "TRACK_CAUSALITY", "TRANSFER", 
			"UNCHECKED", "UNLOCK", "UNSAFE", "URL", "USED", "VERBOSELOGGING", "VISIBILITY", 
			"WINDOWS", "WITHOUT", "WITNESS", "VARCHAR", "NVARCHAR", "SPACE", "COMMENT", 
			"LINE_COMMENT", "DOUBLE_QUOTE_ID", "SINGLE_QUOTE", "SQUARE_BRACKET_ID", 
			"LOCAL_ID", "DECIMAL", "ID", "STRING", "BINARY", "FLOAT", "REAL", "EQUAL", 
			"GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", 
			"DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", 
			"DOUBLE_BAR", "DOT", "UNDERLINE", "AT", "SHARP", "DOLLAR", "LR_BRACKET", 
			"RR_BRACKET", "COMMA", "SEMI", "COLON", "STAR", "DIVIDE", "MODULE", "PLUS", 
			"MINUS", "BIT_NOT", "BIT_OR", "BIT_AND", "BIT_XOR", "IPV4_ADDR", "IPV6_ADDR", 
			"ANSI_DEFAULTS", "ANSI_NULL_DFLT_OFF", "ANSI_NULL_DFLT_ON", "ARITHIGNORE", 
			"FMTONLY", "FORCEPLAN", "IMPLICIT_TRANSACTIONS", "NOEXEC", "PARSEONLY", 
			"REMOTE_PROC_TRANSACTIONS", "SHOWPLAN_ALL", "SHOWPLAN_TEXT", "SHOWPLAN_XML", 
			"XACT_ABORT", "VERSION"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "TSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public TSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class Tsql_fileContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(TSqlParser.EOF, 0); }
		public List<BatchContext> batch() {
			return getRuleContexts(BatchContext.class);
		}
		public BatchContext batch(int i) {
			return getRuleContext(BatchContext.class,i);
		}
		public Execute_body_batchContext execute_body_batch() {
			return getRuleContext(Execute_body_batchContext.class,0);
		}
		public List<Go_batch_statementContext> go_batch_statement() {
			return getRuleContexts(Go_batch_statementContext.class);
		}
		public Go_batch_statementContext go_batch_statement(int i) {
			return getRuleContext(Go_batch_statementContext.class,i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsql_file; }
	}

	public final Tsql_fileContext tsql_file() throws RecognitionException {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			setState(1064);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 3)) & ~0x3f) == 0 && ((1L << (_la - 3)) & ((1L << (ALTER - 3)) | (1L << (BACKUP - 3)) | (1L << (BEGIN - 3)) | (1L << (BREAK - 3)) | (1L << (CLOSE - 3)) | (1L << (COMMIT - 3)) | (1L << (CONTINUE - 3)) | (1L << (CREATE - 3)) | (1L << (DBCC - 3)) | (1L << (DEALLOCATE - 3)) | (1L << (DECLARE - 3)) | (1L << (DELETE - 3)) | (1L << (DROP - 3)) | (1L << (END - 3)) | (1L << (EXECUTE - 3)) | (1L << (FETCH - 3)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (GOTO - 76)) | (1L << (GRANT - 76)) | (1L << (IF - 76)) | (1L << (INSERT - 76)) | (1L << (KILL - 76)) | (1L << (MERGE - 76)) | (1L << (OPEN - 76)) | (1L << (OPENJSON - 76)) | (1L << (PRECISION - 76)) | (1L << (PRINT - 76)) | (1L << (RAISERROR - 76)) | (1L << (RECONFIGURE - 76)))) != 0) || ((((_la - 140)) & ~0x3f) == 0 && ((1L << (_la - 140)) & ((1L << (RETURN - 140)) | (1L << (REVERT - 140)) | (1L << (ROLLBACK - 140)) | (1L << (SAVE - 140)) | (1L << (SELECT - 140)) | (1L << (SET - 140)) | (1L << (SETUSER - 140)) | (1L << (SHUTDOWN - 140)) | (1L << (TRUNCATE - 140)) | (1L << (UPDATE - 140)) | (1L << (USE - 140)) | (1L << (WAITFOR - 140)) | (1L << (WHILE - 140)) | (1L << (WITH - 140)) | (1L << (ABSOLUTE - 140)) | (1L << (AT_KEYWORD - 140)) | (1L << (ACCENT_SENSITIVITY - 140)) | (1L << (ACTION - 140)) | (1L << (ACTIVATION - 140)) | (1L << (ACTIVE - 140)) | (1L << (ADDRESS - 140)) | (1L << (AES_128 - 140)) | (1L << (AES_192 - 140)) | (1L << (AES_256 - 140)) | (1L << (AFFINITY - 140)) | (1L << (AFTER - 140)) | (1L << (AGGREGATE - 140)) | (1L << (ALGORITHM - 140)))) != 0) || ((((_la - 204)) & ~0x3f) == 0 && ((1L << (_la - 204)) & ((1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 204)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 204)) | (1L << (ALLOWED - 204)) | (1L << (ANSI_NULL_DEFAULT - 204)) | (1L << (ANSI_NULLS - 204)) | (1L << (ANSI_PADDING - 204)) | (1L << (ANSI_WARNINGS - 204)) | (1L << (APPLICATION_LOG - 204)) | (1L << (APPLY - 204)) | (1L << (ARITHABORT - 204)) | (1L << (ASSEMBLY - 204)) | (1L << (AUDIT - 204)) | (1L << (AUDIT_GUID - 204)) | (1L << (AUTO - 204)) | (1L << (AUTO_CLEANUP - 204)) | (1L << (AUTO_CLOSE - 204)) | (1L << (AUTO_CREATE_STATISTICS - 204)) | (1L << (AUTO_SHRINK - 204)) | (1L << (AUTO_UPDATE_STATISTICS - 204)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 204)) | (1L << (AVAILABILITY - 204)) | (1L << (AVG - 204)) | (1L << (BACKUP_PRIORITY - 204)) | (1L << (BEGIN_DIALOG - 204)) | (1L << (BIGINT - 204)) | (1L << (BINARY_KEYWORD - 204)) | (1L << (BINARY_BASE64 - 204)) | (1L << (BINARY_CHECKSUM - 204)) | (1L << (BINDING - 204)) | (1L << (BLOB_STORAGE - 204)) | (1L << (BROKER - 204)) | (1L << (BROKER_INSTANCE - 204)) | (1L << (BULK_LOGGED - 204)) | (1L << (CALLER - 204)) | (1L << (CAP_CPU_PERCENT - 204)) | (1L << (CAST - 204)) | (1L << (TRY_CAST - 204)) | (1L << (CATALOG - 204)) | (1L << (CATCH - 204)) | (1L << (CHANGE_RETENTION - 204)) | (1L << (CHANGE_TRACKING - 204)) | (1L << (CHECKSUM - 204)) | (1L << (CHECKSUM_AGG - 204)) | (1L << (CLEANUP - 204)) | (1L << (COLLECTION - 204)) | (1L << (COLUMN_MASTER_KEY - 204)) | (1L << (COMMITTED - 204)) | (1L << (COMPATIBILITY_LEVEL - 204)) | (1L << (CONCAT - 204)) | (1L << (CONCAT_NULL_YIELDS_NULL - 204)) | (1L << (CONTENT - 204)) | (1L << (CONTROL - 204)) | (1L << (COOKIE - 204)) | (1L << (COUNT - 204)) | (1L << (COUNT_BIG - 204)) | (1L << (COUNTER - 204)) | (1L << (CPU - 204)) | (1L << (CREATE_NEW - 204)) | (1L << (CREATION_DISPOSITION - 204)) | (1L << (CREDENTIAL - 204)) | (1L << (CRYPTOGRAPHIC - 204)) | (1L << (CUME_DIST - 204)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 204)) | (1L << (CURSOR_DEFAULT - 204)))) != 0) || ((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & ((1L << (DATA - 268)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 268)) | (1L << (DATEADD - 268)) | (1L << (DATEDIFF - 268)) | (1L << (DATENAME - 268)) | (1L << (DATEPART - 268)) | (1L << (DAYS - 268)) | (1L << (DB_CHAINING - 268)) | (1L << (DB_FAILOVER - 268)) | (1L << (DECRYPTION - 268)) | (1L << (DEFAULT_DOUBLE_QUOTE - 268)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 268)) | (1L << (DEFAULT_LANGUAGE - 268)) | (1L << (DELAY - 268)) | (1L << (DELAYED_DURABILITY - 268)) | (1L << (DELETED - 268)) | (1L << (DENSE_RANK - 268)) | (1L << (DEPENDENTS - 268)) | (1L << (DES - 268)) | (1L << (DESCRIPTION - 268)) | (1L << (DESX - 268)) | (1L << (DHCP - 268)) | (1L << (DIALOG - 268)) | (1L << (DIRECTORY_NAME - 268)) | (1L << (DISABLE - 268)) | (1L << (DISABLE_BROKER - 268)) | (1L << (DISABLED - 268)) | (1L << (DISK_DRIVE - 268)) | (1L << (DOCUMENT - 268)) | (1L << (DYNAMIC - 268)) | (1L << (ELEMENTS - 268)) | (1L << (EMERGENCY - 268)) | (1L << (EMPTY - 268)) | (1L << (ENABLE - 268)) | (1L << (ENABLE_BROKER - 268)) | (1L << (ENCRYPTED_VALUE - 268)) | (1L << (ENCRYPTION - 268)) | (1L << (ENDPOINT_URL - 268)) | (1L << (ERROR_BROKER_CONVERSATIONS - 268)) | (1L << (EXCLUSIVE - 268)) | (1L << (EXECUTABLE - 268)) | (1L << (EXIST - 268)) | (1L << (EXPAND - 268)) | (1L << (EXPIRY_DATE - 268)) | (1L << (EXPLICIT - 268)) | (1L << (FAIL_OPERATION - 268)) | (1L << (FAILOVER_MODE - 268)) | (1L << (FAILURE - 268)) | (1L << (FAILURE_CONDITION_LEVEL - 268)) | (1L << (FAST - 268)) | (1L << (FAST_FORWARD - 268)) | (1L << (FILEGROUP - 268)) | (1L << (FILEGROWTH - 268)) | (1L << (FILENAME - 268)) | (1L << (FILEPATH - 268)) | (1L << (FILESTREAM - 268)) | (1L << (FILTER - 268)) | (1L << (FIRST - 268)) | (1L << (FIRST_VALUE - 268)) | (1L << (FOLLOWING - 268)) | (1L << (FORCE - 268)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 268)) | (1L << (FORCED - 268)) | (1L << (FORMAT - 268)))) != 0) || ((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (FORWARD_ONLY - 332)) | (1L << (FULLSCAN - 332)) | (1L << (FULLTEXT - 332)) | (1L << (GB - 332)) | (1L << (GETDATE - 332)) | (1L << (GETUTCDATE - 332)) | (1L << (GLOBAL - 332)) | (1L << (GO_BATCH - 332)) | (1L << (GO - 332)) | (1L << (GROUP_MAX_REQUESTS - 332)) | (1L << (GROUPING - 332)) | (1L << (GROUPING_ID - 332)) | (1L << (HADR - 332)) | (1L << (HASH - 332)) | (1L << (HEALTH_CHECK_TIMEOUT - 332)) | (1L << (HIGH - 332)) | (1L << (HONOR_BROKER_PRIORITY - 332)) | (1L << (HOURS - 332)) | (1L << (IDENTITY_VALUE - 332)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 332)) | (1L << (IMMEDIATE - 332)) | (1L << (IMPERSONATE - 332)) | (1L << (IMPORTANCE - 332)) | (1L << (INCLUDE_NULL_VALUES - 332)) | (1L << (INCREMENTAL - 332)) | (1L << (INITIATOR - 332)) | (1L << (INPUT - 332)) | (1L << (INSENSITIVE - 332)) | (1L << (INSERTED - 332)) | (1L << (INT - 332)) | (1L << (IP - 332)) | (1L << (ISOLATION - 332)) | (1L << (JOB - 332)) | (1L << (JSON - 332)) | (1L << (KB - 332)) | (1L << (KEEP - 332)) | (1L << (KEEPFIXED - 332)) | (1L << (KEY_SOURCE - 332)) | (1L << (KEYS - 332)) | (1L << (KEYSET - 332)) | (1L << (LAG - 332)) | (1L << (LAST - 332)) | (1L << (LAST_VALUE - 332)) | (1L << (LEAD - 332)) | (1L << (LEVEL - 332)) | (1L << (LIST - 332)) | (1L << (LISTENER - 332)) | (1L << (LISTENER_URL - 332)) | (1L << (LOB_COMPACTION - 332)) | (1L << (LOCAL - 332)) | (1L << (LOCATION - 332)) | (1L << (LOCK - 332)) | (1L << (LOCK_ESCALATION - 332)) | (1L << (LOGIN - 332)) | (1L << (LOOP - 332)) | (1L << (LOW - 332)) | (1L << (MANUAL - 332)) | (1L << (MARK - 332)) | (1L << (MATERIALIZED - 332)) | (1L << (MAX - 332)) | (1L << (MAX_CPU_PERCENT - 332)) | (1L << (MAX_DOP - 332)) | (1L << (MAX_FILES - 332)) | (1L << (MAX_IOPS_PER_VOLUME - 332)))) != 0) || ((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MAX_MEMORY_PERCENT - 396)) | (1L << (MAX_PROCESSES - 396)) | (1L << (MAX_QUEUE_READERS - 396)) | (1L << (MAX_ROLLOVER_FILES - 396)) | (1L << (MAXDOP - 396)) | (1L << (MAXRECURSION - 396)) | (1L << (MAXSIZE - 396)) | (1L << (MB - 396)) | (1L << (MEDIUM - 396)) | (1L << (MEMORY_OPTIMIZED_DATA - 396)) | (1L << (MESSAGE - 396)) | (1L << (MIN - 396)) | (1L << (MIN_ACTIVE_ROWVERSION - 396)) | (1L << (MIN_CPU_PERCENT - 396)) | (1L << (MIN_IOPS_PER_VOLUME - 396)) | (1L << (MIN_MEMORY_PERCENT - 396)) | (1L << (MINUTES - 396)) | (1L << (MIRROR_ADDRESS - 396)) | (1L << (MIXED_PAGE_ALLOCATION - 396)) | (1L << (MODE - 396)) | (1L << (MODIFY - 396)) | (1L << (MOVE - 396)) | (1L << (MULTI_USER - 396)) | (1L << (NAME - 396)) | (1L << (NESTED_TRIGGERS - 396)) | (1L << (NEW_ACCOUNT - 396)) | (1L << (NEW_BROKER - 396)) | (1L << (NEW_PASSWORD - 396)) | (1L << (NEXT - 396)) | (1L << (NO - 396)) | (1L << (NO_TRUNCATE - 396)) | (1L << (NO_WAIT - 396)) | (1L << (NOCOUNT - 396)) | (1L << (NODES - 396)) | (1L << (NOEXPAND - 396)) | (1L << (NON_TRANSACTED_ACCESS - 396)) | (1L << (NORECOMPUTE - 396)) | (1L << (NORECOVERY - 396)) | (1L << (NOWAIT - 396)) | (1L << (NTILE - 396)) | (1L << (NUMANODE - 396)) | (1L << (NUMBER - 396)) | (1L << (NUMERIC_ROUNDABORT - 396)) | (1L << (OBJECT - 396)) | (1L << (OFFLINE - 396)) | (1L << (OFFSET - 396)) | (1L << (OLD_ACCOUNT - 396)) | (1L << (ONLINE - 396)) | (1L << (ONLY - 396)) | (1L << (OPEN_EXISTING - 396)) | (1L << (OPTIMISTIC - 396)) | (1L << (OPTIMIZE - 396)) | (1L << (OUT - 396)) | (1L << (OUTPUT - 396)) | (1L << (OVERRIDE - 396)) | (1L << (OWNER - 396)) | (1L << (PAGE_VERIFY - 396)) | (1L << (PARAMETERIZATION - 396)) | (1L << (PARTITION - 396)) | (1L << (PARTITIONS - 396)) | (1L << (PARTNER - 396)) | (1L << (PATH - 396)) | (1L << (PERCENT_RANK - 396)) | (1L << (PERCENTILE_CONT - 396)))) != 0) || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (PERCENTILE_DISC - 460)) | (1L << (POISON_MESSAGE_HANDLING - 460)) | (1L << (POOL - 460)) | (1L << (PORT - 460)) | (1L << (PRECEDING - 460)) | (1L << (PRIMARY_ROLE - 460)) | (1L << (PRIOR - 460)) | (1L << (PRIORITY - 460)) | (1L << (PRIORITY_LEVEL - 460)) | (1L << (PRIVATE - 460)) | (1L << (PRIVATE_KEY - 460)) | (1L << (PRIVILEGES - 460)) | (1L << (PROCEDURE_NAME - 460)) | (1L << (PROPERTY - 460)) | (1L << (PROVIDER - 460)) | (1L << (PROVIDER_KEY_NAME - 460)) | (1L << (QUERY - 460)) | (1L << (QUEUE - 460)) | (1L << (QUEUE_DELAY - 460)) | (1L << (QUOTED_IDENTIFIER - 460)) | (1L << (RANGE - 460)) | (1L << (RANK - 460)) | (1L << (RC2 - 460)) | (1L << (RC4 - 460)) | (1L << (RC4_128 - 460)) | (1L << (READ_COMMITTED_SNAPSHOT - 460)) | (1L << (READ_ONLY - 460)) | (1L << (READ_ONLY_ROUTING_LIST - 460)) | (1L << (READ_WRITE - 460)) | (1L << (READONLY - 460)) | (1L << (REBUILD - 460)) | (1L << (RECEIVE - 460)) | (1L << (RECOMPILE - 460)) | (1L << (RECOVERY - 460)) | (1L << (RECURSIVE_TRIGGERS - 460)) | (1L << (RELATIVE - 460)) | (1L << (REMOTE - 460)) | (1L << (REMOTE_SERVICE_NAME - 460)) | (1L << (REMOVE - 460)) | (1L << (REORGANIZE - 460)) | (1L << (REPEATABLE - 460)) | (1L << (REPLICA - 460)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 460)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 460)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 460)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 460)) | (1L << (RESERVE_DISK_SPACE - 460)) | (1L << (RESOURCE - 460)) | (1L << (RESOURCE_MANAGER_LOCATION - 460)) | (1L << (RESTRICTED_USER - 460)) | (1L << (RETENTION - 460)) | (1L << (ROBUST - 460)) | (1L << (ROOT - 460)) | (1L << (ROUTE - 460)) | (1L << (ROW - 460)) | (1L << (ROW_NUMBER - 460)) | (1L << (ROWGUID - 460)) | (1L << (ROWS - 460)) | (1L << (SAMPLE - 460)) | (1L << (SCHEMABINDING - 460)) | (1L << (SCOPED - 460)) | (1L << (SCROLL - 460)) | (1L << (SCROLL_LOCKS - 460)) | (1L << (SEARCH - 460)))) != 0) || ((((_la - 524)) & ~0x3f) == 0 && ((1L << (_la - 524)) & ((1L << (SECONDARY - 524)) | (1L << (SECONDARY_ONLY - 524)) | (1L << (SECONDARY_ROLE - 524)) | (1L << (SECONDS - 524)) | (1L << (SECRET - 524)) | (1L << (SECURITY - 524)) | (1L << (SECURITY_LOG - 524)) | (1L << (SEEDING_MODE - 524)) | (1L << (SELF - 524)) | (1L << (SEMI_SENSITIVE - 524)) | (1L << (SEND - 524)) | (1L << (SENT - 524)) | (1L << (SEQUENCE - 524)) | (1L << (SERIALIZABLE - 524)) | (1L << (SESSION_TIMEOUT - 524)) | (1L << (SETERROR - 524)) | (1L << (SHARE - 524)) | (1L << (SHOWPLAN - 524)) | (1L << (SIGNATURE - 524)) | (1L << (SIMPLE - 524)) | (1L << (SINGLE_USER - 524)) | (1L << (SIZE - 524)) | (1L << (SMALLINT - 524)) | (1L << (SNAPSHOT - 524)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 524)) | (1L << (STANDBY - 524)) | (1L << (START_DATE - 524)) | (1L << (STATIC - 524)) | (1L << (STATS_STREAM - 524)) | (1L << (STATUS - 524)) | (1L << (STATUSONLY - 524)) | (1L << (STDEV - 524)) | (1L << (STDEVP - 524)) | (1L << (STOPLIST - 524)) | (1L << (STRING_AGG - 524)) | (1L << (STUFF - 524)) | (1L << (SUBJECT - 524)) | (1L << (SUBSCRIPTION - 524)) | (1L << (SUM - 524)) | (1L << (SUSPEND - 524)) | (1L << (SYMMETRIC - 524)) | (1L << (SYNCHRONOUS_COMMIT - 524)) | (1L << (SYNONYM - 524)) | (1L << (SYSTEM - 524)) | (1L << (TAKE - 524)) | (1L << (TARGET_RECOVERY_TIME - 524)) | (1L << (TB - 524)) | (1L << (TEXTIMAGE_ON - 524)) | (1L << (THROW - 524)) | (1L << (TIES - 524)) | (1L << (TIME - 524)) | (1L << (TIMEOUT - 524)) | (1L << (TIMER - 524)) | (1L << (TINYINT - 524)) | (1L << (TORN_PAGE_DETECTION - 524)) | (1L << (TRANSFORM_NOISE_WORDS - 524)) | (1L << (TRIPLE_DES - 524)) | (1L << (TRIPLE_DES_3KEY - 524)) | (1L << (TRUSTWORTHY - 524)) | (1L << (TRY - 524)) | (1L << (TSQL - 524)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 524)) | (1L << (TYPE - 524)) | (1L << (TYPE_WARNING - 524)))) != 0) || ((((_la - 588)) & ~0x3f) == 0 && ((1L << (_la - 588)) & ((1L << (UNBOUNDED - 588)) | (1L << (UNCOMMITTED - 588)) | (1L << (UNKNOWN - 588)) | (1L << (UNLIMITED - 588)) | (1L << (UOW - 588)) | (1L << (USING - 588)) | (1L << (VALID_XML - 588)) | (1L << (VALIDATION - 588)) | (1L << (VALUE - 588)) | (1L << (VAR - 588)) | (1L << (VARBINARY_KEYWORD - 588)) | (1L << (VARP - 588)) | (1L << (VIEW_METADATA - 588)) | (1L << (VIEWS - 588)) | (1L << (WAIT - 588)) | (1L << (WELL_FORMED_XML - 588)) | (1L << (WITHOUT_ARRAY_WRAPPER - 588)) | (1L << (WORK - 588)) | (1L << (WORKLOAD - 588)) | (1L << (XML - 588)) | (1L << (XMLDATA - 588)) | (1L << (XMLNAMESPACES - 588)) | (1L << (XMLSCHEMA - 588)) | (1L << (XSINIL - 588)) | (1L << (ZONE - 588)) | (1L << (ABSENT - 588)) | (1L << (AES - 588)) | (1L << (ALLOW_CONNECTIONS - 588)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 588)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 588)) | (1L << (ANONYMOUS - 588)) | (1L << (APPEND - 588)) | (1L << (APPLICATION - 588)) | (1L << (ASYMMETRIC - 588)) | (1L << (ASYNCHRONOUS_COMMIT - 588)) | (1L << (AUTHENTICATION - 588)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 588)) | (1L << (AUTOMATIC - 588)) | (1L << (AVAILABILITY_MODE - 588)) | (1L << (BEFORE - 588)) | (1L << (BLOCK - 588)) | (1L << (BLOCKSIZE - 588)) | (1L << (BLOCKING_HIERARCHY - 588)) | (1L << (BUFFER - 588)) | (1L << (BUFFERCOUNT - 588)) | (1L << (CACHE - 588)) | (1L << (CALLED - 588)) | (1L << (CERTIFICATE - 588)) | (1L << (CHANGETABLE - 588)) | (1L << (CHANGES - 588)) | (1L << (CHECK_POLICY - 588)) | (1L << (CHECK_EXPIRATION - 588)) | (1L << (CLASSIFIER_FUNCTION - 588)) | (1L << (CLUSTER - 588)) | (1L << (COMPRESSION - 588)) | (1L << (CONFIGURATION - 588)) | (1L << (CONTAINMENT - 588)) | (1L << (CONTEXT - 588)) | (1L << (CONTINUE_AFTER_ERROR - 588)) | (1L << (CONTRACT - 588)) | (1L << (CONTRACT_NAME - 588)) | (1L << (CONVERSATION - 588)) | (1L << (COPY_ONLY - 588)))) != 0) || ((((_la - 652)) & ~0x3f) == 0 && ((1L << (_la - 652)) & ((1L << (CYCLE - 652)) | (1L << (DATA_COMPRESSION - 652)) | (1L << (DATA_SOURCE - 652)) | (1L << (DATABASE_MIRRORING - 652)) | (1L << (DEFAULT_DATABASE - 652)) | (1L << (DEFAULT_SCHEMA - 652)) | (1L << (DIAGNOSTICS - 652)) | (1L << (DIFFERENTIAL - 652)) | (1L << (DTC_SUPPORT - 652)) | (1L << (ENABLED - 652)) | (1L << (ENDPOINT - 652)) | (1L << (ERROR - 652)) | (1L << (EVENT - 652)) | (1L << (EVENTDATA - 652)) | (1L << (EVENT_RETENTION_MODE - 652)) | (1L << (EXECUTABLE_FILE - 652)) | (1L << (EXPIREDATE - 652)) | (1L << (EXTENSION - 652)) | (1L << (EXTERNAL_ACCESS - 652)) | (1L << (FAILOVER - 652)) | (1L << (FAILURECONDITIONLEVEL - 652)) | (1L << (FAN_IN - 652)) | (1L << (FILE_SNAPSHOT - 652)) | (1L << (FORCESEEK - 652)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 652)) | (1L << (GET - 652)) | (1L << (GOVERNOR - 652)) | (1L << (HASHED - 652)) | (1L << (HEALTHCHECKTIMEOUT - 652)) | (1L << (IIF - 652)) | (1L << (IO - 652)) | (1L << (INCLUDE - 652)) | (1L << (INCREMENT - 652)) | (1L << (INFINITE - 652)) | (1L << (INIT - 652)) | (1L << (INSTEAD - 652)) | (1L << (ISNULL - 652)) | (1L << (KERBEROS - 652)) | (1L << (KEY_PATH - 652)) | (1L << (KEY_STORE_PROVIDER_NAME - 652)) | (1L << (LANGUAGE - 652)) | (1L << (LIBRARY - 652)) | (1L << (LIFETIME - 652)) | (1L << (LINUX - 652)) | (1L << (LISTENER_IP - 652)) | (1L << (LISTENER_PORT - 652)) | (1L << (LOCAL_SERVICE_NAME - 652)) | (1L << (LOG - 652)) | (1L << (MATCHED - 652)) | (1L << (MASTER - 652)) | (1L << (MAX_MEMORY - 652)) | (1L << (MAXTRANSFER - 652)) | (1L << (MAXVALUE - 652)) | (1L << (MAX_DISPATCH_LATENCY - 652)) | (1L << (MAX_EVENT_SIZE - 652)) | (1L << (MAX_SIZE - 652)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 652)) | (1L << (MEDIADESCRIPTION - 652)) | (1L << (MEDIANAME - 652)) | (1L << (MEMBER - 652)) | (1L << (MEMORY_PARTITION_MODE - 652)) | (1L << (MESSAGE_FORWARDING - 652)) | (1L << (MESSAGE_FORWARD_SIZE - 652)) | (1L << (MINVALUE - 652)))) != 0) || ((((_la - 716)) & ~0x3f) == 0 && ((1L << (_la - 716)) & ((1L << (MIRROR - 716)) | (1L << (MUST_CHANGE - 716)) | (1L << (NOFORMAT - 716)) | (1L << (NOINIT - 716)) | (1L << (NONE - 716)) | (1L << (NOREWIND - 716)) | (1L << (NOSKIP - 716)) | (1L << (NOUNLOAD - 716)) | (1L << (NO_CHECKSUM - 716)) | (1L << (NO_COMPRESSION - 716)) | (1L << (NO_EVENT_LOSS - 716)) | (1L << (NOTIFICATION - 716)) | (1L << (NTLM - 716)) | (1L << (OLD_PASSWORD - 716)) | (1L << (ON_FAILURE - 716)) | (1L << (PAGE - 716)) | (1L << (PARAM_NODE - 716)) | (1L << (PARTIAL - 716)) | (1L << (PASSWORD - 716)) | (1L << (PERMISSION_SET - 716)) | (1L << (PER_CPU - 716)) | (1L << (PER_DB - 716)) | (1L << (PER_NODE - 716)) | (1L << (PERSISTED - 716)) | (1L << (PLATFORM - 716)) | (1L << (POLICY - 716)) | (1L << (PREDICATE - 716)) | (1L << (PROCESS - 716)) | (1L << (PROFILE - 716)) | (1L << (PYTHON - 716)) | (1L << (R - 716)) | (1L << (READ_WRITE_FILEGROUPS - 716)) | (1L << (REGENERATE - 716)) | (1L << (RELATED_CONVERSATION - 716)) | (1L << (RELATED_CONVERSATION_GROUP - 716)) | (1L << (REQUIRED - 716)) | (1L << (RESET - 716)) | (1L << (RESTART - 716)) | (1L << (RESUME - 716)) | (1L << (RETAINDAYS - 716)) | (1L << (RETURNS - 716)) | (1L << (REWIND - 716)) | (1L << (ROLE - 716)) | (1L << (RSA_512 - 716)) | (1L << (RSA_1024 - 716)) | (1L << (RSA_2048 - 716)) | (1L << (RSA_3072 - 716)) | (1L << (RSA_4096 - 716)) | (1L << (SAFETY - 716)) | (1L << (SAFE - 716)) | (1L << (SCHEDULER - 716)) | (1L << (SCHEME - 716)) | (1L << (SERVER - 716)) | (1L << (SERVICE - 716)) | (1L << (SERVICE_BROKER - 716)) | (1L << (SERVICE_NAME - 716)) | (1L << (SESSION - 716)) | (1L << (SID - 716)) | (1L << (SKIP_KEYWORD - 716)) | (1L << (SOFTNUMA - 716)) | (1L << (SOURCE - 716)) | (1L << (SPECIFICATION - 716)) | (1L << (SPLIT - 716)))) != 0) || ((((_la - 780)) & ~0x3f) == 0 && ((1L << (_la - 780)) & ((1L << (SQLDUMPERFLAGS - 780)) | (1L << (SQLDUMPERPATH - 780)) | (1L << (SQLDUMPERTIMEOUT - 780)) | (1L << (STATE - 780)) | (1L << (STATS - 780)) | (1L << (START - 780)) | (1L << (STARTED - 780)) | (1L << (STARTUP_STATE - 780)) | (1L << (STOP - 780)) | (1L << (STOPPED - 780)) | (1L << (STOP_ON_ERROR - 780)) | (1L << (SUPPORTED - 780)) | (1L << (TAPE - 780)) | (1L << (TARGET - 780)) | (1L << (TCP - 780)) | (1L << (TRACK_CAUSALITY - 780)) | (1L << (TRANSFER - 780)) | (1L << (UNCHECKED - 780)) | (1L << (UNLOCK - 780)) | (1L << (UNSAFE - 780)) | (1L << (URL - 780)) | (1L << (USED - 780)) | (1L << (VERBOSELOGGING - 780)) | (1L << (VISIBILITY - 780)) | (1L << (WINDOWS - 780)) | (1L << (WITHOUT - 780)) | (1L << (WITNESS - 780)) | (1L << (VARCHAR - 780)) | (1L << (NVARCHAR - 780)) | (1L << (DOUBLE_QUOTE_ID - 780)) | (1L << (SQUARE_BRACKET_ID - 780)) | (1L << (ID - 780)) | (1L << (DOT - 780)) | (1L << (LR_BRACKET - 780)) | (1L << (SEMI - 780)))) != 0)) {
					{
					{
					setState(1048);
					batch();
					}
					}
					setState(1053);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1054);
				match(EOF);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1055);
				execute_body_batch();
				setState(1059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==GO_BATCH) {
					{
					{
					setState(1056);
					go_batch_statement();
					}
					}
					setState(1061);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1062);
				match(EOF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BatchContext extends ParserRuleContext {
		public Go_batch_statementContext go_batch_statement() {
			return getRuleContext(Go_batch_statementContext.class,0);
		}
		public Execute_body_batchContext execute_body_batch() {
			return getRuleContext(Execute_body_batchContext.class,0);
		}
		public List<Go_statementContext> go_statement() {
			return getRuleContexts(Go_statementContext.class);
		}
		public Go_statementContext go_statement(int i) {
			return getRuleContext(Go_statementContext.class,i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Batch_level_statementContext batch_level_statement() {
			return getRuleContext(Batch_level_statementContext.class,0);
		}
		public BatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch; }
	}

	public final BatchContext batch() throws RecognitionException {
		BatchContext _localctx = new BatchContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_batch);
		try {
			int _alt;
			setState(1092);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1066);
				go_batch_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1068);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					setState(1067);
					execute_body_batch();
					}
					break;
				}
				setState(1076);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					setState(1070);
					go_batch_statement();
					}
					break;
				case 2:
					{
					setState(1072); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1071);
							sql_clauses();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1074); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				}
				setState(1081);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1078);
						go_statement();
						}
						} 
					}
					setState(1083);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,6,_ctx);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1084);
				batch_level_statement();
				setState(1088);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1085);
						go_statement();
						}
						} 
					}
					setState(1090);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1091);
				go_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Batch_level_statementContext extends ParserRuleContext {
		public Create_or_alter_functionContext create_or_alter_function() {
			return getRuleContext(Create_or_alter_functionContext.class,0);
		}
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return getRuleContext(Create_or_alter_procedureContext.class,0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return getRuleContext(Create_or_alter_triggerContext.class,0);
		}
		public Create_viewContext create_view() {
			return getRuleContext(Create_viewContext.class,0);
		}
		public Batch_level_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch_level_statement; }
	}

	public final Batch_level_statementContext batch_level_statement() throws RecognitionException {
		Batch_level_statementContext _localctx = new Batch_level_statementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_batch_level_statement);
		try {
			setState(1098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1094);
				create_or_alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1095);
				create_or_alter_procedure();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1096);
				create_or_alter_trigger();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1097);
				create_view();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clausesContext extends ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return getRuleContext(Dml_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Cfl_statementContext cfl_statement() {
			return getRuleContext(Cfl_statementContext.class,0);
		}
		public Another_statementContext another_statement() {
			return getRuleContext(Another_statementContext.class,0);
		}
		public Ddl_clauseContext ddl_clause() {
			return getRuleContext(Ddl_clauseContext.class,0);
		}
		public Dbcc_specialContext dbcc_special() {
			return getRuleContext(Dbcc_specialContext.class,0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return getRuleContext(Dbcc_clauseContext.class,0);
		}
		public Backup_statementContext backup_statement() {
			return getRuleContext(Backup_statementContext.class,0);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clauses; }
	}

	public final Sql_clausesContext sql_clauses() throws RecognitionException {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sql_clauses);
		try {
			setState(1129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1100);
				dml_clause();
				setState(1102);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					setState(1101);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1104);
				cfl_statement();
				setState(1106);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
				case 1:
					{
					setState(1105);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1108);
				another_statement();
				setState(1110);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					setState(1109);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1112);
				ddl_clause();
				setState(1114);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
				case 1:
					{
					setState(1113);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1116);
				dbcc_special();
				setState(1118);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
				case 1:
					{
					setState(1117);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1120);
				dbcc_clause();
				setState(1122);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
				case 1:
					{
					setState(1121);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1124);
				backup_statement();
				setState(1126);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(1125);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1128);
				match(SEMI);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_clauseContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return getRuleContext(Select_statement_standaloneContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_clause; }
	}

	public final Dml_clauseContext dml_clause() throws RecognitionException {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_dml_clause);
		try {
			setState(1136);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1131);
				merge_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1132);
				delete_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1133);
				insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1134);
				select_statement_standalone();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1135);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_clauseContext extends ParserRuleContext {
		public Alter_application_roleContext alter_application_role() {
			return getRuleContext(Alter_application_roleContext.class,0);
		}
		public Alter_assemblyContext alter_assembly() {
			return getRuleContext(Alter_assemblyContext.class,0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return getRuleContext(Alter_asymmetric_keyContext.class,0);
		}
		public Alter_authorizationContext alter_authorization() {
			return getRuleContext(Alter_authorizationContext.class,0);
		}
		public Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() {
			return getRuleContext(Alter_authorization_for_azure_dwContext.class,0);
		}
		public Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() {
			return getRuleContext(Alter_authorization_for_parallel_dwContext.class,0);
		}
		public Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() {
			return getRuleContext(Alter_authorization_for_sql_databaseContext.class,0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return getRuleContext(Alter_availability_groupContext.class,0);
		}
		public Alter_certificateContext alter_certificate() {
			return getRuleContext(Alter_certificateContext.class,0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return getRuleContext(Alter_column_encryption_keyContext.class,0);
		}
		public Alter_credentialContext alter_credential() {
			return getRuleContext(Alter_credentialContext.class,0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return getRuleContext(Alter_cryptographic_providerContext.class,0);
		}
		public Alter_databaseContext alter_database() {
			return getRuleContext(Alter_databaseContext.class,0);
		}
		public Alter_db_roleContext alter_db_role() {
			return getRuleContext(Alter_db_roleContext.class,0);
		}
		public Alter_endpointContext alter_endpoint() {
			return getRuleContext(Alter_endpointContext.class,0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return getRuleContext(Create_or_alter_event_sessionContext.class,0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return getRuleContext(Alter_external_data_sourceContext.class,0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return getRuleContext(Alter_external_libraryContext.class,0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return getRuleContext(Alter_external_resource_poolContext.class,0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return getRuleContext(Alter_fulltext_catalogContext.class,0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return getRuleContext(Alter_fulltext_stoplistContext.class,0);
		}
		public Alter_login_azure_sqlContext alter_login_azure_sql() {
			return getRuleContext(Alter_login_azure_sqlContext.class,0);
		}
		public Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() {
			return getRuleContext(Alter_login_azure_sql_dw_and_pdwContext.class,0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return getRuleContext(Alter_login_sql_serverContext.class,0);
		}
		public Alter_master_key_azure_sqlContext alter_master_key_azure_sql() {
			return getRuleContext(Alter_master_key_azure_sqlContext.class,0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return getRuleContext(Alter_master_key_sql_serverContext.class,0);
		}
		public Alter_message_typeContext alter_message_type() {
			return getRuleContext(Alter_message_typeContext.class,0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return getRuleContext(Alter_partition_functionContext.class,0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return getRuleContext(Alter_partition_schemeContext.class,0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return getRuleContext(Alter_remote_service_bindingContext.class,0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return getRuleContext(Alter_resource_governorContext.class,0);
		}
		public Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() {
			return getRuleContext(Alter_schema_azure_sql_dw_and_pdwContext.class,0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return getRuleContext(Alter_schema_sqlContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return getRuleContext(Alter_server_auditContext.class,0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return getRuleContext(Alter_server_audit_specificationContext.class,0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return getRuleContext(Alter_server_configurationContext.class,0);
		}
		public Alter_server_roleContext alter_server_role() {
			return getRuleContext(Alter_server_roleContext.class,0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return getRuleContext(Alter_server_role_pdwContext.class,0);
		}
		public Alter_serviceContext alter_service() {
			return getRuleContext(Alter_serviceContext.class,0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return getRuleContext(Alter_service_master_keyContext.class,0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return getRuleContext(Alter_symmetric_keyContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_userContext alter_user() {
			return getRuleContext(Alter_userContext.class,0);
		}
		public Alter_user_azure_sqlContext alter_user_azure_sql() {
			return getRuleContext(Alter_user_azure_sqlContext.class,0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return getRuleContext(Alter_workload_groupContext.class,0);
		}
		public Create_application_roleContext create_application_role() {
			return getRuleContext(Create_application_roleContext.class,0);
		}
		public Create_assemblyContext create_assembly() {
			return getRuleContext(Create_assemblyContext.class,0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return getRuleContext(Create_asymmetric_keyContext.class,0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return getRuleContext(Create_column_encryption_keyContext.class,0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return getRuleContext(Create_column_master_keyContext.class,0);
		}
		public Create_credentialContext create_credential() {
			return getRuleContext(Create_credentialContext.class,0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return getRuleContext(Create_cryptographic_providerContext.class,0);
		}
		public Create_databaseContext create_database() {
			return getRuleContext(Create_databaseContext.class,0);
		}
		public Create_db_roleContext create_db_role() {
			return getRuleContext(Create_db_roleContext.class,0);
		}
		public Create_event_notificationContext create_event_notification() {
			return getRuleContext(Create_event_notificationContext.class,0);
		}
		public Create_external_libraryContext create_external_library() {
			return getRuleContext(Create_external_libraryContext.class,0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return getRuleContext(Create_external_resource_poolContext.class,0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return getRuleContext(Create_fulltext_catalogContext.class,0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return getRuleContext(Create_fulltext_stoplistContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_login_azure_sqlContext create_login_azure_sql() {
			return getRuleContext(Create_login_azure_sqlContext.class,0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return getRuleContext(Create_login_pdwContext.class,0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return getRuleContext(Create_login_sql_serverContext.class,0);
		}
		public Create_master_key_azure_sqlContext create_master_key_azure_sql() {
			return getRuleContext(Create_master_key_azure_sqlContext.class,0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return getRuleContext(Create_master_key_sql_serverContext.class,0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return getRuleContext(Create_or_alter_broker_priorityContext.class,0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return getRuleContext(Create_remote_service_bindingContext.class,0);
		}
		public Create_resource_poolContext create_resource_pool() {
			return getRuleContext(Create_resource_poolContext.class,0);
		}
		public Create_routeContext create_route() {
			return getRuleContext(Create_routeContext.class,0);
		}
		public Create_ruleContext create_rule() {
			return getRuleContext(Create_ruleContext.class,0);
		}
		public Create_schemaContext create_schema() {
			return getRuleContext(Create_schemaContext.class,0);
		}
		public Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() {
			return getRuleContext(Create_schema_azure_sql_dw_and_pdwContext.class,0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return getRuleContext(Create_search_property_listContext.class,0);
		}
		public Create_security_policyContext create_security_policy() {
			return getRuleContext(Create_security_policyContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_server_auditContext create_server_audit() {
			return getRuleContext(Create_server_auditContext.class,0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return getRuleContext(Create_server_audit_specificationContext.class,0);
		}
		public Create_server_roleContext create_server_role() {
			return getRuleContext(Create_server_roleContext.class,0);
		}
		public Create_serviceContext create_service() {
			return getRuleContext(Create_serviceContext.class,0);
		}
		public Create_statisticsContext create_statistics() {
			return getRuleContext(Create_statisticsContext.class,0);
		}
		public Create_symmetric_keyContext create_symmetric_key() {
			return getRuleContext(Create_symmetric_keyContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_userContext create_user() {
			return getRuleContext(Create_userContext.class,0);
		}
		public Create_user_azure_sql_dwContext create_user_azure_sql_dw() {
			return getRuleContext(Create_user_azure_sql_dwContext.class,0);
		}
		public Create_workload_groupContext create_workload_group() {
			return getRuleContext(Create_workload_groupContext.class,0);
		}
		public Create_xml_indexContext create_xml_index() {
			return getRuleContext(Create_xml_indexContext.class,0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return getRuleContext(Create_xml_schema_collectionContext.class,0);
		}
		public Drop_aggregateContext drop_aggregate() {
			return getRuleContext(Drop_aggregateContext.class,0);
		}
		public Drop_application_roleContext drop_application_role() {
			return getRuleContext(Drop_application_roleContext.class,0);
		}
		public Drop_assemblyContext drop_assembly() {
			return getRuleContext(Drop_assemblyContext.class,0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return getRuleContext(Drop_asymmetric_keyContext.class,0);
		}
		public Drop_availability_groupContext drop_availability_group() {
			return getRuleContext(Drop_availability_groupContext.class,0);
		}
		public Drop_broker_priorityContext drop_broker_priority() {
			return getRuleContext(Drop_broker_priorityContext.class,0);
		}
		public Drop_certificateContext drop_certificate() {
			return getRuleContext(Drop_certificateContext.class,0);
		}
		public Drop_column_encryption_keyContext drop_column_encryption_key() {
			return getRuleContext(Drop_column_encryption_keyContext.class,0);
		}
		public Drop_column_master_keyContext drop_column_master_key() {
			return getRuleContext(Drop_column_master_keyContext.class,0);
		}
		public Drop_contractContext drop_contract() {
			return getRuleContext(Drop_contractContext.class,0);
		}
		public Drop_credentialContext drop_credential() {
			return getRuleContext(Drop_credentialContext.class,0);
		}
		public Drop_cryptograhic_providerContext drop_cryptograhic_provider() {
			return getRuleContext(Drop_cryptograhic_providerContext.class,0);
		}
		public Drop_databaseContext drop_database() {
			return getRuleContext(Drop_databaseContext.class,0);
		}
		public Drop_database_audit_specificationContext drop_database_audit_specification() {
			return getRuleContext(Drop_database_audit_specificationContext.class,0);
		}
		public Drop_database_encryption_keyContext drop_database_encryption_key() {
			return getRuleContext(Drop_database_encryption_keyContext.class,0);
		}
		public Drop_database_scoped_credentialContext drop_database_scoped_credential() {
			return getRuleContext(Drop_database_scoped_credentialContext.class,0);
		}
		public Drop_db_roleContext drop_db_role() {
			return getRuleContext(Drop_db_roleContext.class,0);
		}
		public Drop_defaultContext drop_default() {
			return getRuleContext(Drop_defaultContext.class,0);
		}
		public Drop_endpointContext drop_endpoint() {
			return getRuleContext(Drop_endpointContext.class,0);
		}
		public Drop_event_notificationsContext drop_event_notifications() {
			return getRuleContext(Drop_event_notificationsContext.class,0);
		}
		public Drop_event_sessionContext drop_event_session() {
			return getRuleContext(Drop_event_sessionContext.class,0);
		}
		public Drop_external_data_sourceContext drop_external_data_source() {
			return getRuleContext(Drop_external_data_sourceContext.class,0);
		}
		public Drop_external_file_formatContext drop_external_file_format() {
			return getRuleContext(Drop_external_file_formatContext.class,0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return getRuleContext(Drop_external_libraryContext.class,0);
		}
		public Drop_external_resource_poolContext drop_external_resource_pool() {
			return getRuleContext(Drop_external_resource_poolContext.class,0);
		}
		public Drop_external_tableContext drop_external_table() {
			return getRuleContext(Drop_external_tableContext.class,0);
		}
		public Drop_fulltext_catalogContext drop_fulltext_catalog() {
			return getRuleContext(Drop_fulltext_catalogContext.class,0);
		}
		public Drop_fulltext_indexContext drop_fulltext_index() {
			return getRuleContext(Drop_fulltext_indexContext.class,0);
		}
		public Drop_fulltext_stoplistContext drop_fulltext_stoplist() {
			return getRuleContext(Drop_fulltext_stoplistContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Drop_loginContext drop_login() {
			return getRuleContext(Drop_loginContext.class,0);
		}
		public Drop_master_keyContext drop_master_key() {
			return getRuleContext(Drop_master_keyContext.class,0);
		}
		public Drop_message_typeContext drop_message_type() {
			return getRuleContext(Drop_message_typeContext.class,0);
		}
		public Drop_partition_functionContext drop_partition_function() {
			return getRuleContext(Drop_partition_functionContext.class,0);
		}
		public Drop_partition_schemeContext drop_partition_scheme() {
			return getRuleContext(Drop_partition_schemeContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_queueContext drop_queue() {
			return getRuleContext(Drop_queueContext.class,0);
		}
		public Drop_remote_service_bindingContext drop_remote_service_binding() {
			return getRuleContext(Drop_remote_service_bindingContext.class,0);
		}
		public Drop_resource_poolContext drop_resource_pool() {
			return getRuleContext(Drop_resource_poolContext.class,0);
		}
		public Drop_routeContext drop_route() {
			return getRuleContext(Drop_routeContext.class,0);
		}
		public Drop_ruleContext drop_rule() {
			return getRuleContext(Drop_ruleContext.class,0);
		}
		public Drop_schemaContext drop_schema() {
			return getRuleContext(Drop_schemaContext.class,0);
		}
		public Drop_search_property_listContext drop_search_property_list() {
			return getRuleContext(Drop_search_property_listContext.class,0);
		}
		public Drop_security_policyContext drop_security_policy() {
			return getRuleContext(Drop_security_policyContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_server_auditContext drop_server_audit() {
			return getRuleContext(Drop_server_auditContext.class,0);
		}
		public Drop_server_audit_specificationContext drop_server_audit_specification() {
			return getRuleContext(Drop_server_audit_specificationContext.class,0);
		}
		public Drop_server_roleContext drop_server_role() {
			return getRuleContext(Drop_server_roleContext.class,0);
		}
		public Drop_serviceContext drop_service() {
			return getRuleContext(Drop_serviceContext.class,0);
		}
		public Drop_signatureContext drop_signature() {
			return getRuleContext(Drop_signatureContext.class,0);
		}
		public Drop_statisticsContext drop_statistics() {
			return getRuleContext(Drop_statisticsContext.class,0);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() {
			return getRuleContext(Drop_statistics_name_azure_dw_and_pdwContext.class,0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return getRuleContext(Drop_symmetric_keyContext.class,0);
		}
		public Drop_synonymContext drop_synonym() {
			return getRuleContext(Drop_synonymContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Drop_userContext drop_user() {
			return getRuleContext(Drop_userContext.class,0);
		}
		public Drop_viewContext drop_view() {
			return getRuleContext(Drop_viewContext.class,0);
		}
		public Drop_workload_groupContext drop_workload_group() {
			return getRuleContext(Drop_workload_groupContext.class,0);
		}
		public Drop_xml_schema_collectionContext drop_xml_schema_collection() {
			return getRuleContext(Drop_xml_schema_collectionContext.class,0);
		}
		public Disable_triggerContext disable_trigger() {
			return getRuleContext(Disable_triggerContext.class,0);
		}
		public Enable_triggerContext enable_trigger() {
			return getRuleContext(Enable_triggerContext.class,0);
		}
		public Lock_tableContext lock_table() {
			return getRuleContext(Lock_tableContext.class,0);
		}
		public Truncate_tableContext truncate_table() {
			return getRuleContext(Truncate_tableContext.class,0);
		}
		public Update_statisticsContext update_statistics() {
			return getRuleContext(Update_statisticsContext.class,0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_clause; }
	}

	public final Ddl_clauseContext ddl_clause() throws RecognitionException {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_ddl_clause);
		try {
			setState(1295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1138);
				alter_application_role();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1139);
				alter_assembly();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1140);
				alter_asymmetric_key();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1141);
				alter_authorization();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1142);
				alter_authorization_for_azure_dw();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1143);
				alter_authorization_for_parallel_dw();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1144);
				alter_authorization_for_sql_database();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1145);
				alter_availability_group();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1146);
				alter_certificate();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1147);
				alter_column_encryption_key();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1148);
				alter_credential();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1149);
				alter_cryptographic_provider();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1150);
				alter_database();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1151);
				alter_db_role();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1152);
				alter_endpoint();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1153);
				create_or_alter_event_session();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1154);
				alter_external_data_source();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1155);
				alter_external_library();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1156);
				alter_external_resource_pool();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1157);
				alter_fulltext_catalog();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1158);
				alter_fulltext_stoplist();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1159);
				alter_login_azure_sql();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1160);
				alter_login_azure_sql_dw_and_pdw();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1161);
				alter_login_sql_server();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1162);
				alter_master_key_azure_sql();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1163);
				alter_master_key_sql_server();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1164);
				alter_message_type();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(1165);
				alter_partition_function();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(1166);
				alter_partition_scheme();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(1167);
				alter_remote_service_binding();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(1168);
				alter_resource_governor();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(1169);
				alter_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(1170);
				alter_schema_sql();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(1171);
				alter_sequence();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(1172);
				alter_server_audit();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(1173);
				alter_server_audit_specification();
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(1174);
				alter_server_configuration();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(1175);
				alter_server_role();
				}
				break;
			case 39:
				enterOuterAlt(_localctx, 39);
				{
				setState(1176);
				alter_server_role_pdw();
				}
				break;
			case 40:
				enterOuterAlt(_localctx, 40);
				{
				setState(1177);
				alter_service();
				}
				break;
			case 41:
				enterOuterAlt(_localctx, 41);
				{
				setState(1178);
				alter_service_master_key();
				}
				break;
			case 42:
				enterOuterAlt(_localctx, 42);
				{
				setState(1179);
				alter_symmetric_key();
				}
				break;
			case 43:
				enterOuterAlt(_localctx, 43);
				{
				setState(1180);
				alter_table();
				}
				break;
			case 44:
				enterOuterAlt(_localctx, 44);
				{
				setState(1181);
				alter_user();
				}
				break;
			case 45:
				enterOuterAlt(_localctx, 45);
				{
				setState(1182);
				alter_user_azure_sql();
				}
				break;
			case 46:
				enterOuterAlt(_localctx, 46);
				{
				setState(1183);
				alter_workload_group();
				}
				break;
			case 47:
				enterOuterAlt(_localctx, 47);
				{
				setState(1184);
				create_application_role();
				}
				break;
			case 48:
				enterOuterAlt(_localctx, 48);
				{
				setState(1185);
				create_assembly();
				}
				break;
			case 49:
				enterOuterAlt(_localctx, 49);
				{
				setState(1186);
				create_asymmetric_key();
				}
				break;
			case 50:
				enterOuterAlt(_localctx, 50);
				{
				setState(1187);
				create_column_encryption_key();
				}
				break;
			case 51:
				enterOuterAlt(_localctx, 51);
				{
				setState(1188);
				create_column_master_key();
				}
				break;
			case 52:
				enterOuterAlt(_localctx, 52);
				{
				setState(1189);
				create_credential();
				}
				break;
			case 53:
				enterOuterAlt(_localctx, 53);
				{
				setState(1190);
				create_cryptographic_provider();
				}
				break;
			case 54:
				enterOuterAlt(_localctx, 54);
				{
				setState(1191);
				create_database();
				}
				break;
			case 55:
				enterOuterAlt(_localctx, 55);
				{
				setState(1192);
				create_db_role();
				}
				break;
			case 56:
				enterOuterAlt(_localctx, 56);
				{
				setState(1193);
				create_event_notification();
				}
				break;
			case 57:
				enterOuterAlt(_localctx, 57);
				{
				setState(1194);
				create_external_library();
				}
				break;
			case 58:
				enterOuterAlt(_localctx, 58);
				{
				setState(1195);
				create_external_resource_pool();
				}
				break;
			case 59:
				enterOuterAlt(_localctx, 59);
				{
				setState(1196);
				create_fulltext_catalog();
				}
				break;
			case 60:
				enterOuterAlt(_localctx, 60);
				{
				setState(1197);
				create_fulltext_stoplist();
				}
				break;
			case 61:
				enterOuterAlt(_localctx, 61);
				{
				setState(1198);
				create_index();
				}
				break;
			case 62:
				enterOuterAlt(_localctx, 62);
				{
				setState(1199);
				create_login_azure_sql();
				}
				break;
			case 63:
				enterOuterAlt(_localctx, 63);
				{
				setState(1200);
				create_login_pdw();
				}
				break;
			case 64:
				enterOuterAlt(_localctx, 64);
				{
				setState(1201);
				create_login_sql_server();
				}
				break;
			case 65:
				enterOuterAlt(_localctx, 65);
				{
				setState(1202);
				create_master_key_azure_sql();
				}
				break;
			case 66:
				enterOuterAlt(_localctx, 66);
				{
				setState(1203);
				create_master_key_sql_server();
				}
				break;
			case 67:
				enterOuterAlt(_localctx, 67);
				{
				setState(1204);
				create_or_alter_broker_priority();
				}
				break;
			case 68:
				enterOuterAlt(_localctx, 68);
				{
				setState(1205);
				create_remote_service_binding();
				}
				break;
			case 69:
				enterOuterAlt(_localctx, 69);
				{
				setState(1206);
				create_resource_pool();
				}
				break;
			case 70:
				enterOuterAlt(_localctx, 70);
				{
				setState(1207);
				create_route();
				}
				break;
			case 71:
				enterOuterAlt(_localctx, 71);
				{
				setState(1208);
				create_rule();
				}
				break;
			case 72:
				enterOuterAlt(_localctx, 72);
				{
				setState(1209);
				create_schema();
				}
				break;
			case 73:
				enterOuterAlt(_localctx, 73);
				{
				setState(1210);
				create_schema_azure_sql_dw_and_pdw();
				}
				break;
			case 74:
				enterOuterAlt(_localctx, 74);
				{
				setState(1211);
				create_search_property_list();
				}
				break;
			case 75:
				enterOuterAlt(_localctx, 75);
				{
				setState(1212);
				create_security_policy();
				}
				break;
			case 76:
				enterOuterAlt(_localctx, 76);
				{
				setState(1213);
				create_sequence();
				}
				break;
			case 77:
				enterOuterAlt(_localctx, 77);
				{
				setState(1214);
				create_server_audit();
				}
				break;
			case 78:
				enterOuterAlt(_localctx, 78);
				{
				setState(1215);
				create_server_audit_specification();
				}
				break;
			case 79:
				enterOuterAlt(_localctx, 79);
				{
				setState(1216);
				create_server_role();
				}
				break;
			case 80:
				enterOuterAlt(_localctx, 80);
				{
				setState(1217);
				create_service();
				}
				break;
			case 81:
				enterOuterAlt(_localctx, 81);
				{
				setState(1218);
				create_statistics();
				}
				break;
			case 82:
				enterOuterAlt(_localctx, 82);
				{
				setState(1219);
				create_symmetric_key();
				}
				break;
			case 83:
				enterOuterAlt(_localctx, 83);
				{
				setState(1220);
				create_synonym();
				}
				break;
			case 84:
				enterOuterAlt(_localctx, 84);
				{
				setState(1221);
				create_table();
				}
				break;
			case 85:
				enterOuterAlt(_localctx, 85);
				{
				setState(1222);
				create_type();
				}
				break;
			case 86:
				enterOuterAlt(_localctx, 86);
				{
				setState(1223);
				create_user();
				}
				break;
			case 87:
				enterOuterAlt(_localctx, 87);
				{
				setState(1224);
				create_user_azure_sql_dw();
				}
				break;
			case 88:
				enterOuterAlt(_localctx, 88);
				{
				setState(1225);
				create_workload_group();
				}
				break;
			case 89:
				enterOuterAlt(_localctx, 89);
				{
				setState(1226);
				create_xml_index();
				}
				break;
			case 90:
				enterOuterAlt(_localctx, 90);
				{
				setState(1227);
				create_xml_schema_collection();
				}
				break;
			case 91:
				enterOuterAlt(_localctx, 91);
				{
				setState(1228);
				drop_aggregate();
				}
				break;
			case 92:
				enterOuterAlt(_localctx, 92);
				{
				setState(1229);
				drop_application_role();
				}
				break;
			case 93:
				enterOuterAlt(_localctx, 93);
				{
				setState(1230);
				drop_assembly();
				}
				break;
			case 94:
				enterOuterAlt(_localctx, 94);
				{
				setState(1231);
				drop_asymmetric_key();
				}
				break;
			case 95:
				enterOuterAlt(_localctx, 95);
				{
				setState(1232);
				drop_availability_group();
				}
				break;
			case 96:
				enterOuterAlt(_localctx, 96);
				{
				setState(1233);
				drop_broker_priority();
				}
				break;
			case 97:
				enterOuterAlt(_localctx, 97);
				{
				setState(1234);
				drop_certificate();
				}
				break;
			case 98:
				enterOuterAlt(_localctx, 98);
				{
				setState(1235);
				drop_column_encryption_key();
				}
				break;
			case 99:
				enterOuterAlt(_localctx, 99);
				{
				setState(1236);
				drop_column_master_key();
				}
				break;
			case 100:
				enterOuterAlt(_localctx, 100);
				{
				setState(1237);
				drop_contract();
				}
				break;
			case 101:
				enterOuterAlt(_localctx, 101);
				{
				setState(1238);
				drop_credential();
				}
				break;
			case 102:
				enterOuterAlt(_localctx, 102);
				{
				setState(1239);
				drop_cryptograhic_provider();
				}
				break;
			case 103:
				enterOuterAlt(_localctx, 103);
				{
				setState(1240);
				drop_database();
				}
				break;
			case 104:
				enterOuterAlt(_localctx, 104);
				{
				setState(1241);
				drop_database_audit_specification();
				}
				break;
			case 105:
				enterOuterAlt(_localctx, 105);
				{
				setState(1242);
				drop_database_encryption_key();
				}
				break;
			case 106:
				enterOuterAlt(_localctx, 106);
				{
				setState(1243);
				drop_database_scoped_credential();
				}
				break;
			case 107:
				enterOuterAlt(_localctx, 107);
				{
				setState(1244);
				drop_db_role();
				}
				break;
			case 108:
				enterOuterAlt(_localctx, 108);
				{
				setState(1245);
				drop_default();
				}
				break;
			case 109:
				enterOuterAlt(_localctx, 109);
				{
				setState(1246);
				drop_endpoint();
				}
				break;
			case 110:
				enterOuterAlt(_localctx, 110);
				{
				setState(1247);
				drop_event_notifications();
				}
				break;
			case 111:
				enterOuterAlt(_localctx, 111);
				{
				setState(1248);
				drop_event_session();
				}
				break;
			case 112:
				enterOuterAlt(_localctx, 112);
				{
				setState(1249);
				drop_external_data_source();
				}
				break;
			case 113:
				enterOuterAlt(_localctx, 113);
				{
				setState(1250);
				drop_external_file_format();
				}
				break;
			case 114:
				enterOuterAlt(_localctx, 114);
				{
				setState(1251);
				drop_external_library();
				}
				break;
			case 115:
				enterOuterAlt(_localctx, 115);
				{
				setState(1252);
				drop_external_resource_pool();
				}
				break;
			case 116:
				enterOuterAlt(_localctx, 116);
				{
				setState(1253);
				drop_external_table();
				}
				break;
			case 117:
				enterOuterAlt(_localctx, 117);
				{
				setState(1254);
				drop_fulltext_catalog();
				}
				break;
			case 118:
				enterOuterAlt(_localctx, 118);
				{
				setState(1255);
				drop_fulltext_index();
				}
				break;
			case 119:
				enterOuterAlt(_localctx, 119);
				{
				setState(1256);
				drop_fulltext_stoplist();
				}
				break;
			case 120:
				enterOuterAlt(_localctx, 120);
				{
				setState(1257);
				drop_function();
				}
				break;
			case 121:
				enterOuterAlt(_localctx, 121);
				{
				setState(1258);
				drop_index();
				}
				break;
			case 122:
				enterOuterAlt(_localctx, 122);
				{
				setState(1259);
				drop_login();
				}
				break;
			case 123:
				enterOuterAlt(_localctx, 123);
				{
				setState(1260);
				drop_master_key();
				}
				break;
			case 124:
				enterOuterAlt(_localctx, 124);
				{
				setState(1261);
				drop_message_type();
				}
				break;
			case 125:
				enterOuterAlt(_localctx, 125);
				{
				setState(1262);
				drop_partition_function();
				}
				break;
			case 126:
				enterOuterAlt(_localctx, 126);
				{
				setState(1263);
				drop_partition_scheme();
				}
				break;
			case 127:
				enterOuterAlt(_localctx, 127);
				{
				setState(1264);
				drop_procedure();
				}
				break;
			case 128:
				enterOuterAlt(_localctx, 128);
				{
				setState(1265);
				drop_queue();
				}
				break;
			case 129:
				enterOuterAlt(_localctx, 129);
				{
				setState(1266);
				drop_remote_service_binding();
				}
				break;
			case 130:
				enterOuterAlt(_localctx, 130);
				{
				setState(1267);
				drop_resource_pool();
				}
				break;
			case 131:
				enterOuterAlt(_localctx, 131);
				{
				setState(1268);
				drop_route();
				}
				break;
			case 132:
				enterOuterAlt(_localctx, 132);
				{
				setState(1269);
				drop_rule();
				}
				break;
			case 133:
				enterOuterAlt(_localctx, 133);
				{
				setState(1270);
				drop_schema();
				}
				break;
			case 134:
				enterOuterAlt(_localctx, 134);
				{
				setState(1271);
				drop_search_property_list();
				}
				break;
			case 135:
				enterOuterAlt(_localctx, 135);
				{
				setState(1272);
				drop_security_policy();
				}
				break;
			case 136:
				enterOuterAlt(_localctx, 136);
				{
				setState(1273);
				drop_sequence();
				}
				break;
			case 137:
				enterOuterAlt(_localctx, 137);
				{
				setState(1274);
				drop_server_audit();
				}
				break;
			case 138:
				enterOuterAlt(_localctx, 138);
				{
				setState(1275);
				drop_server_audit_specification();
				}
				break;
			case 139:
				enterOuterAlt(_localctx, 139);
				{
				setState(1276);
				drop_server_role();
				}
				break;
			case 140:
				enterOuterAlt(_localctx, 140);
				{
				setState(1277);
				drop_service();
				}
				break;
			case 141:
				enterOuterAlt(_localctx, 141);
				{
				setState(1278);
				drop_signature();
				}
				break;
			case 142:
				enterOuterAlt(_localctx, 142);
				{
				setState(1279);
				drop_statistics();
				}
				break;
			case 143:
				enterOuterAlt(_localctx, 143);
				{
				setState(1280);
				drop_statistics_name_azure_dw_and_pdw();
				}
				break;
			case 144:
				enterOuterAlt(_localctx, 144);
				{
				setState(1281);
				drop_symmetric_key();
				}
				break;
			case 145:
				enterOuterAlt(_localctx, 145);
				{
				setState(1282);
				drop_synonym();
				}
				break;
			case 146:
				enterOuterAlt(_localctx, 146);
				{
				setState(1283);
				drop_table();
				}
				break;
			case 147:
				enterOuterAlt(_localctx, 147);
				{
				setState(1284);
				drop_trigger();
				}
				break;
			case 148:
				enterOuterAlt(_localctx, 148);
				{
				setState(1285);
				drop_type();
				}
				break;
			case 149:
				enterOuterAlt(_localctx, 149);
				{
				setState(1286);
				drop_user();
				}
				break;
			case 150:
				enterOuterAlt(_localctx, 150);
				{
				setState(1287);
				drop_view();
				}
				break;
			case 151:
				enterOuterAlt(_localctx, 151);
				{
				setState(1288);
				drop_workload_group();
				}
				break;
			case 152:
				enterOuterAlt(_localctx, 152);
				{
				setState(1289);
				drop_xml_schema_collection();
				}
				break;
			case 153:
				enterOuterAlt(_localctx, 153);
				{
				setState(1290);
				disable_trigger();
				}
				break;
			case 154:
				enterOuterAlt(_localctx, 154);
				{
				setState(1291);
				enable_trigger();
				}
				break;
			case 155:
				enterOuterAlt(_localctx, 155);
				{
				setState(1292);
				lock_table();
				}
				break;
			case 156:
				enterOuterAlt(_localctx, 156);
				{
				setState(1293);
				truncate_table();
				}
				break;
			case 157:
				enterOuterAlt(_localctx, 157);
				{
				setState(1294);
				update_statistics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_statementContext extends ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return getRuleContext(Backup_databaseContext.class,0);
		}
		public Backup_logContext backup_log() {
			return getRuleContext(Backup_logContext.class,0);
		}
		public Backup_certificateContext backup_certificate() {
			return getRuleContext(Backup_certificateContext.class,0);
		}
		public Backup_master_keyContext backup_master_key() {
			return getRuleContext(Backup_master_keyContext.class,0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return getRuleContext(Backup_service_master_keyContext.class,0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_statement; }
	}

	public final Backup_statementContext backup_statement() throws RecognitionException {
		Backup_statementContext _localctx = new Backup_statementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_backup_statement);
		try {
			setState(1302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1297);
				backup_database();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1298);
				backup_log();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1299);
				backup_certificate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1300);
				backup_master_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1301);
				backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cfl_statementContext extends ParserRuleContext {
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Break_statementContext break_statement() {
			return getRuleContext(Break_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Throw_statementContext throw_statement() {
			return getRuleContext(Throw_statementContext.class,0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return getRuleContext(Try_catch_statementContext.class,0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return getRuleContext(Waitfor_statementContext.class,0);
		}
		public While_statementContext while_statement() {
			return getRuleContext(While_statementContext.class,0);
		}
		public Print_statementContext print_statement() {
			return getRuleContext(Print_statementContext.class,0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return getRuleContext(Raiseerror_statementContext.class,0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cfl_statement; }
	}

	public final Cfl_statementContext cfl_statement() throws RecognitionException {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_cfl_statement);
		try {
			setState(1316);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1304);
				block_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1305);
				break_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1306);
				continue_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1307);
				goto_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1308);
				if_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1309);
				return_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1310);
				throw_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1311);
				try_catch_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1312);
				waitfor_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1313);
				while_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1314);
				print_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1315);
				raiseerror_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public List<TerminalNode> SEMI() { return getTokens(TSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(TSqlParser.SEMI, i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Block_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_statement; }
	}

	public final Block_statementContext block_statement() throws RecognitionException {
		Block_statementContext _localctx = new Block_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_block_statement);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1318);
			match(BEGIN);
			setState(1320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(1319);
				match(SEMI);
				}
				break;
			}
			setState(1325);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1322);
					sql_clauses();
					}
					} 
				}
				setState(1327);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,23,_ctx);
			}
			setState(1328);
			match(END);
			setState(1330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				{
				setState(1329);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Break_statementContext extends ParserRuleContext {
		public TerminalNode BREAK() { return getToken(TSqlParser.BREAK, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_break_statement; }
	}

	public final Break_statementContext break_statement() throws RecognitionException {
		Break_statementContext _localctx = new Break_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_break_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1332);
			match(BREAK);
			setState(1334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				setState(1333);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(TSqlParser.CONTINUE, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1336);
			match(CONTINUE);
			setState(1338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1337);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(TSqlParser.GOTO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode COLON() { return getToken(TSqlParser.COLON, 0); }
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_goto_statement);
		try {
			setState(1350);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GOTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(1340);
				match(GOTO);
				setState(1341);
				id();
				setState(1343);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
				case 1:
					{
					setState(1342);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1345);
				id();
				setState(1346);
				match(COLON);
				setState(1348);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					setState(1347);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_return_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1352);
			match(RETURN);
			setState(1354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(1353);
				expression(0);
				}
				break;
			}
			setState(1357);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				setState(1356);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(TSqlParser.ELSE, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_if_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1359);
			match(IF);
			setState(1360);
			search_condition();
			setState(1361);
			sql_clauses();
			setState(1364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(1362);
				match(ELSE);
				setState(1363);
				sql_clauses();
				}
				break;
			}
			setState(1367);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(1366);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_statementContext extends ParserRuleContext {
		public TerminalNode THROW() { return getToken(TSqlParser.THROW, 0); }
		public Throw_error_numberContext throw_error_number() {
			return getRuleContext(Throw_error_numberContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Throw_messageContext throw_message() {
			return getRuleContext(Throw_messageContext.class,0);
		}
		public Throw_stateContext throw_state() {
			return getRuleContext(Throw_stateContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Throw_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_statement; }
	}

	public final Throw_statementContext throw_statement() throws RecognitionException {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_throw_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1369);
			match(THROW);
			setState(1376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==DECIMAL) {
				{
				setState(1370);
				throw_error_number();
				setState(1371);
				match(COMMA);
				setState(1372);
				throw_message();
				setState(1373);
				match(COMMA);
				setState(1374);
				throw_state();
				}
			}

			setState(1379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				setState(1378);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_error_numberContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_error_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_error_number; }
	}

	public final Throw_error_numberContext throw_error_number() throws RecognitionException {
		Throw_error_numberContext _localctx = new Throw_error_numberContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_throw_error_number);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1381);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_messageContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_message; }
	}

	public final Throw_messageContext throw_message() throws RecognitionException {
		Throw_messageContext _localctx = new Throw_messageContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_throw_message);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1383);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_stateContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Throw_stateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_state; }
	}

	public final Throw_stateContext throw_state() throws RecognitionException {
		Throw_stateContext _localctx = new Throw_stateContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_throw_state);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1385);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Try_catch_statementContext extends ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public List<TerminalNode> BEGIN() { return getTokens(TSqlParser.BEGIN); }
		public TerminalNode BEGIN(int i) {
			return getToken(TSqlParser.BEGIN, i);
		}
		public List<TerminalNode> TRY() { return getTokens(TSqlParser.TRY); }
		public TerminalNode TRY(int i) {
			return getToken(TSqlParser.TRY, i);
		}
		public List<TerminalNode> END() { return getTokens(TSqlParser.END); }
		public TerminalNode END(int i) {
			return getToken(TSqlParser.END, i);
		}
		public List<TerminalNode> CATCH() { return getTokens(TSqlParser.CATCH); }
		public TerminalNode CATCH(int i) {
			return getToken(TSqlParser.CATCH, i);
		}
		public List<TerminalNode> SEMI() { return getTokens(TSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(TSqlParser.SEMI, i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_try_catch_statement; }
	}

	public final Try_catch_statementContext try_catch_statement() throws RecognitionException {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_try_catch_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1387);
			match(BEGIN);
			setState(1388);
			match(TRY);
			setState(1390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				{
				setState(1389);
				match(SEMI);
				}
				break;
			}
			setState(1393); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1392);
					((Try_catch_statementContext)_localctx).try_clauses = sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1395); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,37,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1397);
			match(END);
			setState(1398);
			match(TRY);
			setState(1400);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(1399);
				match(SEMI);
				}
			}

			setState(1402);
			match(BEGIN);
			setState(1403);
			match(CATCH);
			setState(1405);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				setState(1404);
				match(SEMI);
				}
				break;
			}
			setState(1410);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1407);
					((Try_catch_statementContext)_localctx).catch_clauses = sql_clauses();
					}
					} 
				}
				setState(1412);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,40,_ctx);
			}
			setState(1413);
			match(END);
			setState(1414);
			match(CATCH);
			setState(1416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				setState(1415);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_statementContext extends ParserRuleContext {
		public TerminalNode WAITFOR() { return getToken(TSqlParser.WAITFOR, 0); }
		public Receive_statementContext receive_statement() {
			return getRuleContext(Receive_statementContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode DELAY() { return getToken(TSqlParser.DELAY, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_statement; }
	}

	public final Waitfor_statementContext waitfor_statement() throws RecognitionException {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_waitfor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1418);
			match(WAITFOR);
			setState(1420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				setState(1419);
				receive_statement();
				}
				break;
			}
			setState(1423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1422);
				match(COMMA);
				}
			}

			setState(1427);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				setState(1425);
				_la = _input.LA(1);
				if ( !(_la==DELAY || _la==TIME || _la==TIMEOUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1426);
				time();
				}
				break;
			}
			setState(1430);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				{
				setState(1429);
				expression(0);
				}
				break;
			}
			setState(1433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				setState(1432);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_statementContext extends ParserRuleContext {
		public TerminalNode WHILE() { return getToken(TSqlParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode BREAK() { return getToken(TSqlParser.BREAK, 0); }
		public TerminalNode CONTINUE() { return getToken(TSqlParser.CONTINUE, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public While_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_statement; }
	}

	public final While_statementContext while_statement() throws RecognitionException {
		While_statementContext _localctx = new While_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_while_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1435);
			match(WHILE);
			setState(1436);
			search_condition();
			setState(1446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				{
				setState(1437);
				sql_clauses();
				}
				break;
			case 2:
				{
				setState(1438);
				match(BREAK);
				setState(1440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					setState(1439);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(1442);
				match(CONTINUE);
				setState(1444);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(1443);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Print_statementContext extends ParserRuleContext {
		public TerminalNode PRINT() { return getToken(TSqlParser.PRINT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Print_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_print_statement; }
	}

	public final Print_statementContext print_statement() throws RecognitionException {
		Print_statementContext _localctx = new Print_statementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_print_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1448);
			match(PRINT);
			setState(1451);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				setState(1449);
				expression(0);
				}
				break;
			case 2:
				{
				setState(1450);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			setState(1457);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1453);
				match(COMMA);
				setState(1454);
				match(LOCAL_ID);
				}
				}
				setState(1459);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1461);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				setState(1460);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raiseerror_statementContext extends ParserRuleContext {
		public Token msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public Token formatstring;
		public Token argument;
		public TerminalNode RAISERROR() { return getToken(TSqlParser.RAISERROR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<Constant_LOCAL_IDContext> constant_LOCAL_ID() {
			return getRuleContexts(Constant_LOCAL_IDContext.class);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return getRuleContext(Constant_LOCAL_IDContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode SETERROR() { return getToken(TSqlParser.SETERROR, 0); }
		public TerminalNode NOWAIT() { return getToken(TSqlParser.NOWAIT, 0); }
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raiseerror_statement; }
	}

	public final Raiseerror_statementContext raiseerror_statement() throws RecognitionException {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_raiseerror_statement);
		int _la;
		try {
			setState(1495);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1463);
				match(RAISERROR);
				setState(1464);
				match(LR_BRACKET);
				setState(1465);
				((Raiseerror_statementContext)_localctx).msg = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (LOCAL_ID - 815)) | (1L << (DECIMAL - 815)) | (1L << (STRING - 815)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).msg = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1466);
				match(COMMA);
				setState(1467);
				((Raiseerror_statementContext)_localctx).severity = constant_LOCAL_ID();
				setState(1468);
				match(COMMA);
				setState(1469);
				((Raiseerror_statementContext)_localctx).state = constant_LOCAL_ID();
				setState(1474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1470);
					match(COMMA);
					setState(1471);
					constant_LOCAL_ID();
					}
					}
					setState(1476);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1477);
				match(RR_BRACKET);
				setState(1480);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1478);
					match(WITH);
					setState(1479);
					_la = _input.LA(1);
					if ( !(_la==NOWAIT || _la==SETERROR || _la==LOG) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1483);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,55,_ctx) ) {
				case 1:
					{
					setState(1482);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1485);
				match(RAISERROR);
				setState(1486);
				match(DECIMAL);
				setState(1487);
				((Raiseerror_statementContext)_localctx).formatstring = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 812)) & ~0x3f) == 0 && ((1L << (_la - 812)) & ((1L << (DOUBLE_QUOTE_ID - 812)) | (1L << (LOCAL_ID - 812)) | (1L << (STRING - 812)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).formatstring = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1488);
					match(COMMA);
					setState(1489);
					((Raiseerror_statementContext)_localctx).argument = _input.LT(1);
					_la = _input.LA(1);
					if ( !(((((_la - 815)) & ~0x3f) == 0 && ((1L << (_la - 815)) & ((1L << (LOCAL_ID - 815)) | (1L << (DECIMAL - 815)) | (1L << (STRING - 815)))) != 0)) ) {
						((Raiseerror_statementContext)_localctx).argument = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(1494);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_statementContext extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_statement; }
	}

	public final Empty_statementContext empty_statement() throws RecognitionException {
		Empty_statementContext _localctx = new Empty_statementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_empty_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1497);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Another_statementContext extends ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Cursor_statementContext cursor_statement() {
			return getRuleContext(Cursor_statementContext.class,0);
		}
		public Conversation_statementContext conversation_statement() {
			return getRuleContext(Conversation_statementContext.class,0);
		}
		public Create_contractContext create_contract() {
			return getRuleContext(Create_contractContext.class,0);
		}
		public Create_queueContext create_queue() {
			return getRuleContext(Create_queueContext.class,0);
		}
		public Alter_queueContext alter_queue() {
			return getRuleContext(Alter_queueContext.class,0);
		}
		public Kill_statementContext kill_statement() {
			return getRuleContext(Kill_statementContext.class,0);
		}
		public Message_statementContext message_statement() {
			return getRuleContext(Message_statementContext.class,0);
		}
		public Security_statementContext security_statement() {
			return getRuleContext(Security_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Transaction_statementContext transaction_statement() {
			return getRuleContext(Transaction_statementContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public Setuser_statementContext setuser_statement() {
			return getRuleContext(Setuser_statementContext.class,0);
		}
		public Reconfigure_statementContext reconfigure_statement() {
			return getRuleContext(Reconfigure_statementContext.class,0);
		}
		public Shutdown_statementContext shutdown_statement() {
			return getRuleContext(Shutdown_statementContext.class,0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_another_statement; }
	}

	public final Another_statementContext another_statement() throws RecognitionException {
		Another_statementContext _localctx = new Another_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_another_statement);
		try {
			setState(1515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,58,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1499);
				declare_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1500);
				execute_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1501);
				cursor_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1502);
				conversation_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1503);
				create_contract();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1504);
				create_queue();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1505);
				alter_queue();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1506);
				kill_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1507);
				message_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1508);
				security_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1509);
				set_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1510);
				transaction_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1511);
				use_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1512);
				setuser_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1513);
				reconfigure_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1514);
				shutdown_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_application_roleContext extends ParserRuleContext {
		public IdContext appliction_role;
		public IdContext new_application_role_name;
		public Token application_role_password;
		public IdContext app_role_default_schema;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_application_role; }
	}

	public final Alter_application_roleContext alter_application_role() throws RecognitionException {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_alter_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1517);
			match(ALTER);
			setState(1518);
			match(APPLICATION);
			setState(1519);
			match(ROLE);
			setState(1520);
			((Alter_application_roleContext)_localctx).appliction_role = id();
			setState(1521);
			match(WITH);
			setState(1528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1522);
					match(COMMA);
					}
				}

				setState(1525);
				match(NAME);
				setState(1526);
				match(EQUAL);
				setState(1527);
				((Alter_application_roleContext)_localctx).new_application_role_name = id();
				}
				break;
			}
			setState(1536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				{
				setState(1531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1530);
					match(COMMA);
					}
				}

				setState(1533);
				match(PASSWORD);
				setState(1534);
				match(EQUAL);
				setState(1535);
				((Alter_application_roleContext)_localctx).application_role_password = match(STRING);
				}
				break;
			}
			setState(1544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				setState(1539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1538);
					match(COMMA);
					}
				}

				setState(1541);
				match(DEFAULT_SCHEMA);
				setState(1542);
				match(EQUAL);
				setState(1543);
				((Alter_application_roleContext)_localctx).app_role_default_schema = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_application_roleContext extends ParserRuleContext {
		public IdContext appliction_role;
		public Token application_role_password;
		public IdContext app_role_default_schema;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_application_role; }
	}

	public final Create_application_roleContext create_application_role() throws RecognitionException {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_create_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1546);
			match(CREATE);
			setState(1547);
			match(APPLICATION);
			setState(1548);
			match(ROLE);
			setState(1549);
			((Create_application_roleContext)_localctx).appliction_role = id();
			setState(1550);
			match(WITH);
			setState(1557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				setState(1552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1551);
					match(COMMA);
					}
				}

				setState(1554);
				match(PASSWORD);
				setState(1555);
				match(EQUAL);
				setState(1556);
				((Create_application_roleContext)_localctx).application_role_password = match(STRING);
				}
				break;
			}
			setState(1565);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				setState(1560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1559);
					match(COMMA);
					}
				}

				setState(1562);
				match(DEFAULT_SCHEMA);
				setState(1563);
				match(EQUAL);
				setState(1564);
				((Create_application_roleContext)_localctx).app_role_default_schema = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_aggregateContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext aggregate_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode AGGREGATE() { return getToken(TSqlParser.AGGREGATE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_aggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_aggregate; }
	}

	public final Drop_aggregateContext drop_aggregate() throws RecognitionException {
		Drop_aggregateContext _localctx = new Drop_aggregateContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_drop_aggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1567);
			match(DROP);
			setState(1568);
			match(AGGREGATE);
			setState(1571);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1569);
				match(IF);
				setState(1570);
				match(EXISTS);
				}
			}

			setState(1576);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				setState(1573);
				((Drop_aggregateContext)_localctx).schema_name = id();
				setState(1574);
				match(DOT);
				}
				break;
			}
			setState(1578);
			((Drop_aggregateContext)_localctx).aggregate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_application_roleContext extends ParserRuleContext {
		public IdContext rolename;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_application_role; }
	}

	public final Drop_application_roleContext drop_application_role() throws RecognitionException {
		Drop_application_roleContext _localctx = new Drop_application_roleContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_drop_application_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1580);
			match(DROP);
			setState(1581);
			match(APPLICATION);
			setState(1582);
			match(ROLE);
			setState(1583);
			((Drop_application_roleContext)_localctx).rolename = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public Alter_assembly_startContext alter_assembly_start() {
			return getRuleContext(Alter_assembly_startContext.class,0);
		}
		public Alter_assembly_clauseContext alter_assembly_clause() {
			return getRuleContext(Alter_assembly_clauseContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly; }
	}

	public final Alter_assemblyContext alter_assembly() throws RecognitionException {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_alter_assembly);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1585);
			alter_assembly_start();
			setState(1586);
			((Alter_assemblyContext)_localctx).assembly_name = id();
			setState(1587);
			alter_assembly_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public Alter_assembly_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_start; }
	}

	public final Alter_assembly_startContext alter_assembly_start() throws RecognitionException {
		Alter_assembly_startContext _localctx = new Alter_assembly_startContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alter_assembly_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1589);
			match(ALTER);
			setState(1590);
			match(ASSEMBLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_clauseContext extends ParserRuleContext {
		public Alter_assembly_from_clauseContext alter_assembly_from_clause() {
			return getRuleContext(Alter_assembly_from_clauseContext.class,0);
		}
		public Alter_assembly_with_clauseContext alter_assembly_with_clause() {
			return getRuleContext(Alter_assembly_with_clauseContext.class,0);
		}
		public Alter_assembly_drop_clauseContext alter_assembly_drop_clause() {
			return getRuleContext(Alter_assembly_drop_clauseContext.class,0);
		}
		public Alter_assembly_add_clauseContext alter_assembly_add_clause() {
			return getRuleContext(Alter_assembly_add_clauseContext.class,0);
		}
		public Alter_assembly_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_clause; }
	}

	public final Alter_assembly_clauseContext alter_assembly_clause() throws RecognitionException {
		Alter_assembly_clauseContext _localctx = new Alter_assembly_clauseContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_alter_assembly_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1592);
				alter_assembly_from_clause();
				}
			}

			setState(1596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				setState(1595);
				alter_assembly_with_clause();
				}
				break;
			}
			setState(1599);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(1598);
				alter_assembly_drop_clause();
				}
				break;
			}
			setState(1602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADD) {
				{
				setState(1601);
				alter_assembly_add_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_from_clauseContext extends ParserRuleContext {
		public Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() {
			return getRuleContext(Alter_assembly_from_clause_startContext.class,0);
		}
		public Client_assembly_specifierContext client_assembly_specifier() {
			return getRuleContext(Client_assembly_specifierContext.class,0);
		}
		public Alter_assembly_file_bitsContext alter_assembly_file_bits() {
			return getRuleContext(Alter_assembly_file_bitsContext.class,0);
		}
		public Alter_assembly_from_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_from_clause; }
	}

	public final Alter_assembly_from_clauseContext alter_assembly_from_clause() throws RecognitionException {
		Alter_assembly_from_clauseContext _localctx = new Alter_assembly_from_clauseContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alter_assembly_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1604);
			alter_assembly_from_clause_start();
			setState(1607);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_BACK_SLASH:
			case DISK_DRIVE:
			case STRING:
				{
				setState(1605);
				client_assembly_specifier();
				}
				break;
			case AS:
				{
				setState(1606);
				alter_assembly_file_bits();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_from_clause_startContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Alter_assembly_from_clause_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_from_clause_start; }
	}

	public final Alter_assembly_from_clause_startContext alter_assembly_from_clause_start() throws RecognitionException {
		Alter_assembly_from_clause_startContext _localctx = new Alter_assembly_from_clause_startContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_alter_assembly_from_clause_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1609);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_drop_clauseContext extends ParserRuleContext {
		public Alter_assembly_dropContext alter_assembly_drop() {
			return getRuleContext(Alter_assembly_dropContext.class,0);
		}
		public Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() {
			return getRuleContext(Alter_assembly_drop_multiple_filesContext.class,0);
		}
		public Alter_assembly_drop_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop_clause; }
	}

	public final Alter_assembly_drop_clauseContext alter_assembly_drop_clause() throws RecognitionException {
		Alter_assembly_drop_clauseContext _localctx = new Alter_assembly_drop_clauseContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alter_assembly_drop_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1611);
			alter_assembly_drop();
			setState(1612);
			alter_assembly_drop_multiple_files();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_drop_multiple_filesContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Multiple_local_filesContext multiple_local_files() {
			return getRuleContext(Multiple_local_filesContext.class,0);
		}
		public Alter_assembly_drop_multiple_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop_multiple_files; }
	}

	public final Alter_assembly_drop_multiple_filesContext alter_assembly_drop_multiple_files() throws RecognitionException {
		Alter_assembly_drop_multiple_filesContext _localctx = new Alter_assembly_drop_multiple_filesContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alter_assembly_drop_multiple_files);
		try {
			setState(1616);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1614);
				match(ALL);
				}
				break;
			case DISK_DRIVE:
			case SINGLE_QUOTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1615);
				multiple_local_files();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_dropContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_assembly_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_drop; }
	}

	public final Alter_assembly_dropContext alter_assembly_drop() throws RecognitionException {
		Alter_assembly_dropContext _localctx = new Alter_assembly_dropContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alter_assembly_drop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1618);
			match(DROP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_add_clauseContext extends ParserRuleContext {
		public Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() {
			return getRuleContext(Alter_asssembly_add_clause_startContext.class,0);
		}
		public Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() {
			return getRuleContext(Alter_assembly_client_file_clauseContext.class,0);
		}
		public Alter_assembly_add_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_add_clause; }
	}

	public final Alter_assembly_add_clauseContext alter_assembly_add_clause() throws RecognitionException {
		Alter_assembly_add_clauseContext _localctx = new Alter_assembly_add_clauseContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alter_assembly_add_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1620);
			alter_asssembly_add_clause_start();
			setState(1621);
			alter_assembly_client_file_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asssembly_add_clause_startContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Alter_asssembly_add_clause_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asssembly_add_clause_start; }
	}

	public final Alter_asssembly_add_clause_startContext alter_asssembly_add_clause_start() throws RecognitionException {
		Alter_asssembly_add_clause_startContext _localctx = new Alter_asssembly_add_clause_startContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_alter_asssembly_add_clause_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1623);
			match(ADD);
			setState(1624);
			match(FILE);
			setState(1625);
			match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_client_file_clauseContext extends ParserRuleContext {
		public Alter_assembly_file_nameContext alter_assembly_file_name() {
			return getRuleContext(Alter_assembly_file_nameContext.class,0);
		}
		public Alter_assembly_asContext alter_assembly_as() {
			return getRuleContext(Alter_assembly_asContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assembly_client_file_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_client_file_clause; }
	}

	public final Alter_assembly_client_file_clauseContext alter_assembly_client_file_clause() throws RecognitionException {
		Alter_assembly_client_file_clauseContext _localctx = new Alter_assembly_client_file_clauseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alter_assembly_client_file_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1627);
			alter_assembly_file_name();
			setState(1631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1628);
				alter_assembly_as();
				setState(1629);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_file_nameContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_assembly_file_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_file_name; }
	}

	public final Alter_assembly_file_nameContext alter_assembly_file_name() throws RecognitionException {
		Alter_assembly_file_nameContext _localctx = new Alter_assembly_file_nameContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alter_assembly_file_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1633);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_file_bitsContext extends ParserRuleContext {
		public Alter_assembly_asContext alter_assembly_as() {
			return getRuleContext(Alter_assembly_asContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_assembly_file_bitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_file_bits; }
	}

	public final Alter_assembly_file_bitsContext alter_assembly_file_bits() throws RecognitionException {
		Alter_assembly_file_bitsContext _localctx = new Alter_assembly_file_bitsContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alter_assembly_file_bits);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1635);
			alter_assembly_as();
			setState(1636);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_asContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Alter_assembly_asContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_as; }
	}

	public final Alter_assembly_asContext alter_assembly_as() throws RecognitionException {
		Alter_assembly_asContext _localctx = new Alter_assembly_asContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_alter_assembly_as);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1638);
			match(AS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_with_clauseContext extends ParserRuleContext {
		public Alter_assembly_withContext alter_assembly_with() {
			return getRuleContext(Alter_assembly_withContext.class,0);
		}
		public Assembly_optionContext assembly_option() {
			return getRuleContext(Assembly_optionContext.class,0);
		}
		public Alter_assembly_with_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_with_clause; }
	}

	public final Alter_assembly_with_clauseContext alter_assembly_with_clause() throws RecognitionException {
		Alter_assembly_with_clauseContext _localctx = new Alter_assembly_with_clauseContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_alter_assembly_with_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1640);
			alter_assembly_with();
			setState(1641);
			assembly_option(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assembly_withContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Alter_assembly_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly_with; }
	}

	public final Alter_assembly_withContext alter_assembly_with() throws RecognitionException {
		Alter_assembly_withContext _localctx = new Alter_assembly_withContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_alter_assembly_with);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1643);
			match(WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Client_assembly_specifierContext extends ParserRuleContext {
		public Network_file_shareContext network_file_share() {
			return getRuleContext(Network_file_shareContext.class,0);
		}
		public Local_fileContext local_file() {
			return getRuleContext(Local_fileContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Client_assembly_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_client_assembly_specifier; }
	}

	public final Client_assembly_specifierContext client_assembly_specifier() throws RecognitionException {
		Client_assembly_specifierContext _localctx = new Client_assembly_specifierContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_client_assembly_specifier);
		try {
			setState(1648);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_BACK_SLASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1645);
				network_file_share();
				}
				break;
			case DISK_DRIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1646);
				local_file();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(1647);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assembly_optionContext extends ParserRuleContext {
		public TerminalNode PERMISSION_SET() { return getToken(TSqlParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode SAFE() { return getToken(TSqlParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(TSqlParser.UNSAFE, 0); }
		public TerminalNode VISIBILITY() { return getToken(TSqlParser.VISIBILITY, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode UNCHECKED() { return getToken(TSqlParser.UNCHECKED, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public Assembly_optionContext assembly_option() {
			return getRuleContext(Assembly_optionContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assembly_option; }
	}

	public final Assembly_optionContext assembly_option() throws RecognitionException {
		return assembly_option(0);
	}

	private Assembly_optionContext assembly_option(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, _parentState);
		Assembly_optionContext _prevctx = _localctx;
		int _startState = 92;
		enterRecursionRule(_localctx, 92, RULE_assembly_option, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERMISSION_SET:
				{
				setState(1651);
				match(PERMISSION_SET);
				setState(1652);
				match(EQUAL);
				setState(1653);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case VISIBILITY:
				{
				setState(1654);
				match(VISIBILITY);
				setState(1655);
				match(EQUAL);
				setState(1656);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNCHECKED:
				{
				setState(1657);
				match(UNCHECKED);
				setState(1658);
				match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(1665);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Assembly_optionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_assembly_option);
					setState(1661);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(1662);
					match(COMMA);
					}
					} 
				}
				setState(1667);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,80,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Network_file_shareContext extends ParserRuleContext {
		public Network_file_startContext network_file_start() {
			return getRuleContext(Network_file_startContext.class,0);
		}
		public Network_computerContext network_computer() {
			return getRuleContext(Network_computerContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Network_file_shareContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_file_share; }
	}

	public final Network_file_shareContext network_file_share() throws RecognitionException {
		Network_file_shareContext _localctx = new Network_file_shareContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_network_file_share);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1668);
			network_file_start();
			setState(1669);
			network_computer();
			setState(1670);
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_computerContext extends ParserRuleContext {
		public IdContext computer_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Network_computerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_computer; }
	}

	public final Network_computerContext network_computer() throws RecognitionException {
		Network_computerContext _localctx = new Network_computerContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_network_computer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1672);
			((Network_computerContext)_localctx).computer_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_file_startContext extends ParserRuleContext {
		public TerminalNode DOUBLE_BACK_SLASH() { return getToken(TSqlParser.DOUBLE_BACK_SLASH, 0); }
		public Network_file_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_file_start; }
	}

	public final Network_file_startContext network_file_start() throws RecognitionException {
		Network_file_startContext _localctx = new Network_file_startContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_network_file_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1674);
			match(DOUBLE_BACK_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_pathContext extends ParserRuleContext {
		public File_directory_path_separatorContext file_directory_path_separator() {
			return getRuleContext(File_directory_path_separatorContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public File_pathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_path; }
	}

	public final File_pathContext file_path() throws RecognitionException {
		File_pathContext _localctx = new File_pathContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_file_path);
		try {
			setState(1680);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BACKSLASH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1676);
				file_directory_path_separator();
				setState(1677);
				file_path();
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1679);
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_directory_path_separatorContext extends ParserRuleContext {
		public TerminalNode BACKSLASH() { return getToken(TSqlParser.BACKSLASH, 0); }
		public File_directory_path_separatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_directory_path_separator; }
	}

	public final File_directory_path_separatorContext file_directory_path_separator() throws RecognitionException {
		File_directory_path_separatorContext _localctx = new File_directory_path_separatorContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_file_directory_path_separator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1682);
			match(BACKSLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_fileContext extends ParserRuleContext {
		public Local_driveContext local_drive() {
			return getRuleContext(Local_driveContext.class,0);
		}
		public File_pathContext file_path() {
			return getRuleContext(File_pathContext.class,0);
		}
		public Local_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_file; }
	}

	public final Local_fileContext local_file() throws RecognitionException {
		Local_fileContext _localctx = new Local_fileContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_local_file);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1684);
			local_drive();
			setState(1685);
			file_path();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Local_driveContext extends ParserRuleContext {
		public TerminalNode DISK_DRIVE() { return getToken(TSqlParser.DISK_DRIVE, 0); }
		public Local_driveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_local_drive; }
	}

	public final Local_driveContext local_drive() throws RecognitionException {
		Local_driveContext _localctx = new Local_driveContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_local_drive);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1687);
			match(DISK_DRIVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_local_filesContext extends ParserRuleContext {
		public Multiple_local_file_startContext multiple_local_file_start() {
			return getRuleContext(Multiple_local_file_startContext.class,0);
		}
		public Local_fileContext local_file() {
			return getRuleContext(Local_fileContext.class,0);
		}
		public TerminalNode SINGLE_QUOTE() { return getToken(TSqlParser.SINGLE_QUOTE, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Multiple_local_filesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_local_files; }
	}

	public final Multiple_local_filesContext multiple_local_files() throws RecognitionException {
		Multiple_local_filesContext _localctx = new Multiple_local_filesContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_multiple_local_files);
		try {
			setState(1695);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1689);
				multiple_local_file_start();
				setState(1690);
				local_file();
				setState(1691);
				match(SINGLE_QUOTE);
				setState(1692);
				match(COMMA);
				}
				break;
			case DISK_DRIVE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1694);
				local_file();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiple_local_file_startContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTE() { return getToken(TSqlParser.SINGLE_QUOTE, 0); }
		public Multiple_local_file_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiple_local_file_start; }
	}

	public final Multiple_local_file_startContext multiple_local_file_start() throws RecognitionException {
		Multiple_local_file_startContext _localctx = new Multiple_local_file_startContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_multiple_local_file_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1697);
			match(SINGLE_QUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PERMISSION_SET() { return getToken(TSqlParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public TerminalNode SAFE() { return getToken(TSqlParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(TSqlParser.UNSAFE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_assembly; }
	}

	public final Create_assemblyContext create_assembly() throws RecognitionException {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_create_assembly);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1699);
			match(CREATE);
			setState(1700);
			match(ASSEMBLY);
			setState(1701);
			((Create_assemblyContext)_localctx).assembly_name = id();
			setState(1704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1702);
				match(AUTHORIZATION);
				setState(1703);
				((Create_assemblyContext)_localctx).owner_name = id();
				}
			}

			setState(1706);
			match(FROM);
			setState(1711); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1708);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1707);
					match(COMMA);
					}
				}

				setState(1710);
				_la = _input.LA(1);
				if ( !(_la==STRING || _la==BINARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(1713); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 818)) & ~0x3f) == 0 && ((1L << (_la - 818)) & ((1L << (STRING - 818)) | (1L << (BINARY - 818)) | (1L << (COMMA - 818)))) != 0) );
			setState(1719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				setState(1715);
				match(WITH);
				setState(1716);
				match(PERMISSION_SET);
				setState(1717);
				match(EQUAL);
				setState(1718);
				_la = _input.LA(1);
				if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode DEPENDENTS() { return getToken(TSqlParser.DEPENDENTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_assembly; }
	}

	public final Drop_assemblyContext drop_assembly() throws RecognitionException {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_drop_assembly);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1721);
			match(DROP);
			setState(1722);
			match(ASSEMBLY);
			setState(1725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1723);
				match(IF);
				setState(1724);
				match(EXISTS);
				}
			}

			setState(1731); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1728);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1727);
						match(COMMA);
						}
					}

					setState(1730);
					((Drop_assemblyContext)_localctx).assembly_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1733); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,89,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1735);
				match(WITH);
				setState(1736);
				match(NO);
				setState(1737);
				match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_keyContext extends ParserRuleContext {
		public IdContext Asym_Key_Name;
		public Alter_asymmetric_key_startContext alter_asymmetric_key_start() {
			return getRuleContext(Alter_asymmetric_key_startContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return getRuleContext(Asymmetric_key_optionContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key; }
	}

	public final Alter_asymmetric_keyContext alter_asymmetric_key() throws RecognitionException {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alter_asymmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1740);
			alter_asymmetric_key_start();
			setState(1741);
			((Alter_asymmetric_keyContext)_localctx).Asym_Key_Name = id();
			setState(1746);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(1742);
				asymmetric_key_option();
				}
				break;
			case REMOVE:
				{
				setState(1743);
				match(REMOVE);
				setState(1744);
				match(PRIVATE);
				setState(1745);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_key_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Alter_asymmetric_key_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key_start; }
	}

	public final Alter_asymmetric_key_startContext alter_asymmetric_key_start() throws RecognitionException {
		Alter_asymmetric_key_startContext _localctx = new Alter_asymmetric_key_startContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alter_asymmetric_key_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1748);
			match(ALTER);
			setState(1749);
			match(ASYMMETRIC);
			setState(1750);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_optionContext extends ParserRuleContext {
		public Asymmetric_key_option_startContext asymmetric_key_option_start() {
			return getRuleContext(Asymmetric_key_option_startContext.class,0);
		}
		public List<Asymmetric_key_password_change_optionContext> asymmetric_key_password_change_option() {
			return getRuleContexts(Asymmetric_key_password_change_optionContext.class);
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return getRuleContext(Asymmetric_key_password_change_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option; }
	}

	public final Asymmetric_key_optionContext asymmetric_key_option() throws RecognitionException {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_asymmetric_key_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1752);
			asymmetric_key_option_start();
			setState(1753);
			asymmetric_key_password_change_option();
			setState(1756);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1754);
				match(COMMA);
				setState(1755);
				asymmetric_key_password_change_option();
				}
			}

			setState(1758);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_option_startContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Asymmetric_key_option_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option_start; }
	}

	public final Asymmetric_key_option_startContext asymmetric_key_option_start() throws RecognitionException {
		Asymmetric_key_option_startContext _localctx = new Asymmetric_key_option_startContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_asymmetric_key_option_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1760);
			match(WITH);
			setState(1761);
			match(PRIVATE);
			setState(1762);
			match(KEY);
			setState(1763);
			match(LR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_password_change_optionContext extends ParserRuleContext {
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_password_change_option; }
	}

	public final Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() throws RecognitionException {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_asymmetric_key_password_change_option);
		try {
			setState(1775);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1765);
				match(DECRYPTION);
				setState(1766);
				match(BY);
				setState(1767);
				match(PASSWORD);
				setState(1768);
				match(EQUAL);
				setState(1769);
				match(STRING);
				}
				break;
			case ENCRYPTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1770);
				match(ENCRYPTION);
				setState(1771);
				match(BY);
				setState(1772);
				match(PASSWORD);
				setState(1773);
				match(EQUAL);
				setState(1774);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_asymmetric_keyContext extends ParserRuleContext {
		public IdContext Asym_Key_Nam;
		public IdContext database_principal_name;
		public IdContext Assembly_Name;
		public IdContext Provider_Name;
		public Token provider_key_name;
		public Token asymmetric_key_password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EXECUTABLE_FILE() { return getToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode RSA_4096() { return getToken(TSqlParser.RSA_4096, 0); }
		public TerminalNode RSA_3072() { return getToken(TSqlParser.RSA_3072, 0); }
		public TerminalNode RSA_2048() { return getToken(TSqlParser.RSA_2048, 0); }
		public TerminalNode RSA_1024() { return getToken(TSqlParser.RSA_1024, 0); }
		public TerminalNode RSA_512() { return getToken(TSqlParser.RSA_512, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_asymmetric_key; }
	}

	public final Create_asymmetric_keyContext create_asymmetric_key() throws RecognitionException {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_create_asymmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1777);
			match(CREATE);
			setState(1778);
			match(ASYMMETRIC);
			setState(1779);
			match(KEY);
			setState(1780);
			((Create_asymmetric_keyContext)_localctx).Asym_Key_Nam = id();
			setState(1783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1781);
				match(AUTHORIZATION);
				setState(1782);
				((Create_asymmetric_keyContext)_localctx).database_principal_name = id();
				}
			}

			setState(1798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1785);
				match(FROM);
				setState(1796);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILE:
					{
					setState(1786);
					match(FILE);
					setState(1787);
					match(EQUAL);
					setState(1788);
					match(STRING);
					}
					break;
				case EXECUTABLE_FILE:
					{
					setState(1789);
					match(EXECUTABLE_FILE);
					setState(1790);
					match(EQUAL);
					setState(1791);
					match(STRING);
					}
					break;
				case ASSEMBLY:
					{
					setState(1792);
					match(ASSEMBLY);
					setState(1793);
					((Create_asymmetric_keyContext)_localctx).Assembly_Name = id();
					}
					break;
				case PROVIDER:
					{
					setState(1794);
					match(PROVIDER);
					setState(1795);
					((Create_asymmetric_keyContext)_localctx).Provider_Name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1800);
				match(WITH);
				setState(1810);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(1801);
					match(ALGORITHM);
					setState(1802);
					match(EQUAL);
					setState(1803);
					_la = _input.LA(1);
					if ( !(((((_la - 759)) & ~0x3f) == 0 && ((1L << (_la - 759)) & ((1L << (RSA_512 - 759)) | (1L << (RSA_1024 - 759)) | (1L << (RSA_2048 - 759)) | (1L << (RSA_3072 - 759)) | (1L << (RSA_4096 - 759)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(1804);
					match(PROVIDER_KEY_NAME);
					setState(1805);
					match(EQUAL);
					setState(1806);
					((Create_asymmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(1807);
					match(CREATION_DISPOSITION);
					setState(1808);
					match(EQUAL);
					setState(1809);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				setState(1814);
				match(ENCRYPTION);
				setState(1815);
				match(BY);
				setState(1816);
				match(PASSWORD);
				setState(1817);
				match(EQUAL);
				setState(1818);
				((Create_asymmetric_keyContext)_localctx).asymmetric_key_password = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_asymmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_asymmetric_key; }
	}

	public final Drop_asymmetric_keyContext drop_asymmetric_key() throws RecognitionException {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_drop_asymmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1821);
			match(DROP);
			setState(1822);
			match(ASYMMETRIC);
			setState(1823);
			match(KEY);
			setState(1824);
			((Drop_asymmetric_keyContext)_localctx).key_name = id();
			setState(1828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				setState(1825);
				match(REMOVE);
				setState(1826);
				match(PROVIDER);
				setState(1827);
				match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorizationContext extends ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_nameContext entity_name() {
			return getRuleContext(Entity_nameContext.class,0);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization; }
	}

	public final Alter_authorizationContext alter_authorization() throws RecognitionException {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alter_authorization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1830);
			alter_authorization_start();
			setState(1834);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,101,_ctx) ) {
			case 1:
				{
				setState(1831);
				class_type();
				setState(1832);
				colon_colon();
				}
				break;
			}
			setState(1836);
			((Alter_authorizationContext)_localctx).entity = entity_name();
			setState(1837);
			entity_to();
			setState(1838);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Authorization_granteeContext extends ParserRuleContext {
		public IdContext principal_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization_grantee; }
	}

	public final Authorization_granteeContext authorization_grantee() throws RecognitionException {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_authorization_grantee);
		try {
			setState(1843);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1840);
				((Authorization_granteeContext)_localctx).principal_name = id();
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1841);
				match(SCHEMA);
				setState(1842);
				match(OWNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_toContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public Entity_toContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_to; }
	}

	public final Entity_toContext entity_to() throws RecognitionException {
		Entity_toContext _localctx = new Entity_toContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_entity_to);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1845);
			match(TO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Colon_colonContext extends ParserRuleContext {
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public Colon_colonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colon_colon; }
	}

	public final Colon_colonContext colon_colon() throws RecognitionException {
		Colon_colonContext _localctx = new Colon_colonContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_colon_colon);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1847);
			match(COLON);
			setState(1848);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_startContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Alter_authorization_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_start; }
	}

	public final Alter_authorization_startContext alter_authorization_start() throws RecognitionException {
		Alter_authorization_startContext _localctx = new Alter_authorization_startContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_alter_authorization_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1850);
			match(ALTER);
			setState(1851);
			match(AUTHORIZATION);
			setState(1852);
			match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_sql_databaseContext extends ParserRuleContext {
		public Entity_nameContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_nameContext entity_name() {
			return getRuleContext(Entity_nameContext.class,0);
		}
		public Class_type_for_sql_databaseContext class_type_for_sql_database() {
			return getRuleContext(Class_type_for_sql_databaseContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_sql_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_sql_database; }
	}

	public final Alter_authorization_for_sql_databaseContext alter_authorization_for_sql_database() throws RecognitionException {
		Alter_authorization_for_sql_databaseContext _localctx = new Alter_authorization_for_sql_databaseContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_alter_authorization_for_sql_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1854);
			alter_authorization_start();
			setState(1858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				setState(1855);
				class_type_for_sql_database();
				setState(1856);
				colon_colon();
				}
				break;
			}
			setState(1860);
			((Alter_authorization_for_sql_databaseContext)_localctx).entity = entity_name();
			setState(1861);
			entity_to();
			setState(1862);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_azure_dwContext extends ParserRuleContext {
		public Entity_name_for_azure_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_name_for_azure_dwContext entity_name_for_azure_dw() {
			return getRuleContext(Entity_name_for_azure_dwContext.class,0);
		}
		public Class_type_for_azure_dwContext class_type_for_azure_dw() {
			return getRuleContext(Class_type_for_azure_dwContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_azure_dw; }
	}

	public final Alter_authorization_for_azure_dwContext alter_authorization_for_azure_dw() throws RecognitionException {
		Alter_authorization_for_azure_dwContext _localctx = new Alter_authorization_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_alter_authorization_for_azure_dw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1864);
			alter_authorization_start();
			setState(1868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
			case 1:
				{
				setState(1865);
				class_type_for_azure_dw();
				setState(1866);
				colon_colon();
				}
				break;
			}
			setState(1870);
			((Alter_authorization_for_azure_dwContext)_localctx).entity = entity_name_for_azure_dw();
			setState(1871);
			entity_to();
			setState(1872);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorization_for_parallel_dwContext extends ParserRuleContext {
		public Entity_name_for_parallel_dwContext entity;
		public Alter_authorization_startContext alter_authorization_start() {
			return getRuleContext(Alter_authorization_startContext.class,0);
		}
		public Entity_toContext entity_to() {
			return getRuleContext(Entity_toContext.class,0);
		}
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() {
			return getRuleContext(Entity_name_for_parallel_dwContext.class,0);
		}
		public Class_type_for_parallel_dwContext class_type_for_parallel_dw() {
			return getRuleContext(Class_type_for_parallel_dwContext.class,0);
		}
		public Colon_colonContext colon_colon() {
			return getRuleContext(Colon_colonContext.class,0);
		}
		public Alter_authorization_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization_for_parallel_dw; }
	}

	public final Alter_authorization_for_parallel_dwContext alter_authorization_for_parallel_dw() throws RecognitionException {
		Alter_authorization_for_parallel_dwContext _localctx = new Alter_authorization_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_alter_authorization_for_parallel_dw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1874);
			alter_authorization_start();
			setState(1878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1875);
				class_type_for_parallel_dw();
				setState(1876);
				colon_colon();
				}
				break;
			}
			setState(1880);
			((Alter_authorization_for_parallel_dwContext)_localctx).entity = entity_name_for_parallel_dw();
			setState(1881);
			entity_to();
			setState(1882);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_typeContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type; }
	}

	public final Class_typeContext class_type() throws RecognitionException {
		Class_typeContext _localctx = new Class_typeContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_class_type);
		try {
			setState(1918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1884);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1885);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1886);
				match(ASYMMETRIC);
				setState(1887);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1888);
				match(AVAILABILITY);
				setState(1889);
				match(GROUP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1890);
				match(CERTIFICATE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1891);
				match(CONTRACT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1892);
				match(TYPE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1893);
				match(DATABASE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1894);
				match(ENDPOINT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1895);
				match(FULLTEXT);
				setState(1896);
				match(CATALOG);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1897);
				match(FULLTEXT);
				setState(1898);
				match(STOPLIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1899);
				match(MESSAGE);
				setState(1900);
				match(TYPE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1901);
				match(REMOTE);
				setState(1902);
				match(SERVICE);
				setState(1903);
				match(BINDING);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1904);
				match(ROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1905);
				match(ROUTE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1906);
				match(SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1907);
				match(SEARCH);
				setState(1908);
				match(PROPERTY);
				setState(1909);
				match(LIST);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1910);
				match(SERVER);
				setState(1911);
				match(ROLE);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1912);
				match(SERVICE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1913);
				match(SYMMETRIC);
				setState(1914);
				match(KEY);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1915);
				match(XML);
				setState(1916);
				match(SCHEMA);
				setState(1917);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_sql_databaseContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Class_type_for_sql_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_sql_database; }
	}

	public final Class_type_for_sql_databaseContext class_type_for_sql_database() throws RecognitionException {
		Class_type_for_sql_databaseContext _localctx = new Class_type_for_sql_databaseContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_class_type_for_sql_database);
		try {
			setState(1941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1920);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1921);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1922);
				match(ASYMMETRIC);
				setState(1923);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1924);
				match(CERTIFICATE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1925);
				match(TYPE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1926);
				match(DATABASE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1927);
				match(FULLTEXT);
				setState(1928);
				match(CATALOG);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1929);
				match(FULLTEXT);
				setState(1930);
				match(STOPLIST);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1931);
				match(ROLE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1932);
				match(SCHEMA);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1933);
				match(SEARCH);
				setState(1934);
				match(PROPERTY);
				setState(1935);
				match(LIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1936);
				match(SYMMETRIC);
				setState(1937);
				match(KEY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1938);
				match(XML);
				setState(1939);
				match(SCHEMA);
				setState(1940);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_azure_dwContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_azure_dw; }
	}

	public final Class_type_for_azure_dwContext class_type_for_azure_dw() throws RecognitionException {
		Class_type_for_azure_dwContext _localctx = new Class_type_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_class_type_for_azure_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1943);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_type_for_parallel_dwContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public Class_type_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type_for_parallel_dw; }
	}

	public final Class_type_for_parallel_dwContext class_type_for_parallel_dw() throws RecognitionException {
		Class_type_for_parallel_dwContext _localctx = new Class_type_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_class_type_for_parallel_dw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1945);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA || _la==OBJECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_availability_groupContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_availability_group; }
	}

	public final Drop_availability_groupContext drop_availability_group() throws RecognitionException {
		Drop_availability_groupContext _localctx = new Drop_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_drop_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1947);
			match(DROP);
			setState(1948);
			match(AVAILABILITY);
			setState(1949);
			match(GROUP);
			setState(1950);
			((Drop_availability_groupContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_groupContext extends ParserRuleContext {
		public Alter_availability_group_startContext alter_availability_group_start() {
			return getRuleContext(Alter_availability_group_startContext.class,0);
		}
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return getRuleContext(Alter_availability_group_optionsContext.class,0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group; }
	}

	public final Alter_availability_groupContext alter_availability_group() throws RecognitionException {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_alter_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1952);
			alter_availability_group_start();
			setState(1953);
			alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_startContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_availability_group_startContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_start; }
	}

	public final Alter_availability_group_startContext alter_availability_group_start() throws RecognitionException {
		Alter_availability_group_startContext _localctx = new Alter_availability_group_startContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_alter_availability_group_start);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1955);
			match(ALTER);
			setState(1956);
			match(AVAILABILITY);
			setState(1957);
			match(GROUP);
			setState(1958);
			((Alter_availability_group_startContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_optionsContext extends ParserRuleContext {
		public Token milliseconds;
		public IdContext database_name;
		public Token server_instance;
		public Token session_timeout;
		public Token ag_name;
		public Token ag_name_modified;
		public Token listener_name;
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode AUTOMATED_BACKUP_PREFERENCE() { return getToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(TSqlParser.DB_FAILOVER, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(TSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY() { return getToken(TSqlParser.SECONDARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode REPLICA() { return getToken(TSqlParser.REPLICA, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public TerminalNode ENDPOINT_URL() { return getToken(TSqlParser.ENDPOINT_URL, 0); }
		public List<TerminalNode> AVAILABILITY_MODE() { return getTokens(TSqlParser.AVAILABILITY_MODE); }
		public TerminalNode AVAILABILITY_MODE(int i) {
			return getToken(TSqlParser.AVAILABILITY_MODE, i);
		}
		public List<TerminalNode> FAILOVER_MODE() { return getTokens(TSqlParser.FAILOVER_MODE); }
		public TerminalNode FAILOVER_MODE(int i) {
			return getToken(TSqlParser.FAILOVER_MODE, i);
		}
		public List<TerminalNode> SEEDING_MODE() { return getTokens(TSqlParser.SEEDING_MODE); }
		public TerminalNode SEEDING_MODE(int i) {
			return getToken(TSqlParser.SEEDING_MODE, i);
		}
		public TerminalNode BACKUP_PRIORITY() { return getToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(TSqlParser.PRIMARY_ROLE, 0); }
		public List<TerminalNode> ALLOW_CONNECTIONS() { return getTokens(TSqlParser.ALLOW_CONNECTIONS); }
		public TerminalNode ALLOW_CONNECTIONS(int i) {
			return getToken(TSqlParser.ALLOW_CONNECTIONS, i);
		}
		public TerminalNode SECONDARY_ROLE() { return getToken(TSqlParser.SECONDARY_ROLE, 0); }
		public List<TerminalNode> SYNCHRONOUS_COMMIT() { return getTokens(TSqlParser.SYNCHRONOUS_COMMIT); }
		public TerminalNode SYNCHRONOUS_COMMIT(int i) {
			return getToken(TSqlParser.SYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> ASYNCHRONOUS_COMMIT() { return getTokens(TSqlParser.ASYNCHRONOUS_COMMIT); }
		public TerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return getToken(TSqlParser.ASYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> AUTOMATIC() { return getTokens(TSqlParser.AUTOMATIC); }
		public TerminalNode AUTOMATIC(int i) {
			return getToken(TSqlParser.AUTOMATIC, i);
		}
		public List<TerminalNode> MANUAL() { return getTokens(TSqlParser.MANUAL); }
		public TerminalNode MANUAL(int i) {
			return getToken(TSqlParser.MANUAL, i);
		}
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<TerminalNode> LISTENER_URL() { return getTokens(TSqlParser.LISTENER_URL); }
		public TerminalNode LISTENER_URL(int i) {
			return getToken(TSqlParser.LISTENER_URL, i);
		}
		public TerminalNode GRANT() { return getToken(TSqlParser.GRANT, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public TerminalNode DENY() { return getToken(TSqlParser.DENY, 0); }
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode LISTENER() { return getToken(TSqlParser.LISTENER, 0); }
		public TerminalNode DHCP() { return getToken(TSqlParser.DHCP, 0); }
		public TerminalNode IP() { return getToken(TSqlParser.IP, 0); }
		public List<Ip_v4_failoverContext> ip_v4_failover() {
			return getRuleContexts(Ip_v4_failoverContext.class);
		}
		public Ip_v4_failoverContext ip_v4_failover(int i) {
			return getRuleContext(Ip_v4_failoverContext.class,i);
		}
		public TerminalNode PORT() { return getToken(TSqlParser.PORT, 0); }
		public List<Ip_v6_failoverContext> ip_v6_failover() {
			return getRuleContexts(Ip_v6_failoverContext.class);
		}
		public Ip_v6_failoverContext ip_v6_failover(int i) {
			return getRuleContext(Ip_v6_failoverContext.class,i);
		}
		public TerminalNode RESTART() { return getToken(TSqlParser.RESTART, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode DTC_SUPPORT() { return getToken(TSqlParser.DTC_SUPPORT, 0); }
		public TerminalNode PER_DB() { return getToken(TSqlParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_options; }
	}

	public final Alter_availability_group_optionsContext alter_availability_group_options() throws RecognitionException {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_alter_availability_group_options);
		int _la;
		try {
			setState(2315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1960);
				match(SET);
				setState(1961);
				match(LR_BRACKET);
				{
				setState(1977);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTOMATED_BACKUP_PREFERENCE:
					{
					setState(1962);
					match(AUTOMATED_BACKUP_PREFERENCE);
					setState(1963);
					match(EQUAL);
					setState(1964);
					_la = _input.LA(1);
					if ( !(_la==PRIMARY || _la==SECONDARY || _la==SECONDARY_ONLY || _la==NONE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FAILURE_CONDITION_LEVEL:
					{
					setState(1965);
					match(FAILURE_CONDITION_LEVEL);
					setState(1966);
					match(EQUAL);
					setState(1967);
					match(DECIMAL);
					}
					break;
				case HEALTH_CHECK_TIMEOUT:
					{
					setState(1968);
					match(HEALTH_CHECK_TIMEOUT);
					setState(1969);
					match(EQUAL);
					setState(1970);
					((Alter_availability_group_optionsContext)_localctx).milliseconds = match(DECIMAL);
					}
					break;
				case DB_FAILOVER:
					{
					setState(1971);
					match(DB_FAILOVER);
					setState(1972);
					match(EQUAL);
					setState(1973);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					{
					setState(1974);
					match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					setState(1975);
					match(EQUAL);
					setState(1976);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1979);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1980);
				match(ADD);
				setState(1981);
				match(DATABASE);
				setState(1982);
				((Alter_availability_group_optionsContext)_localctx).database_name = id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1983);
				match(REMOVE);
				setState(1984);
				match(DATABASE);
				setState(1985);
				((Alter_availability_group_optionsContext)_localctx).database_name = id();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1986);
				match(ADD);
				setState(1987);
				match(REPLICA);
				setState(1988);
				match(ON);
				setState(1989);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				{
				setState(1990);
				match(WITH);
				setState(1991);
				match(LR_BRACKET);
				{
				setState(1995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDPOINT_URL) {
					{
					setState(1992);
					match(ENDPOINT_URL);
					setState(1993);
					match(EQUAL);
					setState(1994);
					match(STRING);
					}
				}

				setState(2003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,111,_ctx) ) {
				case 1:
					{
					setState(1998);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1997);
						match(COMMA);
						}
					}

					setState(2000);
					match(AVAILABILITY_MODE);
					setState(2001);
					match(EQUAL);
					setState(2002);
					_la = _input.LA(1);
					if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2011);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,113,_ctx) ) {
				case 1:
					{
					setState(2006);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2005);
						match(COMMA);
						}
					}

					setState(2008);
					match(FAILOVER_MODE);
					setState(2009);
					match(EQUAL);
					setState(2010);
					_la = _input.LA(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2019);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,115,_ctx) ) {
				case 1:
					{
					setState(2014);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2013);
						match(COMMA);
						}
					}

					setState(2016);
					match(SEEDING_MODE);
					setState(2017);
					match(EQUAL);
					setState(2018);
					_la = _input.LA(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2027);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					setState(2022);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2021);
						match(COMMA);
						}
					}

					setState(2024);
					match(BACKUP_PRIORITY);
					setState(2025);
					match(EQUAL);
					setState(2026);
					match(DECIMAL);
					}
					break;
				}
				setState(2038);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
				case 1:
					{
					setState(2030);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2029);
						match(COMMA);
						}
					}

					setState(2032);
					match(PRIMARY_ROLE);
					setState(2033);
					match(LR_BRACKET);
					setState(2034);
					match(ALLOW_CONNECTIONS);
					setState(2035);
					match(EQUAL);
					setState(2036);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2037);
					match(RR_BRACKET);
					}
					break;
				}
				setState(2049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECONDARY_ROLE || _la==COMMA) {
					{
					setState(2041);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2040);
						match(COMMA);
						}
					}

					setState(2043);
					match(SECONDARY_ROLE);
					setState(2044);
					match(LR_BRACKET);
					setState(2045);
					match(ALLOW_CONNECTIONS);
					setState(2046);
					match(EQUAL);
					{
					setState(2047);
					match(READ_ONLY);
					}
					setState(2048);
					match(RR_BRACKET);
					}
				}

				}
				}
				setState(2051);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2052);
				match(SECONDARY_ROLE);
				setState(2053);
				match(LR_BRACKET);
				setState(2062);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(2054);
					match(ALLOW_CONNECTIONS);
					setState(2055);
					match(EQUAL);
					setState(2056);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(2057);
					match(READ_ONLY_ROUTING_LIST);
					setState(2058);
					match(EQUAL);
					{
					setState(2059);
					match(LR_BRACKET);
					{
					{
					setState(2060);
					match(STRING);
					}
					}
					setState(2061);
					match(RR_BRACKET);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2064);
				match(PRIMARY_ROLE);
				setState(2065);
				match(LR_BRACKET);
				setState(2088);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(2066);
					match(ALLOW_CONNECTIONS);
					setState(2067);
					match(EQUAL);
					setState(2068);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(2069);
					match(READ_ONLY_ROUTING_LIST);
					setState(2070);
					match(EQUAL);
					{
					setState(2071);
					match(LR_BRACKET);
					setState(2082);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
					case RR_BRACKET:
					case COMMA:
						{
						setState(2078);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==STRING || _la==COMMA) {
							{
							{
							setState(2073);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2072);
								match(COMMA);
								}
							}

							setState(2075);
							match(STRING);
							}
							}
							setState(2080);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					case NONE:
						{
						setState(2081);
						match(NONE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2084);
					match(RR_BRACKET);
					}
					}
					break;
				case SESSION_TIMEOUT:
					{
					setState(2085);
					match(SESSION_TIMEOUT);
					setState(2086);
					match(EQUAL);
					setState(2087);
					((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2090);
				match(MODIFY);
				setState(2091);
				match(REPLICA);
				setState(2092);
				match(ON);
				setState(2093);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				setState(2151);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(2094);
					match(WITH);
					setState(2095);
					match(LR_BRACKET);
					setState(2111);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ENDPOINT_URL:
						{
						setState(2096);
						match(ENDPOINT_URL);
						setState(2097);
						match(EQUAL);
						setState(2098);
						match(STRING);
						}
						break;
					case AVAILABILITY_MODE:
						{
						setState(2099);
						match(AVAILABILITY_MODE);
						setState(2100);
						match(EQUAL);
						setState(2101);
						_la = _input.LA(1);
						if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case FAILOVER_MODE:
						{
						setState(2102);
						match(FAILOVER_MODE);
						setState(2103);
						match(EQUAL);
						setState(2104);
						_la = _input.LA(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case SEEDING_MODE:
						{
						setState(2105);
						match(SEEDING_MODE);
						setState(2106);
						match(EQUAL);
						setState(2107);
						_la = _input.LA(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case BACKUP_PRIORITY:
						{
						setState(2108);
						match(BACKUP_PRIORITY);
						setState(2109);
						match(EQUAL);
						setState(2110);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case SECONDARY_ROLE:
					{
					setState(2113);
					match(SECONDARY_ROLE);
					setState(2114);
					match(LR_BRACKET);
					setState(2123);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(2115);
						match(ALLOW_CONNECTIONS);
						setState(2116);
						match(EQUAL);
						setState(2117);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(2118);
						match(READ_ONLY_ROUTING_LIST);
						setState(2119);
						match(EQUAL);
						{
						setState(2120);
						match(LR_BRACKET);
						{
						{
						setState(2121);
						match(STRING);
						}
						}
						setState(2122);
						match(RR_BRACKET);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case PRIMARY_ROLE:
					{
					setState(2125);
					match(PRIMARY_ROLE);
					setState(2126);
					match(LR_BRACKET);
					setState(2149);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(2127);
						match(ALLOW_CONNECTIONS);
						setState(2128);
						match(EQUAL);
						setState(2129);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(2130);
						match(READ_ONLY_ROUTING_LIST);
						setState(2131);
						match(EQUAL);
						{
						setState(2132);
						match(LR_BRACKET);
						setState(2143);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
						case RR_BRACKET:
						case COMMA:
							{
							setState(2139);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==STRING || _la==COMMA) {
								{
								{
								setState(2134);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(2133);
									match(COMMA);
									}
								}

								setState(2136);
								match(STRING);
								}
								}
								setState(2141);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							break;
						case NONE:
							{
							setState(2142);
							match(NONE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2145);
						match(RR_BRACKET);
						}
						}
						break;
					case SESSION_TIMEOUT:
						{
						setState(2146);
						match(SESSION_TIMEOUT);
						setState(2147);
						match(EQUAL);
						setState(2148);
						((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2153);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2154);
				match(REMOVE);
				setState(2155);
				match(REPLICA);
				setState(2156);
				match(ON);
				setState(2157);
				match(STRING);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2158);
				match(JOIN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2159);
				match(JOIN);
				setState(2160);
				match(AVAILABILITY);
				setState(2161);
				match(GROUP);
				setState(2162);
				match(ON);
				setState(2185); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2164);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2163);
						match(COMMA);
						}
					}

					setState(2166);
					((Alter_availability_group_optionsContext)_localctx).ag_name = match(STRING);
					setState(2167);
					match(WITH);
					setState(2168);
					match(LR_BRACKET);
					{
					setState(2169);
					match(LISTENER_URL);
					setState(2170);
					match(EQUAL);
					setState(2171);
					match(STRING);
					setState(2172);
					match(COMMA);
					setState(2173);
					match(AVAILABILITY_MODE);
					setState(2174);
					match(EQUAL);
					setState(2175);
					_la = _input.LA(1);
					if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2176);
					match(COMMA);
					setState(2177);
					match(FAILOVER_MODE);
					setState(2178);
					match(EQUAL);
					setState(2179);
					match(MANUAL);
					setState(2180);
					match(COMMA);
					setState(2181);
					match(SEEDING_MODE);
					setState(2182);
					match(EQUAL);
					setState(2183);
					_la = _input.LA(1);
					if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2184);
					match(RR_BRACKET);
					}
					}
					}
					setState(2187); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING || _la==COMMA );
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2189);
				match(MODIFY);
				setState(2190);
				match(AVAILABILITY);
				setState(2191);
				match(GROUP);
				setState(2192);
				match(ON);
				setState(2227); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2194);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2193);
						match(COMMA);
						}
					}

					setState(2196);
					((Alter_availability_group_optionsContext)_localctx).ag_name_modified = match(STRING);
					setState(2197);
					match(WITH);
					setState(2198);
					match(LR_BRACKET);
					{
					setState(2199);
					match(LISTENER_URL);
					setState(2200);
					match(EQUAL);
					setState(2201);
					match(STRING);
					setState(2208);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
					case 1:
						{
						setState(2203);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2202);
							match(COMMA);
							}
						}

						setState(2205);
						match(AVAILABILITY_MODE);
						setState(2206);
						match(EQUAL);
						setState(2207);
						_la = _input.LA(1);
						if ( !(_la==SYNCHRONOUS_COMMIT || _la==ASYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(2216);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
					case 1:
						{
						setState(2211);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2210);
							match(COMMA);
							}
						}

						setState(2213);
						match(FAILOVER_MODE);
						setState(2214);
						match(EQUAL);
						setState(2215);
						match(MANUAL);
						}
						break;
					}
					setState(2224);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SEEDING_MODE || _la==COMMA) {
						{
						setState(2219);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2218);
							match(COMMA);
							}
						}

						setState(2221);
						match(SEEDING_MODE);
						setState(2222);
						match(EQUAL);
						setState(2223);
						_la = _input.LA(1);
						if ( !(_la==MANUAL || _la==AUTOMATIC) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(2226);
					match(RR_BRACKET);
					}
					}
					}
					setState(2229); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING || _la==COMMA );
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2231);
				match(GRANT);
				setState(2232);
				match(CREATE);
				setState(2233);
				match(ANY);
				setState(2234);
				match(DATABASE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2235);
				match(DENY);
				setState(2236);
				match(CREATE);
				setState(2237);
				match(ANY);
				setState(2238);
				match(DATABASE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2239);
				match(FAILOVER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2240);
				match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2241);
				match(ADD);
				setState(2242);
				match(LISTENER);
				setState(2243);
				((Alter_availability_group_optionsContext)_localctx).listener_name = match(STRING);
				setState(2244);
				match(LR_BRACKET);
				setState(2280);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					setState(2245);
					match(WITH);
					setState(2246);
					match(DHCP);
					{
					setState(2247);
					match(ON);
					setState(2248);
					match(LR_BRACKET);
					setState(2249);
					ip_v4_failover();
					setState(2250);
					ip_v4_failover();
					setState(2251);
					match(RR_BRACKET);
					}
					}
					break;
				case 2:
					{
					setState(2253);
					match(WITH);
					setState(2254);
					match(IP);
					setState(2255);
					match(LR_BRACKET);
					{
					setState(2269); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2257);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2256);
							match(COMMA);
							}
						}

						setState(2259);
						match(LR_BRACKET);
						setState(2265);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
						case 1:
							{
							setState(2260);
							ip_v4_failover();
							setState(2261);
							match(COMMA);
							setState(2262);
							ip_v4_failover();
							}
							break;
						case 2:
							{
							setState(2264);
							ip_v6_failover();
							}
							break;
						}
						setState(2267);
						match(RR_BRACKET);
						}
						}
						setState(2271); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==LR_BRACKET || _la==COMMA );
					setState(2273);
					match(RR_BRACKET);
					setState(2278);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2274);
						match(COMMA);
						setState(2275);
						match(PORT);
						setState(2276);
						match(EQUAL);
						setState(2277);
						match(DECIMAL);
						}
					}

					}
					}
					break;
				}
				setState(2282);
				match(RR_BRACKET);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2284);
				match(MODIFY);
				setState(2285);
				match(LISTENER);
				setState(2300);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
					{
					setState(2286);
					match(ADD);
					setState(2287);
					match(IP);
					setState(2288);
					match(LR_BRACKET);
					setState(2293);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
					case 1:
						{
						setState(2289);
						ip_v4_failover();
						setState(2290);
						ip_v4_failover();
						}
						break;
					case 2:
						{
						setState(2292);
						ip_v6_failover();
						}
						break;
					}
					setState(2295);
					match(RR_BRACKET);
					}
					break;
				case PORT:
					{
					setState(2297);
					match(PORT);
					setState(2298);
					match(EQUAL);
					setState(2299);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2302);
				match(RESTART);
				setState(2303);
				match(LISTENER);
				setState(2304);
				match(STRING);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2305);
				match(REMOVE);
				setState(2306);
				match(LISTENER);
				setState(2307);
				match(STRING);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2308);
				match(OFFLINE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(2309);
				match(WITH);
				setState(2310);
				match(LR_BRACKET);
				setState(2311);
				match(DTC_SUPPORT);
				setState(2312);
				match(EQUAL);
				setState(2313);
				match(PER_DB);
				setState(2314);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_v4_failoverContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Ip_v4_failoverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_v4_failover; }
	}

	public final Ip_v4_failoverContext ip_v4_failover() throws RecognitionException {
		Ip_v4_failoverContext _localctx = new Ip_v4_failoverContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_ip_v4_failover);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2317);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_v6_failoverContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Ip_v6_failoverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_v6_failover; }
	}

	public final Ip_v6_failoverContext ip_v6_failover() throws RecognitionException {
		Ip_v6_failoverContext _localctx = new Ip_v6_failoverContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_ip_v6_failover);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2319);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_broker_priorityContext extends ParserRuleContext {
		public IdContext ConversationPriorityName;
		public Token RemoteServiceName;
		public Token PriorityValue;
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTRACT_NAME() { return getToken(TSqlParser.CONTRACT_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode LOCAL_SERVICE_NAME() { return getToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public List<TerminalNode> ANY() { return getTokens(TSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(TSqlParser.ANY, i);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_broker_priority; }
	}

	public final Create_or_alter_broker_priorityContext create_or_alter_broker_priority() throws RecognitionException {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2321);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2322);
			match(BROKER);
			setState(2323);
			match(PRIORITY);
			setState(2324);
			((Create_or_alter_broker_priorityContext)_localctx).ConversationPriorityName = id();
			setState(2325);
			match(FOR);
			setState(2326);
			match(CONVERSATION);
			setState(2327);
			match(SET);
			setState(2328);
			match(LR_BRACKET);
			setState(2338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTRACT_NAME) {
				{
				setState(2329);
				match(CONTRACT_NAME);
				setState(2330);
				match(EQUAL);
				setState(2333);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					{
					setState(2331);
					id();
					}
					}
					break;
				case ANY:
					{
					setState(2332);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2335);
					match(COMMA);
					}
				}

				}
			}

			setState(2352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_SERVICE_NAME) {
				{
				setState(2340);
				match(LOCAL_SERVICE_NAME);
				setState(2341);
				match(EQUAL);
				setState(2347);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DOUBLE_FORWARD_SLASH:
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(2343);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOUBLE_FORWARD_SLASH) {
						{
						setState(2342);
						match(DOUBLE_FORWARD_SLASH);
						}
					}

					setState(2345);
					id();
					}
					break;
				case ANY:
					{
					setState(2346);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2349);
					match(COMMA);
					}
				}

				}
			}

			setState(2363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REMOTE_SERVICE_NAME) {
				{
				setState(2354);
				match(REMOTE_SERVICE_NAME);
				setState(2355);
				match(EQUAL);
				setState(2358);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING:
					{
					setState(2356);
					((Create_or_alter_broker_priorityContext)_localctx).RemoteServiceName = match(STRING);
					}
					break;
				case ANY:
					{
					setState(2357);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2360);
					match(COMMA);
					}
				}

				}
			}

			setState(2371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIORITY_LEVEL) {
				{
				setState(2365);
				match(PRIORITY_LEVEL);
				setState(2366);
				match(EQUAL);
				setState(2369);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(2367);
					((Create_or_alter_broker_priorityContext)_localctx).PriorityValue = match(DECIMAL);
					}
					break;
				case DEFAULT:
					{
					setState(2368);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2373);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_broker_priorityContext extends ParserRuleContext {
		public IdContext ConversationPriorityName;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_broker_priority; }
	}

	public final Drop_broker_priorityContext drop_broker_priority() throws RecognitionException {
		Drop_broker_priorityContext _localctx = new Drop_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_drop_broker_priority);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2375);
			match(DROP);
			setState(2376);
			match(BROKER);
			setState(2377);
			match(PRIORITY);
			setState(2378);
			((Drop_broker_priorityContext)_localctx).ConversationPriorityName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(TSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(TSqlParser.BEGIN_DIALOG, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSqlParser.FILE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(TSqlParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(TSqlParser.DECRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_certificate; }
	}

	public final Alter_certificateContext alter_certificate() throws RecognitionException {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_alter_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2380);
			match(ALTER);
			setState(2381);
			match(CERTIFICATE);
			setState(2382);
			((Alter_certificateContext)_localctx).certificate_name = id();
			setState(2422);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(2383);
				match(REMOVE);
				setState(2384);
				match(PRIVATE_KEY);
				}
				break;
			case 2:
				{
				setState(2385);
				match(WITH);
				setState(2386);
				match(PRIVATE);
				setState(2387);
				match(KEY);
				setState(2388);
				match(LR_BRACKET);
				setState(2411); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2411);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(2389);
						match(FILE);
						setState(2390);
						match(EQUAL);
						setState(2391);
						match(STRING);
						setState(2393);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2392);
							match(COMMA);
							}
						}

						}
						break;
					case DECRYPTION:
						{
						setState(2395);
						match(DECRYPTION);
						setState(2396);
						match(BY);
						setState(2397);
						match(PASSWORD);
						setState(2398);
						match(EQUAL);
						setState(2399);
						match(STRING);
						setState(2401);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2400);
							match(COMMA);
							}
						}

						}
						break;
					case ENCRYPTION:
						{
						setState(2403);
						match(ENCRYPTION);
						setState(2404);
						match(BY);
						setState(2405);
						match(PASSWORD);
						setState(2406);
						match(EQUAL);
						setState(2407);
						match(STRING);
						setState(2409);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2408);
							match(COMMA);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2413); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION );
				setState(2415);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(2416);
				match(WITH);
				setState(2417);
				match(ACTIVE);
				setState(2418);
				match(FOR);
				setState(2419);
				match(BEGIN_DIALOG);
				setState(2420);
				match(EQUAL);
				setState(2421);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_encryption_keyContext extends ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public Token algorithm_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_encryption_key; }
	}

	public final Alter_column_encryption_keyContext alter_column_encryption_key() throws RecognitionException {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_alter_column_encryption_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2424);
			match(ALTER);
			setState(2425);
			match(COLUMN);
			setState(2426);
			match(ENCRYPTION);
			setState(2427);
			match(KEY);
			setState(2428);
			((Alter_column_encryption_keyContext)_localctx).column_encryption_key = id();
			setState(2429);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2430);
			match(VALUE);
			setState(2431);
			match(LR_BRACKET);
			setState(2432);
			match(COLUMN_MASTER_KEY);
			setState(2433);
			match(EQUAL);
			setState(2434);
			((Alter_column_encryption_keyContext)_localctx).column_master_key_name = id();
			setState(2443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2435);
				match(COMMA);
				setState(2436);
				match(ALGORITHM);
				setState(2437);
				match(EQUAL);
				setState(2438);
				((Alter_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
				setState(2439);
				match(COMMA);
				setState(2440);
				match(ENCRYPTED_VALUE);
				setState(2441);
				match(EQUAL);
				setState(2442);
				match(BINARY);
				}
			}

			setState(2445);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_encryption_keyContext extends ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public Token algorithm_name;
		public Token encrypted_value;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> COLUMN_MASTER_KEY() { return getTokens(TSqlParser.COLUMN_MASTER_KEY); }
		public TerminalNode COLUMN_MASTER_KEY(int i) {
			return getToken(TSqlParser.COLUMN_MASTER_KEY, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> ENCRYPTED_VALUE() { return getTokens(TSqlParser.ENCRYPTED_VALUE); }
		public TerminalNode ENCRYPTED_VALUE(int i) {
			return getToken(TSqlParser.ENCRYPTED_VALUE, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_encryption_key; }
	}

	public final Create_column_encryption_keyContext create_column_encryption_key() throws RecognitionException {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_create_column_encryption_key);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2447);
			match(CREATE);
			setState(2448);
			match(COLUMN);
			setState(2449);
			match(ENCRYPTION);
			setState(2450);
			match(KEY);
			setState(2451);
			((Create_column_encryption_keyContext)_localctx).column_encryption_key = id();
			setState(2452);
			match(WITH);
			setState(2453);
			match(VALUES);
			setState(2473); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2454);
					match(LR_BRACKET);
					setState(2456);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2455);
						match(COMMA);
						}
					}

					setState(2458);
					match(COLUMN_MASTER_KEY);
					setState(2459);
					match(EQUAL);
					setState(2460);
					((Create_column_encryption_keyContext)_localctx).column_master_key_name = id();
					setState(2461);
					match(COMMA);
					setState(2462);
					match(ALGORITHM);
					setState(2463);
					match(EQUAL);
					setState(2464);
					((Create_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
					setState(2465);
					match(COMMA);
					setState(2466);
					match(ENCRYPTED_VALUE);
					setState(2467);
					match(EQUAL);
					setState(2468);
					((Create_column_encryption_keyContext)_localctx).encrypted_value = match(BINARY);
					setState(2469);
					match(RR_BRACKET);
					setState(2471);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2470);
						match(COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2475); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,173,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_certificate; }
	}

	public final Drop_certificateContext drop_certificate() throws RecognitionException {
		Drop_certificateContext _localctx = new Drop_certificateContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_drop_certificate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2477);
			match(DROP);
			setState(2478);
			match(CERTIFICATE);
			setState(2479);
			((Drop_certificateContext)_localctx).certificate_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_encryption_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_encryption_key; }
	}

	public final Drop_column_encryption_keyContext drop_column_encryption_key() throws RecognitionException {
		Drop_column_encryption_keyContext _localctx = new Drop_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_drop_column_encryption_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2481);
			match(DROP);
			setState(2482);
			match(COLUMN);
			setState(2483);
			match(ENCRYPTION);
			setState(2484);
			match(KEY);
			setState(2485);
			((Drop_column_encryption_keyContext)_localctx).key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_column_master_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_column_master_key; }
	}

	public final Drop_column_master_keyContext drop_column_master_key() throws RecognitionException {
		Drop_column_master_keyContext _localctx = new Drop_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_drop_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2487);
			match(DROP);
			setState(2488);
			match(COLUMN);
			setState(2489);
			match(MASTER);
			setState(2490);
			match(KEY);
			setState(2491);
			((Drop_column_master_keyContext)_localctx).key_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_contractContext extends ParserRuleContext {
		public IdContext dropped_contract_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_contract; }
	}

	public final Drop_contractContext drop_contract() throws RecognitionException {
		Drop_contractContext _localctx = new Drop_contractContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_drop_contract);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2493);
			match(DROP);
			setState(2494);
			match(CONTRACT);
			setState(2495);
			((Drop_contractContext)_localctx).dropped_contract_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_credential; }
	}

	public final Drop_credentialContext drop_credential() throws RecognitionException {
		Drop_credentialContext _localctx = new Drop_credentialContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_drop_credential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2497);
			match(DROP);
			setState(2498);
			match(CREDENTIAL);
			setState(2499);
			((Drop_credentialContext)_localctx).credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_cryptograhic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_cryptograhic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_cryptograhic_provider; }
	}

	public final Drop_cryptograhic_providerContext drop_cryptograhic_provider() throws RecognitionException {
		Drop_cryptograhic_providerContext _localctx = new Drop_cryptograhic_providerContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_drop_cryptograhic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2501);
			match(DROP);
			setState(2502);
			match(CRYPTOGRAPHIC);
			setState(2503);
			match(PROVIDER);
			setState(2504);
			((Drop_cryptograhic_providerContext)_localctx).provider_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_databaseContext extends ParserRuleContext {
		public IdContext database_name_or_database_snapshot_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database; }
	}

	public final Drop_databaseContext drop_database() throws RecognitionException {
		Drop_databaseContext _localctx = new Drop_databaseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_drop_database);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2506);
			match(DROP);
			setState(2507);
			match(DATABASE);
			setState(2510);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2508);
				match(IF);
				setState(2509);
				match(EXISTS);
				}
			}

			setState(2516); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2513);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2512);
						match(COMMA);
						}
					}

					setState(2515);
					((Drop_databaseContext)_localctx).database_name_or_database_snapshot_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2518); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,176,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_database_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_audit_specification; }
	}

	public final Drop_database_audit_specificationContext drop_database_audit_specification() throws RecognitionException {
		Drop_database_audit_specificationContext _localctx = new Drop_database_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_drop_database_audit_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2520);
			match(DROP);
			setState(2521);
			match(DATABASE);
			setState(2522);
			match(AUDIT);
			setState(2523);
			match(SPECIFICATION);
			setState(2524);
			((Drop_database_audit_specificationContext)_localctx).audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_encryption_keyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Drop_database_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_encryption_key; }
	}

	public final Drop_database_encryption_keyContext drop_database_encryption_key() throws RecognitionException {
		Drop_database_encryption_keyContext _localctx = new Drop_database_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_drop_database_encryption_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2526);
			match(DROP);
			setState(2527);
			match(DATABASE);
			setState(2528);
			match(ENCRYPTION);
			setState(2529);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_scoped_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SCOPED() { return getToken(TSqlParser.SCOPED, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_database_scoped_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_scoped_credential; }
	}

	public final Drop_database_scoped_credentialContext drop_database_scoped_credential() throws RecognitionException {
		Drop_database_scoped_credentialContext _localctx = new Drop_database_scoped_credentialContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_drop_database_scoped_credential);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2531);
			match(DROP);
			setState(2532);
			match(DATABASE);
			setState(2533);
			match(SCOPED);
			setState(2534);
			match(CREDENTIAL);
			setState(2535);
			((Drop_database_scoped_credentialContext)_localctx).credential_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_defaultContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext default_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_default; }
	}

	public final Drop_defaultContext drop_default() throws RecognitionException {
		Drop_defaultContext _localctx = new Drop_defaultContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_drop_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2537);
			match(DROP);
			setState(2538);
			match(DEFAULT);
			setState(2541);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2539);
				match(IF);
				setState(2540);
				match(EXISTS);
				}
			}

			{
			setState(2544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2543);
				match(COMMA);
				}
			}

			setState(2549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,179,_ctx) ) {
			case 1:
				{
				setState(2546);
				((Drop_defaultContext)_localctx).schema_name = id();
				setState(2547);
				match(DOT);
				}
				break;
			}
			setState(2551);
			((Drop_defaultContext)_localctx).default_name = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_endpointContext extends ParserRuleContext {
		public IdContext endPointName;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_endpoint; }
	}

	public final Drop_endpointContext drop_endpoint() throws RecognitionException {
		Drop_endpointContext _localctx = new Drop_endpointContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_drop_endpoint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2553);
			match(DROP);
			setState(2554);
			match(ENDPOINT);
			setState(2555);
			((Drop_endpointContext)_localctx).endPointName = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_data_sourceContext extends ParserRuleContext {
		public IdContext external_data_source_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_data_source; }
	}

	public final Drop_external_data_sourceContext drop_external_data_source() throws RecognitionException {
		Drop_external_data_sourceContext _localctx = new Drop_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_drop_external_data_source);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2557);
			match(DROP);
			setState(2558);
			match(EXTERNAL);
			setState(2559);
			match(DATA);
			setState(2560);
			match(SOURCE);
			setState(2561);
			((Drop_external_data_sourceContext)_localctx).external_data_source_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_file_formatContext extends ParserRuleContext {
		public IdContext external_file_format_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(TSqlParser.FORMAT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_file_formatContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_file_format; }
	}

	public final Drop_external_file_formatContext drop_external_file_format() throws RecognitionException {
		Drop_external_file_formatContext _localctx = new Drop_external_file_formatContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_drop_external_file_format);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2563);
			match(DROP);
			setState(2564);
			match(EXTERNAL);
			setState(2565);
			match(FILE);
			setState(2566);
			match(FORMAT);
			setState(2567);
			((Drop_external_file_formatContext)_localctx).external_file_format_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_library; }
	}

	public final Drop_external_libraryContext drop_external_library() throws RecognitionException {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_drop_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2569);
			match(DROP);
			setState(2570);
			match(EXTERNAL);
			setState(2571);
			match(LIBRARY);
			setState(2572);
			((Drop_external_libraryContext)_localctx).library_name = id();
			setState(2575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2573);
				match(AUTHORIZATION);
				setState(2574);
				((Drop_external_libraryContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_resource_pool; }
	}

	public final Drop_external_resource_poolContext drop_external_resource_pool() throws RecognitionException {
		Drop_external_resource_poolContext _localctx = new Drop_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_drop_external_resource_pool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2577);
			match(DROP);
			setState(2578);
			match(EXTERNAL);
			setState(2579);
			match(RESOURCE);
			setState(2580);
			match(POOL);
			setState(2581);
			((Drop_external_resource_poolContext)_localctx).pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_tableContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext table;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_external_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_table; }
	}

	public final Drop_external_tableContext drop_external_table() throws RecognitionException {
		Drop_external_tableContext _localctx = new Drop_external_tableContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_drop_external_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2583);
			match(DROP);
			setState(2584);
			match(EXTERNAL);
			setState(2585);
			match(TABLE);
			setState(2589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				setState(2586);
				((Drop_external_tableContext)_localctx).database_name = id();
				setState(2587);
				match(DOT);
				}
				break;
			}
			setState(2594);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				setState(2591);
				((Drop_external_tableContext)_localctx).schema_name = id();
				setState(2592);
				match(DOT);
				}
				break;
			}
			setState(2596);
			((Drop_external_tableContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_notificationsContext extends ParserRuleContext {
		public IdContext notification_name;
		public IdContext queue_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_event_notificationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_notifications; }
	}

	public final Drop_event_notificationsContext drop_event_notifications() throws RecognitionException {
		Drop_event_notificationsContext _localctx = new Drop_event_notificationsContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_drop_event_notifications);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2598);
			match(DROP);
			setState(2599);
			match(EVENT);
			setState(2600);
			match(NOTIFICATION);
			setState(2605); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2602);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2601);
					match(COMMA);
					}
				}

				setState(2604);
				((Drop_event_notificationsContext)_localctx).notification_name = id();
				}
				}
				setState(2607); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) || _la==COMMA );
			setState(2609);
			match(ON);
			setState(2614);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(2610);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(2611);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(2612);
				match(QUEUE);
				setState(2613);
				((Drop_event_notificationsContext)_localctx).queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_sessionContext extends ParserRuleContext {
		public IdContext event_session_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode SESSION() { return getToken(TSqlParser.SESSION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_session; }
	}

	public final Drop_event_sessionContext drop_event_session() throws RecognitionException {
		Drop_event_sessionContext _localctx = new Drop_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_drop_event_session);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2616);
			match(DROP);
			setState(2617);
			match(EVENT);
			setState(2618);
			match(SESSION);
			setState(2619);
			((Drop_event_sessionContext)_localctx).event_session_name = id();
			setState(2620);
			match(ON);
			setState(2621);
			match(SERVER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_catalog; }
	}

	public final Drop_fulltext_catalogContext drop_fulltext_catalog() throws RecognitionException {
		Drop_fulltext_catalogContext _localctx = new Drop_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_drop_fulltext_catalog);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2623);
			match(DROP);
			setState(2624);
			match(FULLTEXT);
			setState(2625);
			match(CATALOG);
			setState(2626);
			((Drop_fulltext_catalogContext)_localctx).catalog_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_indexContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext table;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_fulltext_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_index; }
	}

	public final Drop_fulltext_indexContext drop_fulltext_index() throws RecognitionException {
		Drop_fulltext_indexContext _localctx = new Drop_fulltext_indexContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_drop_fulltext_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2628);
			match(DROP);
			setState(2629);
			match(FULLTEXT);
			setState(2630);
			match(INDEX);
			setState(2631);
			match(ON);
			setState(2635);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2632);
				((Drop_fulltext_indexContext)_localctx).schema = id();
				setState(2633);
				match(DOT);
				}
				break;
			}
			setState(2637);
			((Drop_fulltext_indexContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_fulltext_stoplist; }
	}

	public final Drop_fulltext_stoplistContext drop_fulltext_stoplist() throws RecognitionException {
		Drop_fulltext_stoplistContext _localctx = new Drop_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_drop_fulltext_stoplist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2639);
			match(DROP);
			setState(2640);
			match(FULLTEXT);
			setState(2641);
			match(STOPLIST);
			setState(2642);
			((Drop_fulltext_stoplistContext)_localctx).stoplist_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_loginContext extends ParserRuleContext {
		public IdContext login_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_loginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_login; }
	}

	public final Drop_loginContext drop_login() throws RecognitionException {
		Drop_loginContext _localctx = new Drop_loginContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_drop_login);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2644);
			match(DROP);
			setState(2645);
			match(LOGIN);
			setState(2646);
			((Drop_loginContext)_localctx).login_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_master_keyContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_master_key; }
	}

	public final Drop_master_keyContext drop_master_key() throws RecognitionException {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_drop_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2648);
			match(DROP);
			setState(2649);
			match(MASTER);
			setState(2650);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_message_typeContext extends ParserRuleContext {
		public IdContext message_type_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_message_type; }
	}

	public final Drop_message_typeContext drop_message_type() throws RecognitionException {
		Drop_message_typeContext _localctx = new Drop_message_typeContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_drop_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2652);
			match(DROP);
			setState(2653);
			match(MESSAGE);
			setState(2654);
			match(TYPE);
			setState(2655);
			((Drop_message_typeContext)_localctx).message_type_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_functionContext extends ParserRuleContext {
		public IdContext partition_function_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_function; }
	}

	public final Drop_partition_functionContext drop_partition_function() throws RecognitionException {
		Drop_partition_functionContext _localctx = new Drop_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_drop_partition_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2657);
			match(DROP);
			setState(2658);
			match(PARTITION);
			setState(2659);
			match(FUNCTION);
			setState(2660);
			((Drop_partition_functionContext)_localctx).partition_function_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_partition_schemeContext extends ParserRuleContext {
		public IdContext partition_scheme_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_partition_scheme; }
	}

	public final Drop_partition_schemeContext drop_partition_scheme() throws RecognitionException {
		Drop_partition_schemeContext _localctx = new Drop_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_drop_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2662);
			match(DROP);
			setState(2663);
			match(PARTITION);
			setState(2664);
			match(SCHEME);
			setState(2665);
			((Drop_partition_schemeContext)_localctx).partition_scheme_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_queueContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_queue; }
	}

	public final Drop_queueContext drop_queue() throws RecognitionException {
		Drop_queueContext _localctx = new Drop_queueContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_drop_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2667);
			match(DROP);
			setState(2668);
			match(QUEUE);
			setState(2672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(2669);
				((Drop_queueContext)_localctx).database_name = id();
				setState(2670);
				match(DOT);
				}
				break;
			}
			setState(2677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2674);
				((Drop_queueContext)_localctx).schema_name = id();
				setState(2675);
				match(DOT);
				}
				break;
			}
			setState(2679);
			((Drop_queueContext)_localctx).queue_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_remote_service_binding; }
	}

	public final Drop_remote_service_bindingContext drop_remote_service_binding() throws RecognitionException {
		Drop_remote_service_bindingContext _localctx = new Drop_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_drop_remote_service_binding);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2681);
			match(DROP);
			setState(2682);
			match(REMOTE);
			setState(2683);
			match(SERVICE);
			setState(2684);
			match(BINDING);
			setState(2685);
			((Drop_remote_service_bindingContext)_localctx).binding_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_resource_pool; }
	}

	public final Drop_resource_poolContext drop_resource_pool() throws RecognitionException {
		Drop_resource_poolContext _localctx = new Drop_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_drop_resource_pool);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2687);
			match(DROP);
			setState(2688);
			match(RESOURCE);
			setState(2689);
			match(POOL);
			setState(2690);
			((Drop_resource_poolContext)_localctx).pool_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_db_role; }
	}

	public final Drop_db_roleContext drop_db_role() throws RecognitionException {
		Drop_db_roleContext _localctx = new Drop_db_roleContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_drop_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2692);
			match(DROP);
			setState(2693);
			match(ROLE);
			setState(2696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2694);
				match(IF);
				setState(2695);
				match(EXISTS);
				}
			}

			setState(2698);
			((Drop_db_roleContext)_localctx).role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_routeContext extends ParserRuleContext {
		public IdContext route_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_route; }
	}

	public final Drop_routeContext drop_route() throws RecognitionException {
		Drop_routeContext _localctx = new Drop_routeContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_drop_route);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2700);
			match(DROP);
			setState(2701);
			match(ROUTE);
			setState(2702);
			((Drop_routeContext)_localctx).route_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ruleContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext rule_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode RULE() { return getToken(TSqlParser.RULE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_rule; }
	}

	public final Drop_ruleContext drop_rule() throws RecognitionException {
		Drop_ruleContext _localctx = new Drop_ruleContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_drop_rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2704);
			match(DROP);
			setState(2705);
			match(RULE);
			setState(2708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(2706);
				match(IF);
				setState(2707);
				match(EXISTS);
				}
				break;
			}
			setState(2719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2710);
					match(COMMA);
					}
				}

				setState(2716);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					setState(2713);
					((Drop_ruleContext)_localctx).schema_name = id();
					setState(2714);
					match(DOT);
					}
					break;
				}
				setState(2718);
				((Drop_ruleContext)_localctx).rule_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_schemaContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_schema; }
	}

	public final Drop_schemaContext drop_schema() throws RecognitionException {
		Drop_schemaContext _localctx = new Drop_schemaContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_drop_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2721);
			match(DROP);
			setState(2722);
			match(SCHEMA);
			setState(2725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2723);
				match(IF);
				setState(2724);
				match(EXISTS);
				}
			}

			setState(2727);
			((Drop_schemaContext)_localctx).schema_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_search_property_listContext extends ParserRuleContext {
		public IdContext property_list_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_search_property_list; }
	}

	public final Drop_search_property_listContext drop_search_property_list() throws RecognitionException {
		Drop_search_property_listContext _localctx = new Drop_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_drop_search_property_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2729);
			match(DROP);
			setState(2730);
			match(SEARCH);
			setState(2731);
			match(PROPERTY);
			setState(2732);
			match(LIST);
			setState(2733);
			((Drop_search_property_listContext)_localctx).property_list_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_security_policyContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext security_policy_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SECURITY() { return getToken(TSqlParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSqlParser.POLICY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_security_policy; }
	}

	public final Drop_security_policyContext drop_security_policy() throws RecognitionException {
		Drop_security_policyContext _localctx = new Drop_security_policyContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_drop_security_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2735);
			match(DROP);
			setState(2736);
			match(SECURITY);
			setState(2737);
			match(POLICY);
			setState(2740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2738);
				match(IF);
				setState(2739);
				match(EXISTS);
				}
			}

			setState(2745);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2742);
				((Drop_security_policyContext)_localctx).schema_name = id();
				setState(2743);
				match(DOT);
				}
				break;
			}
			setState(2747);
			((Drop_security_policyContext)_localctx).security_policy_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_drop_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			match(DROP);
			setState(2750);
			match(SEQUENCE);
			setState(2753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2751);
				match(IF);
				setState(2752);
				match(EXISTS);
				}
				break;
			}
			setState(2769);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,201,_ctx) ) {
			case 1:
				{
				setState(2756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2755);
					match(COMMA);
					}
				}

				setState(2761);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
				case 1:
					{
					setState(2758);
					((Drop_sequenceContext)_localctx).database_name = id();
					setState(2759);
					match(DOT);
					}
					break;
				}
				setState(2766);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
				case 1:
					{
					setState(2763);
					((Drop_sequenceContext)_localctx).schema_name = id();
					setState(2764);
					match(DOT);
					}
					break;
				}
				setState(2768);
				((Drop_sequenceContext)_localctx).sequence_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_audit; }
	}

	public final Drop_server_auditContext drop_server_audit() throws RecognitionException {
		Drop_server_auditContext _localctx = new Drop_server_auditContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_drop_server_audit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2771);
			match(DROP);
			setState(2772);
			match(SERVER);
			setState(2773);
			match(AUDIT);
			setState(2774);
			((Drop_server_auditContext)_localctx).audit_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_audit_specification; }
	}

	public final Drop_server_audit_specificationContext drop_server_audit_specification() throws RecognitionException {
		Drop_server_audit_specificationContext _localctx = new Drop_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_drop_server_audit_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2776);
			match(DROP);
			setState(2777);
			match(SERVER);
			setState(2778);
			match(AUDIT);
			setState(2779);
			match(SPECIFICATION);
			setState(2780);
			((Drop_server_audit_specificationContext)_localctx).audit_specification_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_server_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_server_role; }
	}

	public final Drop_server_roleContext drop_server_role() throws RecognitionException {
		Drop_server_roleContext _localctx = new Drop_server_roleContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_drop_server_role);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2782);
			match(DROP);
			setState(2783);
			match(SERVER);
			setState(2784);
			match(ROLE);
			setState(2785);
			((Drop_server_roleContext)_localctx).role_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_serviceContext extends ParserRuleContext {
		public IdContext dropped_service_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_service; }
	}

	public final Drop_serviceContext drop_service() throws RecognitionException {
		Drop_serviceContext _localctx = new Drop_serviceContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_drop_service);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2787);
			match(DROP);
			setState(2788);
			match(SERVICE);
			setState(2789);
			((Drop_serviceContext)_localctx).dropped_service_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_signatureContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext module_name;
		public IdContext cert_name;
		public IdContext Asym_key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SIGNATURE() { return getToken(TSqlParser.SIGNATURE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COUNTER() { return getToken(TSqlParser.COUNTER, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_signature; }
	}

	public final Drop_signatureContext drop_signature() throws RecognitionException {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_drop_signature);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2791);
			match(DROP);
			setState(2793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNTER) {
				{
				setState(2792);
				match(COUNTER);
				}
			}

			setState(2795);
			match(SIGNATURE);
			setState(2796);
			match(FROM);
			setState(2800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(2797);
				((Drop_signatureContext)_localctx).schema_name = id();
				setState(2798);
				match(DOT);
				}
				break;
			}
			setState(2802);
			((Drop_signatureContext)_localctx).module_name = id();
			setState(2803);
			match(BY);
			setState(2815); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2815);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,206,_ctx) ) {
					case 1:
						{
						setState(2805);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2804);
							match(COMMA);
							}
						}

						setState(2807);
						match(CERTIFICATE);
						setState(2808);
						((Drop_signatureContext)_localctx).cert_name = id();
						}
						break;
					case 2:
						{
						setState(2810);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2809);
							match(COMMA);
							}
						}

						setState(2812);
						match(ASYMMETRIC);
						setState(2813);
						match(KEY);
						setState(2814);
						((Drop_signatureContext)_localctx).Asym_key_name = id();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2817); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,207,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statistics_name_azure_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext object_name;
		public IdContext statistics_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_statistics_name_azure_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics_name_azure_dw_and_pdw; }
	}

	public final Drop_statistics_name_azure_dw_and_pdwContext drop_statistics_name_azure_dw_and_pdw() throws RecognitionException {
		Drop_statistics_name_azure_dw_and_pdwContext _localctx = new Drop_statistics_name_azure_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_drop_statistics_name_azure_dw_and_pdw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2819);
			match(DROP);
			setState(2820);
			match(STATISTICS);
			setState(2824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(2821);
				((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).schema_name = id();
				setState(2822);
				match(DOT);
				}
				break;
			}
			setState(2826);
			((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).object_name = id();
			setState(2827);
			match(DOT);
			setState(2828);
			((Drop_statistics_name_azure_dw_and_pdwContext)_localctx).statistics_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_symmetric_keyContext extends ParserRuleContext {
		public IdContext symmetric_key_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_symmetric_key; }
	}

	public final Drop_symmetric_keyContext drop_symmetric_key() throws RecognitionException {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_drop_symmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2830);
			match(DROP);
			setState(2831);
			match(SYMMETRIC);
			setState(2832);
			match(KEY);
			setState(2833);
			((Drop_symmetric_keyContext)_localctx).symmetric_key_name = id();
			setState(2837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				setState(2834);
				match(REMOVE);
				setState(2835);
				match(PROVIDER);
				setState(2836);
				match(KEY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_synonymContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext synonym_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_synonym; }
	}

	public final Drop_synonymContext drop_synonym() throws RecognitionException {
		Drop_synonymContext _localctx = new Drop_synonymContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_drop_synonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2839);
			match(DROP);
			setState(2840);
			match(SYNONYM);
			setState(2843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2841);
				match(IF);
				setState(2842);
				match(EXISTS);
				}
			}

			setState(2848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				setState(2845);
				((Drop_synonymContext)_localctx).schema = id();
				setState(2846);
				match(DOT);
				}
				break;
			}
			setState(2850);
			((Drop_synonymContext)_localctx).synonym_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_userContext extends ParserRuleContext {
		public IdContext user_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_user; }
	}

	public final Drop_userContext drop_user() throws RecognitionException {
		Drop_userContext _localctx = new Drop_userContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_drop_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2852);
			match(DROP);
			setState(2853);
			match(USER);
			setState(2856);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2854);
				match(IF);
				setState(2855);
				match(EXISTS);
				}
			}

			setState(2858);
			((Drop_userContext)_localctx).user_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_workload_groupContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_workload_group; }
	}

	public final Drop_workload_groupContext drop_workload_group() throws RecognitionException {
		Drop_workload_groupContext _localctx = new Drop_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_drop_workload_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2860);
			match(DROP);
			setState(2861);
			match(WORKLOAD);
			setState(2862);
			match(GROUP);
			setState(2863);
			((Drop_workload_groupContext)_localctx).group_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_xml_schema_collectionContext extends ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Drop_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_xml_schema_collection; }
	}

	public final Drop_xml_schema_collectionContext drop_xml_schema_collection() throws RecognitionException {
		Drop_xml_schema_collectionContext _localctx = new Drop_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_drop_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2865);
			match(DROP);
			setState(2866);
			match(XML);
			setState(2867);
			match(SCHEMA);
			setState(2868);
			match(COLLECTION);
			setState(2872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				setState(2869);
				((Drop_xml_schema_collectionContext)_localctx).relational_schema = id();
				setState(2870);
				match(DOT);
				}
				break;
			}
			setState(2874);
			((Drop_xml_schema_collectionContext)_localctx).sql_identifier = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Disable_triggerContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Disable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_disable_trigger; }
	}

	public final Disable_triggerContext disable_trigger() throws RecognitionException {
		Disable_triggerContext _localctx = new Disable_triggerContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_disable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2876);
			match(DISABLE);
			setState(2877);
			match(TRIGGER);
			setState(2892);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				setState(2887); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2879);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2878);
						match(COMMA);
						}
					}

					setState(2884);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
					case 1:
						{
						setState(2881);
						((Disable_triggerContext)_localctx).schema_name = id();
						setState(2882);
						match(DOT);
						}
						break;
					}
					setState(2886);
					((Disable_triggerContext)_localctx).trigger_name = id();
					}
					}
					setState(2889); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) || _la==COMMA );
				}
				break;
			case ALL:
				{
				setState(2891);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2894);
			match(ON);
			setState(2904);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2898);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
				case 1:
					{
					setState(2895);
					((Disable_triggerContext)_localctx).schema_id = id();
					setState(2896);
					match(DOT);
					}
					break;
				}
				setState(2900);
				((Disable_triggerContext)_localctx).object_name = id();
				}
				break;
			case DATABASE:
				{
				setState(2901);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2902);
				match(ALL);
				setState(2903);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_triggerContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext trigger_name;
		public IdContext schema_id;
		public IdContext object_name;
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Enable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_trigger; }
	}

	public final Enable_triggerContext enable_trigger() throws RecognitionException {
		Enable_triggerContext _localctx = new Enable_triggerContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_enable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2906);
			match(ENABLE);
			setState(2907);
			match(TRIGGER);
			setState(2922);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case COMMA:
				{
				setState(2917); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2909);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2908);
						match(COMMA);
						}
					}

					setState(2914);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
					case 1:
						{
						setState(2911);
						((Enable_triggerContext)_localctx).schema_name = id();
						setState(2912);
						match(DOT);
						}
						break;
					}
					setState(2916);
					((Enable_triggerContext)_localctx).trigger_name = id();
					}
					}
					setState(2919); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) || _la==COMMA );
				}
				break;
			case ALL:
				{
				setState(2921);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2924);
			match(ON);
			setState(2934);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2928);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					setState(2925);
					((Enable_triggerContext)_localctx).schema_id = id();
					setState(2926);
					match(DOT);
					}
					break;
				}
				setState(2930);
				((Enable_triggerContext)_localctx).object_name = id();
				}
				break;
			case DATABASE:
				{
				setState(2931);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2932);
				match(ALL);
				setState(2933);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_tableContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode LOCK() { return getToken(TSqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public TerminalNode MODE() { return getToken(TSqlParser.MODE, 0); }
		public TerminalNode SHARE() { return getToken(TSqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(TSqlParser.EXCLUSIVE, 0); }
		public TerminalNode WAIT() { return getToken(TSqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(TSqlParser.NOWAIT, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table; }
	}

	public final Lock_tableContext lock_table() throws RecognitionException {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_lock_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2936);
			match(LOCK);
			setState(2937);
			match(TABLE);
			setState(2938);
			table_name();
			setState(2939);
			match(IN);
			setState(2940);
			_la = _input.LA(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2941);
			match(MODE);
			setState(2945);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2942);
				match(WAIT);
				setState(2943);
				((Lock_tableContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(2944);
				match(NOWAIT);
				}
				break;
			}
			setState(2948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				setState(2947);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_tableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(TSqlParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode PARTITIONS() { return getToken(TSqlParser.PARTITIONS, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table; }
	}

	public final Truncate_tableContext truncate_table() throws RecognitionException {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_truncate_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2950);
			match(TRUNCATE);
			setState(2951);
			match(TABLE);
			setState(2952);
			table_name();
			setState(2972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(2953);
				match(WITH);
				setState(2954);
				match(LR_BRACKET);
				setState(2955);
				match(PARTITIONS);
				setState(2956);
				match(LR_BRACKET);
				setState(2966); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2958);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2957);
						match(COMMA);
						}
					}

					setState(2964);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
					case 1:
						{
						setState(2960);
						match(DECIMAL);
						}
						break;
					case 2:
						{
						setState(2961);
						match(DECIMAL);
						setState(2962);
						match(TO);
						setState(2963);
						match(DECIMAL);
						}
						break;
					}
					}
					}
					setState(2968); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DECIMAL || _la==COMMA );
				setState(2970);
				match(RR_BRACKET);
				setState(2971);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_master_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token key_store_provider_name;
		public Token key_path;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode KEY_STORE_PROVIDER_NAME() { return getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode KEY_PATH() { return getToken(TSqlParser.KEY_PATH, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_master_key; }
	}

	public final Create_column_master_keyContext create_column_master_key() throws RecognitionException {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_create_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2974);
			match(CREATE);
			setState(2975);
			match(COLUMN);
			setState(2976);
			match(MASTER);
			setState(2977);
			match(KEY);
			setState(2978);
			((Create_column_master_keyContext)_localctx).key_name = id();
			setState(2979);
			match(WITH);
			setState(2980);
			match(LR_BRACKET);
			setState(2981);
			match(KEY_STORE_PROVIDER_NAME);
			setState(2982);
			match(EQUAL);
			setState(2983);
			((Create_column_master_keyContext)_localctx).key_store_provider_name = match(STRING);
			setState(2984);
			match(COMMA);
			setState(2985);
			match(KEY_PATH);
			setState(2986);
			match(EQUAL);
			setState(2987);
			((Create_column_master_keyContext)_localctx).key_path = match(STRING);
			setState(2988);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public Token identity_name;
		public Token secret;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_credential; }
	}

	public final Alter_credentialContext alter_credential() throws RecognitionException {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_alter_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2990);
			match(ALTER);
			setState(2991);
			match(CREDENTIAL);
			setState(2992);
			((Alter_credentialContext)_localctx).credential_name = id();
			setState(2993);
			match(WITH);
			setState(2994);
			match(IDENTITY);
			setState(2995);
			match(EQUAL);
			setState(2996);
			((Alter_credentialContext)_localctx).identity_name = match(STRING);
			setState(3001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2997);
				match(COMMA);
				setState(2998);
				match(SECRET);
				setState(2999);
				match(EQUAL);
				setState(3000);
				((Alter_credentialContext)_localctx).secret = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public Token identity_name;
		public Token secret;
		public IdContext cryptographic_provider_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_credential; }
	}

	public final Create_credentialContext create_credential() throws RecognitionException {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_create_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3003);
			match(CREATE);
			setState(3004);
			match(CREDENTIAL);
			setState(3005);
			((Create_credentialContext)_localctx).credential_name = id();
			setState(3006);
			match(WITH);
			setState(3007);
			match(IDENTITY);
			setState(3008);
			match(EQUAL);
			setState(3009);
			((Create_credentialContext)_localctx).identity_name = match(STRING);
			setState(3014);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3010);
				match(COMMA);
				setState(3011);
				match(SECRET);
				setState(3012);
				match(EQUAL);
				setState(3013);
				((Create_credentialContext)_localctx).secret = match(STRING);
				}
			}

			setState(3020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3016);
				match(FOR);
				setState(3017);
				match(CRYPTOGRAPHIC);
				setState(3018);
				match(PROVIDER);
				setState(3019);
				((Create_credentialContext)_localctx).cryptographic_provider_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_cryptographic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public Token crypto_provider_ddl_file;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_cryptographic_provider; }
	}

	public final Alter_cryptographic_providerContext alter_cryptographic_provider() throws RecognitionException {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_alter_cryptographic_provider);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3022);
			match(ALTER);
			setState(3023);
			match(CRYPTOGRAPHIC);
			setState(3024);
			match(PROVIDER);
			setState(3025);
			((Alter_cryptographic_providerContext)_localctx).provider_name = id();
			setState(3030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3026);
				match(FROM);
				setState(3027);
				match(FILE);
				setState(3028);
				match(EQUAL);
				setState(3029);
				((Alter_cryptographic_providerContext)_localctx).crypto_provider_ddl_file = match(STRING);
				}
			}

			setState(3033);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(3032);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_cryptographic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public Token path_of_DLL;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_cryptographic_provider; }
	}

	public final Create_cryptographic_providerContext create_cryptographic_provider() throws RecognitionException {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_create_cryptographic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3035);
			match(CREATE);
			setState(3036);
			match(CRYPTOGRAPHIC);
			setState(3037);
			match(PROVIDER);
			setState(3038);
			((Create_cryptographic_providerContext)_localctx).provider_name = id();
			setState(3039);
			match(FROM);
			setState(3040);
			match(FILE);
			setState(3041);
			match(EQUAL);
			setState(3042);
			((Create_cryptographic_providerContext)_localctx).path_of_DLL = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_notificationContext extends ParserRuleContext {
		public IdContext event_notification_name;
		public IdContext queue_name;
		public IdContext event_type_or_group;
		public Token broker_service;
		public Token broker_service_specifier_or_current_database;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FAN_IN() { return getToken(TSqlParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_notification; }
	}

	public final Create_event_notificationContext create_event_notification() throws RecognitionException {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_create_event_notification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3044);
			match(CREATE);
			setState(3045);
			match(EVENT);
			setState(3046);
			match(NOTIFICATION);
			setState(3047);
			((Create_event_notificationContext)_localctx).event_notification_name = id();
			setState(3048);
			match(ON);
			setState(3053);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(3049);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(3050);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(3051);
				match(QUEUE);
				setState(3052);
				((Create_event_notificationContext)_localctx).queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3055);
				match(WITH);
				setState(3056);
				match(FAN_IN);
				}
			}

			setState(3059);
			match(FOR);
			setState(3064); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3060);
					match(COMMA);
					}
				}

				setState(3063);
				((Create_event_notificationContext)_localctx).event_type_or_group = id();
				}
				}
				setState(3066); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) || _la==COMMA );
			setState(3068);
			match(TO);
			setState(3069);
			match(SERVICE);
			setState(3070);
			((Create_event_notificationContext)_localctx).broker_service = match(STRING);
			setState(3071);
			match(COMMA);
			setState(3072);
			((Create_event_notificationContext)_localctx).broker_service_specifier_or_current_database = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_event_sessionContext extends ParserRuleContext {
		public IdContext event_session_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext event_name;
		public IdContext event_customizable_attributue;
		public IdContext action_name;
		public IdContext target_name;
		public IdContext target_parameter_name;
		public Token max_memory;
		public Token max_dispatch_latency_seconds;
		public Token max_event_size;
		public List<TerminalNode> EVENT() { return getTokens(TSqlParser.EVENT); }
		public TerminalNode EVENT(int i) {
			return getToken(TSqlParser.EVENT, i);
		}
		public TerminalNode SESSION() { return getToken(TSqlParser.SESSION, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(TSqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(TSqlParser.TARGET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode STOP() { return getToken(TSqlParser.STOP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> SET() { return getTokens(TSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(TSqlParser.SET, i);
		}
		public TerminalNode MAX_MEMORY() { return getToken(TSqlParser.MAX_MEMORY, 0); }
		public TerminalNode EVENT_RETENTION_MODE() { return getToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public TerminalNode MAX_DISPATCH_LATENCY() { return getToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public TerminalNode MAX_EVENT_SIZE() { return getToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public TerminalNode MEMORY_PARTITION_MODE() { return getToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public TerminalNode TRACK_CAUSALITY() { return getToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public TerminalNode STARTUP_STATE() { return getToken(TSqlParser.STARTUP_STATE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> KB() { return getTokens(TSqlParser.KB); }
		public TerminalNode KB(int i) {
			return getToken(TSqlParser.KB, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public TerminalNode ALLOW_SINGLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public TerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public TerminalNode NO_EVENT_LOSS() { return getToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PER_NODE() { return getToken(TSqlParser.PER_NODE, 0); }
		public TerminalNode PER_CPU() { return getToken(TSqlParser.PER_CPU, 0); }
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode INFINITE() { return getToken(TSqlParser.INFINITE, 0); }
		public List<TerminalNode> ACTION() { return getTokens(TSqlParser.ACTION); }
		public TerminalNode ACTION(int i) {
			return getToken(TSqlParser.ACTION, i);
		}
		public List<TerminalNode> WHERE() { return getTokens(TSqlParser.WHERE); }
		public TerminalNode WHERE(int i) {
			return getToken(TSqlParser.WHERE, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_event_session; }
	}

	public final Create_or_alter_event_sessionContext create_or_alter_event_session() throws RecognitionException {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3074);
			_la = _input.LA(1);
			if ( !(_la==ALTER || _la==CREATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3075);
			match(EVENT);
			setState(3076);
			match(SESSION);
			setState(3077);
			((Create_or_alter_event_sessionContext)_localctx).event_session_name = id();
			setState(3078);
			match(ON);
			setState(3079);
			match(SERVER);
			setState(3147);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3081);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3080);
						match(COMMA);
						}
					}

					setState(3083);
					match(ADD);
					setState(3084);
					match(EVENT);
					{
					setState(3088);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
					case 1:
						{
						setState(3085);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(3086);
						match(DOT);
						}
						break;
					}
					setState(3090);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(3091);
					match(DOT);
					setState(3092);
					((Create_or_alter_event_sessionContext)_localctx).event_name = id();
					}
					setState(3142);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3094);
							match(LR_BRACKET);
							setState(3108);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==SET) {
								{
								setState(3095);
								match(SET);
								setState(3105);
								_errHandler.sync(this);
								_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
								while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
									if ( _alt==1 ) {
										{
										{
										setState(3097);
										_errHandler.sync(this);
										_la = _input.LA(1);
										if (_la==COMMA) {
											{
											setState(3096);
											match(COMMA);
											}
										}

										setState(3099);
										((Create_or_alter_event_sessionContext)_localctx).event_customizable_attributue = id();
										setState(3100);
										match(EQUAL);
										setState(3101);
										_la = _input.LA(1);
										if ( !(_la==DECIMAL || _la==STRING) ) {
										_errHandler.recoverInline(this);
										}
										else {
											if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
											_errHandler.reportMatch(this);
											consume();
										}
										}
										} 
									}
									setState(3107);
									_errHandler.sync(this);
									_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
								}
								}
							}

							setState(3130); 
							_errHandler.sync(this);
							_la = _input.LA(1);
							do {
								{
								{
								setState(3110);
								match(ACTION);
								setState(3111);
								match(LR_BRACKET);
								setState(3124); 
								_errHandler.sync(this);
								_la = _input.LA(1);
								do {
									{
									{
									setState(3113);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(3112);
										match(COMMA);
										}
									}

									setState(3118);
									_errHandler.sync(this);
									switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
									case 1:
										{
										setState(3115);
										((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
										setState(3116);
										match(DOT);
										}
										break;
									}
									setState(3120);
									((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
									setState(3121);
									match(DOT);
									setState(3122);
									((Create_or_alter_event_sessionContext)_localctx).action_name = id();
									}
									}
									setState(3126); 
									_errHandler.sync(this);
									_la = _input.LA(1);
								} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) || _la==COMMA );
								setState(3128);
								match(RR_BRACKET);
								}
								}
								setState(3132); 
								_errHandler.sync(this);
								_la = _input.LA(1);
							} while ( _la==ACTION );
							setState(3136);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==WHERE) {
								{
								setState(3134);
								match(WHERE);
								setState(3135);
								event_session_predicate_expression();
								}
							}

							setState(3138);
							match(RR_BRACKET);
							}
							} 
						}
						setState(3144);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
					}
					}
					} 
				}
				setState(3149);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
			}
			setState(3166);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3151);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3150);
						match(COMMA);
						}
					}

					setState(3153);
					match(DROP);
					setState(3154);
					match(EVENT);
					setState(3158);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
					case 1:
						{
						setState(3155);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(3156);
						match(DOT);
						}
						break;
					}
					setState(3160);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(3161);
					match(DOT);
					setState(3162);
					((Create_or_alter_event_sessionContext)_localctx).event_name = id();
					}
					} 
				}
				setState(3168);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,255,_ctx);
			}
			setState(3210);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD) {
				{
				{
				{
				setState(3169);
				match(ADD);
				setState(3170);
				match(TARGET);
				setState(3174);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
				case 1:
					{
					setState(3171);
					((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
					setState(3172);
					match(DOT);
					}
					break;
				}
				setState(3176);
				((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
				setState(3177);
				match(DOT);
				setState(3178);
				((Create_or_alter_event_sessionContext)_localctx).target_name = id();
				}
				setState(3205);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,262,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3180);
						match(LR_BRACKET);
						setState(3181);
						match(SET);
						setState(3197); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3183);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3182);
								match(COMMA);
								}
							}

							setState(3185);
							((Create_or_alter_event_sessionContext)_localctx).target_parameter_name = id();
							setState(3186);
							match(EQUAL);
							setState(3195);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
							case LR_BRACKET:
								{
								setState(3188);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==LR_BRACKET) {
									{
									setState(3187);
									match(LR_BRACKET);
									}
								}

								setState(3190);
								match(DECIMAL);
								setState(3192);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,259,_ctx) ) {
								case 1:
									{
									setState(3191);
									match(RR_BRACKET);
									}
									break;
								}
								}
								break;
							case STRING:
								{
								setState(3194);
								match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							}
							setState(3199); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) || _la==COMMA );
						setState(3201);
						match(RR_BRACKET);
						}
						} 
					}
					setState(3207);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,262,_ctx);
				}
				}
				}
				setState(3212);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3226);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,265,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3213);
					match(DROP);
					setState(3214);
					match(TARGET);
					setState(3218);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
					case 1:
						{
						setState(3215);
						((Create_or_alter_event_sessionContext)_localctx).event_module_guid = id();
						setState(3216);
						match(DOT);
						}
						break;
					}
					setState(3220);
					((Create_or_alter_event_sessionContext)_localctx).event_package_name = id();
					setState(3221);
					match(DOT);
					setState(3222);
					((Create_or_alter_event_sessionContext)_localctx).target_name = id();
					}
					} 
				}
				setState(3228);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,265,_ctx);
			}
			setState(3294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				{
				setState(3229);
				match(WITH);
				setState(3230);
				match(LR_BRACKET);
				setState(3238);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					setState(3232);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3231);
						match(COMMA);
						}
					}

					setState(3234);
					match(MAX_MEMORY);
					setState(3235);
					match(EQUAL);
					setState(3236);
					((Create_or_alter_event_sessionContext)_localctx).max_memory = match(DECIMAL);
					setState(3237);
					_la = _input.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3246);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
				case 1:
					{
					setState(3241);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3240);
						match(COMMA);
						}
					}

					setState(3243);
					match(EVENT_RETENTION_MODE);
					setState(3244);
					match(EQUAL);
					setState(3245);
					_la = _input.LA(1);
					if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3258);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					setState(3249);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3248);
						match(COMMA);
						}
					}

					setState(3251);
					match(MAX_DISPATCH_LATENCY);
					setState(3252);
					match(EQUAL);
					setState(3256);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(3253);
						((Create_or_alter_event_sessionContext)_localctx).max_dispatch_latency_seconds = match(DECIMAL);
						setState(3254);
						match(SECONDS);
						}
						break;
					case INFINITE:
						{
						setState(3255);
						match(INFINITE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(3267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					setState(3261);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3260);
						match(COMMA);
						}
					}

					setState(3263);
					match(MAX_EVENT_SIZE);
					setState(3264);
					match(EQUAL);
					setState(3265);
					((Create_or_alter_event_sessionContext)_localctx).max_event_size = match(DECIMAL);
					setState(3266);
					_la = _input.LA(1);
					if ( !(_la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3275);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
				case 1:
					{
					setState(3270);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3269);
						match(COMMA);
						}
					}

					setState(3272);
					match(MEMORY_PARTITION_MODE);
					setState(3273);
					match(EQUAL);
					setState(3274);
					_la = _input.LA(1);
					if ( !(((((_la - 720)) & ~0x3f) == 0 && ((1L << (_la - 720)) & ((1L << (NONE - 720)) | (1L << (PER_CPU - 720)) | (1L << (PER_NODE - 720)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					setState(3278);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3277);
						match(COMMA);
						}
					}

					setState(3280);
					match(TRACK_CAUSALITY);
					setState(3281);
					match(EQUAL);
					setState(3282);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3291);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STARTUP_STATE || _la==COMMA) {
					{
					setState(3286);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3285);
						match(COMMA);
						}
					}

					setState(3288);
					match(STARTUP_STATE);
					setState(3289);
					match(EQUAL);
					setState(3290);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3293);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				{
				setState(3296);
				match(STATE);
				setState(3297);
				match(EQUAL);
				setState(3298);
				_la = _input.LA(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_expressionContext extends ParserRuleContext {
		public List<Event_session_predicate_factorContext> event_session_predicate_factor() {
			return getRuleContexts(Event_session_predicate_factorContext.class);
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return getRuleContext(Event_session_predicate_factorContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public List<TerminalNode> OR() { return getTokens(TSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(TSqlParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_expression; }
	}

	public final Event_session_predicate_expressionContext event_session_predicate_expression() throws RecognitionException {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_event_session_predicate_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3317); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3301);
					match(COMMA);
					}
				}

				setState(3305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND || _la==OR) {
					{
					setState(3304);
					_la = _input.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3308);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3307);
					match(NOT);
					}
				}

				setState(3315);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
				case 1:
					{
					setState(3310);
					event_session_predicate_factor();
					}
					break;
				case 2:
					{
					setState(3311);
					match(LR_BRACKET);
					setState(3312);
					event_session_predicate_expression();
					setState(3313);
					match(RR_BRACKET);
					}
					break;
				}
				}
				}
				setState(3319); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AND || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (NOT - 104)) | (1L << (OPENJSON - 104)) | (1L << (OR - 104)) | (1L << (PRECISION - 104)))) != 0) || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) || _la==LR_BRACKET || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_factorContext extends ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return getRuleContext(Event_session_predicate_leafContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return getRuleContext(Event_session_predicate_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_factor; }
	}

	public final Event_session_predicate_factorContext event_session_predicate_factor() throws RecognitionException {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_event_session_predicate_factor);
		try {
			setState(3326);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3321);
				event_session_predicate_leaf();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(3322);
				match(LR_BRACKET);
				setState(3323);
				event_session_predicate_expression();
				setState(3324);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_leafContext extends ParserRuleContext {
		public IdContext event_field_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext predicate_source_name;
		public IdContext predicate_compare_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_leaf; }
	}

	public final Event_session_predicate_leafContext event_session_predicate_leaf() throws RecognitionException {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_event_session_predicate_leaf);
		int _la;
		try {
			setState(3384);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,296,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3356);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(3328);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id();
					}
					break;
				case 2:
					{
					setState(3339);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
					case 1:
						{
						setState(3329);
						((Event_session_predicate_leafContext)_localctx).event_field_name = id();
						}
						break;
					case 2:
						{
						{
						setState(3333);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
						case 1:
							{
							setState(3330);
							((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
							setState(3331);
							match(DOT);
							}
							break;
						}
						setState(3335);
						((Event_session_predicate_leafContext)_localctx).event_package_name = id();
						setState(3336);
						match(DOT);
						setState(3337);
						((Event_session_predicate_leafContext)_localctx).predicate_source_name = id();
						}
						}
						break;
					}
					setState(3352);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
					case 1:
						{
						setState(3341);
						match(EQUAL);
						}
						break;
					case 2:
						{
						{
						setState(3342);
						match(LESS);
						setState(3343);
						match(GREATER);
						}
						}
						break;
					case 3:
						{
						{
						setState(3344);
						match(EXCLAMATION);
						setState(3345);
						match(EQUAL);
						}
						}
						break;
					case 4:
						{
						setState(3346);
						match(GREATER);
						}
						break;
					case 5:
						{
						{
						setState(3347);
						match(GREATER);
						setState(3348);
						match(EQUAL);
						}
						}
						break;
					case 6:
						{
						setState(3349);
						match(LESS);
						}
						break;
					case 7:
						{
						setState(3350);
						match(LESS);
						setState(3351);
						match(EQUAL);
						}
						break;
					}
					setState(3354);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(3358);
					((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
					setState(3359);
					match(DOT);
					}
					break;
				}
				setState(3363);
				((Event_session_predicate_leafContext)_localctx).event_package_name = id();
				setState(3364);
				match(DOT);
				setState(3365);
				((Event_session_predicate_leafContext)_localctx).predicate_compare_name = id();
				setState(3366);
				match(LR_BRACKET);
				setState(3380);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(3367);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id();
					}
					break;
				case 2:
					{
					{
					setState(3371);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
					case 1:
						{
						setState(3368);
						((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
						setState(3369);
						match(DOT);
						}
						break;
					}
					setState(3373);
					((Event_session_predicate_leafContext)_localctx).event_package_name = id();
					setState(3374);
					match(DOT);
					setState(3375);
					((Event_session_predicate_leafContext)_localctx).predicate_source_name = id();
					}
					setState(3377);
					match(COMMA);
					setState(3378);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3382);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_data_sourceContext extends ParserRuleContext {
		public IdContext data_source_name;
		public Token location;
		public Token resource_manager_location;
		public IdContext credential_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LOCATION() { return getTokens(TSqlParser.LOCATION); }
		public TerminalNode LOCATION(int i) {
			return getToken(TSqlParser.LOCATION, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> RESOURCE_MANAGER_LOCATION() { return getTokens(TSqlParser.RESOURCE_MANAGER_LOCATION); }
		public TerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(TSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_data_source; }
	}

	public final Alter_external_data_sourceContext alter_external_data_source() throws RecognitionException {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_alter_external_data_source);
		int _la;
		try {
			int _alt;
			setState(3433);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3386);
				match(ALTER);
				setState(3387);
				match(EXTERNAL);
				setState(3388);
				match(DATA);
				setState(3389);
				match(SOURCE);
				setState(3390);
				((Alter_external_data_sourceContext)_localctx).data_source_name = id();
				setState(3391);
				match(SET);
				setState(3407); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3407);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case LOCATION:
							{
							setState(3392);
							match(LOCATION);
							setState(3393);
							match(EQUAL);
							setState(3394);
							((Alter_external_data_sourceContext)_localctx).location = match(STRING);
							setState(3396);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3395);
								match(COMMA);
								}
							}

							}
							break;
						case RESOURCE_MANAGER_LOCATION:
							{
							setState(3398);
							match(RESOURCE_MANAGER_LOCATION);
							setState(3399);
							match(EQUAL);
							setState(3400);
							((Alter_external_data_sourceContext)_localctx).resource_manager_location = match(STRING);
							setState(3402);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3401);
								match(COMMA);
								}
							}

							}
							break;
						case CREDENTIAL:
							{
							setState(3404);
							match(CREDENTIAL);
							setState(3405);
							match(EQUAL);
							setState(3406);
							((Alter_external_data_sourceContext)_localctx).credential_name = id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3409); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,300,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3411);
				match(ALTER);
				setState(3412);
				match(EXTERNAL);
				setState(3413);
				match(DATA);
				setState(3414);
				match(SOURCE);
				setState(3415);
				((Alter_external_data_sourceContext)_localctx).data_source_name = id();
				setState(3416);
				match(WITH);
				setState(3417);
				match(LR_BRACKET);
				setState(3418);
				match(TYPE);
				setState(3419);
				match(EQUAL);
				setState(3420);
				match(BLOB_STORAGE);
				setState(3421);
				match(COMMA);
				setState(3422);
				match(LOCATION);
				setState(3423);
				match(EQUAL);
				setState(3424);
				((Alter_external_data_sourceContext)_localctx).location = match(STRING);
				setState(3429);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3425);
					match(COMMA);
					setState(3426);
					match(CREDENTIAL);
					setState(3427);
					match(EQUAL);
					setState(3428);
					((Alter_external_data_sourceContext)_localctx).credential_name = id();
					}
				}

				setState(3431);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public Token client_library;
		public IdContext external_data_source_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PLATFORM() { return getToken(TSqlParser.PLATFORM, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(TSqlParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(TSqlParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(TSqlParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(TSqlParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R() { return getTokens(TSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(TSqlParser.R, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(TSqlParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(TSqlParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(TSqlParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_library; }
	}

	public final Alter_external_libraryContext alter_external_library() throws RecognitionException {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_alter_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3435);
			match(ALTER);
			setState(3436);
			match(EXTERNAL);
			setState(3437);
			match(LIBRARY);
			setState(3438);
			((Alter_external_libraryContext)_localctx).library_name = id();
			setState(3441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3439);
				match(AUTHORIZATION);
				setState(3440);
				((Alter_external_libraryContext)_localctx).owner_name = id();
				}
			}

			setState(3443);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			{
			setState(3444);
			match(LR_BRACKET);
			setState(3445);
			match(CONTENT);
			setState(3446);
			match(EQUAL);
			setState(3450);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(3447);
				((Alter_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(3448);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(3449);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			setState(3452);
			match(COMMA);
			setState(3453);
			match(PLATFORM);
			setState(3454);
			match(EQUAL);
			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINUX || _la==WINDOWS) {
				{
				setState(3455);
				_la = _input.LA(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3458);
			match(RR_BRACKET);
			}
			setState(3460);
			match(WITH);
			setState(3470); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(3470);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LANGUAGE:
				case COMMA:
					{
					setState(3462);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3461);
						match(COMMA);
						}
					}

					setState(3464);
					match(LANGUAGE);
					setState(3465);
					match(EQUAL);
					setState(3466);
					_la = _input.LA(1);
					if ( !(_la==PYTHON || _la==R) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case DATA_SOURCE:
					{
					setState(3467);
					match(DATA_SOURCE);
					setState(3468);
					match(EQUAL);
					setState(3469);
					((Alter_external_libraryContext)_localctx).external_data_source_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3472); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
			setState(3474);
			match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public IdContext owner_name;
		public Token client_library;
		public IdContext external_data_source_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode PLATFORM() { return getToken(TSqlParser.PLATFORM, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(TSqlParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(TSqlParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(TSqlParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(TSqlParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R() { return getTokens(TSqlParser.R); }
		public TerminalNode R(int i) {
			return getToken(TSqlParser.R, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(TSqlParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(TSqlParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(TSqlParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_library; }
	}

	public final Create_external_libraryContext create_external_library() throws RecognitionException {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_create_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3476);
			match(CREATE);
			setState(3477);
			match(EXTERNAL);
			setState(3478);
			match(LIBRARY);
			setState(3479);
			((Create_external_libraryContext)_localctx).library_name = id();
			setState(3482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3480);
				match(AUTHORIZATION);
				setState(3481);
				((Create_external_libraryContext)_localctx).owner_name = id();
				}
			}

			setState(3484);
			match(FROM);
			{
			setState(3486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3485);
				match(COMMA);
				}
			}

			setState(3489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(3488);
				match(LR_BRACKET);
				}
			}

			setState(3493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT) {
				{
				setState(3491);
				match(CONTENT);
				setState(3492);
				match(EQUAL);
				}
			}

			setState(3498);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(3495);
				((Create_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(3496);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(3497);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3500);
				match(COMMA);
				setState(3501);
				match(PLATFORM);
				setState(3502);
				match(EQUAL);
				setState(3504);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINUX || _la==WINDOWS) {
					{
					setState(3503);
					_la = _input.LA(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3506);
				match(RR_BRACKET);
				}
			}

			}
			setState(3524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				setState(3509);
				match(WITH);
				setState(3519); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3519);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LANGUAGE:
					case COMMA:
						{
						setState(3511);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3510);
							match(COMMA);
							}
						}

						setState(3513);
						match(LANGUAGE);
						setState(3514);
						match(EQUAL);
						setState(3515);
						_la = _input.LA(1);
						if ( !(_la==PYTHON || _la==R) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case DATA_SOURCE:
						{
						setState(3516);
						match(DATA_SOURCE);
						setState(3517);
						match(EQUAL);
						setState(3518);
						((Create_external_libraryContext)_localctx).external_data_source_name = id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3521); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
				setState(3523);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_resource_pool; }
	}

	public final Alter_external_resource_poolContext alter_external_resource_pool() throws RecognitionException {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_alter_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3526);
			match(ALTER);
			setState(3527);
			match(EXTERNAL);
			setState(3528);
			match(RESOURCE);
			setState(3529);
			match(POOL);
			setState(3532);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				{
				setState(3530);
				((Alter_external_resource_poolContext)_localctx).pool_name = id();
				}
				break;
			case 2:
				{
				setState(3531);
				match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			setState(3534);
			match(WITH);
			setState(3535);
			match(LR_BRACKET);
			setState(3536);
			match(MAX_CPU_PERCENT);
			setState(3537);
			match(EQUAL);
			setState(3538);
			((Alter_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(3576);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(3540);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3539);
					match(COMMA);
					}
				}

				setState(3542);
				match(AFFINITY);
				setState(3543);
				match(CPU);
				setState(3544);
				match(EQUAL);
				setState(3558);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(3545);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(3554); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(3554);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
							case 1:
								{
								setState(3547);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3546);
									match(COMMA);
									}
								}

								setState(3549);
								match(DECIMAL);
								setState(3550);
								match(TO);
								setState(3551);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3552);
								match(COMMA);
								setState(3553);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3556); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,324,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(3560);
				match(NUMANODE);
				setState(3561);
				match(EQUAL);
				setState(3572); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3572);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
						case 1:
							{
							setState(3563);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3562);
								match(COMMA);
								}
							}

							setState(3565);
							match(DECIMAL);
							setState(3566);
							match(TO);
							setState(3567);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3569);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3568);
								match(COMMA);
								}
							}

							setState(3571);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3574); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,329,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				setState(3579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3578);
					match(COMMA);
					}
				}

				setState(3581);
				match(MAX_MEMORY_PERCENT);
				setState(3582);
				match(EQUAL);
				setState(3583);
				((Alter_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(3592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(3587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3586);
					match(COMMA);
					}
				}

				setState(3589);
				match(MAX_PROCESSES);
				setState(3590);
				match(EQUAL);
				setState(3591);
				((Alter_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(3594);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_resource_pool; }
	}

	public final Create_external_resource_poolContext create_external_resource_pool() throws RecognitionException {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_create_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3596);
			match(CREATE);
			setState(3597);
			match(EXTERNAL);
			setState(3598);
			match(RESOURCE);
			setState(3599);
			match(POOL);
			setState(3600);
			((Create_external_resource_poolContext)_localctx).pool_name = id();
			setState(3601);
			match(WITH);
			setState(3602);
			match(LR_BRACKET);
			setState(3603);
			match(MAX_CPU_PERCENT);
			setState(3604);
			match(EQUAL);
			setState(3605);
			((Create_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(3643);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(3607);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3606);
					match(COMMA);
					}
				}

				setState(3609);
				match(AFFINITY);
				setState(3610);
				match(CPU);
				setState(3611);
				match(EQUAL);
				setState(3625);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(3612);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(3621); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(3621);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
							case 1:
								{
								setState(3614);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3613);
									match(COMMA);
									}
								}

								setState(3616);
								match(DECIMAL);
								setState(3617);
								match(TO);
								setState(3618);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3619);
								match(COMMA);
								setState(3620);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(3623); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,338,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(3627);
				match(NUMANODE);
				setState(3628);
				match(EQUAL);
				setState(3639); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(3639);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
						case 1:
							{
							setState(3630);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3629);
								match(COMMA);
								}
							}

							setState(3632);
							match(DECIMAL);
							setState(3633);
							match(TO);
							setState(3634);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3636);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3635);
								match(COMMA);
								}
							}

							setState(3638);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3641); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,343,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3651);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3646);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3645);
					match(COMMA);
					}
				}

				setState(3648);
				match(MAX_MEMORY_PERCENT);
				setState(3649);
				match(EQUAL);
				setState(3650);
				((Create_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(3659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(3654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3653);
					match(COMMA);
					}
				}

				setState(3656);
				match(MAX_PROCESSES);
				setState(3657);
				match(EQUAL);
				setState(3658);
				((Create_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(3661);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_catalog; }
	}

	public final Alter_fulltext_catalogContext alter_fulltext_catalog() throws RecognitionException {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_alter_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3663);
			match(ALTER);
			setState(3664);
			match(FULLTEXT);
			setState(3665);
			match(CATALOG);
			setState(3666);
			((Alter_fulltext_catalogContext)_localctx).catalog_name = id();
			setState(3677);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				{
				setState(3667);
				match(REBUILD);
				setState(3672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(3668);
					match(WITH);
					setState(3669);
					match(ACCENT_SENSITIVITY);
					setState(3670);
					match(EQUAL);
					setState(3671);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				{
				setState(3674);
				match(REORGANIZE);
				}
				break;
			case AS:
				{
				setState(3675);
				match(AS);
				setState(3676);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public IdContext filegroup;
		public Token rootpath;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_catalog; }
	}

	public final Create_fulltext_catalogContext create_fulltext_catalog() throws RecognitionException {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_create_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3679);
			match(CREATE);
			setState(3680);
			match(FULLTEXT);
			setState(3681);
			match(CATALOG);
			setState(3682);
			((Create_fulltext_catalogContext)_localctx).catalog_name = id();
			setState(3686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(3683);
				match(ON);
				setState(3684);
				match(FILEGROUP);
				setState(3685);
				((Create_fulltext_catalogContext)_localctx).filegroup = id();
				}
			}

			setState(3691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3688);
				match(IN);
				setState(3689);
				match(PATH);
				setState(3690);
				((Create_fulltext_catalogContext)_localctx).rootpath = match(STRING);
				}
			}

			setState(3697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
			case 1:
				{
				setState(3693);
				match(WITH);
				setState(3694);
				match(ACCENT_SENSITIVITY);
				setState(3695);
				match(EQUAL);
				setState(3696);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3699);
				match(AS);
				setState(3700);
				match(DEFAULT);
				}
			}

			setState(3705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3703);
				match(AUTHORIZATION);
				setState(3704);
				((Create_fulltext_catalogContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public Token stopword;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSqlParser.LANGUAGE, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_stoplist; }
	}

	public final Alter_fulltext_stoplistContext alter_fulltext_stoplist() throws RecognitionException {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3707);
			match(ALTER);
			setState(3708);
			match(FULLTEXT);
			setState(3709);
			match(STOPLIST);
			setState(3710);
			((Alter_fulltext_stoplistContext)_localctx).stoplist_name = id();
			setState(3724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(3711);
				match(ADD);
				setState(3712);
				((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
				setState(3713);
				match(LANGUAGE);
				setState(3714);
				_la = _input.LA(1);
				if ( !(((((_la - 816)) & ~0x3f) == 0 && ((1L << (_la - 816)) & ((1L << (DECIMAL - 816)) | (1L << (STRING - 816)) | (1L << (BINARY - 816)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DROP:
				{
				setState(3715);
				match(DROP);
				setState(3722);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
				case 1:
					{
					setState(3716);
					((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
					setState(3717);
					match(LANGUAGE);
					setState(3718);
					_la = _input.LA(1);
					if ( !(((((_la - 816)) & ~0x3f) == 0 && ((1L << (_la - 816)) & ((1L << (DECIMAL - 816)) | (1L << (STRING - 816)) | (1L << (BINARY - 816)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 2:
					{
					setState(3719);
					match(ALL);
					setState(3720);
					_la = _input.LA(1);
					if ( !(((((_la - 816)) & ~0x3f) == 0 && ((1L << (_la - 816)) & ((1L << (DECIMAL - 816)) | (1L << (STRING - 816)) | (1L << (BINARY - 816)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 3:
					{
					setState(3721);
					match(ALL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public IdContext database_name;
		public IdContext source_stoplist_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public List<TerminalNode> STOPLIST() { return getTokens(TSqlParser.STOPLIST); }
		public TerminalNode STOPLIST(int i) {
			return getToken(TSqlParser.STOPLIST, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode SYSTEM() { return getToken(TSqlParser.SYSTEM, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_stoplist; }
	}

	public final Create_fulltext_stoplistContext create_fulltext_stoplist() throws RecognitionException {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_create_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3726);
			match(CREATE);
			setState(3727);
			match(FULLTEXT);
			setState(3728);
			match(STOPLIST);
			setState(3729);
			((Create_fulltext_stoplistContext)_localctx).stoplist_name = id();
			setState(3741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3730);
				match(FROM);
				setState(3739);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(3734);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
					case 1:
						{
						setState(3731);
						((Create_fulltext_stoplistContext)_localctx).database_name = id();
						setState(3732);
						match(DOT);
						}
						break;
					}
					setState(3736);
					((Create_fulltext_stoplistContext)_localctx).source_stoplist_name = id();
					}
					break;
				case 2:
					{
					setState(3737);
					match(SYSTEM);
					setState(3738);
					match(STOPLIST);
					}
					break;
				}
				}
			}

			setState(3745);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3743);
				match(AUTHORIZATION);
				setState(3744);
				((Create_fulltext_stoplistContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_sql_serverContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token password_hash;
		public Token old_password;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode HASHED() { return getToken(TSqlParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_sql_server; }
	}

	public final Alter_login_sql_serverContext alter_login_sql_server() throws RecognitionException {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_alter_login_sql_server);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3747);
			match(ALTER);
			setState(3748);
			match(LOGIN);
			setState(3749);
			((Alter_login_sql_serverContext)_localctx).login_name = id();
			setState(3817);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
			case 1:
				{
				setState(3751);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(3750);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3753);
				match(WITH);
				setState(3767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					{
					setState(3754);
					match(PASSWORD);
					setState(3755);
					match(EQUAL);
					setState(3759);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3756);
						((Alter_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3757);
						((Alter_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3758);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3764);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,364,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3761);
							_la = _input.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							} 
						}
						setState(3766);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,364,_ctx);
					}
					}
					break;
				}
				setState(3778);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3769);
					match(OLD_PASSWORD);
					setState(3770);
					match(EQUAL);
					setState(3771);
					((Alter_login_sql_serverContext)_localctx).old_password = match(STRING);
					setState(3775);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,366,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3772);
							_la = _input.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							} 
						}
						setState(3777);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,366,_ctx);
					}
					}
					break;
				}
				setState(3783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(3780);
					match(DEFAULT_DATABASE);
					setState(3781);
					match(EQUAL);
					setState(3782);
					((Alter_login_sql_serverContext)_localctx).default_database = id();
					}
					break;
				}
				setState(3788);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(3785);
					match(DEFAULT_LANGUAGE);
					setState(3786);
					match(EQUAL);
					setState(3787);
					((Alter_login_sql_serverContext)_localctx).default_laguage = id();
					}
					break;
				}
				setState(3793);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					setState(3790);
					match(NAME);
					setState(3791);
					match(EQUAL);
					setState(3792);
					((Alter_login_sql_serverContext)_localctx).login_name = id();
					}
					break;
				}
				setState(3798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(3795);
					match(CHECK_POLICY);
					setState(3796);
					match(EQUAL);
					setState(3797);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3803);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(3800);
					match(CHECK_EXPIRATION);
					setState(3801);
					match(EQUAL);
					setState(3802);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3808);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(3805);
					match(CREDENTIAL);
					setState(3806);
					match(EQUAL);
					setState(3807);
					((Alter_login_sql_serverContext)_localctx).credential_name = id();
					}
					break;
				}
				setState(3812);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3810);
					match(NO);
					setState(3811);
					match(CREDENTIAL);
					}
					break;
				}
				}
				break;
			case 3:
				{
				setState(3814);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3815);
				match(CREDENTIAL);
				setState(3816);
				((Alter_login_sql_serverContext)_localctx).credential_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_sql_serverContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token password_hash;
		public Token sid;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public Token default_language;
		public IdContext certname;
		public IdContext asym_key_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode HASHED() { return getToken(TSqlParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_sql_server; }
	}

	public final Create_login_sql_serverContext create_login_sql_server() throws RecognitionException {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_create_login_sql_server);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3819);
			match(CREATE);
			setState(3820);
			match(LOGIN);
			setState(3821);
			((Create_login_sql_serverContext)_localctx).login_name = id();
			setState(3912);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3822);
				match(WITH);
				setState(3836);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					{
					setState(3823);
					match(PASSWORD);
					setState(3824);
					match(EQUAL);
					setState(3828);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3825);
						((Create_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3826);
						((Create_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3827);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3833);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,377,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3830);
							_la = _input.LA(1);
							if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							} 
						}
						setState(3835);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,377,_ctx);
					}
					}
					break;
				}
				setState(3844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(3839);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3838);
						match(COMMA);
						}
					}

					setState(3841);
					match(SID);
					setState(3842);
					match(EQUAL);
					setState(3843);
					((Create_login_sql_serverContext)_localctx).sid = match(BINARY);
					}
					break;
				}
				setState(3852);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
				case 1:
					{
					setState(3847);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3846);
						match(COMMA);
						}
					}

					setState(3849);
					match(DEFAULT_DATABASE);
					setState(3850);
					match(EQUAL);
					setState(3851);
					((Create_login_sql_serverContext)_localctx).default_database = id();
					}
					break;
				}
				setState(3860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(3855);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3854);
						match(COMMA);
						}
					}

					setState(3857);
					match(DEFAULT_LANGUAGE);
					setState(3858);
					match(EQUAL);
					setState(3859);
					((Create_login_sql_serverContext)_localctx).default_laguage = id();
					}
					break;
				}
				setState(3868);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,386,_ctx) ) {
				case 1:
					{
					setState(3863);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3862);
						match(COMMA);
						}
					}

					setState(3865);
					match(CHECK_EXPIRATION);
					setState(3866);
					match(EQUAL);
					setState(3867);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3876);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
				case 1:
					{
					setState(3871);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3870);
						match(COMMA);
						}
					}

					setState(3873);
					match(CHECK_POLICY);
					setState(3874);
					match(EQUAL);
					setState(3875);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3884);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					setState(3879);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3878);
						match(COMMA);
						}
					}

					setState(3881);
					match(CREDENTIAL);
					setState(3882);
					match(EQUAL);
					setState(3883);
					((Create_login_sql_serverContext)_localctx).credential_name = id();
					}
					break;
				}
				}
				break;
			case FROM:
				{
				{
				setState(3886);
				match(FROM);
				setState(3910);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(3887);
					match(WINDOWS);
					{
					setState(3888);
					match(WITH);
					setState(3895);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
					case 1:
						{
						setState(3890);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3889);
							match(COMMA);
							}
						}

						setState(3892);
						match(DEFAULT_DATABASE);
						setState(3893);
						match(EQUAL);
						setState(3894);
						((Create_login_sql_serverContext)_localctx).default_database = id();
						}
						break;
					}
					setState(3903);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
					case 1:
						{
						setState(3898);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3897);
							match(COMMA);
							}
						}

						setState(3900);
						match(DEFAULT_LANGUAGE);
						setState(3901);
						match(EQUAL);
						setState(3902);
						((Create_login_sql_serverContext)_localctx).default_language = match(STRING);
						}
						break;
					}
					}
					}
					break;
				case CERTIFICATE:
					{
					setState(3905);
					match(CERTIFICATE);
					setState(3906);
					((Create_login_sql_serverContext)_localctx).certname = id();
					}
					break;
				case ASYMMETRIC:
					{
					setState(3907);
					match(ASYMMETRIC);
					setState(3908);
					match(KEY);
					setState(3909);
					((Create_login_sql_serverContext)_localctx).asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_azure_sqlContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token old_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public Alter_login_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_azure_sql; }
	}

	public final Alter_login_azure_sqlContext alter_login_azure_sql() throws RecognitionException {
		Alter_login_azure_sqlContext _localctx = new Alter_login_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_alter_login_azure_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3914);
			match(ALTER);
			setState(3915);
			match(LOGIN);
			setState(3916);
			((Alter_login_azure_sqlContext)_localctx).login_name = id();
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3918);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(3917);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3920);
				match(WITH);
				setState(3932);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(3921);
					match(PASSWORD);
					setState(3922);
					match(EQUAL);
					setState(3923);
					((Alter_login_azure_sqlContext)_localctx).password = match(STRING);
					setState(3927);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
					case 1:
						{
						setState(3924);
						match(OLD_PASSWORD);
						setState(3925);
						match(EQUAL);
						setState(3926);
						((Alter_login_azure_sqlContext)_localctx).old_password = match(STRING);
						}
						break;
					}
					}
					break;
				case NAME:
					{
					setState(3929);
					match(NAME);
					setState(3930);
					match(EQUAL);
					setState(3931);
					((Alter_login_azure_sqlContext)_localctx).login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_azure_sqlContext extends ParserRuleContext {
		public IdContext login_name;
		public Token sid;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public Create_login_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_azure_sql; }
	}

	public final Create_login_azure_sqlContext create_login_azure_sql() throws RecognitionException {
		Create_login_azure_sqlContext _localctx = new Create_login_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_create_login_azure_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3936);
			match(CREATE);
			setState(3937);
			match(LOGIN);
			setState(3938);
			((Create_login_azure_sqlContext)_localctx).login_name = id();
			setState(3939);
			match(WITH);
			setState(3940);
			match(PASSWORD);
			setState(3941);
			match(EQUAL);
			setState(3942);
			match(STRING);
			setState(3946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
			case 1:
				{
				setState(3943);
				match(SID);
				setState(3944);
				match(EQUAL);
				setState(3945);
				((Create_login_azure_sqlContext)_localctx).sid = match(BINARY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token old_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSqlParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSqlParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSqlParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSqlParser.UNLOCK, i);
		}
		public Alter_login_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_azure_sql_dw_and_pdw; }
	}

	public final Alter_login_azure_sql_dw_and_pdwContext alter_login_azure_sql_dw_and_pdw() throws RecognitionException {
		Alter_login_azure_sql_dw_and_pdwContext _localctx = new Alter_login_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_alter_login_azure_sql_dw_and_pdw);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3948);
			match(ALTER);
			setState(3949);
			match(LOGIN);
			setState(3950);
			((Alter_login_azure_sql_dw_and_pdwContext)_localctx).login_name = id();
			setState(3974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3952);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					setState(3951);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3954);
				match(WITH);
				setState(3972);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(3955);
					match(PASSWORD);
					setState(3956);
					match(EQUAL);
					setState(3957);
					((Alter_login_azure_sql_dw_and_pdwContext)_localctx).password = match(STRING);
					setState(3967);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
					case 1:
						{
						setState(3958);
						match(OLD_PASSWORD);
						setState(3959);
						match(EQUAL);
						setState(3960);
						((Alter_login_azure_sql_dw_and_pdwContext)_localctx).old_password = match(STRING);
						setState(3964);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(3961);
								_la = _input.LA(1);
								if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								} 
							}
							setState(3966);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,403,_ctx);
						}
						}
						break;
					}
					}
					break;
				case NAME:
					{
					setState(3969);
					match(NAME);
					setState(3970);
					match(EQUAL);
					setState(3971);
					((Alter_login_azure_sql_dw_and_pdwContext)_localctx).login_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_pdwContext extends ParserRuleContext {
		public IdContext loginName;
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode MUST_CHANGE() { return getToken(TSqlParser.MUST_CHANGE, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_pdw; }
	}

	public final Create_login_pdwContext create_login_pdw() throws RecognitionException {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_create_login_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3976);
			match(CREATE);
			setState(3977);
			match(LOGIN);
			setState(3978);
			((Create_login_pdwContext)_localctx).loginName = id();
			setState(3995);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3979);
				match(WITH);
				{
				setState(3980);
				match(PASSWORD);
				setState(3981);
				match(EQUAL);
				setState(3982);
				((Create_login_pdwContext)_localctx).password = match(STRING);
				setState(3984);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
				case 1:
					{
					setState(3983);
					match(MUST_CHANGE);
					}
					break;
				}
				setState(3991);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(3986);
					match(CHECK_POLICY);
					setState(3987);
					match(EQUAL);
					setState(3989);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OFF || _la==ON) {
						{
						setState(3988);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				}
				}
				}
				break;
			case FROM:
				{
				setState(3993);
				match(FROM);
				setState(3994);
				match(WINDOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> MASTER() { return getTokens(TSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(TSqlParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_sql_server; }
	}

	public final Alter_master_key_sql_serverContext alter_master_key_sql_server() throws RecognitionException {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_alter_master_key_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3997);
			match(ALTER);
			setState(3998);
			match(MASTER);
			setState(3999);
			match(KEY);
			setState(4021);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				setState(4001);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(4000);
					match(FORCE);
					}
				}

				setState(4003);
				match(REGENERATE);
				setState(4004);
				match(WITH);
				setState(4005);
				match(ENCRYPTION);
				setState(4006);
				match(BY);
				setState(4007);
				match(PASSWORD);
				setState(4008);
				match(EQUAL);
				setState(4009);
				((Alter_master_key_sql_serverContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
			case DROP:
				{
				setState(4010);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4011);
				match(ENCRYPTION);
				setState(4012);
				match(BY);
				setState(4019);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(4013);
					match(SERVICE);
					setState(4014);
					match(MASTER);
					setState(4015);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(4016);
					match(PASSWORD);
					setState(4017);
					match(EQUAL);
					setState(4018);
					((Alter_master_key_sql_serverContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_sql_server; }
	}

	public final Create_master_key_sql_serverContext create_master_key_sql_server() throws RecognitionException {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_create_master_key_sql_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4023);
			match(CREATE);
			setState(4024);
			match(MASTER);
			setState(4025);
			match(KEY);
			setState(4026);
			match(ENCRYPTION);
			setState(4027);
			match(BY);
			setState(4028);
			match(PASSWORD);
			setState(4029);
			match(EQUAL);
			setState(4030);
			((Create_master_key_sql_serverContext)_localctx).password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_azure_sqlContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> MASTER() { return getTokens(TSqlParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(TSqlParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public Alter_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_azure_sql; }
	}

	public final Alter_master_key_azure_sqlContext alter_master_key_azure_sql() throws RecognitionException {
		Alter_master_key_azure_sqlContext _localctx = new Alter_master_key_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_alter_master_key_azure_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4032);
			match(ALTER);
			setState(4033);
			match(MASTER);
			setState(4034);
			match(KEY);
			setState(4062);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				setState(4036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(4035);
					match(FORCE);
					}
				}

				setState(4038);
				match(REGENERATE);
				setState(4039);
				match(WITH);
				setState(4040);
				match(ENCRYPTION);
				setState(4041);
				match(BY);
				setState(4042);
				match(PASSWORD);
				setState(4043);
				match(EQUAL);
				setState(4044);
				((Alter_master_key_azure_sqlContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
				{
				setState(4045);
				match(ADD);
				setState(4046);
				match(ENCRYPTION);
				setState(4047);
				match(BY);
				setState(4054);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(4048);
					match(SERVICE);
					setState(4049);
					match(MASTER);
					setState(4050);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(4051);
					match(PASSWORD);
					setState(4052);
					match(EQUAL);
					setState(4053);
					((Alter_master_key_azure_sqlContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP:
				{
				setState(4056);
				match(DROP);
				setState(4057);
				match(ENCRYPTION);
				setState(4058);
				match(BY);
				setState(4059);
				match(PASSWORD);
				setState(4060);
				match(EQUAL);
				setState(4061);
				((Alter_master_key_azure_sqlContext)_localctx).encryption_password = match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_azure_sqlContext extends ParserRuleContext {
		public Token password;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Create_master_key_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_azure_sql; }
	}

	public final Create_master_key_azure_sqlContext create_master_key_azure_sql() throws RecognitionException {
		Create_master_key_azure_sqlContext _localctx = new Create_master_key_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_create_master_key_azure_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4064);
			match(CREATE);
			setState(4065);
			match(MASTER);
			setState(4066);
			match(KEY);
			setState(4072);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(4067);
				match(ENCRYPTION);
				setState(4068);
				match(BY);
				setState(4069);
				match(PASSWORD);
				setState(4070);
				match(EQUAL);
				setState(4071);
				((Create_master_key_azure_sqlContext)_localctx).password = match(STRING);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_message_typeContext extends ParserRuleContext {
		public IdContext message_type_name;
		public IdContext schema_collection_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_message_type; }
	}

	public final Alter_message_typeContext alter_message_type() throws RecognitionException {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_alter_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4074);
			match(ALTER);
			setState(4075);
			match(MESSAGE);
			setState(4076);
			match(TYPE);
			setState(4077);
			((Alter_message_typeContext)_localctx).message_type_name = id();
			setState(4078);
			match(VALIDATION);
			setState(4079);
			match(EQUAL);
			setState(4088);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(4080);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(4081);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(4082);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(4083);
				match(VALID_XML);
				setState(4084);
				match(WITH);
				setState(4085);
				match(SCHEMA);
				setState(4086);
				match(COLLECTION);
				setState(4087);
				((Alter_message_typeContext)_localctx).schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_functionContext extends ParserRuleContext {
		public IdContext partition_function_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SPLIT() { return getToken(TSqlParser.SPLIT, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_function; }
	}

	public final Alter_partition_functionContext alter_partition_function() throws RecognitionException {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_alter_partition_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4090);
			match(ALTER);
			setState(4091);
			match(PARTITION);
			setState(4092);
			match(FUNCTION);
			setState(4093);
			((Alter_partition_functionContext)_localctx).partition_function_name = id();
			setState(4094);
			match(LR_BRACKET);
			setState(4095);
			match(RR_BRACKET);
			setState(4096);
			_la = _input.LA(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4097);
			match(RANGE);
			setState(4098);
			match(LR_BRACKET);
			setState(4099);
			match(DECIMAL);
			setState(4100);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_schemeContext extends ParserRuleContext {
		public IdContext partition_scheme_name;
		public IdContext file_group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode USED() { return getToken(TSqlParser.USED, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_scheme; }
	}

	public final Alter_partition_schemeContext alter_partition_scheme() throws RecognitionException {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_alter_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4102);
			match(ALTER);
			setState(4103);
			match(PARTITION);
			setState(4104);
			match(SCHEME);
			setState(4105);
			((Alter_partition_schemeContext)_localctx).partition_scheme_name = id();
			setState(4106);
			match(NEXT);
			setState(4107);
			match(USED);
			setState(4109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				setState(4108);
				((Alter_partition_schemeContext)_localctx).file_group_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public IdContext user_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSqlParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_remote_service_binding; }
	}

	public final Alter_remote_service_bindingContext alter_remote_service_binding() throws RecognitionException {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alter_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4111);
			match(ALTER);
			setState(4112);
			match(REMOTE);
			setState(4113);
			match(SERVICE);
			setState(4114);
			match(BINDING);
			setState(4115);
			((Alter_remote_service_bindingContext)_localctx).binding_name = id();
			setState(4116);
			match(WITH);
			setState(4120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER) {
				{
				setState(4117);
				match(USER);
				setState(4118);
				match(EQUAL);
				setState(4119);
				((Alter_remote_service_bindingContext)_localctx).user_name = id();
				}
			}

			setState(4126);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4122);
				match(COMMA);
				setState(4123);
				match(ANONYMOUS);
				setState(4124);
				match(EQUAL);
				setState(4125);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public IdContext owner_name;
		public Token remote_service_name;
		public IdContext user_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(TSqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(TSqlParser.SERVICE, i);
		}
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSqlParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_remote_service_binding; }
	}

	public final Create_remote_service_bindingContext create_remote_service_binding() throws RecognitionException {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_create_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4128);
			match(CREATE);
			setState(4129);
			match(REMOTE);
			setState(4130);
			match(SERVICE);
			setState(4131);
			match(BINDING);
			setState(4132);
			((Create_remote_service_bindingContext)_localctx).binding_name = id();
			setState(4135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4133);
				match(AUTHORIZATION);
				setState(4134);
				((Create_remote_service_bindingContext)_localctx).owner_name = id();
				}
			}

			setState(4137);
			match(TO);
			setState(4138);
			match(SERVICE);
			setState(4139);
			((Create_remote_service_bindingContext)_localctx).remote_service_name = match(STRING);
			setState(4140);
			match(WITH);
			setState(4144);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER) {
				{
				setState(4141);
				match(USER);
				setState(4142);
				match(EQUAL);
				setState(4143);
				((Create_remote_service_bindingContext)_localctx).user_name = id();
				}
			}

			setState(4150);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4146);
				match(COMMA);
				setState(4147);
				match(ANONYMOUS);
				setState(4148);
				match(EQUAL);
				setState(4149);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode MIN_CPU_PERCENT() { return getToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode SCHEDULER() { return getToken(TSqlParser.SCHEDULER, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Create_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_resource_pool; }
	}

	public final Create_resource_poolContext create_resource_pool() throws RecognitionException {
		Create_resource_poolContext _localctx = new Create_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_create_resource_pool);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4152);
			match(CREATE);
			setState(4153);
			match(RESOURCE);
			setState(4154);
			match(POOL);
			setState(4155);
			((Create_resource_poolContext)_localctx).pool_name = id();
			setState(4258);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(4156);
				match(WITH);
				setState(4157);
				match(LR_BRACKET);
				setState(4164);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(4159);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4158);
						match(COMMA);
						}
					}

					setState(4161);
					match(MIN_CPU_PERCENT);
					setState(4162);
					match(EQUAL);
					setState(4163);
					match(DECIMAL);
					}
					break;
				}
				setState(4172);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
				case 1:
					{
					setState(4167);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4166);
						match(COMMA);
						}
					}

					setState(4169);
					match(MAX_CPU_PERCENT);
					setState(4170);
					match(EQUAL);
					setState(4171);
					match(DECIMAL);
					}
					break;
				}
				setState(4180);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
				case 1:
					{
					setState(4175);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4174);
						match(COMMA);
						}
					}

					setState(4177);
					match(CAP_CPU_PERCENT);
					setState(4178);
					match(EQUAL);
					setState(4179);
					match(DECIMAL);
					}
					break;
				}
				setState(4223);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(4183);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4182);
						match(COMMA);
						}
					}

					setState(4185);
					match(AFFINITY);
					setState(4186);
					match(SCHEDULER);
					setState(4187);
					match(EQUAL);
					setState(4221);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(4188);
						match(AUTO);
						}
						break;
					case LR_BRACKET:
						{
						setState(4189);
						match(LR_BRACKET);
						setState(4199); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(4191);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4190);
								match(COMMA);
								}
							}

							setState(4197);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
							case 1:
								{
								setState(4193);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4194);
								match(DECIMAL);
								setState(4195);
								match(TO);
								setState(4196);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(4201); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(4203);
						match(RR_BRACKET);
						}
						break;
					case NUMANODE:
						{
						setState(4204);
						match(NUMANODE);
						setState(4205);
						match(EQUAL);
						setState(4206);
						match(LR_BRACKET);
						setState(4216); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(4208);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4207);
								match(COMMA);
								}
							}

							setState(4214);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,436,_ctx) ) {
							case 1:
								{
								setState(4210);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4211);
								match(DECIMAL);
								setState(4212);
								match(TO);
								setState(4213);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(4218); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(4220);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(4231);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					setState(4226);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4225);
						match(COMMA);
						}
					}

					setState(4228);
					match(MIN_MEMORY_PERCENT);
					setState(4229);
					match(EQUAL);
					setState(4230);
					match(DECIMAL);
					}
					break;
				}
				setState(4239);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					setState(4234);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4233);
						match(COMMA);
						}
					}

					setState(4236);
					match(MAX_MEMORY_PERCENT);
					setState(4237);
					match(EQUAL);
					setState(4238);
					match(DECIMAL);
					}
					break;
				}
				setState(4247);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(4242);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4241);
						match(COMMA);
						}
					}

					setState(4244);
					match(MIN_IOPS_PER_VOLUME);
					setState(4245);
					match(EQUAL);
					setState(4246);
					match(DECIMAL);
					}
					break;
				}
				setState(4255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAX_IOPS_PER_VOLUME || _la==COMMA) {
					{
					setState(4250);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4249);
						match(COMMA);
						}
					}

					setState(4252);
					match(MAX_IOPS_PER_VOLUME);
					setState(4253);
					match(EQUAL);
					setState(4254);
					match(DECIMAL);
					}
				}

				setState(4257);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_governorContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext function_name;
		public Token max_outstanding_io_per_volume;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode GOVERNOR() { return getToken(TSqlParser.GOVERNOR, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CLASSIFIER_FUNCTION() { return getToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode RESET() { return getToken(TSqlParser.RESET, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public TerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return getToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode RECONFIGURE() { return getToken(TSqlParser.RECONFIGURE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_governor; }
	}

	public final Alter_resource_governorContext alter_resource_governor() throws RecognitionException {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_alter_resource_governor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4260);
			match(ALTER);
			setState(4261);
			match(RESOURCE);
			setState(4262);
			match(GOVERNOR);
			setState(4284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				setState(4263);
				_la = _input.LA(1);
				if ( !(_la==RECONFIGURE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				setState(4264);
				match(WITH);
				setState(4265);
				match(LR_BRACKET);
				setState(4266);
				match(CLASSIFIER_FUNCTION);
				setState(4267);
				match(EQUAL);
				setState(4273);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(4268);
					((Alter_resource_governorContext)_localctx).schema_name = id();
					setState(4269);
					match(DOT);
					setState(4270);
					((Alter_resource_governorContext)_localctx).function_name = id();
					}
					break;
				case NULL:
					{
					setState(4272);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4275);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(4276);
				match(RESET);
				setState(4277);
				match(STATISTICS);
				}
				break;
			case 4:
				{
				setState(4278);
				match(WITH);
				setState(4279);
				match(LR_BRACKET);
				setState(4280);
				match(MAX_OUTSTANDING_IO_PER_VOLUME);
				setState(4281);
				match(EQUAL);
				setState(4282);
				((Alter_resource_governorContext)_localctx).max_outstanding_io_per_volume = match(DECIMAL);
				setState(4283);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public IdContext database_principal;
		public IdContext new_role_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_db_role; }
	}

	public final Alter_db_roleContext alter_db_role() throws RecognitionException {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_alter_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4286);
			match(ALTER);
			setState(4287);
			match(ROLE);
			setState(4288);
			((Alter_db_roleContext)_localctx).role_name = id();
			setState(4296);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(4289);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4290);
				match(MEMBER);
				setState(4291);
				((Alter_db_roleContext)_localctx).database_principal = id();
				}
				break;
			case WITH:
				{
				setState(4292);
				match(WITH);
				setState(4293);
				match(NAME);
				setState(4294);
				match(EQUAL);
				setState(4295);
				((Alter_db_roleContext)_localctx).new_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_db_role; }
	}

	public final Create_db_roleContext create_db_role() throws RecognitionException {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_create_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4298);
			match(CREATE);
			setState(4299);
			match(ROLE);
			setState(4300);
			((Create_db_roleContext)_localctx).role_name = id();
			setState(4303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4301);
				match(AUTHORIZATION);
				setState(4302);
				((Create_db_roleContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routeContext extends ParserRuleContext {
		public IdContext route_name;
		public IdContext owner_name;
		public Token route_service_name;
		public Token broker_instance_identifier;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ADDRESS() { return getToken(TSqlParser.ADDRESS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode SERVICE_NAME() { return getToken(TSqlParser.SERVICE_NAME, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(TSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode LIFETIME() { return getToken(TSqlParser.LIFETIME, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode MIRROR_ADDRESS() { return getToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_route; }
	}

	public final Create_routeContext create_route() throws RecognitionException {
		Create_routeContext _localctx = new Create_routeContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_create_route);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4305);
			match(CREATE);
			setState(4306);
			match(ROUTE);
			setState(4307);
			((Create_routeContext)_localctx).route_name = id();
			setState(4310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4308);
				match(AUTHORIZATION);
				setState(4309);
				((Create_routeContext)_localctx).owner_name = id();
				}
			}

			setState(4312);
			match(WITH);
			setState(4319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				setState(4314);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4313);
					match(COMMA);
					}
				}

				setState(4316);
				match(SERVICE_NAME);
				setState(4317);
				match(EQUAL);
				setState(4318);
				((Create_routeContext)_localctx).route_service_name = match(STRING);
				}
				break;
			}
			setState(4327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				{
				setState(4322);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4321);
					match(COMMA);
					}
				}

				setState(4324);
				match(BROKER_INSTANCE);
				setState(4325);
				match(EQUAL);
				setState(4326);
				((Create_routeContext)_localctx).broker_instance_identifier = match(STRING);
				}
				break;
			}
			setState(4335);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(4330);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4329);
					match(COMMA);
					}
				}

				setState(4332);
				match(LIFETIME);
				setState(4333);
				match(EQUAL);
				setState(4334);
				match(DECIMAL);
				}
				break;
			}
			setState(4338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4337);
				match(COMMA);
				}
			}

			setState(4340);
			match(ADDRESS);
			setState(4341);
			match(EQUAL);
			setState(4342);
			match(STRING);
			setState(4347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4343);
				match(COMMA);
				setState(4344);
				match(MIRROR_ADDRESS);
				setState(4345);
				match(EQUAL);
				setState(4346);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_ruleContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext rule_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode RULE() { return getToken(TSqlParser.RULE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule; }
	}

	public final Create_ruleContext create_rule() throws RecognitionException {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_create_rule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4349);
			match(CREATE);
			setState(4350);
			match(RULE);
			setState(4354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(4351);
				((Create_ruleContext)_localctx).schema_name = id();
				setState(4352);
				match(DOT);
				}
				break;
			}
			setState(4356);
			((Create_ruleContext)_localctx).rule_name = id();
			setState(4357);
			match(AS);
			setState(4358);
			search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_sqlContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SCHEMA() { return getTokens(TSqlParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(TSqlParser.SCHEMA, i);
		}
		public TerminalNode TRANSFER() { return getToken(TSqlParser.TRANSFER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_sql; }
	}

	public final Alter_schema_sqlContext alter_schema_sql() throws RecognitionException {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_alter_schema_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4360);
			match(ALTER);
			setState(4361);
			match(SCHEMA);
			setState(4362);
			((Alter_schema_sqlContext)_localctx).schema_name = id();
			setState(4363);
			match(TRANSFER);
			setState(4373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				{
				setState(4369);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OBJECT:
					{
					setState(4364);
					match(OBJECT);
					}
					break;
				case TYPE:
					{
					setState(4365);
					match(TYPE);
					}
					break;
				case XML:
					{
					setState(4366);
					match(XML);
					setState(4367);
					match(SCHEMA);
					setState(4368);
					match(COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4371);
				match(COLON);
				setState(4372);
				match(COLON);
				}
				break;
			}
			setState(4375);
			id();
			setState(4378);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(4376);
				match(DOT);
				setState(4377);
				id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schemaContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public IdContext object_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> SCHEMA() { return getTokens(TSqlParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(TSqlParser.SCHEMA, i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<Create_tableContext> create_table() {
			return getRuleContexts(Create_tableContext.class);
		}
		public Create_tableContext create_table(int i) {
			return getRuleContext(Create_tableContext.class,i);
		}
		public List<Create_viewContext> create_view() {
			return getRuleContexts(Create_viewContext.class);
		}
		public Create_viewContext create_view(int i) {
			return getRuleContext(Create_viewContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<TerminalNode> REVOKE() { return getTokens(TSqlParser.REVOKE); }
		public TerminalNode REVOKE(int i) {
			return getToken(TSqlParser.REVOKE, i);
		}
		public List<TerminalNode> FROM() { return getTokens(TSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSqlParser.FROM, i);
		}
		public List<TerminalNode> GRANT() { return getTokens(TSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(TSqlParser.GRANT, i);
		}
		public List<TerminalNode> DENY() { return getTokens(TSqlParser.DENY); }
		public TerminalNode DENY(int i) {
			return getToken(TSqlParser.DENY, i);
		}
		public List<TerminalNode> SELECT() { return getTokens(TSqlParser.SELECT); }
		public TerminalNode SELECT(int i) {
			return getToken(TSqlParser.SELECT, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(TSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(TSqlParser.INSERT, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(TSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(TSqlParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(TSqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(TSqlParser.UPDATE, i);
		}
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public Create_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema; }
	}

	public final Create_schemaContext create_schema() throws RecognitionException {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_create_schema);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4380);
			match(CREATE);
			setState(4381);
			match(SCHEMA);
			setState(4389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				setState(4382);
				((Create_schemaContext)_localctx).schema_name = id();
				}
				break;
			case 2:
				{
				setState(4383);
				match(AUTHORIZATION);
				setState(4384);
				((Create_schemaContext)_localctx).owner_name = id();
				}
				break;
			case 3:
				{
				setState(4385);
				((Create_schemaContext)_localctx).schema_name = id();
				setState(4386);
				match(AUTHORIZATION);
				setState(4387);
				((Create_schemaContext)_localctx).owner_name = id();
				}
				break;
			}
			setState(4419);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4417);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
					case 1:
						{
						setState(4391);
						create_table();
						}
						break;
					case 2:
						{
						setState(4392);
						create_view();
						}
						break;
					case 3:
						{
						setState(4393);
						_la = _input.LA(1);
						if ( !(_la==DENY || _la==GRANT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4394);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4395);
						match(ON);
						setState(4399);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SCHEMA) {
							{
							setState(4396);
							match(SCHEMA);
							setState(4397);
							match(COLON);
							setState(4398);
							match(COLON);
							}
						}

						setState(4401);
						((Create_schemaContext)_localctx).object_name = id();
						setState(4402);
						match(TO);
						setState(4403);
						((Create_schemaContext)_localctx).owner_name = id();
						}
						break;
					case 4:
						{
						setState(4405);
						match(REVOKE);
						setState(4406);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==INSERT || _la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4407);
						match(ON);
						setState(4411);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==SCHEMA) {
							{
							setState(4408);
							match(SCHEMA);
							setState(4409);
							match(COLON);
							setState(4410);
							match(COLON);
							}
						}

						setState(4413);
						((Create_schemaContext)_localctx).object_name = id();
						setState(4414);
						match(FROM);
						setState(4415);
						((Create_schemaContext)_localctx).owner_name = id();
						}
						break;
					}
					} 
				}
				setState(4421);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_azure_sql_dw_and_pdw; }
	}

	public final Create_schema_azure_sql_dw_and_pdwContext create_schema_azure_sql_dw_and_pdw() throws RecognitionException {
		Create_schema_azure_sql_dw_and_pdwContext _localctx = new Create_schema_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_create_schema_azure_sql_dw_and_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4422);
			match(CREATE);
			setState(4423);
			match(SCHEMA);
			setState(4424);
			((Create_schema_azure_sql_dw_and_pdwContext)_localctx).schema_name = id();
			setState(4427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4425);
				match(AUTHORIZATION);
				setState(4426);
				((Create_schema_azure_sql_dw_and_pdwContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_azure_sql_dw_and_pdwContext extends ParserRuleContext {
		public IdContext schema_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode TRANSFER() { return getToken(TSqlParser.TRANSFER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public Alter_schema_azure_sql_dw_and_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_azure_sql_dw_and_pdw; }
	}

	public final Alter_schema_azure_sql_dw_and_pdwContext alter_schema_azure_sql_dw_and_pdw() throws RecognitionException {
		Alter_schema_azure_sql_dw_and_pdwContext _localctx = new Alter_schema_azure_sql_dw_and_pdwContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_alter_schema_azure_sql_dw_and_pdw);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4429);
			match(ALTER);
			setState(4430);
			match(SCHEMA);
			setState(4431);
			((Alter_schema_azure_sql_dw_and_pdwContext)_localctx).schema_name = id();
			setState(4432);
			match(TRANSFER);
			setState(4436);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
			case 1:
				{
				setState(4433);
				match(OBJECT);
				setState(4434);
				match(COLON);
				setState(4435);
				match(COLON);
				}
				break;
			}
			setState(4438);
			id();
			setState(4441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				{
				setState(4439);
				match(DOT);
				setState(4440);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_search_property_listContext extends ParserRuleContext {
		public IdContext new_list_name;
		public IdContext database_name;
		public IdContext source_list_name;
		public IdContext owner_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_search_property_list; }
	}

	public final Create_search_property_listContext create_search_property_list() throws RecognitionException {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_create_search_property_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4443);
			match(CREATE);
			setState(4444);
			match(SEARCH);
			setState(4445);
			match(PROPERTY);
			setState(4446);
			match(LIST);
			setState(4447);
			((Create_search_property_listContext)_localctx).new_list_name = id();
			setState(4455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4448);
				match(FROM);
				setState(4452);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(4449);
					((Create_search_property_listContext)_localctx).database_name = id();
					setState(4450);
					match(DOT);
					}
					break;
				}
				setState(4454);
				((Create_search_property_listContext)_localctx).source_list_name = id();
				}
			}

			setState(4459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4457);
				match(AUTHORIZATION);
				setState(4458);
				((Create_search_property_listContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_security_policyContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext security_policy_name;
		public IdContext tvf_schema_name;
		public IdContext security_predicate_function_name;
		public IdContext column_name_or_arguments;
		public IdContext table_schema_name;
		public IdContext name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SECURITY() { return getToken(TSqlParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSqlParser.POLICY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> PREDICATE() { return getTokens(TSqlParser.PREDICATE); }
		public TerminalNode PREDICATE(int i) {
			return getToken(TSqlParser.PREDICATE, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(TSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(TSqlParser.AFTER, i);
		}
		public List<TerminalNode> BEFORE() { return getTokens(TSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(TSqlParser.BEFORE, i);
		}
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public List<TerminalNode> FILTER() { return getTokens(TSqlParser.FILTER); }
		public TerminalNode FILTER(int i) {
			return getToken(TSqlParser.FILTER, i);
		}
		public List<TerminalNode> BLOCK() { return getTokens(TSqlParser.BLOCK); }
		public TerminalNode BLOCK(int i) {
			return getToken(TSqlParser.BLOCK, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(TSqlParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(TSqlParser.INSERT, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(TSqlParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(TSqlParser.UPDATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(TSqlParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(TSqlParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_security_policy; }
	}

	public final Create_security_policyContext create_security_policy() throws RecognitionException {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4461);
			match(CREATE);
			setState(4462);
			match(SECURITY);
			setState(4463);
			match(POLICY);
			setState(4467);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				setState(4464);
				((Create_security_policyContext)_localctx).schema_name = id();
				setState(4465);
				match(DOT);
				}
				break;
			}
			setState(4469);
			((Create_security_policyContext)_localctx).security_policy_name = id();
			setState(4510); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4470);
					match(COMMA);
					}
				}

				setState(4473);
				match(ADD);
				setState(4475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILTER || _la==BLOCK) {
					{
					setState(4474);
					_la = _input.LA(1);
					if ( !(_la==FILTER || _la==BLOCK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4477);
				match(PREDICATE);
				setState(4478);
				((Create_security_policyContext)_localctx).tvf_schema_name = id();
				setState(4479);
				match(DOT);
				setState(4480);
				((Create_security_policyContext)_localctx).security_predicate_function_name = id();
				setState(4481);
				match(LR_BRACKET);
				setState(4486); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4483);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4482);
						match(COMMA);
						}
					}

					setState(4485);
					((Create_security_policyContext)_localctx).column_name_or_arguments = id();
					}
					}
					setState(4488); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) || _la==COMMA );
				setState(4490);
				match(RR_BRACKET);
				setState(4491);
				match(ON);
				setState(4492);
				((Create_security_policyContext)_localctx).table_schema_name = id();
				setState(4493);
				match(DOT);
				setState(4494);
				((Create_security_policyContext)_localctx).name = id();
				setState(4507);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,485,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(4505);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
						case 1:
							{
							setState(4496);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4495);
								match(COMMA);
								}
							}

							setState(4498);
							match(AFTER);
							setState(4499);
							_la = _input.LA(1);
							if ( !(_la==INSERT || _la==UPDATE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 2:
							{
							setState(4501);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4500);
								match(COMMA);
								}
							}

							setState(4503);
							match(BEFORE);
							setState(4504);
							_la = _input.LA(1);
							if ( !(_la==DELETE || _la==UPDATE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						} 
					}
					setState(4509);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,485,_ctx);
				}
				}
				}
				setState(4512); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ADD || _la==COMMA );
			setState(4524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(4514);
				match(WITH);
				setState(4515);
				match(LR_BRACKET);
				setState(4516);
				match(STATE);
				setState(4517);
				match(EQUAL);
				setState(4518);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4521);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCHEMABINDING) {
					{
					setState(4519);
					match(SCHEMABINDING);
					setState(4520);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4523);
				match(RR_BRACKET);
				}
				break;
			}
			setState(4529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4526);
				match(NOT);
				setState(4527);
				match(FOR);
				setState(4528);
				match(REPLICATION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public Token sequnce_increment;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode RESTART() { return getToken(TSqlParser.RESTART, 0); }
		public TerminalNode INCREMENT() { return getToken(TSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(TSqlParser.MINVALUE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NO() { return getTokens(TSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(TSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(TSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(TSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(TSqlParser.CACHE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_alter_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4531);
			match(ALTER);
			setState(4532);
			match(SEQUENCE);
			setState(4536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				{
				setState(4533);
				((Alter_sequenceContext)_localctx).schema_name = id();
				setState(4534);
				match(DOT);
				}
				break;
			}
			setState(4538);
			((Alter_sequenceContext)_localctx).sequence_name = id();
			setState(4544);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(4539);
				match(RESTART);
				setState(4542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
				case 1:
					{
					setState(4540);
					match(WITH);
					setState(4541);
					match(DECIMAL);
					}
					break;
				}
				}
				break;
			}
			setState(4549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(4546);
				match(INCREMENT);
				setState(4547);
				match(BY);
				setState(4548);
				((Alter_sequenceContext)_localctx).sequnce_increment = match(DECIMAL);
				}
				break;
			}
			setState(4555);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				setState(4551);
				match(MINVALUE);
				setState(4552);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4553);
				match(NO);
				setState(4554);
				match(MINVALUE);
				}
				break;
			}
			setState(4561);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				setState(4557);
				match(MAXVALUE);
				setState(4558);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4559);
				match(NO);
				setState(4560);
				match(MAXVALUE);
				}
				break;
			}
			setState(4566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(4563);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(4564);
				match(NO);
				setState(4565);
				match(CYCLE);
				}
				break;
			}
			setState(4572);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4568);
				match(CACHE);
				setState(4569);
				match(DECIMAL);
				}
				break;
			case 2:
				{
				setState(4570);
				match(NO);
				setState(4571);
				match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext sequence_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode INCREMENT() { return getToken(TSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(TSqlParser.MINVALUE, 0); }
		public List<TerminalNode> NO() { return getTokens(TSqlParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(TSqlParser.NO, i);
		}
		public TerminalNode MAXVALUE() { return getToken(TSqlParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(TSqlParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(TSqlParser.CACHE, 0); }
		public TerminalNode MINUS() { return getToken(TSqlParser.MINUS, 0); }
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4574);
			match(CREATE);
			setState(4575);
			match(SEQUENCE);
			setState(4579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(4576);
				((Create_sequenceContext)_localctx).schema_name = id();
				setState(4577);
				match(DOT);
				}
				break;
			}
			setState(4581);
			((Create_sequenceContext)_localctx).sequence_name = id();
			setState(4584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4582);
				match(AS);
				setState(4583);
				data_type();
				}
			}

			setState(4589);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				{
				setState(4586);
				match(START);
				setState(4587);
				match(WITH);
				setState(4588);
				match(DECIMAL);
				}
				break;
			}
			setState(4597);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				setState(4591);
				match(INCREMENT);
				setState(4592);
				match(BY);
				setState(4594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS) {
					{
					setState(4593);
					match(MINUS);
					}
				}

				setState(4596);
				match(DECIMAL);
				}
				break;
			}
			setState(4605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
			case 1:
				{
				setState(4599);
				match(MINVALUE);
				setState(4601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(4600);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4603);
				match(NO);
				setState(4604);
				match(MINVALUE);
				}
				break;
			}
			setState(4613);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
			case 1:
				{
				setState(4607);
				match(MAXVALUE);
				setState(4609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(4608);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4611);
				match(NO);
				setState(4612);
				match(MAXVALUE);
				}
				break;
			}
			setState(4618);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				setState(4615);
				match(CYCLE);
				}
				break;
			case 2:
				{
				setState(4616);
				match(NO);
				setState(4617);
				match(CYCLE);
				}
				break;
			}
			setState(4626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				setState(4620);
				match(CACHE);
				setState(4622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECIMAL) {
					{
					setState(4621);
					match(DECIMAL);
					}
				}

				}
				break;
			case 2:
				{
				setState(4624);
				match(NO);
				setState(4625);
				match(CACHE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(TSqlParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(TSqlParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(TSqlParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(TSqlParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(TSqlParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(TSqlParser.STATE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(TSqlParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(TSqlParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(TSqlParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(TSqlParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(TSqlParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(TSqlParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(TSqlParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(TSqlParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(TSqlParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(TSqlParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(TSqlParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(TSqlParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(TSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(TSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(TSqlParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(TSqlParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(TSqlParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(TSqlParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit; }
	}

	public final Alter_server_auditContext alter_server_audit() throws RecognitionException {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_alter_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4628);
			match(ALTER);
			setState(4629);
			match(SERVER);
			setState(4630);
			match(AUDIT);
			setState(4631);
			((Alter_server_auditContext)_localctx).audit_name = id();
			setState(4763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4632);
					match(TO);
					setState(4677);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(4633);
						match(FILE);
						{
						setState(4634);
						match(LR_BRACKET);
						setState(4671);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_FILES - 394)) | (1L << (MAX_ROLLOVER_FILES - 394)) | (1L << (MAXSIZE - 394)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(4669);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
							case 1:
								{
								setState(4636);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4635);
									match(COMMA);
									}
								}

								setState(4638);
								match(FILEPATH);
								setState(4639);
								match(EQUAL);
								setState(4640);
								((Alter_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(4642);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4641);
									match(COMMA);
									}
								}

								setState(4644);
								match(MAXSIZE);
								setState(4645);
								match(EQUAL);
								setState(4649);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(4646);
									match(DECIMAL);
									setState(4647);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(4648);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(4652);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4651);
									match(COMMA);
									}
								}

								setState(4654);
								match(MAX_ROLLOVER_FILES);
								setState(4655);
								match(EQUAL);
								setState(4656);
								((Alter_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Alter_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 4:
								{
								setState(4658);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4657);
									match(COMMA);
									}
								}

								setState(4660);
								match(MAX_FILES);
								setState(4661);
								match(EQUAL);
								setState(4662);
								((Alter_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(4664);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4663);
									match(COMMA);
									}
								}

								setState(4666);
								match(RESERVE_DISK_SPACE);
								setState(4667);
								match(EQUAL);
								setState(4668);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							}
							setState(4673);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4674);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4675);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4676);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4707);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
				case 1:
					{
					setState(4681);
					match(WITH);
					setState(4682);
					match(LR_BRACKET);
					setState(4703);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==QUEUE_DELAY || _la==ON_FAILURE || _la==STATE || _la==COMMA) {
						{
						setState(4701);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
						case 1:
							{
							setState(4684);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4683);
								match(COMMA);
								}
							}

							setState(4686);
							match(QUEUE_DELAY);
							setState(4687);
							match(EQUAL);
							setState(4688);
							((Alter_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4690);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4689);
								match(COMMA);
								}
							}

							setState(4692);
							match(ON_FAILURE);
							setState(4693);
							match(EQUAL);
							setState(4694);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4696);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4695);
								match(COMMA);
								}
							}

							setState(4698);
							match(STATE);
							setState(4699);
							match(EQUAL);
							setState(4700);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						}
						setState(4705);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4706);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4709);
					match(WHERE);
					setState(4753);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
					case 1:
						{
						setState(4711);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4710);
							match(COMMA);
							}
						}

						{
						setState(4714);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4713);
							match(NOT);
							}
						}

						}
						setState(4716);
						((Alter_server_auditContext)_localctx).event_field_name = id();
						setState(4728);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
						case 1:
							{
							setState(4717);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4718);
							match(LESS);
							setState(4719);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4720);
							match(EXCLAMATION);
							setState(4721);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4722);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4723);
							match(GREATER);
							setState(4724);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4725);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4726);
							match(LESS);
							setState(4727);
							match(EQUAL);
							}
							break;
						}
						setState(4730);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4733);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4732);
							match(COMMA);
							}
						}

						setState(4735);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4737);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4736);
							match(NOT);
							}
						}

						setState(4750);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
						case 1:
							{
							setState(4739);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4740);
							match(LESS);
							setState(4741);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4742);
							match(EXCLAMATION);
							setState(4743);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4744);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4745);
							match(GREATER);
							setState(4746);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4747);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4748);
							match(LESS);
							setState(4749);
							match(EQUAL);
							}
							break;
						}
						setState(4752);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(4757);
				match(REMOVE);
				setState(4758);
				match(WHERE);
				}
				break;
			case 3:
				{
				setState(4759);
				match(MODIFY);
				setState(4760);
				match(NAME);
				setState(4761);
				match(EQUAL);
				setState(4762);
				((Alter_server_auditContext)_localctx).new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public IdContext audit_guid;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(TSqlParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(TSqlParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(TSqlParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(TSqlParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(TSqlParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(TSqlParser.STATE, i);
		}
		public List<TerminalNode> AUDIT_GUID() { return getTokens(TSqlParser.AUDIT_GUID); }
		public TerminalNode AUDIT_GUID(int i) {
			return getToken(TSqlParser.AUDIT_GUID, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(TSqlParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(TSqlParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(TSqlParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(TSqlParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(TSqlParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(TSqlParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(TSqlParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(TSqlParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(TSqlParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(TSqlParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(TSqlParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(TSqlParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(TSqlParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(TSqlParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(TSqlParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(TSqlParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(TSqlParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(TSqlParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSqlParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSqlParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(TSqlParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(TSqlParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(TSqlParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(TSqlParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit; }
	}

	public final Create_server_auditContext create_server_audit() throws RecognitionException {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_create_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4765);
			match(CREATE);
			setState(4766);
			match(SERVER);
			setState(4767);
			match(AUDIT);
			setState(4768);
			((Create_server_auditContext)_localctx).audit_name = id();
			setState(4906);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				{
				setState(4816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4769);
					match(TO);
					setState(4814);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(4770);
						match(FILE);
						{
						setState(4771);
						match(LR_BRACKET);
						setState(4808);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (MAX_FILES - 394)) | (1L << (MAX_ROLLOVER_FILES - 394)) | (1L << (MAXSIZE - 394)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(4806);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
							case 1:
								{
								setState(4773);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4772);
									match(COMMA);
									}
								}

								setState(4775);
								match(FILEPATH);
								setState(4776);
								match(EQUAL);
								setState(4777);
								((Create_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(4779);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4778);
									match(COMMA);
									}
								}

								setState(4781);
								match(MAXSIZE);
								setState(4782);
								match(EQUAL);
								setState(4786);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(4783);
									match(DECIMAL);
									setState(4784);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(4785);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(4789);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4788);
									match(COMMA);
									}
								}

								setState(4791);
								match(MAX_ROLLOVER_FILES);
								setState(4792);
								match(EQUAL);
								setState(4793);
								((Create_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Create_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 4:
								{
								setState(4795);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4794);
									match(COMMA);
									}
								}

								setState(4797);
								match(MAX_FILES);
								setState(4798);
								match(EQUAL);
								setState(4799);
								((Create_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(4801);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4800);
									match(COMMA);
									}
								}

								setState(4803);
								match(RESERVE_DISK_SPACE);
								setState(4804);
								match(EQUAL);
								setState(4805);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							}
							setState(4810);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4811);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4812);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4813);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4850);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
				case 1:
					{
					setState(4818);
					match(WITH);
					setState(4819);
					match(LR_BRACKET);
					setState(4846);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AUDIT_GUID || _la==QUEUE_DELAY || _la==ON_FAILURE || _la==STATE || _la==COMMA) {
						{
						setState(4844);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
						case 1:
							{
							setState(4821);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4820);
								match(COMMA);
								}
							}

							setState(4823);
							match(QUEUE_DELAY);
							setState(4824);
							match(EQUAL);
							setState(4825);
							((Create_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4827);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4826);
								match(COMMA);
								}
							}

							setState(4829);
							match(ON_FAILURE);
							setState(4830);
							match(EQUAL);
							setState(4831);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4833);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4832);
								match(COMMA);
								}
							}

							setState(4835);
							match(STATE);
							setState(4836);
							match(EQUAL);
							setState(4837);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(4839);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4838);
								match(COMMA);
								}
							}

							setState(4841);
							match(AUDIT_GUID);
							setState(4842);
							match(EQUAL);
							setState(4843);
							((Create_server_auditContext)_localctx).audit_guid = id();
							}
							break;
						}
						}
						setState(4848);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4849);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4852);
					match(WHERE);
					setState(4896);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
					case 1:
						{
						setState(4854);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4853);
							match(COMMA);
							}
						}

						{
						setState(4857);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4856);
							match(NOT);
							}
						}

						}
						setState(4859);
						((Create_server_auditContext)_localctx).event_field_name = id();
						setState(4871);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
						case 1:
							{
							setState(4860);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4861);
							match(LESS);
							setState(4862);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4863);
							match(EXCLAMATION);
							setState(4864);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4865);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4866);
							match(GREATER);
							setState(4867);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4868);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4869);
							match(LESS);
							setState(4870);
							match(EQUAL);
							}
							break;
						}
						setState(4873);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4876);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4875);
							match(COMMA);
							}
						}

						setState(4878);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4880);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4879);
							match(NOT);
							}
						}

						setState(4893);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,557,_ctx) ) {
						case 1:
							{
							setState(4882);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4883);
							match(LESS);
							setState(4884);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4885);
							match(EXCLAMATION);
							setState(4886);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4887);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4888);
							match(GREATER);
							setState(4889);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4890);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4891);
							match(LESS);
							setState(4892);
							match(EQUAL);
							}
							break;
						}
						setState(4895);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 2:
				{
				setState(4900);
				match(REMOVE);
				setState(4901);
				match(WHERE);
				}
				break;
			case 3:
				{
				setState(4902);
				match(MODIFY);
				setState(4903);
				match(NAME);
				setState(4904);
				match(EQUAL);
				setState(4905);
				((Create_server_auditContext)_localctx).new_audit_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(TSqlParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(TSqlParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit_specification; }
	}

	public final Alter_server_audit_specificationContext alter_server_audit_specification() throws RecognitionException {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4908);
			match(ALTER);
			setState(4909);
			match(SERVER);
			setState(4910);
			match(AUDIT);
			setState(4911);
			match(SPECIFICATION);
			setState(4912);
			((Alter_server_audit_specificationContext)_localctx).audit_specification_name = id();
			setState(4917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4913);
				match(FOR);
				setState(4914);
				match(SERVER);
				setState(4915);
				match(AUDIT);
				setState(4916);
				((Alter_server_audit_specificationContext)_localctx).audit_name = id();
				}
			}

			setState(4926);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4919);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4920);
					match(LR_BRACKET);
					setState(4921);
					((Alter_server_audit_specificationContext)_localctx).audit_action_group_name = id();
					setState(4922);
					match(RR_BRACKET);
					}
					} 
				}
				setState(4928);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,562,_ctx);
			}
			setState(4935);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
			case 1:
				{
				setState(4929);
				match(WITH);
				setState(4930);
				match(LR_BRACKET);
				setState(4931);
				match(STATE);
				setState(4932);
				match(EQUAL);
				setState(4933);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4934);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(TSqlParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(TSqlParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit_specification; }
	}

	public final Create_server_audit_specificationContext create_server_audit_specification() throws RecognitionException {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_create_server_audit_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4937);
			match(CREATE);
			setState(4938);
			match(SERVER);
			setState(4939);
			match(AUDIT);
			setState(4940);
			match(SPECIFICATION);
			setState(4941);
			((Create_server_audit_specificationContext)_localctx).audit_specification_name = id();
			setState(4946);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4942);
				match(FOR);
				setState(4943);
				match(SERVER);
				setState(4944);
				match(AUDIT);
				setState(4945);
				((Create_server_audit_specificationContext)_localctx).audit_name = id();
				}
			}

			setState(4955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ADD) {
				{
				{
				setState(4948);
				match(ADD);
				setState(4949);
				match(LR_BRACKET);
				setState(4950);
				((Create_server_audit_specificationContext)_localctx).audit_action_group_name = id();
				setState(4951);
				match(RR_BRACKET);
				}
				}
				setState(4957);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4964);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
			case 1:
				{
				setState(4958);
				match(WITH);
				setState(4959);
				match(LR_BRACKET);
				setState(4960);
				match(STATE);
				setState(4961);
				match(EQUAL);
				setState(4962);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4963);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_configurationContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode CONFIGURATION() { return getToken(TSqlParser.CONFIGURATION, 0); }
		public List<TerminalNode> SET() { return getTokens(TSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(TSqlParser.SET, i);
		}
		public TerminalNode PROCESS() { return getToken(TSqlParser.PROCESS, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(TSqlParser.DIAGNOSTICS, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode CLUSTER() { return getToken(TSqlParser.CLUSTER, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode CONTEXT() { return getToken(TSqlParser.CONTEXT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode BUFFER() { return getToken(TSqlParser.BUFFER, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode EXTENSION() { return getToken(TSqlParser.EXTENSION, 0); }
		public TerminalNode SOFTNUMA() { return getToken(TSqlParser.SOFTNUMA, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode MAX_SIZE() { return getToken(TSqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_FILES() { return getToken(TSqlParser.MAX_FILES, 0); }
		public TerminalNode VERBOSELOGGING() { return getToken(TSqlParser.VERBOSELOGGING, 0); }
		public TerminalNode SQLDUMPERFLAGS() { return getToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public TerminalNode SQLDUMPERPATH() { return getToken(TSqlParser.SQLDUMPERPATH, 0); }
		public TerminalNode SQLDUMPERTIMEOUT() { return getToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public TerminalNode FAILURECONDITIONLEVEL() { return getToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public TerminalNode HEALTHCHECKTIMEOUT() { return getToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_configuration; }
	}

	public final Alter_server_configurationContext alter_server_configuration() throws RecognitionException {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alter_server_configuration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4966);
			match(ALTER);
			setState(4967);
			match(SERVER);
			setState(4968);
			match(CONFIGURATION);
			setState(4969);
			match(SET);
			{
			setState(5075);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCESS:
				{
				setState(4970);
				match(PROCESS);
				setState(4971);
				match(AFFINITY);
				setState(5007);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CPU:
					{
					setState(4972);
					match(CPU);
					setState(4973);
					match(EQUAL);
					setState(4989);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(4974);
						match(AUTO);
						}
						break;
					case DECIMAL:
					case COMMA:
						{
						setState(4985); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							setState(4985);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
							case 1:
								{
								setState(4976);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4975);
									match(COMMA);
									}
								}

								setState(4978);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4980);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4979);
									match(COMMA);
									}
								}

								setState(4982);
								match(DECIMAL);
								setState(4983);
								match(TO);
								setState(4984);
								match(DECIMAL);
								}
								break;
							}
							}
							setState(4987); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NUMANODE:
					{
					setState(4991);
					match(NUMANODE);
					setState(4992);
					match(EQUAL);
					setState(5003); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(5003);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
						case 1:
							{
							setState(4994);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4993);
								match(COMMA);
								}
							}

							setState(4996);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4998);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4997);
								match(COMMA);
								}
							}

							setState(5000);
							match(DECIMAL);
							setState(5001);
							match(TO);
							setState(5002);
							match(DECIMAL);
							}
							break;
						}
						}
						setState(5005); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DECIMAL || _la==COMMA );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DIAGNOSTICS:
				{
				setState(5009);
				match(DIAGNOSTICS);
				setState(5010);
				match(LOG);
				setState(5026);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(5011);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(5012);
					match(OFF);
					}
					break;
				case PATH:
					{
					setState(5013);
					match(PATH);
					setState(5014);
					match(EQUAL);
					setState(5015);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case MAX_SIZE:
					{
					setState(5016);
					match(MAX_SIZE);
					setState(5017);
					match(EQUAL);
					setState(5021);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(5018);
						match(DECIMAL);
						setState(5019);
						match(MB);
						}
						break;
					case DEFAULT:
						{
						setState(5020);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MAX_FILES:
					{
					setState(5023);
					match(MAX_FILES);
					setState(5024);
					match(EQUAL);
					setState(5025);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FAILOVER:
				{
				setState(5028);
				match(FAILOVER);
				setState(5029);
				match(CLUSTER);
				setState(5030);
				match(PROPERTY);
				setState(5048);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VERBOSELOGGING:
					{
					setState(5031);
					match(VERBOSELOGGING);
					setState(5032);
					match(EQUAL);
					setState(5033);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERFLAGS:
					{
					setState(5034);
					match(SQLDUMPERFLAGS);
					setState(5035);
					match(EQUAL);
					setState(5036);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERPATH:
					{
					setState(5037);
					match(SQLDUMPERPATH);
					setState(5038);
					match(EQUAL);
					setState(5039);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERTIMEOUT:
					{
					setState(5040);
					match(SQLDUMPERTIMEOUT);
					setState(5041);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FAILURECONDITIONLEVEL:
					{
					setState(5042);
					match(FAILURECONDITIONLEVEL);
					setState(5043);
					match(EQUAL);
					setState(5044);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case HEALTHCHECKTIMEOUT:
					{
					setState(5045);
					match(HEALTHCHECKTIMEOUT);
					setState(5046);
					match(EQUAL);
					setState(5047);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HADR:
				{
				setState(5050);
				match(HADR);
				setState(5051);
				match(CLUSTER);
				setState(5052);
				match(CONTEXT);
				setState(5053);
				match(EQUAL);
				setState(5054);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case BUFFER:
				{
				setState(5055);
				match(BUFFER);
				setState(5056);
				match(POOL);
				setState(5057);
				match(EXTENSION);
				setState(5070);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(5058);
					match(ON);
					setState(5059);
					match(LR_BRACKET);
					setState(5060);
					match(FILENAME);
					setState(5061);
					match(EQUAL);
					setState(5062);
					match(STRING);
					setState(5063);
					match(COMMA);
					setState(5064);
					match(SIZE);
					setState(5065);
					match(EQUAL);
					setState(5066);
					match(DECIMAL);
					setState(5067);
					_la = _input.LA(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5068);
					match(RR_BRACKET);
					}
					break;
				case OFF:
					{
					setState(5069);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SET:
				{
				setState(5072);
				match(SET);
				setState(5073);
				match(SOFTNUMA);
				setState(5074);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_roleContext extends ParserRuleContext {
		public IdContext server_role_name;
		public IdContext server_principal;
		public IdContext new_server_role_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role; }
	}

	public final Alter_server_roleContext alter_server_role() throws RecognitionException {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_alter_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5077);
			match(ALTER);
			setState(5078);
			match(SERVER);
			setState(5079);
			match(ROLE);
			setState(5080);
			((Alter_server_roleContext)_localctx).server_role_name = id();
			setState(5088);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(5081);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5082);
				match(MEMBER);
				setState(5083);
				((Alter_server_roleContext)_localctx).server_principal = id();
				}
				break;
			case WITH:
				{
				setState(5084);
				match(WITH);
				setState(5085);
				match(NAME);
				setState(5086);
				match(EQUAL);
				setState(5087);
				((Alter_server_roleContext)_localctx).new_server_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_roleContext extends ParserRuleContext {
		public IdContext server_role;
		public IdContext server_principal;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_role; }
	}

	public final Create_server_roleContext create_server_role() throws RecognitionException {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_create_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5090);
			match(CREATE);
			setState(5091);
			match(SERVER);
			setState(5092);
			match(ROLE);
			setState(5093);
			((Create_server_roleContext)_localctx).server_role = id();
			setState(5096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5094);
				match(AUTHORIZATION);
				setState(5095);
				((Create_server_roleContext)_localctx).server_principal = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_role_pdwContext extends ParserRuleContext {
		public IdContext server_role_name;
		public IdContext login;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role_pdw; }
	}

	public final Alter_server_role_pdwContext alter_server_role_pdw() throws RecognitionException {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_alter_server_role_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5098);
			match(ALTER);
			setState(5099);
			match(SERVER);
			setState(5100);
			match(ROLE);
			setState(5101);
			((Alter_server_role_pdwContext)_localctx).server_role_name = id();
			setState(5102);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5103);
			match(MEMBER);
			setState(5104);
			((Alter_server_role_pdwContext)_localctx).login = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_serviceContext extends ParserRuleContext {
		public IdContext modified_service_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public IdContext modified_contract_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSqlParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSqlParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSqlParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSqlParser.DROP, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service; }
	}

	public final Alter_serviceContext alter_service() throws RecognitionException {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_alter_service);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5106);
			match(ALTER);
			setState(5107);
			match(SERVICE);
			setState(5108);
			((Alter_serviceContext)_localctx).modified_service_name = id();
			setState(5116);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5109);
				match(ON);
				setState(5110);
				match(QUEUE);
				{
				setState(5111);
				((Alter_serviceContext)_localctx).schema_name = id();
				setState(5112);
				match(DOT);
				}
				setState(5114);
				((Alter_serviceContext)_localctx).queue_name = id();
				}
			}

			setState(5125);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,586,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5119);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5118);
						match(COMMA);
						}
					}

					setState(5121);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5122);
					((Alter_serviceContext)_localctx).modified_contract_name = id();
					}
					} 
				}
				setState(5127);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,586,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_serviceContext extends ParserRuleContext {
		public IdContext create_service_name;
		public IdContext owner_name;
		public IdContext schema_name;
		public IdContext queue_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_service; }
	}

	public final Create_serviceContext create_service() throws RecognitionException {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_create_service);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5128);
			match(CREATE);
			setState(5129);
			match(SERVICE);
			setState(5130);
			((Create_serviceContext)_localctx).create_service_name = id();
			setState(5133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5131);
				match(AUTHORIZATION);
				setState(5132);
				((Create_serviceContext)_localctx).owner_name = id();
				}
			}

			setState(5135);
			match(ON);
			setState(5136);
			match(QUEUE);
			setState(5140);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
			case 1:
				{
				setState(5137);
				((Create_serviceContext)_localctx).schema_name = id();
				setState(5138);
				match(DOT);
				}
				break;
			}
			setState(5142);
			((Create_serviceContext)_localctx).queue_name = id();
			setState(5156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				{
				setState(5143);
				match(LR_BRACKET);
				setState(5151); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5145);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5144);
						match(COMMA);
						}
					}

					setState(5149);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(5147);
						id();
						}
						break;
					case DEFAULT:
						{
						setState(5148);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(5153); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DEFAULT || _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) || _la==COMMA );
				setState(5155);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_service_master_keyContext extends ParserRuleContext {
		public Token acold_account_name;
		public Token old_password;
		public Token new_account_name;
		public Token new_password;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(TSqlParser.OLD_ACCOUNT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(TSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(TSqlParser.NEW_PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service_master_key; }
	}

	public final Alter_service_master_keyContext alter_service_master_key() throws RecognitionException {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_alter_service_master_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5158);
			match(ALTER);
			setState(5159);
			match(SERVICE);
			setState(5160);
			match(MASTER);
			setState(5161);
			match(KEY);
			setState(5183);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				setState(5163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(5162);
					match(FORCE);
					}
				}

				setState(5165);
				match(REGENERATE);
				}
				break;
			case WITH:
				{
				{
				setState(5166);
				match(WITH);
				setState(5181);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
				case 1:
					{
					setState(5167);
					match(OLD_ACCOUNT);
					setState(5168);
					match(EQUAL);
					setState(5169);
					((Alter_service_master_keyContext)_localctx).acold_account_name = match(STRING);
					setState(5170);
					match(COMMA);
					setState(5171);
					match(OLD_PASSWORD);
					setState(5172);
					match(EQUAL);
					setState(5173);
					((Alter_service_master_keyContext)_localctx).old_password = match(STRING);
					}
					break;
				case 2:
					{
					setState(5174);
					match(NEW_ACCOUNT);
					setState(5175);
					match(EQUAL);
					setState(5176);
					((Alter_service_master_keyContext)_localctx).new_account_name = match(STRING);
					setState(5177);
					match(COMMA);
					setState(5178);
					match(NEW_PASSWORD);
					setState(5179);
					match(EQUAL);
					setState(5180);
					((Alter_service_master_keyContext)_localctx).new_password = match(STRING);
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_symmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public IdContext certificate_name;
		public Token password;
		public IdContext symmetric_key_name;
		public IdContext Asym_key_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SYMMETRIC() { return getTokens(TSqlParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(TSqlParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_symmetric_key; }
	}

	public final Alter_symmetric_keyContext alter_symmetric_key() throws RecognitionException {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_alter_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5185);
			match(ALTER);
			setState(5186);
			match(SYMMETRIC);
			setState(5187);
			match(KEY);
			setState(5188);
			((Alter_symmetric_keyContext)_localctx).key_name = id();
			{
			setState(5189);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5190);
			match(ENCRYPTION);
			setState(5191);
			match(BY);
			setState(5203);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				{
				setState(5192);
				match(CERTIFICATE);
				setState(5193);
				((Alter_symmetric_keyContext)_localctx).certificate_name = id();
				}
				break;
			case PASSWORD:
				{
				setState(5194);
				match(PASSWORD);
				setState(5195);
				match(EQUAL);
				setState(5196);
				((Alter_symmetric_keyContext)_localctx).password = match(STRING);
				}
				break;
			case SYMMETRIC:
				{
				setState(5197);
				match(SYMMETRIC);
				setState(5198);
				match(KEY);
				setState(5199);
				((Alter_symmetric_keyContext)_localctx).symmetric_key_name = id();
				}
				break;
			case ASYMMETRIC:
				{
				setState(5200);
				match(ASYMMETRIC);
				setState(5201);
				match(KEY);
				setState(5202);
				((Alter_symmetric_keyContext)_localctx).Asym_key_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_symmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public IdContext owner_name;
		public IdContext provider_name;
		public Token key_pass_phrase;
		public Token identity_phrase;
		public Token provider_key_name;
		public IdContext certificate_name;
		public Token password;
		public IdContext symmetric_key_name;
		public IdContext asym_key_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> SYMMETRIC() { return getTokens(TSqlParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(TSqlParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode KEY_SOURCE() { return getToken(TSqlParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(TSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DES() { return getToken(TSqlParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(TSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSqlParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(TSqlParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(TSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSqlParser.AES_256, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Create_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_symmetric_key; }
	}

	public final Create_symmetric_keyContext create_symmetric_key() throws RecognitionException {
		Create_symmetric_keyContext _localctx = new Create_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_create_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5205);
			match(ALTER);
			setState(5206);
			match(SYMMETRIC);
			setState(5207);
			match(KEY);
			setState(5208);
			((Create_symmetric_keyContext)_localctx).key_name = id();
			setState(5211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5209);
				match(AUTHORIZATION);
				setState(5210);
				((Create_symmetric_keyContext)_localctx).owner_name = id();
				}
			}

			setState(5216);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5213);
				match(FROM);
				setState(5214);
				match(PROVIDER);
				setState(5215);
				((Create_symmetric_keyContext)_localctx).provider_name = id();
				}
			}

			{
			setState(5218);
			match(WITH);
			setState(5251);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM:
			case CREATION_DISPOSITION:
			case IDENTITY_VALUE:
			case KEY_SOURCE:
			case PROVIDER_KEY_NAME:
				{
				setState(5234);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KEY_SOURCE:
					{
					setState(5219);
					match(KEY_SOURCE);
					setState(5220);
					match(EQUAL);
					setState(5221);
					((Create_symmetric_keyContext)_localctx).key_pass_phrase = match(STRING);
					}
					break;
				case ALGORITHM:
					{
					setState(5222);
					match(ALGORITHM);
					setState(5223);
					match(EQUAL);
					setState(5224);
					_la = _input.LA(1);
					if ( !(((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (AES_128 - 197)) | (1L << (AES_192 - 197)) | (1L << (AES_256 - 197)))) != 0) || _la==DES || _la==DESX || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (RC2 - 482)) | (1L << (RC4 - 482)) | (1L << (RC4_128 - 482)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case IDENTITY_VALUE:
					{
					setState(5225);
					match(IDENTITY_VALUE);
					setState(5226);
					match(EQUAL);
					setState(5227);
					((Create_symmetric_keyContext)_localctx).identity_phrase = match(STRING);
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(5228);
					match(PROVIDER_KEY_NAME);
					setState(5229);
					match(EQUAL);
					setState(5230);
					((Create_symmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(5231);
					match(CREATION_DISPOSITION);
					setState(5232);
					match(EQUAL);
					setState(5233);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTION:
				{
				setState(5236);
				match(ENCRYPTION);
				setState(5237);
				match(BY);
				setState(5249);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CERTIFICATE:
					{
					setState(5238);
					match(CERTIFICATE);
					setState(5239);
					((Create_symmetric_keyContext)_localctx).certificate_name = id();
					}
					break;
				case PASSWORD:
					{
					setState(5240);
					match(PASSWORD);
					setState(5241);
					match(EQUAL);
					setState(5242);
					((Create_symmetric_keyContext)_localctx).password = match(STRING);
					}
					break;
				case SYMMETRIC:
					{
					setState(5243);
					match(SYMMETRIC);
					setState(5244);
					match(KEY);
					setState(5245);
					((Create_symmetric_keyContext)_localctx).symmetric_key_name = id();
					}
					break;
				case ASYMMETRIC:
					{
					setState(5246);
					match(ASYMMETRIC);
					setState(5247);
					match(KEY);
					setState(5248);
					((Create_symmetric_keyContext)_localctx).asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public IdContext schema_name_1;
		public IdContext synonym_name;
		public IdContext server_name;
		public IdContext database_name;
		public IdContext schema_name_2;
		public IdContext object_name;
		public IdContext database_or_schema2;
		public IdContext schema_id_2_or_object_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_create_synonym);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5253);
			match(CREATE);
			setState(5254);
			match(SYNONYM);
			setState(5258);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				{
				setState(5255);
				((Create_synonymContext)_localctx).schema_name_1 = id();
				setState(5256);
				match(DOT);
				}
				break;
			}
			setState(5260);
			((Create_synonymContext)_localctx).synonym_name = id();
			setState(5261);
			match(FOR);
			setState(5288);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				setState(5265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,603,_ctx) ) {
				case 1:
					{
					setState(5262);
					((Create_synonymContext)_localctx).server_name = id();
					setState(5263);
					match(DOT);
					}
					break;
				}
				setState(5270);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
				case 1:
					{
					setState(5267);
					((Create_synonymContext)_localctx).database_name = id();
					setState(5268);
					match(DOT);
					}
					break;
				}
				setState(5275);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
				case 1:
					{
					setState(5272);
					((Create_synonymContext)_localctx).schema_name_2 = id();
					setState(5273);
					match(DOT);
					}
					break;
				}
				setState(5277);
				((Create_synonymContext)_localctx).object_name = id();
				}
				break;
			case 2:
				{
				setState(5281);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(5278);
					((Create_synonymContext)_localctx).database_or_schema2 = id();
					setState(5279);
					match(DOT);
					}
					break;
				}
				setState(5286);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,607,_ctx) ) {
				case 1:
					{
					setState(5283);
					((Create_synonymContext)_localctx).schema_id_2_or_object_name = id();
					setState(5284);
					match(DOT);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_userContext extends ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public Token lcid;
		public IdContext language_name_or_alias;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(TSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(TSqlParser.LOGIN, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> NULL() { return getTokens(TSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(TSqlParser.NULL, i);
		}
		public List<TerminalNode> NONE() { return getTokens(TSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(TSqlParser.NONE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> OLD_PASSWORD() { return getTokens(TSqlParser.OLD_PASSWORD); }
		public TerminalNode OLD_PASSWORD(int i) {
			return getToken(TSqlParser.OLD_PASSWORD, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user; }
	}

	public final Alter_userContext alter_user() throws RecognitionException {
		Alter_userContext _localctx = new Alter_userContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_alter_user);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5290);
			match(ALTER);
			setState(5291);
			match(USER);
			setState(5292);
			((Alter_userContext)_localctx).username = id();
			setState(5293);
			match(WITH);
			setState(5344); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5344);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
					case 1:
						{
						setState(5295);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5294);
							match(COMMA);
							}
						}

						setState(5297);
						match(NAME);
						setState(5298);
						match(EQUAL);
						setState(5299);
						((Alter_userContext)_localctx).newusername = id();
						}
						break;
					case 2:
						{
						setState(5301);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5300);
							match(COMMA);
							}
						}

						setState(5303);
						match(DEFAULT_SCHEMA);
						setState(5304);
						match(EQUAL);
						setState(5307);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case OPENJSON:
						case PRECISION:
						case ABSOLUTE:
						case AT_KEYWORD:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_KEYWORD:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case TRY_CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CUME_DIST:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO_BATCH:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARBINARY_KEYWORD:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case ZONE:
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DTC_SUPPORT:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IIF:
						case IO:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case ISNULL:
						case KERBEROS:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERSISTED:
						case PLATFORM:
						case POLICY:
						case PREDICATE:
						case PROCESS:
						case PROFILE:
						case PYTHON:
						case R:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESUME:
						case RETAINDAYS:
						case RETURNS:
						case REWIND:
						case ROLE:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHOUT:
						case WITNESS:
						case VARCHAR:
						case NVARCHAR:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(5305);
							((Alter_userContext)_localctx).schema_name = id();
							}
							break;
						case NULL:
							{
							setState(5306);
							match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 3:
						{
						setState(5310);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5309);
							match(COMMA);
							}
						}

						setState(5312);
						match(LOGIN);
						setState(5313);
						match(EQUAL);
						setState(5314);
						((Alter_userContext)_localctx).loginame = id();
						}
						break;
					case 4:
						{
						setState(5316);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5315);
							match(COMMA);
							}
						}

						setState(5318);
						match(PASSWORD);
						setState(5319);
						match(EQUAL);
						setState(5320);
						match(STRING);
						setState(5324); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(5321);
								match(OLD_PASSWORD);
								setState(5322);
								match(EQUAL);
								setState(5323);
								match(STRING);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5326); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,614,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case 5:
						{
						setState(5329);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5328);
							match(COMMA);
							}
						}

						setState(5331);
						match(DEFAULT_LANGUAGE);
						setState(5332);
						match(EQUAL);
						setState(5336);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,616,_ctx) ) {
						case 1:
							{
							setState(5333);
							match(NONE);
							}
							break;
						case 2:
							{
							setState(5334);
							((Alter_userContext)_localctx).lcid = match(DECIMAL);
							}
							break;
						case 3:
							{
							setState(5335);
							((Alter_userContext)_localctx).language_name_or_alias = id();
							}
							break;
						}
						}
						break;
					case 6:
						{
						setState(5339);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5338);
							match(COMMA);
							}
						}

						setState(5341);
						match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						setState(5342);
						match(EQUAL);
						setState(5343);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5346); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,619,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_userContext extends ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext schema_name;
		public IdContext windows_principal;
		public IdContext language_name_or_alias;
		public Token password;
		public IdContext Azure_Active_Directory_principal;
		public IdContext cert_name;
		public IdContext asym_key_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(TSqlParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(TSqlParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> SID() { return getTokens(TSqlParser.SID); }
		public TerminalNode SID(int i) {
			return getToken(TSqlParser.SID, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSqlParser.BINARY, i);
		}
		public List<TerminalNode> NONE() { return getTokens(TSqlParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(TSqlParser.NONE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode WITHOUT() { return getToken(TSqlParser.WITHOUT, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public Create_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user; }
	}

	public final Create_userContext create_user() throws RecognitionException {
		Create_userContext _localctx = new Create_userContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_create_user);
		int _la;
		try {
			int _alt;
			setState(5494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5348);
				match(CREATE);
				setState(5349);
				match(USER);
				setState(5350);
				((Create_userContext)_localctx).user_name = id();
				setState(5354);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==FROM) {
					{
					setState(5351);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5352);
					match(LOGIN);
					setState(5353);
					((Create_userContext)_localctx).login_name = id();
					}
				}

				setState(5374);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,625,_ctx) ) {
				case 1:
					{
					setState(5356);
					match(WITH);
					setState(5371);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,624,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5369);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
							case 1:
								{
								setState(5358);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5357);
									match(COMMA);
									}
								}

								setState(5360);
								match(DEFAULT_SCHEMA);
								setState(5361);
								match(EQUAL);
								setState(5362);
								((Create_userContext)_localctx).schema_name = id();
								}
								break;
							case 2:
								{
								setState(5364);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5363);
									match(COMMA);
									}
								}

								setState(5366);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5367);
								match(EQUAL);
								setState(5368);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5373);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,624,_ctx);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5376);
				match(CREATE);
				setState(5377);
				match(USER);
				setState(5458);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,641,_ctx) ) {
				case 1:
					{
					setState(5378);
					((Create_userContext)_localctx).windows_principal = id();
					setState(5413);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
					case 1:
						{
						setState(5379);
						match(WITH);
						setState(5410);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,632,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								setState(5408);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,631,_ctx) ) {
								case 1:
									{
									setState(5381);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5380);
										match(COMMA);
										}
									}

									setState(5383);
									match(DEFAULT_SCHEMA);
									setState(5384);
									match(EQUAL);
									setState(5385);
									((Create_userContext)_localctx).schema_name = id();
									}
									break;
								case 2:
									{
									setState(5387);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5386);
										match(COMMA);
										}
									}

									setState(5389);
									match(DEFAULT_LANGUAGE);
									setState(5390);
									match(EQUAL);
									setState(5394);
									_errHandler.sync(this);
									switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
									case 1:
										{
										setState(5391);
										match(NONE);
										}
										break;
									case 2:
										{
										setState(5392);
										match(DECIMAL);
										}
										break;
									case 3:
										{
										setState(5393);
										((Create_userContext)_localctx).language_name_or_alias = id();
										}
										break;
									}
									}
									break;
								case 3:
									{
									setState(5397);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5396);
										match(COMMA);
										}
									}

									setState(5399);
									match(SID);
									setState(5400);
									match(EQUAL);
									setState(5401);
									match(BINARY);
									}
									break;
								case 4:
									{
									setState(5403);
									_errHandler.sync(this);
									_la = _input.LA(1);
									if (_la==COMMA) {
										{
										setState(5402);
										match(COMMA);
										}
									}

									setState(5405);
									match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
									setState(5406);
									match(EQUAL);
									setState(5407);
									_la = _input.LA(1);
									if ( !(_la==OFF || _la==ON) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								}
								} 
							}
							setState(5412);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,632,_ctx);
						}
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(5415);
					((Create_userContext)_localctx).user_name = id();
					setState(5416);
					match(WITH);
					setState(5417);
					match(PASSWORD);
					setState(5418);
					match(EQUAL);
					setState(5419);
					((Create_userContext)_localctx).password = match(STRING);
					setState(5450);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,640,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5448);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,639,_ctx) ) {
							case 1:
								{
								setState(5421);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5420);
									match(COMMA);
									}
								}

								setState(5423);
								match(DEFAULT_SCHEMA);
								setState(5424);
								match(EQUAL);
								setState(5425);
								((Create_userContext)_localctx).schema_name = id();
								}
								break;
							case 2:
								{
								setState(5427);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5426);
									match(COMMA);
									}
								}

								setState(5429);
								match(DEFAULT_LANGUAGE);
								setState(5430);
								match(EQUAL);
								setState(5434);
								_errHandler.sync(this);
								switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
								case 1:
									{
									setState(5431);
									match(NONE);
									}
									break;
								case 2:
									{
									setState(5432);
									match(DECIMAL);
									}
									break;
								case 3:
									{
									setState(5433);
									((Create_userContext)_localctx).language_name_or_alias = id();
									}
									break;
								}
								}
								break;
							case 3:
								{
								setState(5437);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5436);
									match(COMMA);
									}
								}

								setState(5439);
								match(SID);
								setState(5440);
								match(EQUAL);
								setState(5441);
								match(BINARY);
								}
								break;
							case 4:
								{
								setState(5443);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5442);
									match(COMMA);
									}
								}

								setState(5445);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5446);
								match(EQUAL);
								setState(5447);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5452);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,640,_ctx);
					}
					}
					break;
				case 3:
					{
					setState(5453);
					((Create_userContext)_localctx).Azure_Active_Directory_principal = id();
					setState(5454);
					match(FROM);
					setState(5455);
					match(EXTERNAL);
					setState(5456);
					match(PROVIDER);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5460);
				match(CREATE);
				setState(5461);
				match(USER);
				setState(5462);
				((Create_userContext)_localctx).user_name = id();
				setState(5489);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					setState(5463);
					match(WITHOUT);
					setState(5464);
					match(LOGIN);
					setState(5479);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(5477);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
							case 1:
								{
								setState(5466);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5465);
									match(COMMA);
									}
								}

								setState(5468);
								match(DEFAULT_SCHEMA);
								setState(5469);
								match(EQUAL);
								setState(5470);
								((Create_userContext)_localctx).schema_name = id();
								}
								break;
							case 2:
								{
								setState(5472);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(5471);
									match(COMMA);
									}
								}

								setState(5474);
								match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
								setState(5475);
								match(EQUAL);
								setState(5476);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(5481);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,645,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(5482);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5483);
					match(CERTIFICATE);
					setState(5484);
					((Create_userContext)_localctx).cert_name = id();
					}
					break;
				case 3:
					{
					setState(5485);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5486);
					match(ASYMMETRIC);
					setState(5487);
					match(KEY);
					setState(5488);
					((Create_userContext)_localctx).asym_key_name = id();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5491);
				match(CREATE);
				setState(5492);
				match(USER);
				setState(5493);
				((Create_userContext)_localctx).user_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_user_azure_sql_dwContext extends ParserRuleContext {
		public IdContext user_name;
		public IdContext login_name;
		public IdContext schema_name;
		public IdContext Azure_Active_Directory_principal;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode WITHOUT() { return getToken(TSqlParser.WITHOUT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public Create_user_azure_sql_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user_azure_sql_dw; }
	}

	public final Create_user_azure_sql_dwContext create_user_azure_sql_dw() throws RecognitionException {
		Create_user_azure_sql_dwContext _localctx = new Create_user_azure_sql_dwContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_create_user_azure_sql_dw);
		int _la;
		try {
			setState(5524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,651,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5496);
				match(CREATE);
				setState(5497);
				match(USER);
				setState(5498);
				((Create_user_azure_sql_dwContext)_localctx).user_name = id();
				setState(5504);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
				case 1:
					{
					setState(5499);
					_la = _input.LA(1);
					if ( !(_la==FOR || _la==FROM) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5500);
					match(LOGIN);
					setState(5501);
					((Create_user_azure_sql_dwContext)_localctx).login_name = id();
					}
					break;
				case 2:
					{
					setState(5502);
					match(WITHOUT);
					setState(5503);
					match(LOGIN);
					}
					break;
				}
				setState(5510);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
				case 1:
					{
					setState(5506);
					match(WITH);
					setState(5507);
					match(DEFAULT_SCHEMA);
					setState(5508);
					match(EQUAL);
					setState(5509);
					((Create_user_azure_sql_dwContext)_localctx).schema_name = id();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5512);
				match(CREATE);
				setState(5513);
				match(USER);
				setState(5514);
				((Create_user_azure_sql_dwContext)_localctx).Azure_Active_Directory_principal = id();
				setState(5515);
				match(FROM);
				setState(5516);
				match(EXTERNAL);
				setState(5517);
				match(PROVIDER);
				setState(5522);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
				case 1:
					{
					setState(5518);
					match(WITH);
					setState(5519);
					match(DEFAULT_SCHEMA);
					setState(5520);
					match(EQUAL);
					setState(5521);
					((Create_user_azure_sql_dwContext)_localctx).schema_name = id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_user_azure_sqlContext extends ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSqlParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSqlParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(TSqlParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(TSqlParser.LOGIN, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_user_azure_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user_azure_sql; }
	}

	public final Alter_user_azure_sqlContext alter_user_azure_sql() throws RecognitionException {
		Alter_user_azure_sqlContext _localctx = new Alter_user_azure_sqlContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_alter_user_azure_sql);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5526);
			match(ALTER);
			setState(5527);
			match(USER);
			setState(5528);
			((Alter_user_azure_sqlContext)_localctx).username = id();
			setState(5529);
			match(WITH);
			setState(5554); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(5554);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
					case 1:
						{
						setState(5531);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5530);
							match(COMMA);
							}
						}

						setState(5533);
						match(NAME);
						setState(5534);
						match(EQUAL);
						setState(5535);
						((Alter_user_azure_sqlContext)_localctx).newusername = id();
						}
						break;
					case 2:
						{
						setState(5537);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5536);
							match(COMMA);
							}
						}

						setState(5539);
						match(DEFAULT_SCHEMA);
						setState(5540);
						match(EQUAL);
						setState(5541);
						((Alter_user_azure_sqlContext)_localctx).schema_name = id();
						}
						break;
					case 3:
						{
						setState(5543);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5542);
							match(COMMA);
							}
						}

						setState(5545);
						match(LOGIN);
						setState(5546);
						match(EQUAL);
						setState(5547);
						((Alter_user_azure_sqlContext)_localctx).loginame = id();
						}
						break;
					case 4:
						{
						setState(5549);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5548);
							match(COMMA);
							}
						}

						setState(5551);
						match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
						setState(5552);
						match(EQUAL);
						setState(5553);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5556); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,657,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_workload_groupContext extends ParserRuleContext {
		public IdContext workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public IdContext workload_group_pool_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<TerminalNode> DEFAULT_DOUBLE_QUOTE() { return getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(TSqlParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(TSqlParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(TSqlParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(TSqlParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> LOW() { return getTokens(TSqlParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(TSqlParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(TSqlParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(TSqlParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(TSqlParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(TSqlParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_workload_group; }
	}

	public final Alter_workload_groupContext alter_workload_group() throws RecognitionException {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_alter_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5558);
			match(ALTER);
			setState(5559);
			match(WORKLOAD);
			setState(5560);
			match(GROUP);
			setState(5563);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				{
				setState(5561);
				((Alter_workload_groupContext)_localctx).workload_group_group_name = id();
				}
				break;
			case 2:
				{
				setState(5562);
				match(DEFAULT_DOUBLE_QUOTE);
				}
				break;
			}
			setState(5596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,663,_ctx) ) {
			case 1:
				{
				setState(5565);
				match(WITH);
				setState(5566);
				match(LR_BRACKET);
				setState(5591); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(5591);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
					case 1:
						{
						setState(5567);
						match(IMPORTANCE);
						setState(5568);
						match(EQUAL);
						setState(5569);
						_la = _input.LA(1);
						if ( !(((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (HIGH - 347)) | (1L << (LOW - 347)) | (1L << (MEDIUM - 347)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5571);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5570);
							match(COMMA);
							}
						}

						setState(5573);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(5574);
						match(EQUAL);
						setState(5575);
						((Alter_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(5577);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5576);
							match(COMMA);
							}
						}

						setState(5579);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(5580);
						match(EQUAL);
						setState(5581);
						((Alter_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(5582);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(5583);
						match(EQUAL);
						setState(5584);
						((Alter_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(5585);
						match(MAX_DOP);
						setState(5586);
						match(EQUAL);
						setState(5587);
						((Alter_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(5588);
						match(GROUP_MAX_REQUESTS);
						setState(5589);
						match(EQUAL);
						setState(5590);
						((Alter_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(5593); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 341)) & ~0x3f) == 0 && ((1L << (_la - 341)) & ((1L << (GROUP_MAX_REQUESTS - 341)) | (1L << (IMPORTANCE - 341)) | (1L << (MAX_DOP - 341)))) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 502)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 502)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 502)))) != 0) || _la==COMMA );
				setState(5595);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
			case 1:
				{
				setState(5598);
				match(USING);
				setState(5601);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
				case 1:
					{
					setState(5599);
					((Alter_workload_groupContext)_localctx).workload_group_pool_name = id();
					}
					break;
				case 2:
					{
					setState(5600);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_workload_groupContext extends ParserRuleContext {
		public IdContext workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public IdContext workload_group_pool_name;
		public IdContext external_pool_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(TSqlParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(TSqlParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(TSqlParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(TSqlParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(TSqlParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(TSqlParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(TSqlParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> DEFAULT_DOUBLE_QUOTE() { return getTokens(TSqlParser.DEFAULT_DOUBLE_QUOTE); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE(int i) {
			return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, i);
		}
		public TerminalNode EXTERNAL() { return getToken(TSqlParser.EXTERNAL, 0); }
		public List<TerminalNode> LOW() { return getTokens(TSqlParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(TSqlParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(TSqlParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(TSqlParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(TSqlParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(TSqlParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_workload_group; }
	}

	public final Create_workload_groupContext create_workload_group() throws RecognitionException {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_create_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5605);
			match(CREATE);
			setState(5606);
			match(WORKLOAD);
			setState(5607);
			match(GROUP);
			setState(5608);
			((Create_workload_groupContext)_localctx).workload_group_group_name = id();
			setState(5640);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
			case 1:
				{
				setState(5609);
				match(WITH);
				setState(5610);
				match(LR_BRACKET);
				setState(5635); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(5635);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,668,_ctx) ) {
					case 1:
						{
						setState(5611);
						match(IMPORTANCE);
						setState(5612);
						match(EQUAL);
						setState(5613);
						_la = _input.LA(1);
						if ( !(((((_la - 347)) & ~0x3f) == 0 && ((1L << (_la - 347)) & ((1L << (HIGH - 347)) | (1L << (LOW - 347)) | (1L << (MEDIUM - 347)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(5615);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5614);
							match(COMMA);
							}
						}

						setState(5617);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(5618);
						match(EQUAL);
						setState(5619);
						((Create_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(5621);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5620);
							match(COMMA);
							}
						}

						setState(5623);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(5624);
						match(EQUAL);
						setState(5625);
						((Create_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(5626);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(5627);
						match(EQUAL);
						setState(5628);
						((Create_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(5629);
						match(MAX_DOP);
						setState(5630);
						match(EQUAL);
						setState(5631);
						((Create_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(5632);
						match(GROUP_MAX_REQUESTS);
						setState(5633);
						match(EQUAL);
						setState(5634);
						((Create_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(5637); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 341)) & ~0x3f) == 0 && ((1L << (_la - 341)) & ((1L << (GROUP_MAX_REQUESTS - 341)) | (1L << (IMPORTANCE - 341)) | (1L << (MAX_DOP - 341)))) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 502)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 502)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 502)))) != 0) || _la==COMMA );
				setState(5639);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5655);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
			case 1:
				{
				setState(5642);
				match(USING);
				setState(5645);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
				case 1:
					{
					setState(5643);
					((Create_workload_groupContext)_localctx).workload_group_pool_name = id();
					}
					break;
				case 2:
					{
					setState(5644);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				setState(5653);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
				case 1:
					{
					setState(5648);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5647);
						match(COMMA);
						}
					}

					setState(5650);
					match(EXTERNAL);
					setState(5651);
					((Create_workload_groupContext)_localctx).external_pool_name = id();
					}
					break;
				case 2:
					{
					setState(5652);
					match(DEFAULT_DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_xml_schema_collectionContext extends ParserRuleContext {
		public IdContext relational_schema;
		public IdContext sql_identifier;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_xml_schema_collection; }
	}

	public final Create_xml_schema_collectionContext create_xml_schema_collection() throws RecognitionException {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_create_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5657);
			match(CREATE);
			setState(5658);
			match(XML);
			setState(5659);
			match(SCHEMA);
			setState(5660);
			match(COLLECTION);
			setState(5664);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
			case 1:
				{
				setState(5661);
				((Create_xml_schema_collectionContext)_localctx).relational_schema = id();
				setState(5662);
				match(DOT);
				}
				break;
			}
			setState(5666);
			((Create_xml_schema_collectionContext)_localctx).sql_identifier = id();
			setState(5667);
			match(AS);
			setState(5671);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(5668);
				match(STRING);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(5669);
				id();
				}
				break;
			case LOCAL_ID:
				{
				setState(5670);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public IdContext filegroup;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_queue; }
	}

	public final Create_queueContext create_queue() throws RecognitionException {
		Create_queueContext _localctx = new Create_queueContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_create_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5673);
			match(CREATE);
			setState(5674);
			match(QUEUE);
			setState(5677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(5675);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(5676);
				((Create_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(5680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				setState(5679);
				queue_settings();
				}
				break;
			}
			setState(5685);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(5682);
				match(ON);
				setState(5683);
				((Create_queueContext)_localctx).filegroup = id();
				}
				break;
			case DEFAULT:
				{
				setState(5684);
				match(DEFAULT);
				}
				break;
			case EOF:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DROP:
			case ELSE:
			case END:
			case EXECUTE:
			case FETCH:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case KILL:
			case MERGE:
			case OPEN:
			case OPENJSON:
			case PRECISION:
			case PRINT:
			case RAISERROR:
			case RECONFIGURE:
			case RETURN:
			case REVERT:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case SHUTDOWN:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOT:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_settingsContext extends ParserRuleContext {
		public Token max_readers;
		public Token user_name;
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> STATUS() { return getTokens(TSqlParser.STATUS); }
		public TerminalNode STATUS(int i) {
			return getToken(TSqlParser.STATUS, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode RETENTION() { return getToken(TSqlParser.RETENTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(TSqlParser.ACTIVATION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSqlParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSqlParser.OFF, i);
		}
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode PROCEDURE_NAME() { return getToken(TSqlParser.PROCEDURE_NAME, 0); }
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return getRuleContext(Func_proc_name_database_schemaContext.class,0);
		}
		public TerminalNode MAX_QUEUE_READERS() { return getToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_settings; }
	}

	public final Queue_settingsContext queue_settings() throws RecognitionException {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_queue_settings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5687);
			match(WITH);
			setState(5694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
			case 1:
				{
				setState(5688);
				match(STATUS);
				setState(5689);
				match(EQUAL);
				setState(5690);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5691);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
			case 1:
				{
				setState(5696);
				match(RETENTION);
				setState(5697);
				match(EQUAL);
				setState(5698);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5699);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5749);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
			case 1:
				{
				setState(5704);
				match(ACTIVATION);
				setState(5705);
				match(LR_BRACKET);
				setState(5743);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXECUTE:
				case MAX_QUEUE_READERS:
				case PROCEDURE_NAME:
				case STATUS:
				case RR_BRACKET:
					{
					{
					setState(5712);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STATUS) {
						{
						setState(5706);
						match(STATUS);
						setState(5707);
						match(EQUAL);
						setState(5708);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5710);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5709);
							match(COMMA);
							}
						}

						}
					}

					setState(5720);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PROCEDURE_NAME) {
						{
						setState(5714);
						match(PROCEDURE_NAME);
						setState(5715);
						match(EQUAL);
						setState(5716);
						func_proc_name_database_schema();
						setState(5718);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5717);
							match(COMMA);
							}
						}

						}
					}

					setState(5728);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MAX_QUEUE_READERS) {
						{
						setState(5722);
						match(MAX_QUEUE_READERS);
						setState(5723);
						match(EQUAL);
						setState(5724);
						((Queue_settingsContext)_localctx).max_readers = match(DECIMAL);
						setState(5726);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5725);
							match(COMMA);
							}
						}

						}
					}

					setState(5740);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EXECUTE) {
						{
						setState(5730);
						match(EXECUTE);
						setState(5731);
						match(AS);
						setState(5735);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case SELF:
							{
							setState(5732);
							match(SELF);
							}
							break;
						case STRING:
							{
							setState(5733);
							((Queue_settingsContext)_localctx).user_name = match(STRING);
							}
							break;
						case OWNER:
							{
							setState(5734);
							match(OWNER);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5738);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(5737);
							match(COMMA);
							}
						}

						}
					}

					}
					}
					break;
				case DROP:
					{
					setState(5742);
					match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5745);
				match(RR_BRACKET);
				setState(5747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5746);
					match(COMMA);
					}
				}

				}
				break;
			}
			setState(5758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
			case 1:
				{
				setState(5751);
				match(POISON_MESSAGE_HANDLING);
				setState(5752);
				match(LR_BRACKET);
				{
				setState(5753);
				match(STATUS);
				setState(5754);
				match(EQUAL);
				setState(5755);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				setState(5757);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public Queue_actionContext queue_action() {
			return getRuleContext(Queue_actionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_queue; }
	}

	public final Alter_queueContext alter_queue() throws RecognitionException {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_alter_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5760);
			match(ALTER);
			setState(5761);
			match(QUEUE);
			setState(5764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
			case 1:
				{
				setState(5762);
				full_table_name();
				}
				break;
			case 2:
				{
				setState(5763);
				((Alter_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(5768);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(5766);
				queue_settings();
				}
				break;
			case MOVE:
			case REBUILD:
			case REORGANIZE:
				{
				setState(5767);
				queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_actionContext extends ParserRuleContext {
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return getRuleContext(Queue_rebuild_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(TSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode MOVE() { return getToken(TSqlParser.MOVE, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Queue_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_action; }
	}

	public final Queue_actionContext queue_action() throws RecognitionException {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_queue_action);
		int _la;
		try {
			setState(5791);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				enterOuterAlt(_localctx, 1);
				{
				setState(5770);
				match(REBUILD);
				setState(5776);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
				case 1:
					{
					setState(5771);
					match(WITH);
					setState(5772);
					match(LR_BRACKET);
					setState(5773);
					queue_rebuild_options();
					setState(5774);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5778);
				match(REORGANIZE);
				setState(5783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
				case 1:
					{
					setState(5779);
					match(WITH);
					setState(5780);
					match(LOB_COMPACTION);
					setState(5781);
					match(EQUAL);
					setState(5782);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5785);
				match(MOVE);
				setState(5786);
				match(TO);
				setState(5789);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5787);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(5788);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_rebuild_optionsContext extends ParserRuleContext {
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_rebuild_options; }
	}

	public final Queue_rebuild_optionsContext queue_rebuild_options() throws RecognitionException {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_queue_rebuild_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5793);
			match(MAXDOP);
			setState(5794);
			match(EQUAL);
			setState(5795);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_contractContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext message_type_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public List<TerminalNode> SENT() { return getTokens(TSqlParser.SENT); }
		public TerminalNode SENT(int i) {
			return getToken(TSqlParser.SENT, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> INITIATOR() { return getTokens(TSqlParser.INITIATOR); }
		public TerminalNode INITIATOR(int i) {
			return getToken(TSqlParser.INITIATOR, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(TSqlParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(TSqlParser.TARGET, i);
		}
		public List<TerminalNode> ANY() { return getTokens(TSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(TSqlParser.ANY, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_contract; }
	}

	public final Create_contractContext create_contract() throws RecognitionException {
		Create_contractContext _localctx = new Create_contractContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_create_contract);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5797);
			match(CREATE);
			setState(5798);
			match(CONTRACT);
			setState(5799);
			contract_name();
			setState(5802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5800);
				match(AUTHORIZATION);
				setState(5801);
				((Create_contractContext)_localctx).owner_name = id();
				}
			}

			setState(5804);
			match(LR_BRACKET);
			setState(5815); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5807);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5805);
					((Create_contractContext)_localctx).message_type_name = id();
					}
					break;
				case DEFAULT:
					{
					setState(5806);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5809);
				match(SENT);
				setState(5810);
				match(BY);
				setState(5811);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==INITIATOR || _la==TARGET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5812);
					match(COMMA);
					}
				}

				}
				}
				setState(5817); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DEFAULT || _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) );
			setState(5819);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conversation_statementContext extends ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return getRuleContext(Begin_conversation_timerContext.class,0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return getRuleContext(Begin_conversation_dialogContext.class,0);
		}
		public End_conversationContext end_conversation() {
			return getRuleContext(End_conversationContext.class,0);
		}
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public Send_conversationContext send_conversation() {
			return getRuleContext(Send_conversationContext.class,0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return getRuleContext(Waitfor_conversationContext.class,0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversation_statement; }
	}

	public final Conversation_statementContext conversation_statement() throws RecognitionException {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_conversation_statement);
		try {
			setState(5827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5821);
				begin_conversation_timer();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5822);
				begin_conversation_dialog();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5823);
				end_conversation();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5824);
				get_conversation();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5825);
				send_conversation();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5826);
				waitfor_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Message_statementContext extends ParserRuleContext {
		public IdContext message_type_name;
		public IdContext owner_name;
		public IdContext schema_collection_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(TSqlParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public Message_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_message_statement; }
	}

	public final Message_statementContext message_statement() throws RecognitionException {
		Message_statementContext _localctx = new Message_statementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_message_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5829);
			match(CREATE);
			setState(5830);
			match(MESSAGE);
			setState(5831);
			match(TYPE);
			setState(5832);
			((Message_statementContext)_localctx).message_type_name = id();
			setState(5835);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(5833);
				match(AUTHORIZATION);
				setState(5834);
				((Message_statementContext)_localctx).owner_name = id();
				}
			}

			{
			setState(5837);
			match(VALIDATION);
			setState(5838);
			match(EQUAL);
			setState(5847);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(5839);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(5840);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(5841);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(5842);
				match(VALID_XML);
				setState(5843);
				match(WITH);
				setState(5844);
				match(SCHEMA);
				setState(5845);
				match(COLLECTION);
				setState(5846);
				((Message_statementContext)_localctx).schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public List<When_matchesContext> when_matches() {
			return getRuleContexts(When_matchesContext.class);
		}
		public When_matchesContext when_matches(int i) {
			return getRuleContext(When_matchesContext.class,i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5849);
				with_expression();
				}
			}

			setState(5852);
			match(MERGE);
			setState(5860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5853);
				match(TOP);
				setState(5854);
				match(LR_BRACKET);
				setState(5855);
				expression(0);
				setState(5856);
				match(RR_BRACKET);
				setState(5858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5857);
					match(PERCENT);
					}
				}

				}
			}

			setState(5863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5862);
				match(INTO);
				}
			}

			setState(5865);
			ddl_object();
			setState(5867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5866);
				insert_with_table_hints();
				}
			}

			setState(5870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,715,_ctx) ) {
			case 1:
				{
				setState(5869);
				as_table_alias();
				}
				break;
			}
			setState(5872);
			match(USING);
			setState(5873);
			table_sources();
			setState(5874);
			match(ON);
			setState(5875);
			search_condition();
			setState(5877); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5876);
				when_matches();
				}
				}
				setState(5879); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(5882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5881);
				output_clause();
				}
			}

			setState(5885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5884);
				option_clause();
				}
			}

			setState(5887);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class When_matchesContext extends ParserRuleContext {
		public List<TerminalNode> WHEN() { return getTokens(TSqlParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(TSqlParser.WHEN, i);
		}
		public List<TerminalNode> MATCHED() { return getTokens(TSqlParser.MATCHED); }
		public TerminalNode MATCHED(int i) {
			return getToken(TSqlParser.MATCHED, i);
		}
		public List<TerminalNode> THEN() { return getTokens(TSqlParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(TSqlParser.THEN, i);
		}
		public List<Merge_matchedContext> merge_matched() {
			return getRuleContexts(Merge_matchedContext.class);
		}
		public Merge_matchedContext merge_matched(int i) {
			return getRuleContext(Merge_matchedContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return getRuleContext(Merge_not_matchedContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public TerminalNode TARGET() { return getToken(TSqlParser.TARGET, 0); }
		public List<TerminalNode> SOURCE() { return getTokens(TSqlParser.SOURCE); }
		public TerminalNode SOURCE(int i) {
			return getToken(TSqlParser.SOURCE, i);
		}
		public When_matchesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_when_matches; }
	}

	public final When_matchesContext when_matches() throws RecognitionException {
		When_matchesContext _localctx = new When_matchesContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_when_matches);
		int _la;
		try {
			int _alt;
			setState(5929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5897); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5889);
						match(WHEN);
						setState(5890);
						match(MATCHED);
						setState(5893);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(5891);
							match(AND);
							setState(5892);
							search_condition();
							}
						}

						setState(5895);
						match(THEN);
						setState(5896);
						merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5899); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,720,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5901);
				match(WHEN);
				setState(5902);
				match(NOT);
				setState(5903);
				match(MATCHED);
				setState(5906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(5904);
					match(BY);
					setState(5905);
					match(TARGET);
					}
				}

				setState(5910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(5908);
					match(AND);
					setState(5909);
					search_condition();
					}
				}

				setState(5912);
				match(THEN);
				setState(5913);
				merge_not_matched();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5925); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5914);
						match(WHEN);
						setState(5915);
						match(NOT);
						setState(5916);
						match(MATCHED);
						setState(5917);
						match(BY);
						setState(5918);
						match(SOURCE);
						setState(5921);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(5919);
							match(AND);
							setState(5920);
							search_condition();
							}
						}

						setState(5923);
						match(THEN);
						setState(5924);
						merge_matched();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5927); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,724,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_matchedContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<Update_elem_mergeContext> update_elem_merge() {
			return getRuleContexts(Update_elem_mergeContext.class);
		}
		public Update_elem_mergeContext update_elem_merge(int i) {
			return getRuleContext(Update_elem_mergeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_matched; }
	}

	public final Merge_matchedContext merge_matched() throws RecognitionException {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_merge_matched);
		int _la;
		try {
			setState(5942);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5931);
				match(UPDATE);
				setState(5932);
				match(SET);
				setState(5933);
				update_elem_merge();
				setState(5938);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5934);
					match(COMMA);
					setState(5935);
					update_elem_merge();
					}
					}
					setState(5940);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5941);
				match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_not_matchedContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_not_matched; }
	}

	public final Merge_not_matchedContext merge_not_matched() throws RecognitionException {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_merge_not_matched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5944);
			match(INSERT);
			setState(5949);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5945);
				match(LR_BRACKET);
				setState(5946);
				column_name_list();
				setState(5947);
				match(RR_BRACKET);
				}
			}

			setState(5954);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(5951);
				table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				setState(5952);
				match(DEFAULT);
				setState(5953);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Delete_statement_fromContext delete_statement_from() {
			return getRuleContext(Delete_statement_fromContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<TerminalNode> FROM() { return getTokens(TSqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSqlParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5956);
				with_expression();
				}
			}

			setState(5959);
			match(DELETE);
			setState(5969);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(5960);
				match(TOP);
				setState(5961);
				match(LR_BRACKET);
				setState(5962);
				expression(0);
				setState(5963);
				match(RR_BRACKET);
				setState(5965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5964);
					match(PERCENT);
					}
				}

				}
				break;
			case 2:
				{
				setState(5967);
				match(TOP);
				setState(5968);
				match(DECIMAL);
				}
				break;
			}
			setState(5972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5971);
				match(FROM);
				}
			}

			setState(5974);
			delete_statement_from();
			setState(5976);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
			case 1:
				{
				setState(5975);
				insert_with_table_hints();
				}
				break;
			}
			setState(5979);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
			case 1:
				{
				setState(5978);
				output_clause();
				}
				break;
			}
			setState(5983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5981);
				match(FROM);
				setState(5982);
				table_sources();
				}
			}

			setState(5998);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5985);
				match(WHERE);
				setState(5996);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CASE:
				case COALESCE:
				case CONTAINS:
				case CONTAINSTABLE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FREETEXT:
				case FREETEXTTABLE:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL:
				case NULLIF:
				case OPENJSON:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SEMANTICKEYPHRASETABLE:
				case SEMANTICSIMILARITYDETAILSTABLE:
				case SEMANTICSIMILARITYTABLE:
				case SESSION_USER:
				case SYSTEM_USER:
				case USER:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(5986);
					search_condition();
					}
					break;
				case CURRENT:
					{
					setState(5987);
					match(CURRENT);
					setState(5988);
					match(OF);
					setState(5994);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,738,_ctx) ) {
					case 1:
						{
						setState(5990);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
						case 1:
							{
							setState(5989);
							match(GLOBAL);
							}
							break;
						}
						setState(5992);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(5993);
						((Delete_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6001);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6000);
				for_clause();
				}
			}

			setState(6004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(6003);
				option_clause();
				}
			}

			setState(6007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
			case 1:
				{
				setState(6006);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statement_fromContext extends ParserRuleContext {
		public Token table_var;
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Delete_statement_fromContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement_from; }
	}

	public final Delete_statement_fromContext delete_statement_from() throws RecognitionException {
		Delete_statement_fromContext _localctx = new Delete_statement_fromContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_delete_statement_from);
		try {
			setState(6013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,744,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6009);
				ddl_object();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6010);
				table_alias();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6011);
				rowset_function_limited();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6012);
				((Delete_statement_fromContext)_localctx).table_var = match(LOCAL_ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public Insert_statement_valueContext insert_statement_value() {
			return getRuleContext(Insert_statement_valueContext.class,0);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Insert_column_name_listContext insert_column_name_list() {
			return getRuleContext(Insert_column_name_listContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6015);
				with_expression();
				}
			}

			setState(6018);
			match(INSERT);
			setState(6026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(6019);
				match(TOP);
				setState(6020);
				match(LR_BRACKET);
				setState(6021);
				expression(0);
				setState(6022);
				match(RR_BRACKET);
				setState(6024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(6023);
					match(PERCENT);
					}
				}

				}
			}

			setState(6029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(6028);
				match(INTO);
				}
			}

			setState(6033);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(6031);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(6032);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6036);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6035);
				insert_with_table_hints();
				}
			}

			setState(6042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,751,_ctx) ) {
			case 1:
				{
				setState(6038);
				match(LR_BRACKET);
				setState(6039);
				insert_column_name_list();
				setState(6040);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6045);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(6044);
				output_clause();
				}
			}

			setState(6047);
			insert_statement_value();
			setState(6049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6048);
				for_clause();
				}
			}

			setState(6052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(6051);
				option_clause();
				}
			}

			setState(6055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,755,_ctx) ) {
			case 1:
				{
				setState(6054);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statement_valueContext extends ParserRuleContext {
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Insert_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement_value; }
	}

	public final Insert_statement_valueContext insert_statement_value() throws RecognitionException {
		Insert_statement_valueContext _localctx = new Insert_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_insert_statement_value);
		try {
			setState(6062);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,756,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6057);
				table_value_constructor();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6058);
				derived_table();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6059);
				execute_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6060);
				match(DEFAULT);
				setState(6061);
				match(VALUES);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Receive_statementContext extends ParserRuleContext {
		public IdContext table_variable;
		public Search_conditionContext where;
		public TerminalNode RECEIVE() { return getToken(TSqlParser.RECEIVE, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public TerminalNode STAR() { return getToken(TSqlParser.STAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_receive_statement; }
	}

	public final Receive_statementContext receive_statement() throws RecognitionException {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_receive_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(6064);
				match(LR_BRACKET);
				}
			}

			setState(6067);
			match(RECEIVE);
			setState(6072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(6068);
				match(ALL);
				}
				break;
			case DISTINCT:
				{
				setState(6069);
				match(DISTINCT);
				}
				break;
			case TOP:
				{
				setState(6070);
				top_clause();
				}
				break;
			case STAR:
				{
				setState(6071);
				match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6082);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LOCAL_ID) {
				{
				{
				setState(6074);
				match(LOCAL_ID);
				setState(6075);
				match(EQUAL);
				setState(6076);
				expression(0);
				setState(6078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6077);
					match(COMMA);
					}
				}

				}
				}
				setState(6084);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6085);
			match(FROM);
			setState(6086);
			full_table_name();
			setState(6092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(6087);
				match(INTO);
				setState(6088);
				((Receive_statementContext)_localctx).table_variable = id();
				{
				setState(6089);
				match(WHERE);
				setState(6090);
				((Receive_statementContext)_localctx).where = search_condition();
				}
				}
			}

			setState(6095);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RR_BRACKET) {
				{
				setState(6094);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statement_standaloneContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public Select_statement_standaloneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement_standalone; }
	}

	public final Select_statement_standaloneContext select_statement_standalone() throws RecognitionException {
		Select_statement_standaloneContext _localctx = new Select_statement_standaloneContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_select_statement_standalone);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6097);
				with_expression();
				}
			}

			setState(6100);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6102);
			query_expression();
			setState(6104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6103);
				order_by_clause();
				}
			}

			setState(6107);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,765,_ctx) ) {
			case 1:
				{
				setState(6106);
				for_clause();
				}
				break;
			}
			setState(6110);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,766,_ctx) ) {
			case 1:
				{
				setState(6109);
				option_clause();
				}
				break;
			}
			setState(6113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,767,_ctx) ) {
			case 1:
				{
				setState(6112);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time; }
	}

	public final TimeContext time() throws RecognitionException {
		TimeContext _localctx = new TimeContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_time);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6117);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(6115);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(6116);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public Ddl_objectContext ddl_object() {
			return getRuleContext(Ddl_objectContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6119);
				with_expression();
				}
			}

			setState(6122);
			match(UPDATE);
			setState(6130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(6123);
				match(TOP);
				setState(6124);
				match(LR_BRACKET);
				setState(6125);
				expression(0);
				setState(6126);
				match(RR_BRACKET);
				setState(6128);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(6127);
					match(PERCENT);
					}
				}

				}
			}

			setState(6134);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(6132);
				ddl_object();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(6133);
				rowset_function_limited();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				setState(6136);
				with_table_hints();
				}
			}

			setState(6139);
			match(SET);
			setState(6140);
			update_elem();
			setState(6145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6141);
				match(COMMA);
				setState(6142);
				update_elem();
				}
				}
				setState(6147);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
			case 1:
				{
				setState(6148);
				output_clause();
				}
				break;
			}
			setState(6153);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(6151);
				match(FROM);
				setState(6152);
				table_sources();
				}
			}

			setState(6168);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6155);
				match(WHERE);
				setState(6166);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CASE:
				case COALESCE:
				case CONTAINS:
				case CONTAINSTABLE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FREETEXT:
				case FREETEXTTABLE:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL:
				case NULLIF:
				case OPENJSON:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SEMANTICKEYPHRASETABLE:
				case SEMANTICSIMILARITYDETAILSTABLE:
				case SEMANTICSIMILARITYTABLE:
				case SESSION_USER:
				case SYSTEM_USER:
				case USER:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(6156);
					search_condition();
					}
					break;
				case CURRENT:
					{
					setState(6157);
					match(CURRENT);
					setState(6158);
					match(OF);
					setState(6164);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,778,_ctx) ) {
					case 1:
						{
						setState(6160);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,777,_ctx) ) {
						case 1:
							{
							setState(6159);
							match(GLOBAL);
							}
							break;
						}
						setState(6162);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(6163);
						((Update_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6170);
				for_clause();
				}
			}

			setState(6174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(6173);
				option_clause();
				}
			}

			setState(6177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
			case 1:
				{
				setState(6176);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_clauseContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public List<Output_dml_list_elemContext> output_dml_list_elem() {
			return getRuleContexts(Output_dml_list_elemContext.class);
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return getRuleContext(Output_dml_list_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Output_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_clause; }
	}

	public final Output_clauseContext output_clause() throws RecognitionException {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_output_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6179);
			match(OUTPUT);
			setState(6180);
			output_dml_list_elem();
			setState(6185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6181);
				match(COMMA);
				setState(6182);
				output_dml_list_elem();
				}
				}
				setState(6187);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(6188);
				match(INTO);
				setState(6191);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
					{
					setState(6189);
					match(LOCAL_ID);
					}
					break;
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6190);
					table_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6197);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
				case 1:
					{
					setState(6193);
					match(LR_BRACKET);
					setState(6194);
					column_name_list();
					setState(6195);
					match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_dml_list_elemContext extends ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return getRuleContext(Output_column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_dml_list_elem; }
	}

	public final Output_dml_list_elemContext output_dml_list_elem() throws RecognitionException {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_output_dml_list_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6203);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,788,_ctx) ) {
			case 1:
				{
				setState(6201);
				output_column_name();
				}
				break;
			case 2:
				{
				setState(6202);
				expression(0);
				}
				break;
			}
			setState(6206);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,789,_ctx) ) {
			case 1:
				{
				setState(6205);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_column_nameContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode DELETED() { return getToken(TSqlParser.DELETED, 0); }
		public TerminalNode INSERTED() { return getToken(TSqlParser.INSERTED, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode STAR() { return getToken(TSqlParser.STAR, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOLLAR_ACTION() { return getToken(TSqlParser.DOLLAR_ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_column_name; }
	}

	public final Output_column_nameContext output_column_name() throws RecognitionException {
		Output_column_nameContext _localctx = new Output_column_nameContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_output_column_name);
		try {
			setState(6219);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(6211);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
				case 1:
					{
					setState(6208);
					match(DELETED);
					}
					break;
				case 2:
					{
					setState(6209);
					match(INSERTED);
					}
					break;
				case 3:
					{
					setState(6210);
					table_name();
					}
					break;
				}
				setState(6213);
				match(DOT);
				setState(6216);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(6214);
					match(STAR);
					}
					break;
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6215);
					id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DOLLAR_ACTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(6218);
				match(DOLLAR_ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext collation_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTAINMENT() { return getToken(TSqlParser.CONTAINMENT, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public List<Database_file_specContext> database_file_spec() {
			return getRuleContexts(Database_file_specContext.class);
		}
		public Database_file_specContext database_file_spec(int i) {
			return getRuleContext(Database_file_specContext.class,i);
		}
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Create_database_optionContext> create_database_option() {
			return getRuleContexts(Create_database_optionContext.class);
		}
		public Create_database_optionContext create_database_option(int i) {
			return getRuleContext(Create_database_optionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSqlParser.PARTIAL, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database; }
	}

	public final Create_databaseContext create_database() throws RecognitionException {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_create_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6221);
			match(CREATE);
			setState(6222);
			match(DATABASE);
			{
			setState(6223);
			((Create_databaseContext)_localctx).database = id();
			}
			setState(6227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
			case 1:
				{
				setState(6224);
				match(CONTAINMENT);
				setState(6225);
				match(EQUAL);
				setState(6226);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(6241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6229);
				match(ON);
				setState(6231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(6230);
					match(PRIMARY);
					}
				}

				setState(6233);
				database_file_spec();
				setState(6238);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6234);
					match(COMMA);
					setState(6235);
					database_file_spec();
					}
					}
					setState(6240);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,798,_ctx) ) {
			case 1:
				{
				setState(6243);
				match(LOG);
				setState(6244);
				match(ON);
				setState(6245);
				database_file_spec();
				setState(6250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6246);
					match(COMMA);
					setState(6247);
					database_file_spec();
					}
					}
					setState(6252);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(6257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(6255);
				match(COLLATE);
				setState(6256);
				((Create_databaseContext)_localctx).collation_name = id();
				}
			}

			setState(6268);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
			case 1:
				{
				setState(6259);
				match(WITH);
				setState(6260);
				create_database_option();
				setState(6265);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6261);
					match(COMMA);
					setState(6262);
					create_database_option();
					}
					}
					setState(6267);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public Search_conditionContext where;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode INCLUDE() { return getToken(TSqlParser.INCLUDE, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6270);
			match(CREATE);
			setState(6272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(6271);
				match(UNIQUE);
				}
			}

			setState(6275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(6274);
				clustered();
				}
			}

			setState(6277);
			match(INDEX);
			setState(6278);
			id();
			setState(6279);
			match(ON);
			setState(6280);
			table_name();
			setState(6281);
			match(LR_BRACKET);
			setState(6282);
			column_name_list_with_order();
			setState(6283);
			match(RR_BRACKET);
			setState(6289);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,804,_ctx) ) {
			case 1:
				{
				setState(6284);
				match(INCLUDE);
				setState(6285);
				match(LR_BRACKET);
				setState(6286);
				column_name_list();
				setState(6287);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6291);
				match(WHERE);
				setState(6292);
				((Create_indexContext)_localctx).where = search_condition();
				}
			}

			setState(6296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,806,_ctx) ) {
			case 1:
				{
				setState(6295);
				index_options();
				}
				break;
			}
			setState(6300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6298);
				match(ON);
				setState(6299);
				id();
				}
			}

			setState(6303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,808,_ctx) ) {
			case 1:
				{
				setState(6302);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_xml_indexContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<TerminalNode> XML() { return getTokens(TSqlParser.XML); }
		public TerminalNode XML(int i) {
			return getToken(TSqlParser.XML, i);
		}
		public List<TerminalNode> INDEX() { return getTokens(TSqlParser.INDEX); }
		public TerminalNode INDEX(int i) {
			return getToken(TSqlParser.INDEX, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public Create_xml_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_xml_index; }
	}

	public final Create_xml_indexContext create_xml_index() throws RecognitionException {
		Create_xml_indexContext _localctx = new Create_xml_indexContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_create_xml_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6305);
			match(CREATE);
			setState(6307);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(6306);
				match(PRIMARY);
				}
			}

			setState(6309);
			match(XML);
			setState(6310);
			match(INDEX);
			setState(6311);
			id();
			setState(6312);
			match(ON);
			setState(6313);
			table_name();
			setState(6314);
			match(LR_BRACKET);
			setState(6315);
			id();
			setState(6316);
			match(RR_BRACKET);
			setState(6327);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,812,_ctx) ) {
			case 1:
				{
				setState(6317);
				match(USING);
				setState(6318);
				match(XML);
				setState(6319);
				match(INDEX);
				setState(6320);
				id();
				setState(6325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6321);
					match(FOR);
					setState(6323);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,810,_ctx) ) {
					case 1:
						{
						setState(6322);
						_la = _input.LA(1);
						if ( !(_la==PATH || _la==PROPERTY || _la==VALUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			}
			setState(6330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
			case 1:
				{
				setState(6329);
				index_options();
				}
				break;
			}
			setState(6333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
			case 1:
				{
				setState(6332);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_procedureContext extends ParserRuleContext {
		public Token proc;
		public Func_proc_name_schemaContext procName;
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode PROC() { return getToken(TSqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(TSqlParser.PROCEDURE, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Procedure_optionContext> procedure_option() {
			return getRuleContexts(Procedure_optionContext.class);
		}
		public Procedure_optionContext procedure_option(int i) {
			return getRuleContext(Procedure_optionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_procedure; }
	}

	public final Create_or_alter_procedureContext create_or_alter_procedure() throws RecognitionException {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_create_or_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6335);
				match(CREATE);
				setState(6338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6336);
					match(OR);
					setState(6337);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6340);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6343);
			((Create_or_alter_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Create_or_alter_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6344);
			((Create_or_alter_procedureContext)_localctx).procName = func_proc_name_schema();
			setState(6347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6345);
				match(SEMI);
				setState(6346);
				match(DECIMAL);
				}
			}

			setState(6363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				setState(6350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(6349);
					match(LR_BRACKET);
					}
				}

				setState(6352);
				procedure_param();
				setState(6357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6353);
					match(COMMA);
					setState(6354);
					procedure_param();
					}
					}
					setState(6359);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6361);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(6360);
					match(RR_BRACKET);
					}
				}

				}
			}

			setState(6374);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6365);
				match(WITH);
				setState(6366);
				procedure_option();
				setState(6371);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6367);
					match(COMMA);
					setState(6368);
					procedure_option();
					}
					}
					setState(6373);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(6376);
				match(FOR);
				setState(6377);
				match(REPLICATION);
				}
			}

			setState(6380);
			match(AS);
			setState(6384);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,825,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6381);
					sql_clauses();
					}
					} 
				}
				setState(6386);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,825,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_triggerContext extends ParserRuleContext {
		public Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() {
			return getRuleContext(Create_or_alter_dml_triggerContext.class,0);
		}
		public Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() {
			return getRuleContext(Create_or_alter_ddl_triggerContext.class,0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_trigger; }
	}

	public final Create_or_alter_triggerContext create_or_alter_trigger() throws RecognitionException {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_create_or_alter_trigger);
		try {
			setState(6389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,826,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6387);
				create_or_alter_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6388);
				create_or_alter_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_dml_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public List<TerminalNode> FOR() { return getTokens(TSqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(TSqlParser.FOR, i);
		}
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(TSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode APPEND() { return getToken(TSqlParser.APPEND, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_dml_trigger; }
	}

	public final Create_or_alter_dml_triggerContext create_or_alter_dml_trigger() throws RecognitionException {
		Create_or_alter_dml_triggerContext _localctx = new Create_or_alter_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_create_or_alter_dml_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6397);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6391);
				match(CREATE);
				setState(6394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6392);
					match(OR);
					setState(6393);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6396);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6399);
			match(TRIGGER);
			setState(6400);
			simple_name();
			setState(6401);
			match(ON);
			setState(6402);
			table_name();
			setState(6412);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6403);
				match(WITH);
				setState(6404);
				dml_trigger_option();
				setState(6409);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6405);
					match(COMMA);
					setState(6406);
					dml_trigger_option();
					}
					}
					setState(6411);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6418);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(6414);
				match(FOR);
				}
				break;
			case AFTER:
				{
				setState(6415);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(6416);
				match(INSTEAD);
				setState(6417);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6420);
			dml_trigger_operation();
			setState(6425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6421);
				match(COMMA);
				setState(6422);
				dml_trigger_operation();
				}
				}
				setState(6427);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6430);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6428);
				match(WITH);
				setState(6429);
				match(APPEND);
				}
			}

			setState(6435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(6432);
				match(NOT);
				setState(6433);
				match(FOR);
				setState(6434);
				match(REPLICATION);
				}
			}

			setState(6437);
			match(AS);
			setState(6439); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6438);
					sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6441); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,835,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Dml_trigger_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_option; }
	}

	public final Dml_trigger_optionContext dml_trigger_option() throws RecognitionException {
		Dml_trigger_optionContext _localctx = new Dml_trigger_optionContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_dml_trigger_option);
		try {
			setState(6445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6443);
				match(ENCRYPTION);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6444);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_trigger_operationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public Dml_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_trigger_operation; }
	}

	public final Dml_trigger_operationContext dml_trigger_operation() throws RecognitionException {
		Dml_trigger_operationContext _localctx = new Dml_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_dml_trigger_operation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6447);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Ddl_trigger_operationContext ddl_trigger_operation() {
			return getRuleContext(Ddl_trigger_operationContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Dml_trigger_optionContext> dml_trigger_option() {
			return getRuleContexts(Dml_trigger_optionContext.class);
		}
		public Dml_trigger_optionContext dml_trigger_option(int i) {
			return getRuleContext(Dml_trigger_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<Dml_trigger_operationContext> dml_trigger_operation() {
			return getRuleContexts(Dml_trigger_operationContext.class);
		}
		public Dml_trigger_operationContext dml_trigger_operation(int i) {
			return getRuleContext(Dml_trigger_operationContext.class,i);
		}
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public Create_or_alter_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_ddl_trigger; }
	}

	public final Create_or_alter_ddl_triggerContext create_or_alter_ddl_trigger() throws RecognitionException {
		Create_or_alter_ddl_triggerContext _localctx = new Create_or_alter_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_create_or_alter_ddl_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6455);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6449);
				match(CREATE);
				setState(6452);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6450);
					match(OR);
					setState(6451);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6454);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6457);
			match(TRIGGER);
			setState(6458);
			simple_name();
			setState(6459);
			match(ON);
			setState(6463);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(6460);
				match(ALL);
				setState(6461);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(6462);
				match(DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6465);
				match(WITH);
				setState(6466);
				dml_trigger_option();
				setState(6471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6467);
					match(COMMA);
					setState(6468);
					dml_trigger_option();
					}
					}
					setState(6473);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6476);
			_la = _input.LA(1);
			if ( !(_la==FOR || _la==AFTER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6477);
			ddl_trigger_operation();
			setState(6482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6478);
				match(COMMA);
				setState(6479);
				dml_trigger_operation();
				}
				}
				setState(6484);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6485);
			match(AS);
			setState(6487); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(6486);
					sql_clauses();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6489); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_trigger_operationContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Ddl_trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_trigger_operation; }
	}

	public final Ddl_trigger_operationContext ddl_trigger_operation() throws RecognitionException {
		Ddl_trigger_operationContext _localctx = new Ddl_trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_ddl_trigger_operation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6491);
			simple_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_functionContext extends ParserRuleContext {
		public Func_proc_name_schemaContext funcName;
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Func_body_returns_selectContext func_body_returns_select() {
			return getRuleContext(Func_body_returns_selectContext.class,0);
		}
		public Func_body_returns_tableContext func_body_returns_table() {
			return getRuleContext(Func_body_returns_tableContext.class,0);
		}
		public Func_body_returns_scalarContext func_body_returns_scalar() {
			return getRuleContext(Func_body_returns_scalarContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode OR() { return getToken(TSqlParser.OR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_function; }
	}

	public final Create_or_alter_functionContext create_or_alter_function() throws RecognitionException {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_create_or_alter_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6499);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				{
				{
				setState(6493);
				match(CREATE);
				setState(6496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(6494);
					match(OR);
					setState(6495);
					match(ALTER);
					}
				}

				}
				}
				break;
			case ALTER:
				{
				setState(6498);
				match(ALTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6501);
			match(FUNCTION);
			setState(6502);
			((Create_or_alter_functionContext)_localctx).funcName = func_proc_name_schema();
			setState(6516);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
			case 1:
				{
				{
				setState(6503);
				match(LR_BRACKET);
				setState(6504);
				procedure_param();
				setState(6509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6505);
					match(COMMA);
					setState(6506);
					procedure_param();
					}
					}
					setState(6511);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6512);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				{
				setState(6514);
				match(LR_BRACKET);
				setState(6515);
				match(RR_BRACKET);
				}
				break;
			}
			setState(6521);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				setState(6518);
				func_body_returns_select();
				}
				break;
			case 2:
				{
				setState(6519);
				func_body_returns_table();
				}
				break;
			case 3:
				{
				setState(6520);
				func_body_returns_scalar();
				}
				break;
			}
			setState(6524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,849,_ctx) ) {
			case 1:
				{
				setState(6523);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_selectContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return getRuleContext(Select_statement_standaloneContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Func_body_returns_selectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_select; }
	}

	public final Func_body_returns_selectContext func_body_returns_select() throws RecognitionException {
		Func_body_returns_selectContext _localctx = new Func_body_returns_selectContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_func_body_returns_select);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6526);
			match(RETURNS);
			setState(6527);
			match(TABLE);
			setState(6537);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6528);
				match(WITH);
				setState(6529);
				function_option();
				setState(6534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6530);
					match(COMMA);
					setState(6531);
					function_option();
					}
					}
					setState(6536);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6540);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6539);
				match(AS);
				}
			}

			setState(6542);
			match(RETURN);
			setState(6548);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,853,_ctx) ) {
			case 1:
				{
				setState(6543);
				match(LR_BRACKET);
				setState(6544);
				select_statement_standalone();
				setState(6545);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(6547);
				select_statement_standalone();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_tableContext extends ParserRuleContext {
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(TSqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(TSqlParser.SEMI, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Func_body_returns_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_table; }
	}

	public final Func_body_returns_tableContext func_body_returns_table() throws RecognitionException {
		Func_body_returns_tableContext _localctx = new Func_body_returns_tableContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_func_body_returns_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6550);
			match(RETURNS);
			setState(6551);
			match(LOCAL_ID);
			setState(6552);
			table_type_definition();
			setState(6562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6553);
				match(WITH);
				setState(6554);
				function_option();
				setState(6559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6555);
					match(COMMA);
					setState(6556);
					function_option();
					}
					}
					setState(6561);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6564);
				match(AS);
				}
			}

			setState(6567);
			match(BEGIN);
			setState(6571);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,857,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6568);
					sql_clauses();
					}
					} 
				}
				setState(6573);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,857,_ctx);
			}
			setState(6574);
			match(RETURN);
			setState(6576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6575);
				match(SEMI);
				}
			}

			setState(6578);
			match(END);
			setState(6580);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
			case 1:
				{
				setState(6579);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_body_returns_scalarContext extends ParserRuleContext {
		public ExpressionContext ret;
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode RETURN() { return getToken(TSqlParser.RETURN, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Func_body_returns_scalarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body_returns_scalar; }
	}

	public final Func_body_returns_scalarContext func_body_returns_scalar() throws RecognitionException {
		Func_body_returns_scalarContext _localctx = new Func_body_returns_scalarContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_func_body_returns_scalar);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6582);
			match(RETURNS);
			setState(6583);
			data_type();
			setState(6593);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6584);
				match(WITH);
				setState(6585);
				function_option();
				setState(6590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6586);
					match(COMMA);
					setState(6587);
					function_option();
					}
					}
					setState(6592);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6595);
				match(AS);
				}
			}

			setState(6598);
			match(BEGIN);
			setState(6602);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,863,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6599);
					sql_clauses();
					}
					} 
				}
				setState(6604);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,863,_ctx);
			}
			setState(6605);
			match(RETURN);
			setState(6606);
			((Func_body_returns_scalarContext)_localctx).ret = expression(0);
			setState(6608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(6607);
				match(SEMI);
				}
			}

			setState(6610);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_paramContext extends ParserRuleContext {
		public IdContext type_schema;
		public Default_valueContext default_val;
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode VARYING() { return getToken(TSqlParser.VARYING, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode READONLY() { return getToken(TSqlParser.READONLY, 0); }
		public Procedure_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_param; }
	}

	public final Procedure_paramContext procedure_param() throws RecognitionException {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_procedure_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6612);
			match(LOCAL_ID);
			setState(6614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6613);
				match(AS);
				}
			}

			setState(6619);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,866,_ctx) ) {
			case 1:
				{
				setState(6616);
				((Procedure_paramContext)_localctx).type_schema = id();
				setState(6617);
				match(DOT);
				}
				break;
			}
			setState(6621);
			data_type();
			setState(6623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARYING) {
				{
				setState(6622);
				match(VARYING);
				}
			}

			setState(6627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(6625);
				match(EQUAL);
				setState(6626);
				((Procedure_paramContext)_localctx).default_val = default_value();
				}
			}

			setState(6630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (OUT - 448)) | (1L << (OUTPUT - 448)) | (1L << (READONLY - 448)))) != 0)) {
				{
				setState(6629);
				_la = _input.LA(1);
				if ( !(((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (OUT - 448)) | (1L << (OUTPUT - 448)) | (1L << (READONLY - 448)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_option; }
	}

	public final Procedure_optionContext procedure_option() throws RecognitionException {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_procedure_option);
		try {
			setState(6635);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6632);
				match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6633);
				match(RECOMPILE);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6634);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(TSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(TSqlParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(TSqlParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(TSqlParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_option; }
	}

	public final Function_optionContext function_option() throws RecognitionException {
		Function_optionContext _localctx = new Function_optionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_function_option);
		try {
			setState(6649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6637);
				match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6638);
				match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				enterOuterAlt(_localctx, 3);
				{
				setState(6639);
				match(RETURNS);
				setState(6640);
				match(NULL);
				setState(6641);
				match(ON);
				setState(6642);
				match(NULL);
				setState(6643);
				match(INPUT);
				}
				break;
			case CALLED:
				enterOuterAlt(_localctx, 4);
				{
				setState(6644);
				match(CALLED);
				setState(6645);
				match(ON);
				setState(6646);
				match(NULL);
				setState(6647);
				match(INPUT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(6648);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_statisticsContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode FULLSCAN() { return getToken(TSqlParser.FULLSCAN, 0); }
		public TerminalNode SAMPLE() { return getToken(TSqlParser.SAMPLE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STATS_STREAM() { return getToken(TSqlParser.STATS_STREAM, 0); }
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode NORECOMPUTE() { return getToken(TSqlParser.NORECOMPUTE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics; }
	}

	public final Create_statisticsContext create_statistics() throws RecognitionException {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_create_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6651);
			match(CREATE);
			setState(6652);
			match(STATISTICS);
			setState(6653);
			id();
			setState(6654);
			match(ON);
			setState(6655);
			table_name();
			setState(6656);
			match(LR_BRACKET);
			setState(6657);
			column_name_list();
			setState(6658);
			match(RR_BRACKET);
			setState(6677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,875,_ctx) ) {
			case 1:
				{
				setState(6659);
				match(WITH);
				setState(6665);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FULLSCAN:
					{
					setState(6660);
					match(FULLSCAN);
					}
					break;
				case SAMPLE:
					{
					setState(6661);
					match(SAMPLE);
					setState(6662);
					match(DECIMAL);
					setState(6663);
					_la = _input.LA(1);
					if ( !(_la==PERCENT || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case STATS_STREAM:
					{
					setState(6664);
					match(STATS_STREAM);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6669);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,873,_ctx) ) {
				case 1:
					{
					setState(6667);
					match(COMMA);
					setState(6668);
					match(NORECOMPUTE);
					}
					break;
				}
				setState(6675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6671);
					match(COMMA);
					setState(6672);
					match(INCREMENTAL);
					setState(6673);
					match(EQUAL);
					setState(6674);
					on_off();
					}
				}

				}
				break;
			}
			setState(6680);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
			case 1:
				{
				setState(6679);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statisticsContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Update_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statistics; }
	}

	public final Update_statisticsContext update_statistics() throws RecognitionException {
		Update_statisticsContext _localctx = new Update_statisticsContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_update_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6682);
			match(UPDATE);
			setState(6684);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==INDEX) {
				{
				setState(6683);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==INDEX) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6686);
			match(STATISTICS);
			setState(6687);
			full_table_name();
			setState(6689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
			case 1:
				{
				setState(6688);
				id();
				}
				break;
			}
			setState(6694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
			case 1:
				{
				setState(6691);
				match(USING);
				setState(6692);
				match(DECIMAL);
				setState(6693);
				match(VALUES);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<Table_indicesContext> table_indices() {
			return getRuleContexts(Table_indicesContext.class);
		}
		public Table_indicesContext table_indices(int i) {
			return getRuleContext(Table_indicesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode LOCK() { return getToken(TSqlParser.LOCK, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public List<Table_optionsContext> table_options() {
			return getRuleContexts(Table_optionsContext.class);
		}
		public Table_optionsContext table_options(int i) {
			return getRuleContext(Table_optionsContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(TSqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSqlParser.DEFAULT, i);
		}
		public TerminalNode TEXTIMAGE_ON() { return getToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6696);
			match(CREATE);
			setState(6697);
			match(TABLE);
			setState(6698);
			table_name();
			setState(6699);
			match(LR_BRACKET);
			setState(6700);
			column_def_table_constraints();
			setState(6707);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,881,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6702);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6701);
						match(COMMA);
						}
					}

					setState(6704);
					table_indices();
					}
					} 
				}
				setState(6709);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,881,_ctx);
			}
			setState(6711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6710);
				match(COMMA);
				}
			}

			setState(6713);
			match(RR_BRACKET);
			setState(6716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,883,_ctx) ) {
			case 1:
				{
				setState(6714);
				match(LOCK);
				setState(6715);
				simple_id();
				}
				break;
			}
			setState(6721);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,884,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6718);
					table_options();
					}
					} 
				}
				setState(6723);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,884,_ctx);
			}
			setState(6727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,885,_ctx) ) {
			case 1:
				{
				setState(6724);
				match(ON);
				setState(6725);
				id();
				}
				break;
			case 2:
				{
				setState(6726);
				match(DEFAULT);
				}
				break;
			}
			setState(6732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,886,_ctx) ) {
			case 1:
				{
				setState(6729);
				match(TEXTIMAGE_ON);
				setState(6730);
				id();
				}
				break;
			case 2:
				{
				setState(6731);
				match(DEFAULT);
				}
				break;
			}
			setState(6735);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,887,_ctx) ) {
			case 1:
				{
				setState(6734);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indicesContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public TerminalNode CLUSTERED() { return getToken(TSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(TSqlParser.NONCLUSTERED, 0); }
		public Table_indicesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indices; }
	}

	public final Table_indicesContext table_indices() throws RecognitionException {
		Table_indicesContext _localctx = new Table_indicesContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_table_indices);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6737);
			match(INDEX);
			setState(6738);
			id();
			setState(6740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED || _la==UNIQUE) {
				{
				setState(6739);
				_la = _input.LA(1);
				if ( !(_la==CLUSTERED || _la==NONCLUSTERED || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6742);
			match(LR_BRACKET);
			setState(6743);
			column_name_list_with_order();
			setState(6744);
			match(RR_BRACKET);
			setState(6746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6745);
				index_options();
				}
			}

			setState(6750);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6748);
				match(ON);
				setState(6749);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_options; }
	}

	public final Table_optionsContext table_options() throws RecognitionException {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_table_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6752);
			match(WITH);
			setState(6772);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(6753);
				match(LR_BRACKET);
				setState(6754);
				index_option();
				setState(6759);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6755);
					match(COMMA);
					setState(6756);
					index_option();
					}
					}
					setState(6761);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6762);
				match(RR_BRACKET);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case ID:
				{
				setState(6764);
				index_option();
				setState(6769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6765);
					match(COMMA);
					setState(6766);
					index_option();
					}
					}
					setState(6771);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_viewContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return getRuleContext(Select_statement_standaloneContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> WITH() { return getTokens(TSqlParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSqlParser.WITH, i);
		}
		public List<View_attributeContext> view_attribute() {
			return getRuleContexts(View_attributeContext.class);
		}
		public View_attributeContext view_attribute(int i) {
			return getRuleContext(View_attributeContext.class,i);
		}
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view; }
	}

	public final Create_viewContext create_view() throws RecognitionException {
		Create_viewContext _localctx = new Create_viewContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_create_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6774);
			match(CREATE);
			setState(6775);
			match(VIEW);
			setState(6776);
			simple_name();
			setState(6781);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(6777);
				match(LR_BRACKET);
				setState(6778);
				column_name_list();
				setState(6779);
				match(RR_BRACKET);
				}
			}

			setState(6792);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6783);
				match(WITH);
				setState(6784);
				view_attribute();
				setState(6789);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6785);
					match(COMMA);
					setState(6786);
					view_attribute();
					}
					}
					setState(6791);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6794);
			match(AS);
			setState(6795);
			select_statement_standalone();
			setState(6799);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
			case 1:
				{
				setState(6796);
				match(WITH);
				setState(6797);
				match(CHECK);
				setState(6798);
				match(OPTION);
				}
				break;
			}
			setState(6802);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
			case 1:
				{
				setState(6801);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(TSqlParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_view_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6804);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> ALTER() { return getTokens(TSqlParser.ALTER); }
		public TerminalNode ALTER(int i) {
			return getToken(TSqlParser.ALTER, i);
		}
		public List<TerminalNode> TABLE() { return getTokens(TSqlParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(TSqlParser.TABLE, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode LOCK_ESCALATION() { return getToken(TSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode ADD() { return getToken(TSqlParser.ADD, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(TSqlParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return getRuleContext(Table_optionsContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_alter_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6806);
			match(ALTER);
			setState(6807);
			match(TABLE);
			setState(6808);
			table_name();
			setState(6852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,900,_ctx) ) {
			case 1:
				{
				setState(6809);
				match(SET);
				setState(6810);
				match(LR_BRACKET);
				setState(6811);
				match(LOCK_ESCALATION);
				setState(6812);
				match(EQUAL);
				setState(6813);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6814);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(6815);
				match(ADD);
				setState(6816);
				column_def_table_constraints();
				}
				break;
			case 3:
				{
				setState(6817);
				match(ALTER);
				setState(6818);
				match(COLUMN);
				setState(6819);
				column_definition();
				}
				break;
			case 4:
				{
				setState(6820);
				match(DROP);
				setState(6821);
				match(COLUMN);
				setState(6822);
				id();
				}
				break;
			case 5:
				{
				setState(6823);
				match(DROP);
				setState(6824);
				match(CONSTRAINT);
				setState(6825);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 6:
				{
				setState(6826);
				match(WITH);
				setState(6827);
				match(CHECK);
				setState(6828);
				match(ADD);
				setState(6829);
				match(CONSTRAINT);
				setState(6830);
				((Alter_tableContext)_localctx).constraint = id();
				setState(6831);
				match(FOREIGN);
				setState(6832);
				match(KEY);
				setState(6833);
				match(LR_BRACKET);
				setState(6834);
				((Alter_tableContext)_localctx).fk = column_name_list();
				setState(6835);
				match(RR_BRACKET);
				setState(6836);
				match(REFERENCES);
				setState(6837);
				table_name();
				setState(6838);
				match(LR_BRACKET);
				setState(6839);
				((Alter_tableContext)_localctx).pk = column_name_list();
				setState(6840);
				match(RR_BRACKET);
				}
				break;
			case 7:
				{
				setState(6842);
				match(CHECK);
				setState(6843);
				match(CONSTRAINT);
				setState(6844);
				((Alter_tableContext)_localctx).constraint = id();
				}
				break;
			case 8:
				{
				setState(6845);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6846);
				match(TRIGGER);
				setState(6848);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
				case 1:
					{
					setState(6847);
					id();
					}
					break;
				}
				}
				break;
			case 9:
				{
				setState(6850);
				match(REBUILD);
				setState(6851);
				table_options();
				}
				break;
			}
			setState(6855);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,901,_ctx) ) {
			case 1:
				{
				setState(6854);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext new_name;
		public IdContext collation;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return getRuleContext(Database_optionspecContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database; }
	}

	public final Alter_databaseContext alter_database() throws RecognitionException {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_alter_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6857);
			match(ALTER);
			setState(6858);
			match(DATABASE);
			setState(6861);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(6859);
				((Alter_databaseContext)_localctx).database = id();
				}
				break;
			case CURRENT:
				{
				setState(6860);
				match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODIFY:
				{
				setState(6863);
				match(MODIFY);
				setState(6864);
				match(NAME);
				setState(6865);
				match(EQUAL);
				setState(6866);
				((Alter_databaseContext)_localctx).new_name = id();
				}
				break;
			case COLLATE:
				{
				setState(6867);
				match(COLLATE);
				setState(6868);
				((Alter_databaseContext)_localctx).collation = id();
				}
				break;
			case SET:
				{
				setState(6869);
				match(SET);
				setState(6870);
				database_optionspec();
				setState(6873);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,903,_ctx) ) {
				case 1:
					{
					setState(6871);
					match(WITH);
					setState(6872);
					termination();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6878);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,905,_ctx) ) {
			case 1:
				{
				setState(6877);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_optionspecContext extends ParserRuleContext {
		public Auto_optionContext auto_option() {
			return getRuleContext(Auto_optionContext.class,0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return getRuleContext(Change_tracking_optionContext.class,0);
		}
		public Containment_optionContext containment_option() {
			return getRuleContext(Containment_optionContext.class,0);
		}
		public Cursor_optionContext cursor_option() {
			return getRuleContext(Cursor_optionContext.class,0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return getRuleContext(Database_mirroring_optionContext.class,0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return getRuleContext(Date_correlation_optimization_optionContext.class,0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return getRuleContext(Db_encryption_optionContext.class,0);
		}
		public Db_state_optionContext db_state_option() {
			return getRuleContext(Db_state_optionContext.class,0);
		}
		public Db_update_optionContext db_update_option() {
			return getRuleContext(Db_update_optionContext.class,0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return getRuleContext(Db_user_access_optionContext.class,0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return getRuleContext(Delayed_durability_optionContext.class,0);
		}
		public External_access_optionContext external_access_option() {
			return getRuleContext(External_access_optionContext.class,0);
		}
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return getRuleContext(Database_filestream_optionContext.class,0);
		}
		public Hadr_optionsContext hadr_options() {
			return getRuleContext(Hadr_optionsContext.class,0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return getRuleContext(Mixed_page_allocation_optionContext.class,0);
		}
		public Parameterization_optionContext parameterization_option() {
			return getRuleContext(Parameterization_optionContext.class,0);
		}
		public Recovery_optionContext recovery_option() {
			return getRuleContext(Recovery_optionContext.class,0);
		}
		public Service_broker_optionContext service_broker_option() {
			return getRuleContext(Service_broker_optionContext.class,0);
		}
		public Snapshot_optionContext snapshot_option() {
			return getRuleContext(Snapshot_optionContext.class,0);
		}
		public Sql_optionContext sql_option() {
			return getRuleContext(Sql_optionContext.class,0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return getRuleContext(Target_recovery_time_optionContext.class,0);
		}
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_optionspec; }
	}

	public final Database_optionspecContext database_optionspec() throws RecognitionException {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_database_optionspec);
		try {
			setState(6903);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,906,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6880);
				auto_option();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6881);
				change_tracking_option();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6882);
				containment_option();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6883);
				cursor_option();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(6884);
				database_mirroring_option();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(6885);
				date_correlation_optimization_option();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(6886);
				db_encryption_option();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(6887);
				db_state_option();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(6888);
				db_update_option();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(6889);
				db_user_access_option();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(6890);
				delayed_durability_option();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(6891);
				external_access_option();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(6892);
				match(FILESTREAM);
				setState(6893);
				database_filestream_option();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(6894);
				hadr_options();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(6895);
				mixed_page_allocation_option();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(6896);
				parameterization_option();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(6897);
				recovery_option();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(6898);
				service_broker_option();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(6899);
				snapshot_option();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(6900);
				sql_option();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(6901);
				target_recovery_time_option();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(6902);
				termination();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_optionContext extends ParserRuleContext {
		public TerminalNode AUTO_CLOSE() { return getToken(TSqlParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(TSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_option; }
	}

	public final Auto_optionContext auto_option() throws RecognitionException {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_auto_option);
		int _la;
		try {
			setState(6922);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6905);
				match(AUTO_CLOSE);
				setState(6906);
				on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6907);
				match(AUTO_CREATE_STATISTICS);
				setState(6908);
				match(OFF);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(6909);
				match(ON);
				setState(6914);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INCREMENTAL:
					{
					setState(6910);
					match(INCREMENTAL);
					setState(6911);
					match(EQUAL);
					setState(6912);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(6913);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case AUTO_SHRINK:
				enterOuterAlt(_localctx, 4);
				{
				setState(6916);
				match(AUTO_SHRINK);
				setState(6917);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6918);
				match(AUTO_UPDATE_STATISTICS);
				setState(6919);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				enterOuterAlt(_localctx, 6);
				{
				setState(6920);
				match(AUTO_UPDATE_STATISTICS_ASYNC);
				setState(6921);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_optionContext extends ParserRuleContext {
		public TerminalNode CHANGE_TRACKING() { return getToken(TSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<Change_tracking_option_listContext> change_tracking_option_list() {
			return getRuleContexts(Change_tracking_option_listContext.class);
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return getRuleContext(Change_tracking_option_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option; }
	}

	public final Change_tracking_optionContext change_tracking_option() throws RecognitionException {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_change_tracking_option);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6924);
			match(CHANGE_TRACKING);
			setState(6925);
			match(EQUAL);
			setState(6941);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
				{
				setState(6926);
				match(OFF);
				}
				break;
			case ON:
				{
				setState(6927);
				match(ON);
				setState(6938);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,910,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6928);
						change_tracking_option_list();
						setState(6933);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6929);
							match(COMMA);
							setState(6930);
							change_tracking_option_list();
							}
							}
							setState(6935);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						} 
					}
					setState(6940);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,910,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_option_listContext extends ParserRuleContext {
		public TerminalNode AUTO_CLEANUP() { return getToken(TSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CHANGE_RETENTION() { return getToken(TSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode DAYS() { return getToken(TSqlParser.DAYS, 0); }
		public TerminalNode HOURS() { return getToken(TSqlParser.HOURS, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option_list; }
	}

	public final Change_tracking_option_listContext change_tracking_option_list() throws RecognitionException {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_change_tracking_option_list);
		int _la;
		try {
			setState(6949);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLEANUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(6943);
				match(AUTO_CLEANUP);
				setState(6944);
				match(EQUAL);
				setState(6945);
				on_off();
				}
				break;
			case CHANGE_RETENTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(6946);
				match(CHANGE_RETENTION);
				setState(6947);
				match(EQUAL);
				setState(6948);
				_la = _input.LA(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Containment_optionContext extends ParserRuleContext {
		public TerminalNode CONTAINMENT() { return getToken(TSqlParser.CONTAINMENT, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSqlParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_containment_option; }
	}

	public final Containment_optionContext containment_option() throws RecognitionException {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_containment_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6951);
			match(CONTAINMENT);
			setState(6952);
			match(EQUAL);
			setState(6953);
			_la = _input.LA(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionContext extends ParserRuleContext {
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CURSOR_DEFAULT() { return getToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_option; }
	}

	public final Cursor_optionContext cursor_option() throws RecognitionException {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_cursor_option);
		int _la;
		try {
			setState(6959);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6955);
				match(CURSOR_CLOSE_ON_COMMIT);
				setState(6956);
				on_off();
				}
				break;
			case CURSOR_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6957);
				match(CURSOR_DEFAULT);
				setState(6958);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_endpointContext extends ParserRuleContext {
		public IdContext endpointname;
		public IdContext login;
		public Token state;
		public Token port;
		public IdContext cert_name;
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode TCP() { return getToken(TSqlParser.TCP, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode LISTENER_PORT() { return getToken(TSqlParser.LISTENER_PORT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode TSQL() { return getToken(TSqlParser.TSQL, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode SERVICE_BROKER() { return getToken(TSqlParser.SERVICE_BROKER, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(TSqlParser.AUTHENTICATION, 0); }
		public TerminalNode DATABASE_MIRRORING() { return getToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode LISTENER_IP() { return getToken(TSqlParser.LISTENER_IP, 0); }
		public TerminalNode WITNESS() { return getToken(TSqlParser.WITNESS, 0); }
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode IPV4_ADDR() { return getToken(TSqlParser.IPV4_ADDR, 0); }
		public TerminalNode IPV6_ADDR() { return getToken(TSqlParser.IPV6_ADDR, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode MESSAGE_FORWARDING() { return getToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public TerminalNode MESSAGE_FORWARD_SIZE() { return getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public TerminalNode STARTED() { return getToken(TSqlParser.STARTED, 0); }
		public TerminalNode STOPPED() { return getToken(TSqlParser.STOPPED, 0); }
		public List<TerminalNode> DISABLED() { return getTokens(TSqlParser.DISABLED); }
		public TerminalNode DISABLED(int i) {
			return getToken(TSqlParser.DISABLED, i);
		}
		public TerminalNode SUPPORTED() { return getToken(TSqlParser.SUPPORTED, 0); }
		public TerminalNode REQUIRED() { return getToken(TSqlParser.REQUIRED, 0); }
		public TerminalNode ENABLED() { return getToken(TSqlParser.ENABLED, 0); }
		public TerminalNode NTLM() { return getToken(TSqlParser.NTLM, 0); }
		public TerminalNode KERBEROS() { return getToken(TSqlParser.KERBEROS, 0); }
		public TerminalNode NEGOTIATE() { return getToken(TSqlParser.NEGOTIATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode AES() { return getToken(TSqlParser.AES, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_endpoint; }
	}

	public final Alter_endpointContext alter_endpoint() throws RecognitionException {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_alter_endpoint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6961);
			match(ALTER);
			setState(6962);
			match(ENDPOINT);
			setState(6963);
			((Alter_endpointContext)_localctx).endpointname = id();
			setState(6966);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(6964);
				match(AUTHORIZATION);
				setState(6965);
				((Alter_endpointContext)_localctx).login = id();
				}
			}

			setState(6975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATE) {
				{
				setState(6968);
				match(STATE);
				setState(6969);
				match(EQUAL);
				setState(6973);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STARTED:
					{
					setState(6970);
					((Alter_endpointContext)_localctx).state = match(STARTED);
					}
					break;
				case STOPPED:
					{
					setState(6971);
					((Alter_endpointContext)_localctx).state = match(STOPPED);
					}
					break;
				case DISABLED:
					{
					setState(6972);
					((Alter_endpointContext)_localctx).state = match(DISABLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6977);
			match(AS);
			setState(6978);
			match(TCP);
			setState(6979);
			match(LR_BRACKET);
			setState(6980);
			match(LISTENER_PORT);
			setState(6981);
			match(EQUAL);
			setState(6982);
			((Alter_endpointContext)_localctx).port = match(DECIMAL);
			setState(6987);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6983);
				match(COMMA);
				setState(6984);
				match(LISTENER_IP);
				setState(6985);
				match(EQUAL);
				setState(6986);
				_la = _input.LA(1);
				if ( !(_la==ALL || ((((_la - 818)) & ~0x3f) == 0 && ((1L << (_la - 818)) & ((1L << (STRING - 818)) | (1L << (IPV4_ADDR - 818)) | (1L << (IPV6_ADDR - 818)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6989);
			match(RR_BRACKET);
			setState(7099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,941,_ctx) ) {
			case 1:
				{
				setState(6990);
				match(TSQL);
				}
				break;
			case 2:
				{
				setState(6991);
				match(FOR);
				setState(6992);
				match(SERVICE_BROKER);
				setState(6993);
				match(LR_BRACKET);
				setState(6994);
				match(AUTHENTICATION);
				setState(6995);
				match(EQUAL);
				setState(7012);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(6996);
					match(WINDOWS);
					setState(6998);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						setState(6997);
						_la = _input.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(7002);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(7000);
						match(CERTIFICATE);
						setState(7001);
						((Alter_endpointContext)_localctx).cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(7004);
					match(CERTIFICATE);
					setState(7005);
					((Alter_endpointContext)_localctx).cert_name = id();
					setState(7007);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(7006);
						match(WINDOWS);
						}
					}

					setState(7010);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						setState(7009);
						_la = _input.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7031);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,926,_ctx) ) {
				case 1:
					{
					setState(7015);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7014);
						match(COMMA);
						}
					}

					setState(7017);
					match(ENCRYPTION);
					setState(7018);
					match(EQUAL);
					setState(7019);
					_la = _input.LA(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7029);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(7020);
						match(ALGORITHM);
						setState(7027);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,924,_ctx) ) {
						case 1:
							{
							setState(7021);
							match(AES);
							}
							break;
						case 2:
							{
							setState(7022);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(7023);
							match(AES);
							setState(7024);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(7025);
							match(RC4);
							setState(7026);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(7039);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,928,_ctx) ) {
				case 1:
					{
					setState(7034);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7033);
						match(COMMA);
						}
					}

					setState(7036);
					match(MESSAGE_FORWARDING);
					setState(7037);
					match(EQUAL);
					setState(7038);
					_la = _input.LA(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(7047);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MESSAGE_FORWARD_SIZE || _la==COMMA) {
					{
					setState(7042);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7041);
						match(COMMA);
						}
					}

					setState(7044);
					match(MESSAGE_FORWARD_SIZE);
					setState(7045);
					match(EQUAL);
					setState(7046);
					match(DECIMAL);
					}
				}

				setState(7049);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(7050);
				match(FOR);
				setState(7051);
				match(DATABASE_MIRRORING);
				setState(7052);
				match(LR_BRACKET);
				setState(7053);
				match(AUTHENTICATION);
				setState(7054);
				match(EQUAL);
				setState(7071);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(7055);
					match(WINDOWS);
					setState(7057);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						setState(7056);
						_la = _input.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(7061);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(7059);
						match(CERTIFICATE);
						setState(7060);
						((Alter_endpointContext)_localctx).cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(7063);
					match(CERTIFICATE);
					setState(7064);
					((Alter_endpointContext)_localctx).cert_name = id();
					setState(7066);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(7065);
						match(WINDOWS);
						}
					}

					setState(7069);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) {
						{
						setState(7068);
						_la = _input.LA(1);
						if ( !(_la==NEGOTIATE || _la==KERBEROS || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7090);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,939,_ctx) ) {
				case 1:
					{
					setState(7074);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7073);
						match(COMMA);
						}
					}

					setState(7076);
					match(ENCRYPTION);
					setState(7077);
					match(EQUAL);
					setState(7078);
					_la = _input.LA(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7088);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(7079);
						match(ALGORITHM);
						setState(7086);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,937,_ctx) ) {
						case 1:
							{
							setState(7080);
							match(AES);
							}
							break;
						case 2:
							{
							setState(7081);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(7082);
							match(AES);
							setState(7083);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(7084);
							match(RC4);
							setState(7085);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(7093);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7092);
					match(COMMA);
					}
				}

				setState(7095);
				match(ROLE);
				setState(7096);
				match(EQUAL);
				setState(7097);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7098);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_mirroring_optionContext extends ParserRuleContext {
		public Mirroring_set_optionContext mirroring_set_option() {
			return getRuleContext(Mirroring_set_optionContext.class,0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_mirroring_option; }
	}

	public final Database_mirroring_optionContext database_mirroring_option() throws RecognitionException {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_database_mirroring_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7101);
			mirroring_set_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_set_optionContext extends ParserRuleContext {
		public Mirroring_partnerContext mirroring_partner() {
			return getRuleContext(Mirroring_partnerContext.class,0);
		}
		public Partner_optionContext partner_option() {
			return getRuleContext(Partner_optionContext.class,0);
		}
		public Mirroring_witnessContext mirroring_witness() {
			return getRuleContext(Mirroring_witnessContext.class,0);
		}
		public Witness_optionContext witness_option() {
			return getRuleContext(Witness_optionContext.class,0);
		}
		public Mirroring_set_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_set_option; }
	}

	public final Mirroring_set_optionContext mirroring_set_option() throws RecognitionException {
		Mirroring_set_optionContext _localctx = new Mirroring_set_optionContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_mirroring_set_option);
		try {
			setState(7109);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7103);
				mirroring_partner();
				setState(7104);
				partner_option();
				}
				break;
			case WITNESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(7106);
				mirroring_witness();
				setState(7107);
				witness_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_partnerContext extends ParserRuleContext {
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public Mirroring_partnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_partner; }
	}

	public final Mirroring_partnerContext mirroring_partner() throws RecognitionException {
		Mirroring_partnerContext _localctx = new Mirroring_partnerContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_mirroring_partner);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7111);
			match(PARTNER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_witnessContext extends ParserRuleContext {
		public TerminalNode WITNESS() { return getToken(TSqlParser.WITNESS, 0); }
		public Mirroring_witnessContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_witness; }
	}

	public final Mirroring_witnessContext mirroring_witness() throws RecognitionException {
		Mirroring_witnessContext _localctx = new Mirroring_witnessContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_mirroring_witness);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7113);
			match(WITNESS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_partner_equalContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public Witness_partner_equalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_partner_equal; }
	}

	public final Witness_partner_equalContext witness_partner_equal() throws RecognitionException {
		Witness_partner_equalContext _localctx = new Witness_partner_equalContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_witness_partner_equal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7115);
			match(EQUAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_optionContext extends ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return getRuleContext(Witness_partner_equalContext.class,0);
		}
		public Partner_serverContext partner_server() {
			return getRuleContext(Partner_serverContext.class,0);
		}
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode RESUME() { return getToken(TSqlParser.RESUME, 0); }
		public TerminalNode SAFETY() { return getToken(TSqlParser.SAFETY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_option; }
	}

	public final Partner_optionContext partner_option() throws RecognitionException {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_partner_option);
		int _la;
		try {
			setState(7129);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7117);
				witness_partner_equal();
				setState(7118);
				partner_server();
				}
				break;
			case FAILOVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7120);
				match(FAILOVER);
				}
				break;
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
				enterOuterAlt(_localctx, 3);
				{
				setState(7121);
				match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 4);
				{
				setState(7122);
				match(OFF);
				}
				break;
			case RESUME:
				enterOuterAlt(_localctx, 5);
				{
				setState(7123);
				match(RESUME);
				}
				break;
			case SAFETY:
				enterOuterAlt(_localctx, 6);
				{
				setState(7124);
				match(SAFETY);
				setState(7125);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 7);
				{
				setState(7126);
				match(SUSPEND);
				}
				break;
			case TIMEOUT:
				enterOuterAlt(_localctx, 8);
				{
				setState(7127);
				match(TIMEOUT);
				setState(7128);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_optionContext extends ParserRuleContext {
		public Witness_partner_equalContext witness_partner_equal() {
			return getRuleContext(Witness_partner_equalContext.class,0);
		}
		public Witness_serverContext witness_server() {
			return getRuleContext(Witness_serverContext.class,0);
		}
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_option; }
	}

	public final Witness_optionContext witness_option() throws RecognitionException {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_witness_option);
		try {
			setState(7135);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(7131);
				witness_partner_equal();
				setState(7132);
				witness_server();
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 2);
				{
				setState(7134);
				match(OFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_serverContext extends ParserRuleContext {
		public Partner_serverContext partner_server() {
			return getRuleContext(Partner_serverContext.class,0);
		}
		public Witness_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_server; }
	}

	public final Witness_serverContext witness_server() throws RecognitionException {
		Witness_serverContext _localctx = new Witness_serverContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_witness_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7137);
			partner_server();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_serverContext extends ParserRuleContext {
		public Partner_server_tcp_prefixContext partner_server_tcp_prefix() {
			return getRuleContext(Partner_server_tcp_prefixContext.class,0);
		}
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public Mirroring_host_port_seperatorContext mirroring_host_port_seperator() {
			return getRuleContext(Mirroring_host_port_seperatorContext.class,0);
		}
		public Port_numberContext port_number() {
			return getRuleContext(Port_numberContext.class,0);
		}
		public Partner_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_server; }
	}

	public final Partner_serverContext partner_server() throws RecognitionException {
		Partner_serverContext _localctx = new Partner_serverContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_partner_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7139);
			partner_server_tcp_prefix();
			setState(7140);
			host();
			setState(7141);
			mirroring_host_port_seperator();
			setState(7142);
			port_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mirroring_host_port_seperatorContext extends ParserRuleContext {
		public TerminalNode COLON() { return getToken(TSqlParser.COLON, 0); }
		public Mirroring_host_port_seperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mirroring_host_port_seperator; }
	}

	public final Mirroring_host_port_seperatorContext mirroring_host_port_seperator() throws RecognitionException {
		Mirroring_host_port_seperatorContext _localctx = new Mirroring_host_port_seperatorContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_mirroring_host_port_seperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7144);
			match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_server_tcp_prefixContext extends ParserRuleContext {
		public TerminalNode TCP() { return getToken(TSqlParser.TCP, 0); }
		public TerminalNode COLON() { return getToken(TSqlParser.COLON, 0); }
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(TSqlParser.DOUBLE_FORWARD_SLASH, 0); }
		public Partner_server_tcp_prefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_server_tcp_prefix; }
	}

	public final Partner_server_tcp_prefixContext partner_server_tcp_prefix() throws RecognitionException {
		Partner_server_tcp_prefixContext _localctx = new Partner_server_tcp_prefixContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_partner_server_tcp_prefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7146);
			match(TCP);
			setState(7147);
			match(COLON);
			setState(7148);
			match(DOUBLE_FORWARD_SLASH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Port_numberContext extends ParserRuleContext {
		public Token port;
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Port_numberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_port_number; }
	}

	public final Port_numberContext port_number() throws RecognitionException {
		Port_numberContext _localctx = new Port_numberContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_port_number);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7150);
			((Port_numberContext)_localctx).port = match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HostContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public HostContext host() {
			return getRuleContext(HostContext.class,0);
		}
		public HostContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_host; }
	}

	public final HostContext host() throws RecognitionException {
		HostContext _localctx = new HostContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_host);
		try {
			setState(7162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,946,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7152);
				id();
				setState(7153);
				match(DOT);
				setState(7154);
				host();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7160);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,945,_ctx) ) {
				case 1:
					{
					setState(7156);
					id();
					setState(7157);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(7159);
					id();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_correlation_optimization_optionContext extends ParserRuleContext {
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_correlation_optimization_option; }
	}

	public final Date_correlation_optimization_optionContext date_correlation_optimization_option() throws RecognitionException {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_date_correlation_optimization_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7164);
			match(DATE_CORRELATION_OPTIMIZATION);
			setState(7165);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_encryption_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_encryption_option; }
	}

	public final Db_encryption_optionContext db_encryption_option() throws RecognitionException {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_db_encryption_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7167);
			match(ENCRYPTION);
			setState(7168);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_state_optionContext extends ParserRuleContext {
		public TerminalNode ONLINE() { return getToken(TSqlParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode EMERGENCY() { return getToken(TSqlParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_state_option; }
	}

	public final Db_state_optionContext db_state_option() throws RecognitionException {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_db_state_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7170);
			_la = _input.LA(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_update_optionContext extends ParserRuleContext {
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_update_option; }
	}

	public final Db_update_optionContext db_update_option() throws RecognitionException {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_db_update_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7172);
			_la = _input.LA(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_user_access_optionContext extends ParserRuleContext {
		public TerminalNode SINGLE_USER() { return getToken(TSqlParser.SINGLE_USER, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(TSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode MULTI_USER() { return getToken(TSqlParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_user_access_option; }
	}

	public final Db_user_access_optionContext db_user_access_option() throws RecognitionException {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_db_user_access_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7174);
			_la = _input.LA(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delayed_durability_optionContext extends ParserRuleContext {
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DISABLED() { return getToken(TSqlParser.DISABLED, 0); }
		public TerminalNode ALLOWED() { return getToken(TSqlParser.ALLOWED, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delayed_durability_option; }
	}

	public final Delayed_durability_optionContext delayed_durability_option() throws RecognitionException {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_delayed_durability_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7176);
			match(DELAYED_DURABILITY);
			setState(7177);
			match(EQUAL);
			setState(7178);
			_la = _input.LA(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_access_optionContext extends ParserRuleContext {
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_access_option; }
	}

	public final External_access_optionContext external_access_option() throws RecognitionException {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_external_access_option);
		int _la;
		try {
			setState(7205);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DB_CHAINING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7180);
				match(DB_CHAINING);
				setState(7181);
				on_off();
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 2);
				{
				setState(7182);
				match(TRUSTWORTHY);
				setState(7183);
				on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7184);
				match(DEFAULT_LANGUAGE);
				setState(7185);
				match(EQUAL);
				setState(7188);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(7186);
					id();
					}
					break;
				case STRING:
					{
					setState(7187);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7190);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(7191);
				match(EQUAL);
				setState(7194);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(7192);
					id();
					}
					break;
				case STRING:
					{
					setState(7193);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 5);
				{
				setState(7196);
				match(NESTED_TRIGGERS);
				setState(7197);
				match(EQUAL);
				setState(7198);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 6);
				{
				setState(7199);
				match(TRANSFORM_NOISE_WORDS);
				setState(7200);
				match(EQUAL);
				setState(7201);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 7);
				{
				setState(7202);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(7203);
				match(EQUAL);
				setState(7204);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hadr_optionsContext extends ParserRuleContext {
		public IdContext availability_group_name;
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(TSqlParser.RESUME, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hadr_options; }
	}

	public final Hadr_optionsContext hadr_options() throws RecognitionException {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_hadr_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7207);
			match(HADR);
			setState(7216);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
			case AVAILABILITY:
				{
				setState(7213);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AVAILABILITY:
					{
					setState(7208);
					match(AVAILABILITY);
					setState(7209);
					match(GROUP);
					setState(7210);
					match(EQUAL);
					setState(7211);
					((Hadr_optionsContext)_localctx).availability_group_name = id();
					}
					break;
				case OFF:
					{
					setState(7212);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SUSPEND:
			case RESUME:
				{
				setState(7215);
				_la = _input.LA(1);
				if ( !(_la==SUSPEND || _la==RESUME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mixed_page_allocation_optionContext extends ParserRuleContext {
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mixed_page_allocation_option; }
	}

	public final Mixed_page_allocation_optionContext mixed_page_allocation_option() throws RecognitionException {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_mixed_page_allocation_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7218);
			match(MIXED_PAGE_ALLOCATION);
			setState(7219);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameterization_optionContext extends ParserRuleContext {
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterization_option; }
	}

	public final Parameterization_optionContext parameterization_option() throws RecognitionException {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_parameterization_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7221);
			match(PARAMETERIZATION);
			setState(7222);
			_la = _input.LA(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Recovery_optionContext extends ParserRuleContext {
		public TerminalNode RECOVERY() { return getToken(TSqlParser.RECOVERY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(TSqlParser.BULK_LOGGED, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode PAGE_VERIFY() { return getToken(TSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recovery_option; }
	}

	public final Recovery_optionContext recovery_option() throws RecognitionException {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_recovery_option);
		int _la;
		try {
			setState(7230);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECOVERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7224);
				match(RECOVERY);
				setState(7225);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(7226);
				match(TORN_PAGE_DETECTION);
				setState(7227);
				on_off();
				}
				break;
			case PAGE_VERIFY:
				enterOuterAlt(_localctx, 3);
				{
				setState(7228);
				match(PAGE_VERIFY);
				setState(7229);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==TORN_PAGE_DETECTION || _la==NONE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_broker_optionContext extends ParserRuleContext {
		public TerminalNode ENABLE_BROKER() { return getToken(TSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(TSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode NEW_BROKER() { return getToken(TSqlParser.NEW_BROKER, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_broker_option; }
	}

	public final Service_broker_optionContext service_broker_option() throws RecognitionException {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_service_broker_option);
		try {
			setState(7238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_BROKER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7232);
				match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				enterOuterAlt(_localctx, 2);
				{
				setState(7233);
				match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(7234);
				match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(7235);
				match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				enterOuterAlt(_localctx, 5);
				{
				setState(7236);
				match(HONOR_BROKER_PRIORITY);
				setState(7237);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Snapshot_optionContext extends ParserRuleContext {
		public Token MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT;
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snapshot_option; }
	}

	public final Snapshot_optionContext snapshot_option() throws RecognitionException {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_snapshot_option);
		int _la;
		try {
			setState(7245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(7240);
				match(ALLOW_SNAPSHOT_ISOLATION);
				setState(7241);
				on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7242);
				match(READ_COMMITTED_SNAPSHOT);
				setState(7243);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OFF:
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(7244);
				((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
					((Snapshot_optionContext)_localctx).MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_optionContext extends ParserRuleContext {
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_option; }
	}

	public final Sql_optionContext sql_option() throws RecognitionException {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_sql_option);
		try {
			setState(7268);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANSI_NULL_DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(7247);
				match(ANSI_NULL_DEFAULT);
				setState(7248);
				on_off();
				}
				break;
			case ANSI_NULLS:
				enterOuterAlt(_localctx, 2);
				{
				setState(7249);
				match(ANSI_NULLS);
				setState(7250);
				on_off();
				}
				break;
			case ANSI_PADDING:
				enterOuterAlt(_localctx, 3);
				{
				setState(7251);
				match(ANSI_PADDING);
				setState(7252);
				on_off();
				}
				break;
			case ANSI_WARNINGS:
				enterOuterAlt(_localctx, 4);
				{
				setState(7253);
				match(ANSI_WARNINGS);
				setState(7254);
				on_off();
				}
				break;
			case ARITHABORT:
				enterOuterAlt(_localctx, 5);
				{
				setState(7255);
				match(ARITHABORT);
				setState(7256);
				on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				enterOuterAlt(_localctx, 6);
				{
				setState(7257);
				match(COMPATIBILITY_LEVEL);
				setState(7258);
				match(EQUAL);
				setState(7259);
				match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(7260);
				match(CONCAT_NULL_YIELDS_NULL);
				setState(7261);
				on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				enterOuterAlt(_localctx, 8);
				{
				setState(7262);
				match(NUMERIC_ROUNDABORT);
				setState(7263);
				on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 9);
				{
				setState(7264);
				match(QUOTED_IDENTIFIER);
				setState(7265);
				on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				enterOuterAlt(_localctx, 10);
				{
				setState(7266);
				match(RECURSIVE_TRIGGERS);
				setState(7267);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_recovery_time_optionContext extends ParserRuleContext {
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_recovery_time_option; }
	}

	public final Target_recovery_time_optionContext target_recovery_time_option() throws RecognitionException {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_target_recovery_time_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7270);
			match(TARGET_RECOVERY_TIME);
			setState(7271);
			match(EQUAL);
			setState(7272);
			match(DECIMAL);
			setState(7273);
			_la = _input.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TerminationContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode ROLLBACK() { return getToken(TSqlParser.ROLLBACK, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode IMMEDIATE() { return getToken(TSqlParser.IMMEDIATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(TSqlParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_termination; }
	}

	public final TerminationContext termination() throws RecognitionException {
		TerminationContext _localctx = new TerminationContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_termination);
		try {
			setState(7281);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7275);
				match(ROLLBACK);
				setState(7276);
				match(AFTER);
				setState(7277);
				((TerminationContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7278);
				match(ROLLBACK);
				setState(7279);
				match(IMMEDIATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7280);
				match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public List<Drop_relational_or_xml_or_spatial_indexContext> drop_relational_or_xml_or_spatial_index() {
			return getRuleContexts(Drop_relational_or_xml_or_spatial_indexContext.class);
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return getRuleContext(Drop_relational_or_xml_or_spatial_indexContext.class,i);
		}
		public List<Drop_backward_compatible_indexContext> drop_backward_compatible_index() {
			return getRuleContexts(Drop_backward_compatible_indexContext.class);
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return getRuleContext(Drop_backward_compatible_indexContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7283);
			match(DROP);
			setState(7284);
			match(INDEX);
			setState(7287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7285);
				match(IF);
				setState(7286);
				match(EXISTS);
				}
			}

			setState(7305);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,960,_ctx) ) {
			case 1:
				{
				setState(7289);
				drop_relational_or_xml_or_spatial_index();
				setState(7294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7290);
					match(COMMA);
					setState(7291);
					drop_relational_or_xml_or_spatial_index();
					}
					}
					setState(7296);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(7297);
				drop_backward_compatible_index();
				setState(7302);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7298);
					match(COMMA);
					setState(7299);
					drop_backward_compatible_index();
					}
					}
					setState(7304);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(7308);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,961,_ctx) ) {
			case 1:
				{
				setState(7307);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_relational_or_xml_or_spatial_indexContext extends ParserRuleContext {
		public IdContext index_name;
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_relational_or_xml_or_spatial_index; }
	}

	public final Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() throws RecognitionException {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7310);
			((Drop_relational_or_xml_or_spatial_indexContext)_localctx).index_name = id();
			setState(7311);
			match(ON);
			setState(7312);
			full_table_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_backward_compatible_indexContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext table_or_view_name;
		public IdContext index_name;
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_backward_compatible_index; }
	}

	public final Drop_backward_compatible_indexContext drop_backward_compatible_index() throws RecognitionException {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_drop_backward_compatible_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7317);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
			case 1:
				{
				setState(7314);
				((Drop_backward_compatible_indexContext)_localctx).owner_name = id();
				setState(7315);
				match(DOT);
				}
				break;
			}
			setState(7319);
			((Drop_backward_compatible_indexContext)_localctx).table_or_view_name = id();
			setState(7320);
			match(DOT);
			setState(7321);
			((Drop_backward_compatible_indexContext)_localctx).index_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public Token proc;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public List<Func_proc_name_schemaContext> func_proc_name_schema() {
			return getRuleContexts(Func_proc_name_schemaContext.class);
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return getRuleContext(Func_proc_name_schemaContext.class,i);
		}
		public TerminalNode PROC() { return getToken(TSqlParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(TSqlParser.PROCEDURE, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_drop_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7323);
			match(DROP);
			setState(7324);
			((Drop_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Drop_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7325);
				match(IF);
				setState(7326);
				match(EXISTS);
				}
			}

			setState(7329);
			func_proc_name_schema();
			setState(7334);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7330);
				match(COMMA);
				setState(7331);
				func_proc_name_schema();
				}
				}
				setState(7336);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7338);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,965,_ctx) ) {
			case 1:
				{
				setState(7337);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public Drop_dml_triggerContext drop_dml_trigger() {
			return getRuleContext(Drop_dml_triggerContext.class,0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return getRuleContext(Drop_ddl_triggerContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_drop_trigger);
		try {
			setState(7342);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,966,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7340);
				drop_dml_trigger();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7341);
				drop_ddl_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_dml_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Drop_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_dml_trigger; }
	}

	public final Drop_dml_triggerContext drop_dml_trigger() throws RecognitionException {
		Drop_dml_triggerContext _localctx = new Drop_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_drop_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7344);
			match(DROP);
			setState(7345);
			match(TRIGGER);
			setState(7348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7346);
				match(IF);
				setState(7347);
				match(EXISTS);
				}
			}

			setState(7350);
			simple_name();
			setState(7355);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7351);
				match(COMMA);
				setState(7352);
				simple_name();
				}
				}
				setState(7357);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7359);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,969,_ctx) ) {
			case 1:
				{
				setState(7358);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(TSqlParser.TRIGGER, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_ddl_trigger; }
	}

	public final Drop_ddl_triggerContext drop_ddl_trigger() throws RecognitionException {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_drop_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7361);
			match(DROP);
			setState(7362);
			match(TRIGGER);
			setState(7365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7363);
				match(IF);
				setState(7364);
				match(EXISTS);
				}
			}

			setState(7367);
			simple_name();
			setState(7372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7368);
				match(COMMA);
				setState(7369);
				simple_name();
				}
				}
				setState(7374);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7375);
			match(ON);
			setState(7379);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
				{
				setState(7376);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(7377);
				match(ALL);
				setState(7378);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7382);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
			case 1:
				{
				setState(7381);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(TSqlParser.FUNCTION, 0); }
		public List<Func_proc_name_schemaContext> func_proc_name_schema() {
			return getRuleContexts(Func_proc_name_schemaContext.class);
		}
		public Func_proc_name_schemaContext func_proc_name_schema(int i) {
			return getRuleContext(Func_proc_name_schemaContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_drop_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7384);
			match(DROP);
			setState(7385);
			match(FUNCTION);
			setState(7388);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7386);
				match(IF);
				setState(7387);
				match(EXISTS);
				}
			}

			setState(7390);
			func_proc_name_schema();
			setState(7395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7391);
				match(COMMA);
				setState(7392);
				func_proc_name_schema();
				}
				}
				setState(7397);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7399);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,976,_ctx) ) {
			case 1:
				{
				setState(7398);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statisticsContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<Table_nameContext> table_name() {
			return getRuleContexts(Table_nameContext.class);
		}
		public Table_nameContext table_name(int i) {
			return getRuleContext(Table_nameContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Drop_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statistics; }
	}

	public final Drop_statisticsContext drop_statistics() throws RecognitionException {
		Drop_statisticsContext _localctx = new Drop_statisticsContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_drop_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7401);
			match(DROP);
			setState(7402);
			match(STATISTICS);
			setState(7412); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7404);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7403);
					match(COMMA);
					}
				}

				setState(7409);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,978,_ctx) ) {
				case 1:
					{
					setState(7406);
					table_name();
					setState(7407);
					match(DOT);
					}
					break;
				}
				setState(7411);
				((Drop_statisticsContext)_localctx).name = id();
				}
				}
				setState(7414); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0) || _la==COMMA );
			setState(7416);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_drop_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7418);
			match(DROP);
			setState(7419);
			match(TABLE);
			setState(7422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7420);
				match(IF);
				setState(7421);
				match(EXISTS);
				}
			}

			setState(7424);
			table_name();
			setState(7426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,981,_ctx) ) {
			case 1:
				{
				setState(7425);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_viewContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public List<Simple_nameContext> simple_name() {
			return getRuleContexts(Simple_nameContext.class);
		}
		public Simple_nameContext simple_name(int i) {
			return getRuleContext(Simple_nameContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Drop_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_view; }
	}

	public final Drop_viewContext drop_view() throws RecognitionException {
		Drop_viewContext _localctx = new Drop_viewContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_drop_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7428);
			match(DROP);
			setState(7429);
			match(VIEW);
			setState(7432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7430);
				match(IF);
				setState(7431);
				match(EXISTS);
				}
			}

			setState(7434);
			simple_name();
			setState(7439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7435);
				match(COMMA);
				setState(7436);
				simple_name();
				}
				}
				setState(7441);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7443);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,984,_ctx) ) {
			case 1:
				{
				setState(7442);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7445);
			match(CREATE);
			setState(7446);
			match(TYPE);
			setState(7447);
			((Create_typeContext)_localctx).name = simple_name();
			setState(7452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7448);
				match(FROM);
				setState(7449);
				data_type();
				setState(7450);
				default_value();
				}
			}

			setState(7460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7454);
				match(AS);
				setState(7455);
				match(TABLE);
				setState(7456);
				match(LR_BRACKET);
				setState(7457);
				column_def_table_constraints();
				setState(7458);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public Simple_nameContext name;
		public TerminalNode DROP() { return getToken(TSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public Simple_nameContext simple_name() {
			return getRuleContext(Simple_nameContext.class,0);
		}
		public TerminalNode IF() { return getToken(TSqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7462);
			match(DROP);
			setState(7463);
			match(TYPE);
			setState(7466);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(7464);
				match(IF);
				setState(7465);
				match(EXISTS);
				}
			}

			setState(7468);
			((Drop_typeContext)_localctx).name = simple_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_function_limitedContext extends ParserRuleContext {
		public OpenqueryContext openquery() {
			return getRuleContext(OpenqueryContext.class,0);
		}
		public OpendatasourceContext opendatasource() {
			return getRuleContext(OpendatasourceContext.class,0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function_limited; }
	}

	public final Rowset_function_limitedContext rowset_function_limited() throws RecognitionException {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_rowset_function_limited);
		try {
			setState(7472);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENQUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7470);
				openquery();
				}
				break;
			case OPENDATASOURCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7471);
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpenqueryContext extends ParserRuleContext {
		public IdContext linked_server;
		public Token query;
		public TerminalNode OPENQUERY() { return getToken(TSqlParser.OPENQUERY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openquery; }
	}

	public final OpenqueryContext openquery() throws RecognitionException {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_openquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7474);
			match(OPENQUERY);
			setState(7475);
			match(LR_BRACKET);
			setState(7476);
			((OpenqueryContext)_localctx).linked_server = id();
			setState(7477);
			match(COMMA);
			setState(7478);
			((OpenqueryContext)_localctx).query = match(STRING);
			setState(7479);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpendatasourceContext extends ParserRuleContext {
		public Token provider;
		public Token init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public TerminalNode OPENDATASOURCE() { return getToken(TSqlParser.OPENDATASOURCE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opendatasource; }
	}

	public final OpendatasourceContext opendatasource() throws RecognitionException {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_opendatasource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7481);
			match(OPENDATASOURCE);
			setState(7482);
			match(LR_BRACKET);
			setState(7483);
			((OpendatasourceContext)_localctx).provider = match(STRING);
			setState(7484);
			match(COMMA);
			setState(7485);
			((OpendatasourceContext)_localctx).init = match(STRING);
			setState(7486);
			match(RR_BRACKET);
			setState(7487);
			match(DOT);
			setState(7489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
				{
				setState(7488);
				((OpendatasourceContext)_localctx).database = id();
				}
			}

			setState(7491);
			match(DOT);
			setState(7493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
				{
				setState(7492);
				((OpendatasourceContext)_localctx).scheme = id();
				}
			}

			setState(7495);
			match(DOT);
			{
			setState(7496);
			((OpendatasourceContext)_localctx).table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_statementContext extends ParserRuleContext {
		public Declare_localContext declare_local;
		public List<Declare_localContext> loc = new ArrayList<Declare_localContext>();
		public Xml_declarationContext xml_declaration;
		public List<Xml_declarationContext> xml_dec = new ArrayList<Xml_declarationContext>();
		public TerminalNode DECLARE() { return getToken(TSqlParser.DECLARE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public List<Declare_localContext> declare_local() {
			return getRuleContexts(Declare_localContext.class);
		}
		public Declare_localContext declare_local(int i) {
			return getRuleContext(Declare_localContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return getRuleContext(Xml_type_definitionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<Xml_declarationContext> xml_declaration() {
			return getRuleContexts(Xml_declarationContext.class);
		}
		public Xml_declarationContext xml_declaration(int i) {
			return getRuleContext(Xml_declarationContext.class,i);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_statement; }
	}

	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_declare_statement);
		int _la;
		try {
			setState(7543);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,999,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7498);
				match(DECLARE);
				setState(7499);
				match(LOCAL_ID);
				setState(7501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7500);
					match(AS);
					}
				}

				setState(7503);
				table_type_definition();
				setState(7505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,992,_ctx) ) {
				case 1:
					{
					setState(7504);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7507);
				match(DECLARE);
				setState(7508);
				((Declare_statementContext)_localctx).declare_local = declare_local();
				((Declare_statementContext)_localctx).loc.add(((Declare_statementContext)_localctx).declare_local);
				setState(7513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7509);
					match(COMMA);
					setState(7510);
					((Declare_statementContext)_localctx).declare_local = declare_local();
					((Declare_statementContext)_localctx).loc.add(((Declare_statementContext)_localctx).declare_local);
					}
					}
					setState(7515);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7517);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,994,_ctx) ) {
				case 1:
					{
					setState(7516);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7519);
				match(DECLARE);
				setState(7520);
				match(LOCAL_ID);
				setState(7522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(7521);
					match(AS);
					}
				}

				setState(7524);
				xml_type_definition();
				setState(7526);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,996,_ctx) ) {
				case 1:
					{
					setState(7525);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7528);
				match(WITH);
				setState(7529);
				match(XMLNAMESPACES);
				setState(7530);
				match(LR_BRACKET);
				setState(7531);
				((Declare_statementContext)_localctx).xml_declaration = xml_declaration();
				((Declare_statementContext)_localctx).xml_dec.add(((Declare_statementContext)_localctx).xml_declaration);
				setState(7536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7532);
					match(COMMA);
					setState(7533);
					((Declare_statementContext)_localctx).xml_declaration = xml_declaration();
					((Declare_statementContext)_localctx).xml_dec.add(((Declare_statementContext)_localctx).xml_declaration);
					}
					}
					setState(7538);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7539);
				match(RR_BRACKET);
				setState(7541);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,998,_ctx) ) {
				case 1:
					{
					setState(7540);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_declarationContext extends ParserRuleContext {
		public Token xml_namespace_uri;
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Xml_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_declaration; }
	}

	public final Xml_declarationContext xml_declaration() throws RecognitionException {
		Xml_declarationContext _localctx = new Xml_declarationContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_xml_declaration);
		try {
			setState(7550);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				enterOuterAlt(_localctx, 1);
				{
				setState(7545);
				((Xml_declarationContext)_localctx).xml_namespace_uri = match(STRING);
				setState(7546);
				match(AS);
				setState(7547);
				id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7548);
				match(DEFAULT);
				setState(7549);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(TSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode DEALLOCATE() { return getToken(TSqlParser.DEALLOCATE, 0); }
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public Declare_cursorContext declare_cursor() {
			return getRuleContext(Declare_cursorContext.class,0);
		}
		public Fetch_cursorContext fetch_cursor() {
			return getRuleContext(Fetch_cursorContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(TSqlParser.OPEN, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_statement; }
	}

	public final Cursor_statementContext cursor_statement() throws RecognitionException {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_cursor_statement);
		int _la;
		try {
			setState(7581);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7552);
				match(CLOSE);
				setState(7554);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
				case 1:
					{
					setState(7553);
					match(GLOBAL);
					}
					break;
				}
				setState(7556);
				cursor_name();
				setState(7558);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1002,_ctx) ) {
				case 1:
					{
					setState(7557);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DEALLOCATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7560);
				match(DEALLOCATE);
				setState(7562);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1003,_ctx) ) {
				case 1:
					{
					setState(7561);
					match(GLOBAL);
					}
					break;
				}
				setState(7565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CURSOR) {
					{
					setState(7564);
					match(CURSOR);
					}
				}

				setState(7567);
				cursor_name();
				setState(7569);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1005,_ctx) ) {
				case 1:
					{
					setState(7568);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7571);
				declare_cursor();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(7572);
				fetch_cursor();
				}
				break;
			case OPEN:
				enterOuterAlt(_localctx, 5);
				{
				setState(7573);
				match(OPEN);
				setState(7575);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
				case 1:
					{
					setState(7574);
					match(GLOBAL);
					}
					break;
				}
				setState(7577);
				cursor_name();
				setState(7579);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
				case 1:
					{
					setState(7578);
					match(SEMI);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_databaseContext extends ParserRuleContext {
		public IdContext database_name;
		public Token file_or_filegroup;
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public Token medianame;
		public Token stats_percent;
		public IdContext encryptor_name;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode READ_WRITE_FILEGROUPS() { return getToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSqlParser.FILE, i);
		}
		public List<TerminalNode> FILEGROUP() { return getTokens(TSqlParser.FILEGROUP); }
		public TerminalNode FILEGROUP(int i) {
			return getToken(TSqlParser.FILEGROUP, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> DISK() { return getTokens(TSqlParser.DISK); }
		public TerminalNode DISK(int i) {
			return getToken(TSqlParser.DISK, i);
		}
		public List<TerminalNode> TAPE() { return getTokens(TSqlParser.TAPE); }
		public TerminalNode TAPE(int i) {
			return getToken(TSqlParser.TAPE, i);
		}
		public List<TerminalNode> URL() { return getTokens(TSqlParser.URL); }
		public TerminalNode URL(int i) {
			return getToken(TSqlParser.URL, i);
		}
		public List<TerminalNode> MIRROR() { return getTokens(TSqlParser.MIRROR); }
		public TerminalNode MIRROR(int i) {
			return getToken(TSqlParser.MIRROR, i);
		}
		public List<TerminalNode> DIFFERENTIAL() { return getTokens(TSqlParser.DIFFERENTIAL); }
		public TerminalNode DIFFERENTIAL(int i) {
			return getToken(TSqlParser.DIFFERENTIAL, i);
		}
		public List<TerminalNode> COPY_ONLY() { return getTokens(TSqlParser.COPY_ONLY); }
		public TerminalNode COPY_ONLY(int i) {
			return getToken(TSqlParser.COPY_ONLY, i);
		}
		public List<TerminalNode> DESCRIPTION() { return getTokens(TSqlParser.DESCRIPTION); }
		public TerminalNode DESCRIPTION(int i) {
			return getToken(TSqlParser.DESCRIPTION, i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> FILE_SNAPSHOT() { return getTokens(TSqlParser.FILE_SNAPSHOT); }
		public TerminalNode FILE_SNAPSHOT(int i) {
			return getToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public List<TerminalNode> MEDIADESCRIPTION() { return getTokens(TSqlParser.MEDIADESCRIPTION); }
		public TerminalNode MEDIADESCRIPTION(int i) {
			return getToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public List<TerminalNode> MEDIANAME() { return getTokens(TSqlParser.MEDIANAME); }
		public TerminalNode MEDIANAME(int i) {
			return getToken(TSqlParser.MEDIANAME, i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(TSqlParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(TSqlParser.BLOCKSIZE, i);
		}
		public List<TerminalNode> BUFFERCOUNT() { return getTokens(TSqlParser.BUFFERCOUNT); }
		public TerminalNode BUFFERCOUNT(int i) {
			return getToken(TSqlParser.BUFFERCOUNT, i);
		}
		public List<TerminalNode> MAXTRANSFER() { return getTokens(TSqlParser.MAXTRANSFER); }
		public TerminalNode MAXTRANSFER(int i) {
			return getToken(TSqlParser.MAXTRANSFER, i);
		}
		public List<TerminalNode> RESTART() { return getTokens(TSqlParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(TSqlParser.RESTART, i);
		}
		public List<TerminalNode> STATS() { return getTokens(TSqlParser.STATS); }
		public TerminalNode STATS(int i) {
			return getToken(TSqlParser.STATS, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> COMPRESSION() { return getTokens(TSqlParser.COMPRESSION); }
		public TerminalNode COMPRESSION(int i) {
			return getToken(TSqlParser.COMPRESSION, i);
		}
		public List<TerminalNode> NO_COMPRESSION() { return getTokens(TSqlParser.NO_COMPRESSION); }
		public TerminalNode NO_COMPRESSION(int i) {
			return getToken(TSqlParser.NO_COMPRESSION, i);
		}
		public List<TerminalNode> NOINIT() { return getTokens(TSqlParser.NOINIT); }
		public TerminalNode NOINIT(int i) {
			return getToken(TSqlParser.NOINIT, i);
		}
		public List<TerminalNode> INIT() { return getTokens(TSqlParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(TSqlParser.INIT, i);
		}
		public List<TerminalNode> NOSKIP() { return getTokens(TSqlParser.NOSKIP); }
		public TerminalNode NOSKIP(int i) {
			return getToken(TSqlParser.NOSKIP, i);
		}
		public List<TerminalNode> SKIP_KEYWORD() { return getTokens(TSqlParser.SKIP_KEYWORD); }
		public TerminalNode SKIP_KEYWORD(int i) {
			return getToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public List<TerminalNode> NOFORMAT() { return getTokens(TSqlParser.NOFORMAT); }
		public TerminalNode NOFORMAT(int i) {
			return getToken(TSqlParser.NOFORMAT, i);
		}
		public List<TerminalNode> FORMAT() { return getTokens(TSqlParser.FORMAT); }
		public TerminalNode FORMAT(int i) {
			return getToken(TSqlParser.FORMAT, i);
		}
		public List<TerminalNode> NO_CHECKSUM() { return getTokens(TSqlParser.NO_CHECKSUM); }
		public TerminalNode NO_CHECKSUM(int i) {
			return getToken(TSqlParser.NO_CHECKSUM, i);
		}
		public List<TerminalNode> CHECKSUM() { return getTokens(TSqlParser.CHECKSUM); }
		public TerminalNode CHECKSUM(int i) {
			return getToken(TSqlParser.CHECKSUM, i);
		}
		public List<TerminalNode> STOP_ON_ERROR() { return getTokens(TSqlParser.STOP_ON_ERROR); }
		public TerminalNode STOP_ON_ERROR(int i) {
			return getToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public List<TerminalNode> CONTINUE_AFTER_ERROR() { return getTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public TerminalNode CONTINUE_AFTER_ERROR(int i) {
			return getToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(TSqlParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(TSqlParser.REWIND, i);
		}
		public List<TerminalNode> NOREWIND() { return getTokens(TSqlParser.NOREWIND); }
		public TerminalNode NOREWIND(int i) {
			return getToken(TSqlParser.NOREWIND, i);
		}
		public List<TerminalNode> LOAD() { return getTokens(TSqlParser.LOAD); }
		public TerminalNode LOAD(int i) {
			return getToken(TSqlParser.LOAD, i);
		}
		public List<TerminalNode> NOUNLOAD() { return getTokens(TSqlParser.NOUNLOAD); }
		public TerminalNode NOUNLOAD(int i) {
			return getToken(TSqlParser.NOUNLOAD, i);
		}
		public List<TerminalNode> AES_128() { return getTokens(TSqlParser.AES_128); }
		public TerminalNode AES_128(int i) {
			return getToken(TSqlParser.AES_128, i);
		}
		public List<TerminalNode> AES_192() { return getTokens(TSqlParser.AES_192); }
		public TerminalNode AES_192(int i) {
			return getToken(TSqlParser.AES_192, i);
		}
		public List<TerminalNode> AES_256() { return getTokens(TSqlParser.AES_256); }
		public TerminalNode AES_256(int i) {
			return getToken(TSqlParser.AES_256, i);
		}
		public List<TerminalNode> TRIPLE_DES_3KEY() { return getTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public TerminalNode TRIPLE_DES_3KEY(int i) {
			return getToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public List<TerminalNode> EXPIREDATE() { return getTokens(TSqlParser.EXPIREDATE); }
		public TerminalNode EXPIREDATE(int i) {
			return getToken(TSqlParser.EXPIREDATE, i);
		}
		public List<TerminalNode> RETAINDAYS() { return getTokens(TSqlParser.RETAINDAYS); }
		public TerminalNode RETAINDAYS(int i) {
			return getToken(TSqlParser.RETAINDAYS, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_database; }
	}

	public final Backup_databaseContext backup_database() throws RecognitionException {
		Backup_databaseContext _localctx = new Backup_databaseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_backup_database);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7583);
			match(BACKUP);
			setState(7584);
			match(DATABASE);
			{
			setState(7585);
			((Backup_databaseContext)_localctx).database_name = id();
			}
			setState(7598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ_WRITE_FILEGROUPS) {
				{
				setState(7586);
				match(READ_WRITE_FILEGROUPS);
				setState(7595);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1010,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7588);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7587);
							match(COMMA);
							}
						}

						setState(7590);
						_la = _input.LA(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7591);
						match(EQUAL);
						setState(7592);
						((Backup_databaseContext)_localctx).file_or_filegroup = match(STRING);
						}
						} 
					}
					setState(7597);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1010,_ctx);
				}
				}
			}

			setState(7608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FILE || _la==FILEGROUP || _la==COMMA) {
				{
				{
				setState(7601);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7600);
					match(COMMA);
					}
				}

				setState(7603);
				_la = _input.LA(1);
				if ( !(_la==FILE || _la==FILEGROUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7604);
				match(EQUAL);
				setState(7605);
				((Backup_databaseContext)_localctx).file_or_filegroup = match(STRING);
				}
				}
				setState(7610);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1019,_ctx) ) {
			case 1:
				{
				setState(7611);
				match(TO);
				setState(7616); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7613);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7612);
							match(COMMA);
							}
						}

						setState(7615);
						((Backup_databaseContext)_localctx).logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7618); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1015,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7620);
				match(TO);
				setState(7630); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7622);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7621);
							match(COMMA);
							}
						}

						setState(7624);
						_la = _input.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7625);
						match(EQUAL);
						setState(7628);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(7626);
							match(STRING);
							}
							break;
						case OPENJSON:
						case PRECISION:
						case ABSOLUTE:
						case AT_KEYWORD:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_KEYWORD:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case TRY_CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CUME_DIST:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO_BATCH:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARBINARY_KEYWORD:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case ZONE:
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DTC_SUPPORT:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IIF:
						case IO:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case ISNULL:
						case KERBEROS:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERSISTED:
						case PLATFORM:
						case POLICY:
						case PREDICATE:
						case PROCESS:
						case PROFILE:
						case PYTHON:
						case R:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESUME:
						case RETAINDAYS:
						case RETURNS:
						case REWIND:
						case ROLE:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHOUT:
						case WITNESS:
						case VARCHAR:
						case NVARCHAR:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7627);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7632); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1018,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(7669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
			case 1:
				{
				setState(7646); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7636);
						match(MIRROR);
						setState(7637);
						match(TO);
						setState(7642); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(7639);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(7638);
									match(COMMA);
									}
								}

								setState(7641);
								((Backup_databaseContext)_localctx).logical_device_name = id();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(7644); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,1021,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7648); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1022,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7665); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7650);
						match(MIRROR);
						setState(7651);
						match(TO);
						setState(7661); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(7653);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(7652);
									match(COMMA);
									}
								}

								setState(7655);
								_la = _input.LA(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								setState(7656);
								match(EQUAL);
								setState(7659);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(7657);
									match(STRING);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7658);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(7663); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,1025,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7667); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1026,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(7831);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1063,_ctx) ) {
			case 1:
				{
				setState(7671);
				match(WITH);
				setState(7828);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1062,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(7826);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1061,_ctx) ) {
						case 1:
							{
							setState(7673);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7672);
								match(COMMA);
								}
							}

							setState(7675);
							match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							setState(7677);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7676);
								match(COMMA);
								}
							}

							setState(7679);
							match(COPY_ONLY);
							}
							break;
						case 3:
							{
							setState(7681);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7680);
								match(COMMA);
								}
							}

							setState(7683);
							_la = _input.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(7685);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7684);
								match(COMMA);
								}
							}

							setState(7687);
							match(DESCRIPTION);
							setState(7688);
							match(EQUAL);
							setState(7691);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7689);
								match(STRING);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7690);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							setState(7694);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7693);
								match(COMMA);
								}
							}

							setState(7696);
							match(NAME);
							setState(7697);
							match(EQUAL);
							setState(7698);
							((Backup_databaseContext)_localctx).backup_set_name = id();
							}
							break;
						case 6:
							{
							setState(7700);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7699);
								match(COMMA);
								}
							}

							setState(7702);
							match(CREDENTIAL);
							}
							break;
						case 7:
							{
							setState(7704);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7703);
								match(COMMA);
								}
							}

							setState(7706);
							match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							setState(7708);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7707);
								match(COMMA);
								}
							}

							setState(7722);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case EXPIREDATE:
								{
								setState(7710);
								match(EXPIREDATE);
								setState(7711);
								match(EQUAL);
								setState(7714);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(7712);
									match(STRING);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7713);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								setState(7716);
								match(RETAINDAYS);
								setState(7717);
								match(EQUAL);
								setState(7720);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(7718);
									match(DECIMAL);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7719);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							setState(7725);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7724);
								match(COMMA);
								}
							}

							setState(7727);
							_la = _input.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 10:
							{
							setState(7729);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7728);
								match(COMMA);
								}
							}

							setState(7731);
							_la = _input.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 11:
							{
							setState(7733);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7732);
								match(COMMA);
								}
							}

							setState(7735);
							_la = _input.LA(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 12:
							{
							setState(7737);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7736);
								match(COMMA);
								}
							}

							setState(7739);
							match(MEDIADESCRIPTION);
							setState(7740);
							match(EQUAL);
							setState(7743);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7741);
								match(STRING);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7742);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							setState(7746);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7745);
								match(COMMA);
								}
							}

							setState(7748);
							match(MEDIANAME);
							setState(7749);
							match(EQUAL);
							{
							setState(7750);
							((Backup_databaseContext)_localctx).medianame = match(STRING);
							}
							}
							break;
						case 14:
							{
							setState(7752);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7751);
								match(COMMA);
								}
							}

							setState(7754);
							match(BLOCKSIZE);
							setState(7755);
							match(EQUAL);
							setState(7758);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7756);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7757);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							setState(7761);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7760);
								match(COMMA);
								}
							}

							setState(7763);
							match(BUFFERCOUNT);
							setState(7764);
							match(EQUAL);
							setState(7767);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7765);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7766);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							setState(7770);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7769);
								match(COMMA);
								}
							}

							setState(7772);
							match(MAXTRANSFER);
							setState(7773);
							match(EQUAL);
							setState(7776);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7774);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7775);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							setState(7779);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7778);
								match(COMMA);
								}
							}

							setState(7781);
							_la = _input.LA(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 18:
							{
							setState(7783);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7782);
								match(COMMA);
								}
							}

							setState(7785);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 19:
							{
							setState(7787);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7786);
								match(COMMA);
								}
							}

							setState(7789);
							match(RESTART);
							}
							break;
						case 20:
							{
							setState(7791);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7790);
								match(COMMA);
								}
							}

							setState(7793);
							match(STATS);
							setState(7796);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==EQUAL) {
								{
								setState(7794);
								match(EQUAL);
								setState(7795);
								((Backup_databaseContext)_localctx).stats_percent = match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							setState(7799);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7798);
								match(COMMA);
								}
							}

							setState(7801);
							_la = _input.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 22:
							{
							setState(7803);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7802);
								match(COMMA);
								}
							}

							setState(7805);
							_la = _input.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 23:
							{
							setState(7807);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7806);
								match(COMMA);
								}
							}

							setState(7809);
							match(ENCRYPTION);
							setState(7810);
							match(LR_BRACKET);
							setState(7811);
							match(ALGORITHM);
							setState(7812);
							match(EQUAL);
							setState(7813);
							_la = _input.LA(1);
							if ( !(((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (AES_128 - 197)) | (1L << (AES_192 - 197)) | (1L << (AES_256 - 197)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(7814);
							match(COMMA);
							setState(7815);
							match(SERVER);
							setState(7816);
							match(CERTIFICATE);
							setState(7817);
							match(EQUAL);
							setState(7824);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,1060,_ctx) ) {
							case 1:
								{
								setState(7818);
								((Backup_databaseContext)_localctx).encryptor_name = id();
								}
								break;
							case 2:
								{
								setState(7819);
								match(SERVER);
								setState(7820);
								match(ASYMMETRIC);
								setState(7821);
								match(KEY);
								setState(7822);
								match(EQUAL);
								setState(7823);
								((Backup_databaseContext)_localctx).encryptor_name = id();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					setState(7830);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1062,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_logContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public Token medianame;
		public Token stats_percent;
		public Token undo_file_name;
		public IdContext encryptor_name;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public List<TerminalNode> TO() { return getTokens(TSqlParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSqlParser.TO, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> DISK() { return getTokens(TSqlParser.DISK); }
		public TerminalNode DISK(int i) {
			return getToken(TSqlParser.DISK, i);
		}
		public List<TerminalNode> TAPE() { return getTokens(TSqlParser.TAPE); }
		public TerminalNode TAPE(int i) {
			return getToken(TSqlParser.TAPE, i);
		}
		public List<TerminalNode> URL() { return getTokens(TSqlParser.URL); }
		public TerminalNode URL(int i) {
			return getToken(TSqlParser.URL, i);
		}
		public List<TerminalNode> MIRROR() { return getTokens(TSqlParser.MIRROR); }
		public TerminalNode MIRROR(int i) {
			return getToken(TSqlParser.MIRROR, i);
		}
		public List<TerminalNode> DIFFERENTIAL() { return getTokens(TSqlParser.DIFFERENTIAL); }
		public TerminalNode DIFFERENTIAL(int i) {
			return getToken(TSqlParser.DIFFERENTIAL, i);
		}
		public List<TerminalNode> COPY_ONLY() { return getTokens(TSqlParser.COPY_ONLY); }
		public TerminalNode COPY_ONLY(int i) {
			return getToken(TSqlParser.COPY_ONLY, i);
		}
		public List<TerminalNode> DESCRIPTION() { return getTokens(TSqlParser.DESCRIPTION); }
		public TerminalNode DESCRIPTION(int i) {
			return getToken(TSqlParser.DESCRIPTION, i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSqlParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSqlParser.NAME, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSqlParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSqlParser.CREDENTIAL, i);
		}
		public List<TerminalNode> FILE_SNAPSHOT() { return getTokens(TSqlParser.FILE_SNAPSHOT); }
		public TerminalNode FILE_SNAPSHOT(int i) {
			return getToken(TSqlParser.FILE_SNAPSHOT, i);
		}
		public List<TerminalNode> MEDIADESCRIPTION() { return getTokens(TSqlParser.MEDIADESCRIPTION); }
		public TerminalNode MEDIADESCRIPTION(int i) {
			return getToken(TSqlParser.MEDIADESCRIPTION, i);
		}
		public List<TerminalNode> MEDIANAME() { return getTokens(TSqlParser.MEDIANAME); }
		public TerminalNode MEDIANAME(int i) {
			return getToken(TSqlParser.MEDIANAME, i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(TSqlParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(TSqlParser.BLOCKSIZE, i);
		}
		public List<TerminalNode> BUFFERCOUNT() { return getTokens(TSqlParser.BUFFERCOUNT); }
		public TerminalNode BUFFERCOUNT(int i) {
			return getToken(TSqlParser.BUFFERCOUNT, i);
		}
		public List<TerminalNode> MAXTRANSFER() { return getTokens(TSqlParser.MAXTRANSFER); }
		public TerminalNode MAXTRANSFER(int i) {
			return getToken(TSqlParser.MAXTRANSFER, i);
		}
		public List<TerminalNode> RESTART() { return getTokens(TSqlParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(TSqlParser.RESTART, i);
		}
		public List<TerminalNode> STATS() { return getTokens(TSqlParser.STATS); }
		public TerminalNode STATS(int i) {
			return getToken(TSqlParser.STATS, i);
		}
		public List<TerminalNode> NO_TRUNCATE() { return getTokens(TSqlParser.NO_TRUNCATE); }
		public TerminalNode NO_TRUNCATE(int i) {
			return getToken(TSqlParser.NO_TRUNCATE, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSqlParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSqlParser.ALGORITHM, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> SERVER() { return getTokens(TSqlParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSqlParser.SERVER, i);
		}
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSqlParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSqlParser.CERTIFICATE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> COMPRESSION() { return getTokens(TSqlParser.COMPRESSION); }
		public TerminalNode COMPRESSION(int i) {
			return getToken(TSqlParser.COMPRESSION, i);
		}
		public List<TerminalNode> NO_COMPRESSION() { return getTokens(TSqlParser.NO_COMPRESSION); }
		public TerminalNode NO_COMPRESSION(int i) {
			return getToken(TSqlParser.NO_COMPRESSION, i);
		}
		public List<TerminalNode> NOINIT() { return getTokens(TSqlParser.NOINIT); }
		public TerminalNode NOINIT(int i) {
			return getToken(TSqlParser.NOINIT, i);
		}
		public List<TerminalNode> INIT() { return getTokens(TSqlParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(TSqlParser.INIT, i);
		}
		public List<TerminalNode> NOSKIP() { return getTokens(TSqlParser.NOSKIP); }
		public TerminalNode NOSKIP(int i) {
			return getToken(TSqlParser.NOSKIP, i);
		}
		public List<TerminalNode> SKIP_KEYWORD() { return getTokens(TSqlParser.SKIP_KEYWORD); }
		public TerminalNode SKIP_KEYWORD(int i) {
			return getToken(TSqlParser.SKIP_KEYWORD, i);
		}
		public List<TerminalNode> NOFORMAT() { return getTokens(TSqlParser.NOFORMAT); }
		public TerminalNode NOFORMAT(int i) {
			return getToken(TSqlParser.NOFORMAT, i);
		}
		public List<TerminalNode> FORMAT() { return getTokens(TSqlParser.FORMAT); }
		public TerminalNode FORMAT(int i) {
			return getToken(TSqlParser.FORMAT, i);
		}
		public List<TerminalNode> NO_CHECKSUM() { return getTokens(TSqlParser.NO_CHECKSUM); }
		public TerminalNode NO_CHECKSUM(int i) {
			return getToken(TSqlParser.NO_CHECKSUM, i);
		}
		public List<TerminalNode> CHECKSUM() { return getTokens(TSqlParser.CHECKSUM); }
		public TerminalNode CHECKSUM(int i) {
			return getToken(TSqlParser.CHECKSUM, i);
		}
		public List<TerminalNode> STOP_ON_ERROR() { return getTokens(TSqlParser.STOP_ON_ERROR); }
		public TerminalNode STOP_ON_ERROR(int i) {
			return getToken(TSqlParser.STOP_ON_ERROR, i);
		}
		public List<TerminalNode> CONTINUE_AFTER_ERROR() { return getTokens(TSqlParser.CONTINUE_AFTER_ERROR); }
		public TerminalNode CONTINUE_AFTER_ERROR(int i) {
			return getToken(TSqlParser.CONTINUE_AFTER_ERROR, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(TSqlParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(TSqlParser.REWIND, i);
		}
		public List<TerminalNode> NOREWIND() { return getTokens(TSqlParser.NOREWIND); }
		public TerminalNode NOREWIND(int i) {
			return getToken(TSqlParser.NOREWIND, i);
		}
		public List<TerminalNode> LOAD() { return getTokens(TSqlParser.LOAD); }
		public TerminalNode LOAD(int i) {
			return getToken(TSqlParser.LOAD, i);
		}
		public List<TerminalNode> NOUNLOAD() { return getTokens(TSqlParser.NOUNLOAD); }
		public TerminalNode NOUNLOAD(int i) {
			return getToken(TSqlParser.NOUNLOAD, i);
		}
		public List<TerminalNode> AES_128() { return getTokens(TSqlParser.AES_128); }
		public TerminalNode AES_128(int i) {
			return getToken(TSqlParser.AES_128, i);
		}
		public List<TerminalNode> AES_192() { return getTokens(TSqlParser.AES_192); }
		public TerminalNode AES_192(int i) {
			return getToken(TSqlParser.AES_192, i);
		}
		public List<TerminalNode> AES_256() { return getTokens(TSqlParser.AES_256); }
		public TerminalNode AES_256(int i) {
			return getToken(TSqlParser.AES_256, i);
		}
		public List<TerminalNode> TRIPLE_DES_3KEY() { return getTokens(TSqlParser.TRIPLE_DES_3KEY); }
		public TerminalNode TRIPLE_DES_3KEY(int i) {
			return getToken(TSqlParser.TRIPLE_DES_3KEY, i);
		}
		public List<TerminalNode> EXPIREDATE() { return getTokens(TSqlParser.EXPIREDATE); }
		public TerminalNode EXPIREDATE(int i) {
			return getToken(TSqlParser.EXPIREDATE, i);
		}
		public List<TerminalNode> RETAINDAYS() { return getTokens(TSqlParser.RETAINDAYS); }
		public TerminalNode RETAINDAYS(int i) {
			return getToken(TSqlParser.RETAINDAYS, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public List<TerminalNode> NORECOVERY() { return getTokens(TSqlParser.NORECOVERY); }
		public TerminalNode NORECOVERY(int i) {
			return getToken(TSqlParser.NORECOVERY, i);
		}
		public List<TerminalNode> STANDBY() { return getTokens(TSqlParser.STANDBY); }
		public TerminalNode STANDBY(int i) {
			return getToken(TSqlParser.STANDBY, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSqlParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSqlParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSqlParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSqlParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_log; }
	}

	public final Backup_logContext backup_log() throws RecognitionException {
		Backup_logContext _localctx = new Backup_logContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_backup_log);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7833);
			match(BACKUP);
			setState(7834);
			match(LOG);
			{
			setState(7835);
			((Backup_logContext)_localctx).database_name = id();
			}
			setState(7859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1069,_ctx) ) {
			case 1:
				{
				setState(7836);
				match(TO);
				setState(7841); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7838);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7837);
							match(COMMA);
							}
						}

						setState(7840);
						((Backup_logContext)_localctx).logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7843); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1065,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7845);
				match(TO);
				setState(7855); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7847);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7846);
							match(COMMA);
							}
						}

						setState(7849);
						_la = _input.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7850);
						match(EQUAL);
						setState(7853);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(7851);
							match(STRING);
							}
							break;
						case OPENJSON:
						case PRECISION:
						case ABSOLUTE:
						case AT_KEYWORD:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPLICATION_LOG:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case AUDIT:
						case AUDIT_GUID:
						case AUTO:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AVAILABILITY:
						case AVG:
						case BACKUP_PRIORITY:
						case BEGIN_DIALOG:
						case BIGINT:
						case BINARY_KEYWORD:
						case BINARY_BASE64:
						case BINARY_CHECKSUM:
						case BINDING:
						case BLOB_STORAGE:
						case BROKER:
						case BROKER_INSTANCE:
						case BULK_LOGGED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case TRY_CAST:
						case CATALOG:
						case CATCH:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHECKSUM:
						case CHECKSUM_AGG:
						case CLEANUP:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case CONCAT:
						case CONCAT_NULL_YIELDS_NULL:
						case CONTENT:
						case CONTROL:
						case COOKIE:
						case COUNT:
						case COUNT_BIG:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CUME_DIST:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case DATA:
						case DATE_CORRELATION_OPTIMIZATION:
						case DATEADD:
						case DATEDIFF:
						case DATENAME:
						case DATEPART:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DOUBLE_QUOTE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DELAY:
						case DELAYED_DURABILITY:
						case DELETED:
						case DENSE_RANK:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIALOG:
						case DIRECTORY_NAME:
						case DISABLE:
						case DISABLE_BROKER:
						case DISABLED:
						case DISK_DRIVE:
						case DOCUMENT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE:
						case ENABLE_BROKER:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ERROR_BROKER_CONVERSATIONS:
						case EXCLUSIVE:
						case EXECUTABLE:
						case EXIST:
						case EXPAND:
						case EXPIRY_DATE:
						case EXPLICIT:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILURE:
						case FAILURE_CONDITION_LEVEL:
						case FAST:
						case FAST_FORWARD:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FIRST_VALUE:
						case FOLLOWING:
						case FORCE:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCED:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GETDATE:
						case GETUTCDATE:
						case GLOBAL:
						case GO_BATCH:
						case GO:
						case GROUP_MAX_REQUESTS:
						case GROUPING:
						case GROUPING_ID:
						case HADR:
						case HASH:
						case HEALTH_CHECK_TIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCREMENTAL:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSERTED:
						case INT:
						case IP:
						case ISOLATION:
						case JOB:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KEY_SOURCE:
						case KEYS:
						case KEYSET:
						case LAG:
						case LAST:
						case LAST_VALUE:
						case LEAD:
						case LEVEL:
						case LIST:
						case LISTENER:
						case LISTENER_URL:
						case LOB_COMPACTION:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCK_ESCALATION:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MATERIALIZED:
						case MAX:
						case MAX_CPU_PERCENT:
						case MAX_DOP:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MB:
						case MEDIUM:
						case MEMORY_OPTIMIZED_DATA:
						case MESSAGE:
						case MIN:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MIRROR_ADDRESS:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case NAME:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEXT:
						case NO:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NOCOUNT:
						case NODES:
						case NOEXPAND:
						case NON_TRANSACTED_ACCESS:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOWAIT:
						case NTILE:
						case NUMANODE:
						case NUMBER:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OVERRIDE:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PATH:
						case PERCENT_RANK:
						case PERCENTILE_CONT:
						case PERCENTILE_DISC:
						case POISON_MESSAGE_HANDLING:
						case POOL:
						case PORT:
						case PRECEDING:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY:
						case PRIORITY_LEVEL:
						case PRIVATE:
						case PRIVATE_KEY:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROPERTY:
						case PROVIDER:
						case PROVIDER_KEY_NAME:
						case QUERY:
						case QUEUE:
						case QUEUE_DELAY:
						case QUOTED_IDENTIFIER:
						case RANGE:
						case RANK:
						case RC2:
						case RC4:
						case RC4_128:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY:
						case READ_ONLY_ROUTING_LIST:
						case READ_WRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case RELATIVE:
						case REMOTE:
						case REMOTE_SERVICE_NAME:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case RESERVE_DISK_SPACE:
						case RESOURCE:
						case RESOURCE_MANAGER_LOCATION:
						case RESTRICTED_USER:
						case RETENTION:
						case ROBUST:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROW_NUMBER:
						case ROWGUID:
						case ROWS:
						case SAMPLE:
						case SCHEMABINDING:
						case SCOPED:
						case SCROLL:
						case SCROLL_LOCKS:
						case SEARCH:
						case SECONDARY:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDS:
						case SECRET:
						case SECURITY:
						case SECURITY_LOG:
						case SEEDING_MODE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SESSION_TIMEOUT:
						case SETERROR:
						case SHARE:
						case SHOWPLAN:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SIZE:
						case SMALLINT:
						case SNAPSHOT:
						case SPATIAL_WINDOW_MAX_CELLS:
						case STANDBY:
						case START_DATE:
						case STATIC:
						case STATS_STREAM:
						case STATUS:
						case STATUSONLY:
						case STDEV:
						case STDEVP:
						case STOPLIST:
						case STRING_AGG:
						case STUFF:
						case SUBJECT:
						case SUBSCRIPTION:
						case SUM:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TARGET_RECOVERY_TIME:
						case TB:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TINYINT:
						case TORN_PAGE_DETECTION:
						case TRANSFORM_NOISE_WORDS:
						case TRIPLE_DES:
						case TRIPLE_DES_3KEY:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE:
						case TYPE_WARNING:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNKNOWN:
						case UNLIMITED:
						case UOW:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VAR:
						case VARBINARY_KEYWORD:
						case VARP:
						case VIEW_METADATA:
						case VIEWS:
						case WAIT:
						case WELL_FORMED_XML:
						case WITHOUT_ARRAY_WRAPPER:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XSINIL:
						case ZONE:
						case ABSENT:
						case AES:
						case ALLOW_CONNECTIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ANONYMOUS:
						case APPEND:
						case APPLICATION:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUTHENTICATION:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case BEFORE:
						case BLOCK:
						case BLOCKSIZE:
						case BLOCKING_HIERARCHY:
						case BUFFER:
						case BUFFERCOUNT:
						case CACHE:
						case CALLED:
						case CERTIFICATE:
						case CHANGETABLE:
						case CHANGES:
						case CHECK_POLICY:
						case CHECK_EXPIRATION:
						case CLASSIFIER_FUNCTION:
						case CLUSTER:
						case COMPRESSION:
						case CONFIGURATION:
						case CONTAINMENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT:
						case CONTRACT_NAME:
						case CONVERSATION:
						case COPY_ONLY:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATABASE_MIRRORING:
						case DEFAULT_DATABASE:
						case DEFAULT_SCHEMA:
						case DIAGNOSTICS:
						case DIFFERENTIAL:
						case DTC_SUPPORT:
						case ENABLED:
						case ENDPOINT:
						case ERROR:
						case EVENT:
						case EVENTDATA:
						case EVENT_RETENTION_MODE:
						case EXECUTABLE_FILE:
						case EXPIREDATE:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAILOVER:
						case FAILURECONDITIONLEVEL:
						case FAN_IN:
						case FILE_SNAPSHOT:
						case FORCESEEK:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case GET:
						case GOVERNOR:
						case HASHED:
						case HEALTHCHECKTIMEOUT:
						case IIF:
						case IO:
						case INCLUDE:
						case INCREMENT:
						case INFINITE:
						case INIT:
						case INSTEAD:
						case ISNULL:
						case KERBEROS:
						case KEY_PATH:
						case KEY_STORE_PROVIDER_NAME:
						case LANGUAGE:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LOCAL_SERVICE_NAME:
						case LOG:
						case MATCHED:
						case MASTER:
						case MAX_MEMORY:
						case MAXTRANSFER:
						case MAXVALUE:
						case MAX_DISPATCH_LATENCY:
						case MAX_EVENT_SIZE:
						case MAX_SIZE:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEMBER:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARDING:
						case MESSAGE_FORWARD_SIZE:
						case MINVALUE:
						case MIRROR:
						case MUST_CHANGE:
						case NOFORMAT:
						case NOINIT:
						case NONE:
						case NOREWIND:
						case NOSKIP:
						case NOUNLOAD:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NOTIFICATION:
						case NTLM:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case PAGE:
						case PARAM_NODE:
						case PARTIAL:
						case PASSWORD:
						case PERMISSION_SET:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERSISTED:
						case PLATFORM:
						case POLICY:
						case PREDICATE:
						case PROCESS:
						case PROFILE:
						case PYTHON:
						case R:
						case READ_WRITE_FILEGROUPS:
						case REGENERATE:
						case RELATED_CONVERSATION:
						case RELATED_CONVERSATION_GROUP:
						case REQUIRED:
						case RESET:
						case RESTART:
						case RESUME:
						case RETAINDAYS:
						case RETURNS:
						case REWIND:
						case ROLE:
						case RSA_512:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case SAFETY:
						case SAFE:
						case SCHEDULER:
						case SCHEME:
						case SERVER:
						case SERVICE:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SESSION:
						case SID:
						case SKIP_KEYWORD:
						case SOFTNUMA:
						case SOURCE:
						case SPECIFICATION:
						case SPLIT:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STATE:
						case STATS:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STOP:
						case STOPPED:
						case STOP_ON_ERROR:
						case SUPPORTED:
						case TAPE:
						case TARGET:
						case TCP:
						case TRACK_CAUSALITY:
						case TRANSFER:
						case UNCHECKED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case VERBOSELOGGING:
						case VISIBILITY:
						case WINDOWS:
						case WITHOUT:
						case WITNESS:
						case VARCHAR:
						case NVARCHAR:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7852);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7857); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1068,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(7894);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1077,_ctx) ) {
			case 1:
				{
				setState(7871); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7861);
						match(MIRROR);
						setState(7862);
						match(TO);
						setState(7867); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(7864);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(7863);
									match(COMMA);
									}
								}

								setState(7866);
								((Backup_logContext)_localctx).logical_device_name = id();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(7869); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,1071,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7873); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1072,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(7890); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7875);
						match(MIRROR);
						setState(7876);
						match(TO);
						setState(7886); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(7878);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(7877);
									match(COMMA);
									}
								}

								setState(7880);
								_la = _input.LA(1);
								if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								setState(7881);
								match(EQUAL);
								setState(7884);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(7882);
									match(STRING);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7883);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(7888); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,1075,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7892); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1076,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			setState(8069);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1116,_ctx) ) {
			case 1:
				{
				setState(7896);
				match(WITH);
				setState(8066);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1115,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(8064);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1114,_ctx) ) {
						case 1:
							{
							setState(7898);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7897);
								match(COMMA);
								}
							}

							setState(7900);
							match(DIFFERENTIAL);
							}
							break;
						case 2:
							{
							setState(7902);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7901);
								match(COMMA);
								}
							}

							setState(7904);
							match(COPY_ONLY);
							}
							break;
						case 3:
							{
							setState(7906);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7905);
								match(COMMA);
								}
							}

							setState(7908);
							_la = _input.LA(1);
							if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(7910);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7909);
								match(COMMA);
								}
							}

							setState(7912);
							match(DESCRIPTION);
							setState(7913);
							match(EQUAL);
							setState(7916);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7914);
								match(STRING);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7915);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 5:
							{
							setState(7919);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7918);
								match(COMMA);
								}
							}

							setState(7921);
							match(NAME);
							setState(7922);
							match(EQUAL);
							setState(7923);
							((Backup_logContext)_localctx).backup_set_name = id();
							}
							break;
						case 6:
							{
							setState(7925);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7924);
								match(COMMA);
								}
							}

							setState(7927);
							match(CREDENTIAL);
							}
							break;
						case 7:
							{
							setState(7929);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7928);
								match(COMMA);
								}
							}

							setState(7931);
							match(FILE_SNAPSHOT);
							}
							break;
						case 8:
							{
							setState(7933);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7932);
								match(COMMA);
								}
							}

							setState(7947);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case EXPIREDATE:
								{
								setState(7935);
								match(EXPIREDATE);
								setState(7936);
								match(EQUAL);
								setState(7939);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case STRING:
									{
									setState(7937);
									match(STRING);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7938);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case RETAINDAYS:
								{
								setState(7941);
								match(RETAINDAYS);
								setState(7942);
								match(EQUAL);
								setState(7945);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(7943);
									match(DECIMAL);
									}
									break;
								case OPENJSON:
								case PRECISION:
								case ABSOLUTE:
								case AT_KEYWORD:
								case ACCENT_SENSITIVITY:
								case ACTION:
								case ACTIVATION:
								case ACTIVE:
								case ADDRESS:
								case AES_128:
								case AES_192:
								case AES_256:
								case AFFINITY:
								case AFTER:
								case AGGREGATE:
								case ALGORITHM:
								case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
								case ALLOW_SNAPSHOT_ISOLATION:
								case ALLOWED:
								case ANSI_NULL_DEFAULT:
								case ANSI_NULLS:
								case ANSI_PADDING:
								case ANSI_WARNINGS:
								case APPLICATION_LOG:
								case APPLY:
								case ARITHABORT:
								case ASSEMBLY:
								case AUDIT:
								case AUDIT_GUID:
								case AUTO:
								case AUTO_CLEANUP:
								case AUTO_CLOSE:
								case AUTO_CREATE_STATISTICS:
								case AUTO_SHRINK:
								case AUTO_UPDATE_STATISTICS:
								case AUTO_UPDATE_STATISTICS_ASYNC:
								case AVAILABILITY:
								case AVG:
								case BACKUP_PRIORITY:
								case BEGIN_DIALOG:
								case BIGINT:
								case BINARY_KEYWORD:
								case BINARY_BASE64:
								case BINARY_CHECKSUM:
								case BINDING:
								case BLOB_STORAGE:
								case BROKER:
								case BROKER_INSTANCE:
								case BULK_LOGGED:
								case CALLER:
								case CAP_CPU_PERCENT:
								case CAST:
								case TRY_CAST:
								case CATALOG:
								case CATCH:
								case CHANGE_RETENTION:
								case CHANGE_TRACKING:
								case CHECKSUM:
								case CHECKSUM_AGG:
								case CLEANUP:
								case COLLECTION:
								case COLUMN_MASTER_KEY:
								case COMMITTED:
								case COMPATIBILITY_LEVEL:
								case CONCAT:
								case CONCAT_NULL_YIELDS_NULL:
								case CONTENT:
								case CONTROL:
								case COOKIE:
								case COUNT:
								case COUNT_BIG:
								case COUNTER:
								case CPU:
								case CREATE_NEW:
								case CREATION_DISPOSITION:
								case CREDENTIAL:
								case CRYPTOGRAPHIC:
								case CUME_DIST:
								case CURSOR_CLOSE_ON_COMMIT:
								case CURSOR_DEFAULT:
								case DATA:
								case DATE_CORRELATION_OPTIMIZATION:
								case DATEADD:
								case DATEDIFF:
								case DATENAME:
								case DATEPART:
								case DAYS:
								case DB_CHAINING:
								case DB_FAILOVER:
								case DECRYPTION:
								case DEFAULT_DOUBLE_QUOTE:
								case DEFAULT_FULLTEXT_LANGUAGE:
								case DEFAULT_LANGUAGE:
								case DELAY:
								case DELAYED_DURABILITY:
								case DELETED:
								case DENSE_RANK:
								case DEPENDENTS:
								case DES:
								case DESCRIPTION:
								case DESX:
								case DHCP:
								case DIALOG:
								case DIRECTORY_NAME:
								case DISABLE:
								case DISABLE_BROKER:
								case DISABLED:
								case DISK_DRIVE:
								case DOCUMENT:
								case DYNAMIC:
								case ELEMENTS:
								case EMERGENCY:
								case EMPTY:
								case ENABLE:
								case ENABLE_BROKER:
								case ENCRYPTED_VALUE:
								case ENCRYPTION:
								case ENDPOINT_URL:
								case ERROR_BROKER_CONVERSATIONS:
								case EXCLUSIVE:
								case EXECUTABLE:
								case EXIST:
								case EXPAND:
								case EXPIRY_DATE:
								case EXPLICIT:
								case FAIL_OPERATION:
								case FAILOVER_MODE:
								case FAILURE:
								case FAILURE_CONDITION_LEVEL:
								case FAST:
								case FAST_FORWARD:
								case FILEGROUP:
								case FILEGROWTH:
								case FILENAME:
								case FILEPATH:
								case FILESTREAM:
								case FILTER:
								case FIRST:
								case FIRST_VALUE:
								case FOLLOWING:
								case FORCE:
								case FORCE_FAILOVER_ALLOW_DATA_LOSS:
								case FORCED:
								case FORMAT:
								case FORWARD_ONLY:
								case FULLSCAN:
								case FULLTEXT:
								case GB:
								case GETDATE:
								case GETUTCDATE:
								case GLOBAL:
								case GO_BATCH:
								case GO:
								case GROUP_MAX_REQUESTS:
								case GROUPING:
								case GROUPING_ID:
								case HADR:
								case HASH:
								case HEALTH_CHECK_TIMEOUT:
								case HIGH:
								case HONOR_BROKER_PRIORITY:
								case HOURS:
								case IDENTITY_VALUE:
								case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
								case IMMEDIATE:
								case IMPERSONATE:
								case IMPORTANCE:
								case INCLUDE_NULL_VALUES:
								case INCREMENTAL:
								case INITIATOR:
								case INPUT:
								case INSENSITIVE:
								case INSERTED:
								case INT:
								case IP:
								case ISOLATION:
								case JOB:
								case JSON:
								case KB:
								case KEEP:
								case KEEPFIXED:
								case KEY_SOURCE:
								case KEYS:
								case KEYSET:
								case LAG:
								case LAST:
								case LAST_VALUE:
								case LEAD:
								case LEVEL:
								case LIST:
								case LISTENER:
								case LISTENER_URL:
								case LOB_COMPACTION:
								case LOCAL:
								case LOCATION:
								case LOCK:
								case LOCK_ESCALATION:
								case LOGIN:
								case LOOP:
								case LOW:
								case MANUAL:
								case MARK:
								case MATERIALIZED:
								case MAX:
								case MAX_CPU_PERCENT:
								case MAX_DOP:
								case MAX_FILES:
								case MAX_IOPS_PER_VOLUME:
								case MAX_MEMORY_PERCENT:
								case MAX_PROCESSES:
								case MAX_QUEUE_READERS:
								case MAX_ROLLOVER_FILES:
								case MAXDOP:
								case MAXRECURSION:
								case MAXSIZE:
								case MB:
								case MEDIUM:
								case MEMORY_OPTIMIZED_DATA:
								case MESSAGE:
								case MIN:
								case MIN_ACTIVE_ROWVERSION:
								case MIN_CPU_PERCENT:
								case MIN_IOPS_PER_VOLUME:
								case MIN_MEMORY_PERCENT:
								case MINUTES:
								case MIRROR_ADDRESS:
								case MIXED_PAGE_ALLOCATION:
								case MODE:
								case MODIFY:
								case MOVE:
								case MULTI_USER:
								case NAME:
								case NESTED_TRIGGERS:
								case NEW_ACCOUNT:
								case NEW_BROKER:
								case NEW_PASSWORD:
								case NEXT:
								case NO:
								case NO_TRUNCATE:
								case NO_WAIT:
								case NOCOUNT:
								case NODES:
								case NOEXPAND:
								case NON_TRANSACTED_ACCESS:
								case NORECOMPUTE:
								case NORECOVERY:
								case NOWAIT:
								case NTILE:
								case NUMANODE:
								case NUMBER:
								case NUMERIC_ROUNDABORT:
								case OBJECT:
								case OFFLINE:
								case OFFSET:
								case OLD_ACCOUNT:
								case ONLINE:
								case ONLY:
								case OPEN_EXISTING:
								case OPTIMISTIC:
								case OPTIMIZE:
								case OUT:
								case OUTPUT:
								case OVERRIDE:
								case OWNER:
								case PAGE_VERIFY:
								case PARAMETERIZATION:
								case PARTITION:
								case PARTITIONS:
								case PARTNER:
								case PATH:
								case PERCENT_RANK:
								case PERCENTILE_CONT:
								case PERCENTILE_DISC:
								case POISON_MESSAGE_HANDLING:
								case POOL:
								case PORT:
								case PRECEDING:
								case PRIMARY_ROLE:
								case PRIOR:
								case PRIORITY:
								case PRIORITY_LEVEL:
								case PRIVATE:
								case PRIVATE_KEY:
								case PRIVILEGES:
								case PROCEDURE_NAME:
								case PROPERTY:
								case PROVIDER:
								case PROVIDER_KEY_NAME:
								case QUERY:
								case QUEUE:
								case QUEUE_DELAY:
								case QUOTED_IDENTIFIER:
								case RANGE:
								case RANK:
								case RC2:
								case RC4:
								case RC4_128:
								case READ_COMMITTED_SNAPSHOT:
								case READ_ONLY:
								case READ_ONLY_ROUTING_LIST:
								case READ_WRITE:
								case READONLY:
								case REBUILD:
								case RECEIVE:
								case RECOMPILE:
								case RECOVERY:
								case RECURSIVE_TRIGGERS:
								case RELATIVE:
								case REMOTE:
								case REMOTE_SERVICE_NAME:
								case REMOVE:
								case REORGANIZE:
								case REPEATABLE:
								case REPLICA:
								case REQUEST_MAX_CPU_TIME_SEC:
								case REQUEST_MAX_MEMORY_GRANT_PERCENT:
								case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
								case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
								case RESERVE_DISK_SPACE:
								case RESOURCE:
								case RESOURCE_MANAGER_LOCATION:
								case RESTRICTED_USER:
								case RETENTION:
								case ROBUST:
								case ROOT:
								case ROUTE:
								case ROW:
								case ROW_NUMBER:
								case ROWGUID:
								case ROWS:
								case SAMPLE:
								case SCHEMABINDING:
								case SCOPED:
								case SCROLL:
								case SCROLL_LOCKS:
								case SEARCH:
								case SECONDARY:
								case SECONDARY_ONLY:
								case SECONDARY_ROLE:
								case SECONDS:
								case SECRET:
								case SECURITY:
								case SECURITY_LOG:
								case SEEDING_MODE:
								case SELF:
								case SEMI_SENSITIVE:
								case SEND:
								case SENT:
								case SEQUENCE:
								case SERIALIZABLE:
								case SESSION_TIMEOUT:
								case SETERROR:
								case SHARE:
								case SHOWPLAN:
								case SIGNATURE:
								case SIMPLE:
								case SINGLE_USER:
								case SIZE:
								case SMALLINT:
								case SNAPSHOT:
								case SPATIAL_WINDOW_MAX_CELLS:
								case STANDBY:
								case START_DATE:
								case STATIC:
								case STATS_STREAM:
								case STATUS:
								case STATUSONLY:
								case STDEV:
								case STDEVP:
								case STOPLIST:
								case STRING_AGG:
								case STUFF:
								case SUBJECT:
								case SUBSCRIPTION:
								case SUM:
								case SUSPEND:
								case SYMMETRIC:
								case SYNCHRONOUS_COMMIT:
								case SYNONYM:
								case SYSTEM:
								case TAKE:
								case TARGET_RECOVERY_TIME:
								case TB:
								case TEXTIMAGE_ON:
								case THROW:
								case TIES:
								case TIME:
								case TIMEOUT:
								case TIMER:
								case TINYINT:
								case TORN_PAGE_DETECTION:
								case TRANSFORM_NOISE_WORDS:
								case TRIPLE_DES:
								case TRIPLE_DES_3KEY:
								case TRUSTWORTHY:
								case TRY:
								case TSQL:
								case TWO_DIGIT_YEAR_CUTOFF:
								case TYPE:
								case TYPE_WARNING:
								case UNBOUNDED:
								case UNCOMMITTED:
								case UNKNOWN:
								case UNLIMITED:
								case UOW:
								case USING:
								case VALID_XML:
								case VALIDATION:
								case VALUE:
								case VAR:
								case VARBINARY_KEYWORD:
								case VARP:
								case VIEW_METADATA:
								case VIEWS:
								case WAIT:
								case WELL_FORMED_XML:
								case WITHOUT_ARRAY_WRAPPER:
								case WORK:
								case WORKLOAD:
								case XML:
								case XMLDATA:
								case XMLNAMESPACES:
								case XMLSCHEMA:
								case XSINIL:
								case ZONE:
								case ABSENT:
								case AES:
								case ALLOW_CONNECTIONS:
								case ALLOW_MULTIPLE_EVENT_LOSS:
								case ALLOW_SINGLE_EVENT_LOSS:
								case ANONYMOUS:
								case APPEND:
								case APPLICATION:
								case ASYMMETRIC:
								case ASYNCHRONOUS_COMMIT:
								case AUTHENTICATION:
								case AUTOMATED_BACKUP_PREFERENCE:
								case AUTOMATIC:
								case AVAILABILITY_MODE:
								case BEFORE:
								case BLOCK:
								case BLOCKSIZE:
								case BLOCKING_HIERARCHY:
								case BUFFER:
								case BUFFERCOUNT:
								case CACHE:
								case CALLED:
								case CERTIFICATE:
								case CHANGETABLE:
								case CHANGES:
								case CHECK_POLICY:
								case CHECK_EXPIRATION:
								case CLASSIFIER_FUNCTION:
								case CLUSTER:
								case COMPRESSION:
								case CONFIGURATION:
								case CONTAINMENT:
								case CONTEXT:
								case CONTINUE_AFTER_ERROR:
								case CONTRACT:
								case CONTRACT_NAME:
								case CONVERSATION:
								case COPY_ONLY:
								case CYCLE:
								case DATA_COMPRESSION:
								case DATA_SOURCE:
								case DATABASE_MIRRORING:
								case DEFAULT_DATABASE:
								case DEFAULT_SCHEMA:
								case DIAGNOSTICS:
								case DIFFERENTIAL:
								case DTC_SUPPORT:
								case ENABLED:
								case ENDPOINT:
								case ERROR:
								case EVENT:
								case EVENTDATA:
								case EVENT_RETENTION_MODE:
								case EXECUTABLE_FILE:
								case EXPIREDATE:
								case EXTENSION:
								case EXTERNAL_ACCESS:
								case FAILOVER:
								case FAILURECONDITIONLEVEL:
								case FAN_IN:
								case FILE_SNAPSHOT:
								case FORCESEEK:
								case FORCE_SERVICE_ALLOW_DATA_LOSS:
								case GET:
								case GOVERNOR:
								case HASHED:
								case HEALTHCHECKTIMEOUT:
								case IIF:
								case IO:
								case INCLUDE:
								case INCREMENT:
								case INFINITE:
								case INIT:
								case INSTEAD:
								case ISNULL:
								case KERBEROS:
								case KEY_PATH:
								case KEY_STORE_PROVIDER_NAME:
								case LANGUAGE:
								case LIBRARY:
								case LIFETIME:
								case LINUX:
								case LISTENER_IP:
								case LISTENER_PORT:
								case LOCAL_SERVICE_NAME:
								case LOG:
								case MATCHED:
								case MASTER:
								case MAX_MEMORY:
								case MAXTRANSFER:
								case MAXVALUE:
								case MAX_DISPATCH_LATENCY:
								case MAX_EVENT_SIZE:
								case MAX_SIZE:
								case MAX_OUTSTANDING_IO_PER_VOLUME:
								case MEDIADESCRIPTION:
								case MEDIANAME:
								case MEMBER:
								case MEMORY_PARTITION_MODE:
								case MESSAGE_FORWARDING:
								case MESSAGE_FORWARD_SIZE:
								case MINVALUE:
								case MIRROR:
								case MUST_CHANGE:
								case NOFORMAT:
								case NOINIT:
								case NONE:
								case NOREWIND:
								case NOSKIP:
								case NOUNLOAD:
								case NO_CHECKSUM:
								case NO_COMPRESSION:
								case NO_EVENT_LOSS:
								case NOTIFICATION:
								case NTLM:
								case OLD_PASSWORD:
								case ON_FAILURE:
								case PAGE:
								case PARAM_NODE:
								case PARTIAL:
								case PASSWORD:
								case PERMISSION_SET:
								case PER_CPU:
								case PER_DB:
								case PER_NODE:
								case PERSISTED:
								case PLATFORM:
								case POLICY:
								case PREDICATE:
								case PROCESS:
								case PROFILE:
								case PYTHON:
								case R:
								case READ_WRITE_FILEGROUPS:
								case REGENERATE:
								case RELATED_CONVERSATION:
								case RELATED_CONVERSATION_GROUP:
								case REQUIRED:
								case RESET:
								case RESTART:
								case RESUME:
								case RETAINDAYS:
								case RETURNS:
								case REWIND:
								case ROLE:
								case RSA_512:
								case RSA_1024:
								case RSA_2048:
								case RSA_3072:
								case RSA_4096:
								case SAFETY:
								case SAFE:
								case SCHEDULER:
								case SCHEME:
								case SERVER:
								case SERVICE:
								case SERVICE_BROKER:
								case SERVICE_NAME:
								case SESSION:
								case SID:
								case SKIP_KEYWORD:
								case SOFTNUMA:
								case SOURCE:
								case SPECIFICATION:
								case SPLIT:
								case SQLDUMPERFLAGS:
								case SQLDUMPERPATH:
								case SQLDUMPERTIMEOUT:
								case STATE:
								case STATS:
								case START:
								case STARTED:
								case STARTUP_STATE:
								case STOP:
								case STOPPED:
								case STOP_ON_ERROR:
								case SUPPORTED:
								case TAPE:
								case TARGET:
								case TCP:
								case TRACK_CAUSALITY:
								case TRANSFER:
								case UNCHECKED:
								case UNLOCK:
								case UNSAFE:
								case URL:
								case USED:
								case VERBOSELOGGING:
								case VISIBILITY:
								case WINDOWS:
								case WITHOUT:
								case WITNESS:
								case VARCHAR:
								case NVARCHAR:
								case DOUBLE_QUOTE_ID:
								case SQUARE_BRACKET_ID:
								case ID:
									{
									setState(7944);
									id();
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 9:
							{
							setState(7950);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7949);
								match(COMMA);
								}
							}

							setState(7952);
							_la = _input.LA(1);
							if ( !(_la==INIT || _la==NOINIT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 10:
							{
							setState(7954);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7953);
								match(COMMA);
								}
							}

							setState(7956);
							_la = _input.LA(1);
							if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 11:
							{
							setState(7958);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7957);
								match(COMMA);
								}
							}

							setState(7960);
							_la = _input.LA(1);
							if ( !(_la==FORMAT || _la==NOFORMAT) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 12:
							{
							setState(7962);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7961);
								match(COMMA);
								}
							}

							setState(7964);
							match(MEDIADESCRIPTION);
							setState(7965);
							match(EQUAL);
							setState(7968);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7966);
								match(STRING);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7967);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 13:
							{
							setState(7971);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7970);
								match(COMMA);
								}
							}

							setState(7973);
							match(MEDIANAME);
							setState(7974);
							match(EQUAL);
							{
							setState(7975);
							((Backup_logContext)_localctx).medianame = match(STRING);
							}
							}
							break;
						case 14:
							{
							setState(7977);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7976);
								match(COMMA);
								}
							}

							setState(7979);
							match(BLOCKSIZE);
							setState(7980);
							match(EQUAL);
							setState(7983);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7981);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7982);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 15:
							{
							setState(7986);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7985);
								match(COMMA);
								}
							}

							setState(7988);
							match(BUFFERCOUNT);
							setState(7989);
							match(EQUAL);
							setState(7992);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7990);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7991);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 16:
							{
							setState(7995);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7994);
								match(COMMA);
								}
							}

							setState(7997);
							match(MAXTRANSFER);
							setState(7998);
							match(EQUAL);
							setState(8001);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7999);
								match(DECIMAL);
								}
								break;
							case OPENJSON:
							case PRECISION:
							case ABSOLUTE:
							case AT_KEYWORD:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPLICATION_LOG:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case AUDIT:
							case AUDIT_GUID:
							case AUTO:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AVAILABILITY:
							case AVG:
							case BACKUP_PRIORITY:
							case BEGIN_DIALOG:
							case BIGINT:
							case BINARY_KEYWORD:
							case BINARY_BASE64:
							case BINARY_CHECKSUM:
							case BINDING:
							case BLOB_STORAGE:
							case BROKER:
							case BROKER_INSTANCE:
							case BULK_LOGGED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case TRY_CAST:
							case CATALOG:
							case CATCH:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHECKSUM:
							case CHECKSUM_AGG:
							case CLEANUP:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case CONCAT:
							case CONCAT_NULL_YIELDS_NULL:
							case CONTENT:
							case CONTROL:
							case COOKIE:
							case COUNT:
							case COUNT_BIG:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CUME_DIST:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case DATA:
							case DATE_CORRELATION_OPTIMIZATION:
							case DATEADD:
							case DATEDIFF:
							case DATENAME:
							case DATEPART:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DOUBLE_QUOTE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DELAY:
							case DELAYED_DURABILITY:
							case DELETED:
							case DENSE_RANK:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIALOG:
							case DIRECTORY_NAME:
							case DISABLE:
							case DISABLE_BROKER:
							case DISABLED:
							case DISK_DRIVE:
							case DOCUMENT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE:
							case ENABLE_BROKER:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ERROR_BROKER_CONVERSATIONS:
							case EXCLUSIVE:
							case EXECUTABLE:
							case EXIST:
							case EXPAND:
							case EXPIRY_DATE:
							case EXPLICIT:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILURE:
							case FAILURE_CONDITION_LEVEL:
							case FAST:
							case FAST_FORWARD:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FIRST_VALUE:
							case FOLLOWING:
							case FORCE:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCED:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GETDATE:
							case GETUTCDATE:
							case GLOBAL:
							case GO_BATCH:
							case GO:
							case GROUP_MAX_REQUESTS:
							case GROUPING:
							case GROUPING_ID:
							case HADR:
							case HASH:
							case HEALTH_CHECK_TIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCREMENTAL:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSERTED:
							case INT:
							case IP:
							case ISOLATION:
							case JOB:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KEY_SOURCE:
							case KEYS:
							case KEYSET:
							case LAG:
							case LAST:
							case LAST_VALUE:
							case LEAD:
							case LEVEL:
							case LIST:
							case LISTENER:
							case LISTENER_URL:
							case LOB_COMPACTION:
							case LOCAL:
							case LOCATION:
							case LOCK:
							case LOCK_ESCALATION:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MATERIALIZED:
							case MAX:
							case MAX_CPU_PERCENT:
							case MAX_DOP:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MB:
							case MEDIUM:
							case MEMORY_OPTIMIZED_DATA:
							case MESSAGE:
							case MIN:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MIRROR_ADDRESS:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case NAME:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEXT:
							case NO:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NOCOUNT:
							case NODES:
							case NOEXPAND:
							case NON_TRANSACTED_ACCESS:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOWAIT:
							case NTILE:
							case NUMANODE:
							case NUMBER:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OVERRIDE:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PATH:
							case PERCENT_RANK:
							case PERCENTILE_CONT:
							case PERCENTILE_DISC:
							case POISON_MESSAGE_HANDLING:
							case POOL:
							case PORT:
							case PRECEDING:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY:
							case PRIORITY_LEVEL:
							case PRIVATE:
							case PRIVATE_KEY:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROPERTY:
							case PROVIDER:
							case PROVIDER_KEY_NAME:
							case QUERY:
							case QUEUE:
							case QUEUE_DELAY:
							case QUOTED_IDENTIFIER:
							case RANGE:
							case RANK:
							case RC2:
							case RC4:
							case RC4_128:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY:
							case READ_ONLY_ROUTING_LIST:
							case READ_WRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case RELATIVE:
							case REMOTE:
							case REMOTE_SERVICE_NAME:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case RESERVE_DISK_SPACE:
							case RESOURCE:
							case RESOURCE_MANAGER_LOCATION:
							case RESTRICTED_USER:
							case RETENTION:
							case ROBUST:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROW_NUMBER:
							case ROWGUID:
							case ROWS:
							case SAMPLE:
							case SCHEMABINDING:
							case SCOPED:
							case SCROLL:
							case SCROLL_LOCKS:
							case SEARCH:
							case SECONDARY:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDS:
							case SECRET:
							case SECURITY:
							case SECURITY_LOG:
							case SEEDING_MODE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SESSION_TIMEOUT:
							case SETERROR:
							case SHARE:
							case SHOWPLAN:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SIZE:
							case SMALLINT:
							case SNAPSHOT:
							case SPATIAL_WINDOW_MAX_CELLS:
							case STANDBY:
							case START_DATE:
							case STATIC:
							case STATS_STREAM:
							case STATUS:
							case STATUSONLY:
							case STDEV:
							case STDEVP:
							case STOPLIST:
							case STRING_AGG:
							case STUFF:
							case SUBJECT:
							case SUBSCRIPTION:
							case SUM:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TARGET_RECOVERY_TIME:
							case TB:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TINYINT:
							case TORN_PAGE_DETECTION:
							case TRANSFORM_NOISE_WORDS:
							case TRIPLE_DES:
							case TRIPLE_DES_3KEY:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE:
							case TYPE_WARNING:
							case UNBOUNDED:
							case UNCOMMITTED:
							case UNKNOWN:
							case UNLIMITED:
							case UOW:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VAR:
							case VARBINARY_KEYWORD:
							case VARP:
							case VIEW_METADATA:
							case VIEWS:
							case WAIT:
							case WELL_FORMED_XML:
							case WITHOUT_ARRAY_WRAPPER:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XSINIL:
							case ZONE:
							case ABSENT:
							case AES:
							case ALLOW_CONNECTIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ANONYMOUS:
							case APPEND:
							case APPLICATION:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUTHENTICATION:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case BEFORE:
							case BLOCK:
							case BLOCKSIZE:
							case BLOCKING_HIERARCHY:
							case BUFFER:
							case BUFFERCOUNT:
							case CACHE:
							case CALLED:
							case CERTIFICATE:
							case CHANGETABLE:
							case CHANGES:
							case CHECK_POLICY:
							case CHECK_EXPIRATION:
							case CLASSIFIER_FUNCTION:
							case CLUSTER:
							case COMPRESSION:
							case CONFIGURATION:
							case CONTAINMENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT:
							case CONTRACT_NAME:
							case CONVERSATION:
							case COPY_ONLY:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATABASE_MIRRORING:
							case DEFAULT_DATABASE:
							case DEFAULT_SCHEMA:
							case DIAGNOSTICS:
							case DIFFERENTIAL:
							case DTC_SUPPORT:
							case ENABLED:
							case ENDPOINT:
							case ERROR:
							case EVENT:
							case EVENTDATA:
							case EVENT_RETENTION_MODE:
							case EXECUTABLE_FILE:
							case EXPIREDATE:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAILOVER:
							case FAILURECONDITIONLEVEL:
							case FAN_IN:
							case FILE_SNAPSHOT:
							case FORCESEEK:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case GET:
							case GOVERNOR:
							case HASHED:
							case HEALTHCHECKTIMEOUT:
							case IIF:
							case IO:
							case INCLUDE:
							case INCREMENT:
							case INFINITE:
							case INIT:
							case INSTEAD:
							case ISNULL:
							case KERBEROS:
							case KEY_PATH:
							case KEY_STORE_PROVIDER_NAME:
							case LANGUAGE:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LOCAL_SERVICE_NAME:
							case LOG:
							case MATCHED:
							case MASTER:
							case MAX_MEMORY:
							case MAXTRANSFER:
							case MAXVALUE:
							case MAX_DISPATCH_LATENCY:
							case MAX_EVENT_SIZE:
							case MAX_SIZE:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEMBER:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARDING:
							case MESSAGE_FORWARD_SIZE:
							case MINVALUE:
							case MIRROR:
							case MUST_CHANGE:
							case NOFORMAT:
							case NOINIT:
							case NONE:
							case NOREWIND:
							case NOSKIP:
							case NOUNLOAD:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NOTIFICATION:
							case NTLM:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case PAGE:
							case PARAM_NODE:
							case PARTIAL:
							case PASSWORD:
							case PERMISSION_SET:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERSISTED:
							case PLATFORM:
							case POLICY:
							case PREDICATE:
							case PROCESS:
							case PROFILE:
							case PYTHON:
							case R:
							case READ_WRITE_FILEGROUPS:
							case REGENERATE:
							case RELATED_CONVERSATION:
							case RELATED_CONVERSATION_GROUP:
							case REQUIRED:
							case RESET:
							case RESTART:
							case RESUME:
							case RETAINDAYS:
							case RETURNS:
							case REWIND:
							case ROLE:
							case RSA_512:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case SAFETY:
							case SAFE:
							case SCHEDULER:
							case SCHEME:
							case SERVER:
							case SERVICE:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SESSION:
							case SID:
							case SKIP_KEYWORD:
							case SOFTNUMA:
							case SOURCE:
							case SPECIFICATION:
							case SPLIT:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STATE:
							case STATS:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STOP:
							case STOPPED:
							case STOP_ON_ERROR:
							case SUPPORTED:
							case TAPE:
							case TARGET:
							case TCP:
							case TRACK_CAUSALITY:
							case TRANSFER:
							case UNCHECKED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case VERBOSELOGGING:
							case VISIBILITY:
							case WINDOWS:
							case WITHOUT:
							case WITNESS:
							case VARCHAR:
							case NVARCHAR:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(8000);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 17:
							{
							setState(8004);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8003);
								match(COMMA);
								}
							}

							setState(8006);
							_la = _input.LA(1);
							if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 18:
							{
							setState(8008);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8007);
								match(COMMA);
								}
							}

							setState(8010);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 19:
							{
							setState(8012);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8011);
								match(COMMA);
								}
							}

							setState(8014);
							match(RESTART);
							}
							break;
						case 20:
							{
							setState(8016);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8015);
								match(COMMA);
								}
							}

							setState(8018);
							match(STATS);
							setState(8021);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==EQUAL) {
								{
								setState(8019);
								match(EQUAL);
								setState(8020);
								((Backup_logContext)_localctx).stats_percent = match(DECIMAL);
								}
							}

							}
							break;
						case 21:
							{
							setState(8024);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8023);
								match(COMMA);
								}
							}

							setState(8026);
							_la = _input.LA(1);
							if ( !(_la==NOREWIND || _la==REWIND) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 22:
							{
							setState(8028);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8027);
								match(COMMA);
								}
							}

							setState(8030);
							_la = _input.LA(1);
							if ( !(_la==LOAD || _la==NOUNLOAD) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 23:
							{
							setState(8032);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8031);
								match(COMMA);
								}
							}

							setState(8038);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case NORECOVERY:
								{
								setState(8034);
								match(NORECOVERY);
								}
								break;
							case STANDBY:
								{
								setState(8035);
								match(STANDBY);
								setState(8036);
								match(EQUAL);
								setState(8037);
								((Backup_logContext)_localctx).undo_file_name = match(STRING);
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case 24:
							{
							setState(8041);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8040);
								match(COMMA);
								}
							}

							setState(8043);
							match(NO_TRUNCATE);
							}
							break;
						case 25:
							{
							setState(8045);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(8044);
								match(COMMA);
								}
							}

							setState(8047);
							match(ENCRYPTION);
							setState(8048);
							match(LR_BRACKET);
							setState(8049);
							match(ALGORITHM);
							setState(8050);
							match(EQUAL);
							setState(8051);
							_la = _input.LA(1);
							if ( !(((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (AES_128 - 197)) | (1L << (AES_192 - 197)) | (1L << (AES_256 - 197)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(8052);
							match(COMMA);
							setState(8053);
							match(SERVER);
							setState(8054);
							match(CERTIFICATE);
							setState(8055);
							match(EQUAL);
							setState(8062);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,1113,_ctx) ) {
							case 1:
								{
								setState(8056);
								((Backup_logContext)_localctx).encryptor_name = id();
								}
								break;
							case 2:
								{
								setState(8057);
								match(SERVER);
								setState(8058);
								match(ASYMMETRIC);
								setState(8059);
								match(KEY);
								setState(8060);
								match(EQUAL);
								setState(8061);
								((Backup_logContext)_localctx).encryptor_name = id();
								}
								break;
							}
							}
							break;
						}
						} 
					}
					setState(8068);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1115,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_certificateContext extends ParserRuleContext {
		public IdContext certname;
		public Token cert_file;
		public Token private_key_file;
		public Token encryption_password;
		public Token decryption_pasword;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSqlParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSqlParser.FILE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSqlParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSqlParser.PASSWORD, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(TSqlParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(TSqlParser.DECRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_certificate; }
	}

	public final Backup_certificateContext backup_certificate() throws RecognitionException {
		Backup_certificateContext _localctx = new Backup_certificateContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_backup_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8071);
			match(BACKUP);
			setState(8072);
			match(CERTIFICATE);
			setState(8073);
			((Backup_certificateContext)_localctx).certname = id();
			setState(8074);
			match(TO);
			setState(8075);
			match(FILE);
			setState(8076);
			match(EQUAL);
			setState(8077);
			((Backup_certificateContext)_localctx).cert_file = match(STRING);
			setState(8109);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1122,_ctx) ) {
			case 1:
				{
				setState(8078);
				match(WITH);
				setState(8079);
				match(PRIVATE);
				setState(8080);
				match(KEY);
				setState(8081);
				match(LR_BRACKET);
				setState(8104); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(8104);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1120,_ctx) ) {
					case 1:
						{
						setState(8083);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(8082);
							match(COMMA);
							}
						}

						setState(8085);
						match(FILE);
						setState(8086);
						match(EQUAL);
						setState(8087);
						((Backup_certificateContext)_localctx).private_key_file = match(STRING);
						}
						break;
					case 2:
						{
						setState(8089);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(8088);
							match(COMMA);
							}
						}

						setState(8091);
						match(ENCRYPTION);
						setState(8092);
						match(BY);
						setState(8093);
						match(PASSWORD);
						setState(8094);
						match(EQUAL);
						setState(8095);
						((Backup_certificateContext)_localctx).encryption_password = match(STRING);
						}
						break;
					case 3:
						{
						setState(8097);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(8096);
							match(COMMA);
							}
						}

						setState(8099);
						match(DECRYPTION);
						setState(8100);
						match(BY);
						setState(8101);
						match(PASSWORD);
						setState(8102);
						match(EQUAL);
						setState(8103);
						((Backup_certificateContext)_localctx).decryption_pasword = match(STRING);
						}
						break;
					}
					}
					setState(8106); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION || _la==COMMA );
				setState(8108);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_master_keyContext extends ParserRuleContext {
		public Token master_key_backup_file;
		public Token encryption_password;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_master_key; }
	}

	public final Backup_master_keyContext backup_master_key() throws RecognitionException {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_backup_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8111);
			match(BACKUP);
			setState(8112);
			match(MASTER);
			setState(8113);
			match(KEY);
			setState(8114);
			match(TO);
			setState(8115);
			match(FILE);
			setState(8116);
			match(EQUAL);
			setState(8117);
			((Backup_master_keyContext)_localctx).master_key_backup_file = match(STRING);
			setState(8118);
			match(ENCRYPTION);
			setState(8119);
			match(BY);
			setState(8120);
			match(PASSWORD);
			setState(8121);
			match(EQUAL);
			setState(8122);
			((Backup_master_keyContext)_localctx).encryption_password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_service_master_keyContext extends ParserRuleContext {
		public Token service_master_key_backup_file;
		public Token encryption_password;
		public TerminalNode BACKUP() { return getToken(TSqlParser.BACKUP, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_service_master_key; }
	}

	public final Backup_service_master_keyContext backup_service_master_key() throws RecognitionException {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_backup_service_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8124);
			match(BACKUP);
			setState(8125);
			match(SERVICE);
			setState(8126);
			match(MASTER);
			setState(8127);
			match(KEY);
			setState(8128);
			match(TO);
			setState(8129);
			match(FILE);
			setState(8130);
			match(EQUAL);
			setState(8131);
			((Backup_service_master_keyContext)_localctx).service_master_key_backup_file = match(STRING);
			setState(8132);
			match(ENCRYPTION);
			setState(8133);
			match(BY);
			setState(8134);
			match(PASSWORD);
			setState(8135);
			match(EQUAL);
			setState(8136);
			((Backup_service_master_keyContext)_localctx).encryption_password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_statementContext extends ParserRuleContext {
		public TerminalNode KILL() { return getToken(TSqlParser.KILL, 0); }
		public Kill_processContext kill_process() {
			return getRuleContext(Kill_processContext.class,0);
		}
		public Kill_query_notificationContext kill_query_notification() {
			return getRuleContext(Kill_query_notificationContext.class,0);
		}
		public Kill_stats_jobContext kill_stats_job() {
			return getRuleContext(Kill_stats_jobContext.class,0);
		}
		public Kill_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_statement; }
	}

	public final Kill_statementContext kill_statement() throws RecognitionException {
		Kill_statementContext _localctx = new Kill_statementContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_kill_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8138);
			match(KILL);
			setState(8142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UOW:
			case DECIMAL:
			case STRING:
				{
				setState(8139);
				kill_process();
				}
				break;
			case QUERY:
				{
				setState(8140);
				kill_query_notification();
				}
				break;
			case STATS:
				{
				setState(8141);
				kill_stats_job();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_processContext extends ParserRuleContext {
		public Token session_id;
		public TerminalNode UOW() { return getToken(TSqlParser.UOW, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode STATUSONLY() { return getToken(TSqlParser.STATUSONLY, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Kill_processContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_process; }
	}

	public final Kill_processContext kill_process() throws RecognitionException {
		Kill_processContext _localctx = new Kill_processContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_kill_process);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
				{
				setState(8144);
				((Kill_processContext)_localctx).session_id = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==STRING) ) {
					((Kill_processContext)_localctx).session_id = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UOW:
				{
				setState(8145);
				match(UOW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1125,_ctx) ) {
			case 1:
				{
				setState(8148);
				match(WITH);
				setState(8149);
				match(STATUSONLY);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_query_notificationContext extends ParserRuleContext {
		public Token subscription_id;
		public TerminalNode QUERY() { return getToken(TSqlParser.QUERY, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(TSqlParser.SUBSCRIPTION, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Kill_query_notificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_query_notification; }
	}

	public final Kill_query_notificationContext kill_query_notification() throws RecognitionException {
		Kill_query_notificationContext _localctx = new Kill_query_notificationContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_kill_query_notification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8152);
			match(QUERY);
			setState(8153);
			match(NOTIFICATION);
			setState(8154);
			match(SUBSCRIPTION);
			setState(8157);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(8155);
				match(ALL);
				}
				break;
			case DECIMAL:
				{
				setState(8156);
				((Kill_query_notificationContext)_localctx).subscription_id = match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Kill_stats_jobContext extends ParserRuleContext {
		public Token job_id;
		public TerminalNode STATS() { return getToken(TSqlParser.STATS, 0); }
		public TerminalNode JOB() { return getToken(TSqlParser.JOB, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Kill_stats_jobContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_kill_stats_job; }
	}

	public final Kill_stats_jobContext kill_stats_job() throws RecognitionException {
		Kill_stats_jobContext _localctx = new Kill_stats_jobContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_kill_stats_job);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8159);
			match(STATS);
			setState(8160);
			match(JOB);
			setState(8161);
			((Kill_stats_jobContext)_localctx).job_id = match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public Execute_bodyContext execute_body() {
			return getRuleContext(Execute_bodyContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_execute_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8163);
			match(EXECUTE);
			setState(8164);
			execute_body();
			setState(8166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1127,_ctx) ) {
			case 1:
				{
				setState(8165);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_body_batchContext extends ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Execute_body_batchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_body_batch; }
	}

	public final Execute_body_batchContext execute_body_batch() throws RecognitionException {
		Execute_body_batchContext _localctx = new Execute_body_batchContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_execute_body_batch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8168);
			func_proc_name_server_database_schema();
			setState(8177);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1129,_ctx) ) {
			case 1:
				{
				setState(8169);
				execute_statement_arg();
				setState(8174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8170);
					match(COMMA);
					setState(8171);
					execute_statement_arg();
					}
					}
					setState(8176);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(8180);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1130,_ctx) ) {
			case 1:
				{
				setState(8179);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_bodyContext extends ParserRuleContext {
		public Token return_status;
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public Execute_statement_argContext execute_statement_arg() {
			return getRuleContext(Execute_statement_argContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> PLUS() { return getTokens(TSqlParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(TSqlParser.PLUS, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Execute_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_body; }
	}

	public final Execute_bodyContext execute_body() throws RecognitionException {
		Execute_bodyContext _localctx = new Execute_bodyContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_execute_body);
		int _la;
		try {
			setState(8211);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
			case STRING:
			case DOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1131,_ctx) ) {
				case 1:
					{
					setState(8182);
					((Execute_bodyContext)_localctx).return_status = match(LOCAL_ID);
					setState(8183);
					match(EQUAL);
					}
					break;
				}
				setState(8188);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(8186);
					func_proc_name_server_database_schema();
					}
					break;
				case LOCAL_ID:
				case STRING:
					{
					setState(8187);
					execute_var_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8191);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1133,_ctx) ) {
				case 1:
					{
					setState(8190);
					execute_statement_arg();
					}
					break;
				}
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(8193);
				match(LR_BRACKET);
				setState(8194);
				execute_var_string();
				setState(8199);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==PLUS) {
					{
					{
					setState(8195);
					match(PLUS);
					setState(8196);
					execute_var_string();
					}
					}
					setState(8201);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8202);
				match(RR_BRACKET);
				setState(8209);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1136,_ctx) ) {
				case 1:
					{
					setState(8204);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(8203);
						match(AS);
						}
					}

					setState(8206);
					_la = _input.LA(1);
					if ( !(_la==USER || _la==LOGIN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8207);
					match(EQUAL);
					setState(8208);
					match(STRING);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_argContext extends ParserRuleContext {
		public Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() {
			return getRuleContext(Execute_statement_arg_unnamedContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public List<Execute_statement_arg_namedContext> execute_statement_arg_named() {
			return getRuleContexts(Execute_statement_arg_namedContext.class);
		}
		public Execute_statement_arg_namedContext execute_statement_arg_named(int i) {
			return getRuleContext(Execute_statement_arg_namedContext.class,i);
		}
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg; }
	}

	public final Execute_statement_argContext execute_statement_arg() throws RecognitionException {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_execute_statement_arg);
		try {
			int _alt;
			setState(8229);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1140,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8213);
				execute_statement_arg_unnamed();
				setState(8218);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1138,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8214);
						match(COMMA);
						setState(8215);
						execute_statement_arg();
						}
						} 
					}
					setState(8220);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1138,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8221);
				execute_statement_arg_named();
				setState(8226);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1139,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8222);
						match(COMMA);
						setState(8223);
						execute_statement_arg_named();
						}
						} 
					}
					setState(8228);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1139,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_arg_namedContext extends ParserRuleContext {
		public Token name;
		public Execute_parameterContext value;
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Execute_parameterContext execute_parameter() {
			return getRuleContext(Execute_parameterContext.class,0);
		}
		public Execute_statement_arg_namedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg_named; }
	}

	public final Execute_statement_arg_namedContext execute_statement_arg_named() throws RecognitionException {
		Execute_statement_arg_namedContext _localctx = new Execute_statement_arg_namedContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_execute_statement_arg_named);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8231);
			((Execute_statement_arg_namedContext)_localctx).name = match(LOCAL_ID);
			setState(8232);
			match(EQUAL);
			setState(8233);
			((Execute_statement_arg_namedContext)_localctx).value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_arg_unnamedContext extends ParserRuleContext {
		public Execute_parameterContext value;
		public Execute_parameterContext execute_parameter() {
			return getRuleContext(Execute_parameterContext.class,0);
		}
		public Execute_statement_arg_unnamedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg_unnamed; }
	}

	public final Execute_statement_arg_unnamedContext execute_statement_arg_unnamed() throws RecognitionException {
		Execute_statement_arg_unnamedContext _localctx = new Execute_statement_arg_unnamedContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_execute_statement_arg_unnamed);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8235);
			((Execute_statement_arg_unnamedContext)_localctx).value = execute_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_parameterContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public Execute_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_parameter; }
	}

	public final Execute_parameterContext execute_parameter() throws RecognitionException {
		Execute_parameterContext _localctx = new Execute_parameterContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_execute_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8245);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				{
				setState(8237);
				constant();
				}
				break;
			case LOCAL_ID:
				{
				setState(8238);
				match(LOCAL_ID);
				setState(8240);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1141,_ctx) ) {
				case 1:
					{
					setState(8239);
					_la = _input.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(8242);
				id();
				}
				break;
			case DEFAULT:
				{
				setState(8243);
				match(DEFAULT);
				}
				break;
			case NULL:
				{
				setState(8244);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_var_stringContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Execute_var_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_var_string; }
	}

	public final Execute_var_stringContext execute_var_string() throws RecognitionException {
		Execute_var_stringContext _localctx = new Execute_var_stringContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_execute_var_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8247);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_statementContext extends ParserRuleContext {
		public Table_nameContext on_id;
		public Principal_idContext principal_id;
		public List<Principal_idContext> to_principal = new ArrayList<Principal_idContext>();
		public Principal_idContext as_principal;
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public List<TerminalNode> GRANT() { return getTokens(TSqlParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(TSqlParser.GRANT, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public List<Principal_idContext> principal_id() {
			return getRuleContexts(Principal_idContext.class);
		}
		public Principal_idContext principal_id(int i) {
			return getRuleContext(Principal_idContext.class,i);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Grant_permissionContext grant_permission() {
			return getRuleContext(Grant_permissionContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode PRIVILEGES() { return getToken(TSqlParser.PRIVILEGES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode REVERT() { return getToken(TSqlParser.REVERT, 0); }
		public TerminalNode COOKIE() { return getToken(TSqlParser.COOKIE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Open_keyContext open_key() {
			return getRuleContext(Open_keyContext.class,0);
		}
		public Close_keyContext close_key() {
			return getRuleContext(Close_keyContext.class,0);
		}
		public Create_keyContext create_key() {
			return getRuleContext(Create_keyContext.class,0);
		}
		public Create_certificateContext create_certificate() {
			return getRuleContext(Create_certificateContext.class,0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_statement; }
	}

	public final Security_statementContext security_statement() throws RecognitionException {
		Security_statementContext _localctx = new Security_statementContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_security_statement);
		int _la;
		try {
			setState(8308);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1154,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8249);
				execute_clause();
				setState(8251);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1143,_ctx) ) {
				case 1:
					{
					setState(8250);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8253);
				match(GRANT);
				setState(8265);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(8254);
					match(ALL);
					setState(8256);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(8255);
						match(PRIVILEGES);
						}
					}

					}
					break;
				case ALTER:
				case CREATE:
				case EXECUTE:
				case INSERT:
				case REFERENCES:
				case SELECT:
				case VIEW:
				case CONTROL:
				case IMPERSONATE:
				case SHOWPLAN:
				case TAKE:
					{
					setState(8258);
					grant_permission();
					setState(8263);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LR_BRACKET) {
						{
						setState(8259);
						match(LR_BRACKET);
						setState(8260);
						column_name_list();
						setState(8261);
						match(RR_BRACKET);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8267);
					match(ON);
					setState(8268);
					((Security_statementContext)_localctx).on_id = table_name();
					}
				}

				setState(8271);
				match(TO);
				setState(8272);
				((Security_statementContext)_localctx).principal_id = principal_id();
				((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).principal_id);
				setState(8277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8273);
					match(COMMA);
					setState(8274);
					((Security_statementContext)_localctx).principal_id = principal_id();
					((Security_statementContext)_localctx).to_principal.add(((Security_statementContext)_localctx).principal_id);
					}
					}
					setState(8279);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8283);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1149,_ctx) ) {
				case 1:
					{
					setState(8280);
					match(WITH);
					setState(8281);
					match(GRANT);
					setState(8282);
					match(OPTION);
					}
					break;
				}
				setState(8287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(8285);
					match(AS);
					setState(8286);
					((Security_statementContext)_localctx).as_principal = principal_id();
					}
				}

				setState(8290);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1151,_ctx) ) {
				case 1:
					{
					setState(8289);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8292);
				match(REVERT);
				setState(8299);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1152,_ctx) ) {
				case 1:
					{
					setState(8293);
					match(LR_BRACKET);
					setState(8294);
					match(WITH);
					setState(8295);
					match(COOKIE);
					setState(8296);
					match(EQUAL);
					setState(8297);
					match(LOCAL_ID);
					setState(8298);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8302);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1153,_ctx) ) {
				case 1:
					{
					setState(8301);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8304);
				open_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8305);
				close_key();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8306);
				create_key();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8307);
				create_certificate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Principal_idContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PUBLIC() { return getToken(TSqlParser.PUBLIC, 0); }
		public Principal_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_principal_id; }
	}

	public final Principal_idContext principal_id() throws RecognitionException {
		Principal_idContext _localctx = new Principal_idContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_principal_id);
		try {
			setState(8313);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1155,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8311);
				id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8312);
				match(PUBLIC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext user_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return getRuleContext(Existing_keysContext.class,0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return getRuleContext(Generate_new_keysContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_certificate; }
	}

	public final Create_certificateContext create_certificate() throws RecognitionException {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_create_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8315);
			match(CREATE);
			setState(8316);
			match(CERTIFICATE);
			setState(8317);
			((Create_certificateContext)_localctx).certificate_name = id();
			setState(8320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(8318);
				match(AUTHORIZATION);
				setState(8319);
				((Create_certificateContext)_localctx).user_name = id();
				}
			}

			setState(8325);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				setState(8322);
				match(FROM);
				setState(8323);
				existing_keys();
				}
				break;
			case WITH:
			case ENCRYPTION:
				{
				setState(8324);
				generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1158,_ctx) ) {
			case 1:
				{
				setState(8327);
				match(ACTIVE);
				setState(8328);
				match(FOR);
				setState(8329);
				match(BEGIN);
				setState(8330);
				match(DIALOG);
				setState(8331);
				match(EQUAL);
				setState(8332);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Existing_keysContext extends ParserRuleContext {
		public IdContext assembly_name;
		public Token path_to_file;
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode EXECUTABLE() { return getToken(TSqlParser.EXECUTABLE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Private_key_optionsContext private_key_options() {
			return getRuleContext(Private_key_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Existing_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_keys; }
	}

	public final Existing_keysContext existing_keys() throws RecognitionException {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_existing_keys);
		int _la;
		try {
			setState(8352);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASSEMBLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(8335);
				match(ASSEMBLY);
				setState(8336);
				((Existing_keysContext)_localctx).assembly_name = id();
				}
				break;
			case FILE:
			case EXECUTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(8338);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTABLE) {
					{
					setState(8337);
					match(EXECUTABLE);
					}
				}

				setState(8340);
				match(FILE);
				setState(8341);
				match(EQUAL);
				setState(8342);
				((Existing_keysContext)_localctx).path_to_file = match(STRING);
				setState(8350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1160,_ctx) ) {
				case 1:
					{
					setState(8343);
					match(WITH);
					setState(8344);
					match(PRIVATE);
					setState(8345);
					match(KEY);
					setState(8346);
					match(LR_BRACKET);
					setState(8347);
					private_key_options();
					setState(8348);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Private_key_optionsContext extends ParserRuleContext {
		public Token path;
		public Token password;
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode FILE() { return getToken(TSqlParser.FILE, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_private_key_options; }
	}

	public final Private_key_optionsContext private_key_options() throws RecognitionException {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_private_key_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8354);
			_la = _input.LA(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8355);
			match(EQUAL);
			setState(8356);
			((Private_key_optionsContext)_localctx).path = match(STRING);
			setState(8363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8357);
				match(COMMA);
				setState(8358);
				_la = _input.LA(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8359);
				match(BY);
				setState(8360);
				match(PASSWORD);
				setState(8361);
				match(EQUAL);
				setState(8362);
				((Private_key_optionsContext)_localctx).password = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generate_new_keysContext extends ParserRuleContext {
		public Token password;
		public Token certificate_subject_name;
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SUBJECT() { return getToken(TSqlParser.SUBJECT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<Date_optionsContext> date_options() {
			return getRuleContexts(Date_optionsContext.class);
		}
		public Date_optionsContext date_options(int i) {
			return getRuleContext(Date_optionsContext.class,i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generate_new_keys; }
	}

	public final Generate_new_keysContext generate_new_keys() throws RecognitionException {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_generate_new_keys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPTION) {
				{
				setState(8365);
				match(ENCRYPTION);
				setState(8366);
				match(BY);
				setState(8367);
				match(PASSWORD);
				setState(8368);
				match(EQUAL);
				setState(8369);
				((Generate_new_keysContext)_localctx).password = match(STRING);
				}
			}

			setState(8372);
			match(WITH);
			setState(8373);
			match(SUBJECT);
			setState(8374);
			match(EQUAL);
			setState(8375);
			((Generate_new_keysContext)_localctx).certificate_subject_name = match(STRING);
			setState(8380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8376);
				match(COMMA);
				setState(8377);
				date_options();
				}
				}
				setState(8382);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_optionsContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode START_DATE() { return getToken(TSqlParser.START_DATE, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(TSqlParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_options; }
	}

	public final Date_optionsContext date_options() throws RecognitionException {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_date_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8383);
			_la = _input.LA(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8384);
			match(EQUAL);
			setState(8385);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token password;
		public TerminalNode OPEN() { return getToken(TSqlParser.OPEN, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return getRuleContext(Decryption_mechanismContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_key; }
	}

	public final Open_keyContext open_key() throws RecognitionException {
		Open_keyContext _localctx = new Open_keyContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_open_key);
		try {
			setState(8403);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1165,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8387);
				match(OPEN);
				setState(8388);
				match(SYMMETRIC);
				setState(8389);
				match(KEY);
				setState(8390);
				((Open_keyContext)_localctx).key_name = id();
				setState(8391);
				match(DECRYPTION);
				setState(8392);
				match(BY);
				setState(8393);
				decryption_mechanism();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8395);
				match(OPEN);
				setState(8396);
				match(MASTER);
				setState(8397);
				match(KEY);
				setState(8398);
				match(DECRYPTION);
				setState(8399);
				match(BY);
				setState(8400);
				match(PASSWORD);
				setState(8401);
				match(EQUAL);
				setState(8402);
				((Open_keyContext)_localctx).password = match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode CLOSE() { return getToken(TSqlParser.CLOSE, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode KEYS() { return getToken(TSqlParser.KEYS, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_key; }
	}

	public final Close_keyContext close_key() throws RecognitionException {
		Close_keyContext _localctx = new Close_keyContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_close_key);
		try {
			setState(8416);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1166,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8405);
				match(CLOSE);
				setState(8406);
				match(SYMMETRIC);
				setState(8407);
				match(KEY);
				setState(8408);
				((Close_keyContext)_localctx).key_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8409);
				match(CLOSE);
				setState(8410);
				match(ALL);
				setState(8411);
				match(SYMMETRIC);
				setState(8412);
				match(KEYS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8413);
				match(CLOSE);
				setState(8414);
				match(MASTER);
				setState(8415);
				match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_keyContext extends ParserRuleContext {
		public Token password;
		public IdContext key_name;
		public IdContext user_name;
		public IdContext provider_name;
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSqlParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSqlParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSqlParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public List<Key_optionsContext> key_options() {
			return getRuleContexts(Key_optionsContext.class);
		}
		public Key_optionsContext key_options(int i) {
			return getRuleContext(Key_optionsContext.class,i);
		}
		public List<Encryption_mechanismContext> encryption_mechanism() {
			return getRuleContexts(Encryption_mechanismContext.class);
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return getRuleContext(Encryption_mechanismContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_key; }
	}

	public final Create_keyContext create_key() throws RecognitionException {
		Create_keyContext _localctx = new Create_keyContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_create_key);
		int _la;
		try {
			int _alt;
			setState(8453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1172,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8418);
				match(CREATE);
				setState(8419);
				match(MASTER);
				setState(8420);
				match(KEY);
				setState(8421);
				match(ENCRYPTION);
				setState(8422);
				match(BY);
				setState(8423);
				match(PASSWORD);
				setState(8424);
				match(EQUAL);
				setState(8425);
				((Create_keyContext)_localctx).password = match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8426);
				match(CREATE);
				setState(8427);
				match(SYMMETRIC);
				setState(8428);
				match(KEY);
				setState(8429);
				((Create_keyContext)_localctx).key_name = id();
				setState(8432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(8430);
					match(AUTHORIZATION);
					setState(8431);
					((Create_keyContext)_localctx).user_name = id();
					}
				}

				setState(8437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(8434);
					match(FROM);
					setState(8435);
					match(PROVIDER);
					setState(8436);
					((Create_keyContext)_localctx).provider_name = id();
					}
				}

				setState(8439);
				match(WITH);
				setState(8449); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(8444);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ALGORITHM:
						case CREATION_DISPOSITION:
						case IDENTITY_VALUE:
						case KEY_SOURCE:
						case PROVIDER_KEY_NAME:
							{
							setState(8440);
							key_options();
							}
							break;
						case ENCRYPTION:
							{
							setState(8441);
							match(ENCRYPTION);
							setState(8442);
							match(BY);
							setState(8443);
							encryption_mechanism();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(8447);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(8446);
							match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8451); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1171,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_optionsContext extends ParserRuleContext {
		public Token pass_phrase;
		public Token identity_phrase;
		public Token key_name_in_provider;
		public TerminalNode KEY_SOURCE() { return getToken(TSqlParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return getRuleContext(AlgorithmContext.class,0);
		}
		public TerminalNode IDENTITY_VALUE() { return getToken(TSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_options; }
	}

	public final Key_optionsContext key_options() throws RecognitionException {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_key_options);
		int _la;
		try {
			setState(8470);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8455);
				match(KEY_SOURCE);
				setState(8456);
				match(EQUAL);
				setState(8457);
				((Key_optionsContext)_localctx).pass_phrase = match(STRING);
				}
				break;
			case ALGORITHM:
				enterOuterAlt(_localctx, 2);
				{
				setState(8458);
				match(ALGORITHM);
				setState(8459);
				match(EQUAL);
				setState(8460);
				algorithm();
				}
				break;
			case IDENTITY_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8461);
				match(IDENTITY_VALUE);
				setState(8462);
				match(EQUAL);
				setState(8463);
				((Key_optionsContext)_localctx).identity_phrase = match(STRING);
				}
				break;
			case PROVIDER_KEY_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(8464);
				match(PROVIDER_KEY_NAME);
				setState(8465);
				match(EQUAL);
				setState(8466);
				((Key_optionsContext)_localctx).key_name_in_provider = match(STRING);
				}
				break;
			case CREATION_DISPOSITION:
				enterOuterAlt(_localctx, 5);
				{
				setState(8467);
				match(CREATION_DISPOSITION);
				setState(8468);
				match(EQUAL);
				setState(8469);
				_la = _input.LA(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlgorithmContext extends ParserRuleContext {
		public TerminalNode DES() { return getToken(TSqlParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(TSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSqlParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(TSqlParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(TSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSqlParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_algorithm; }
	}

	public final AlgorithmContext algorithm() throws RecognitionException {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_algorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8472);
			_la = _input.LA(1);
			if ( !(((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (AES_128 - 197)) | (1L << (AES_192 - 197)) | (1L << (AES_256 - 197)))) != 0) || _la==DES || _la==DESX || ((((_la - 482)) & ~0x3f) == 0 && ((1L << (_la - 482)) & ((1L << (RC2 - 482)) | (1L << (RC4 - 482)) | (1L << (RC4_128 - 482)))) != 0) || _la==TRIPLE_DES || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_mechanism; }
	}

	public final Encryption_mechanismContext encryption_mechanism() throws RecognitionException {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_encryption_mechanism);
		try {
			setState(8485);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8474);
				match(CERTIFICATE);
				setState(8475);
				((Encryption_mechanismContext)_localctx).certificate_name = id();
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(8476);
				match(ASYMMETRIC);
				setState(8477);
				match(KEY);
				setState(8478);
				((Encryption_mechanismContext)_localctx).asym_key_name = id();
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8479);
				match(SYMMETRIC);
				setState(8480);
				match(KEY);
				setState(8481);
				((Encryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(8482);
				match(PASSWORD);
				setState(8483);
				match(EQUAL);
				setState(8484);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decryption_mechanism; }
	}

	public final Decryption_mechanismContext decryption_mechanism() throws RecognitionException {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_decryption_mechanism);
		try {
			setState(8510);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8487);
				match(CERTIFICATE);
				setState(8488);
				((Decryption_mechanismContext)_localctx).certificate_name = id();
				setState(8493);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1175,_ctx) ) {
				case 1:
					{
					setState(8489);
					match(WITH);
					setState(8490);
					match(PASSWORD);
					setState(8491);
					match(EQUAL);
					setState(8492);
					match(STRING);
					}
					break;
				}
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(8495);
				match(ASYMMETRIC);
				setState(8496);
				match(KEY);
				setState(8497);
				((Decryption_mechanismContext)_localctx).asym_key_name = id();
				setState(8502);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1176,_ctx) ) {
				case 1:
					{
					setState(8498);
					match(WITH);
					setState(8499);
					match(PASSWORD);
					setState(8500);
					match(EQUAL);
					setState(8501);
					match(STRING);
					}
					break;
				}
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(8504);
				match(SYMMETRIC);
				setState(8505);
				match(KEY);
				setState(8506);
				((Decryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(8507);
				match(PASSWORD);
				setState(8508);
				match(EQUAL);
				setState(8509);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_permissionContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode VIEW() { return getToken(TSqlParser.VIEW, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode TAKE() { return getToken(TSqlParser.TAKE, 0); }
		public TerminalNode CONTROL() { return getToken(TSqlParser.CONTROL, 0); }
		public TerminalNode CREATE() { return getToken(TSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(TSqlParser.SHOWPLAN, 0); }
		public TerminalNode IMPERSONATE() { return getToken(TSqlParser.IMPERSONATE, 0); }
		public TerminalNode SELECT() { return getToken(TSqlParser.SELECT, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public TerminalNode INSERT() { return getToken(TSqlParser.INSERT, 0); }
		public TerminalNode ALTER() { return getToken(TSqlParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(TSqlParser.DATABASE, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public Grant_permissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_permission; }
	}

	public final Grant_permissionContext grant_permission() throws RecognitionException {
		Grant_permissionContext _localctx = new Grant_permissionContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_grant_permission);
		int _la;
		try {
			setState(8538);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8512);
				match(EXECUTE);
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 2);
				{
				setState(8513);
				match(VIEW);
				setState(8514);
				id();
				}
				break;
			case TAKE:
				enterOuterAlt(_localctx, 3);
				{
				setState(8515);
				match(TAKE);
				setState(8516);
				id();
				}
				break;
			case CONTROL:
				enterOuterAlt(_localctx, 4);
				{
				setState(8517);
				match(CONTROL);
				setState(8519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(8518);
					id();
					}
				}

				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(8521);
				match(CREATE);
				setState(8522);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SHOWPLAN:
				enterOuterAlt(_localctx, 6);
				{
				setState(8523);
				match(SHOWPLAN);
				}
				break;
			case IMPERSONATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(8524);
				match(IMPERSONATE);
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 8);
				{
				setState(8525);
				match(SELECT);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 9);
				{
				setState(8526);
				match(REFERENCES);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 10);
				{
				setState(8527);
				match(INSERT);
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 11);
				{
				setState(8528);
				match(ALTER);
				setState(8536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY || _la==DATABASE || _la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(8530);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ANY) {
						{
						setState(8529);
						match(ANY);
						}
					}

					setState(8534);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(8532);
						id();
						}
						break;
					case DATABASE:
						{
						setState(8533);
						match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public IdContext member_name;
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Set_specialContext set_special() {
			return getRuleContext(Set_specialContext.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_set_statement);
		int _la;
		try {
			setState(8579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1190,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8540);
				match(SET);
				setState(8541);
				match(LOCAL_ID);
				setState(8544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(8542);
					match(DOT);
					setState(8543);
					((Set_statementContext)_localctx).member_name = id();
					}
				}

				setState(8546);
				match(EQUAL);
				setState(8547);
				expression(0);
				setState(8549);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1184,_ctx) ) {
				case 1:
					{
					setState(8548);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8551);
				match(SET);
				setState(8552);
				match(LOCAL_ID);
				setState(8553);
				assignment_operator();
				setState(8554);
				expression(0);
				setState(8556);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1185,_ctx) ) {
				case 1:
					{
					setState(8555);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8558);
				match(SET);
				setState(8559);
				match(LOCAL_ID);
				setState(8560);
				match(EQUAL);
				setState(8561);
				match(CURSOR);
				setState(8562);
				declare_set_cursor_common();
				setState(8573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(8563);
					match(FOR);
					setState(8571);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(8564);
						match(READ);
						setState(8565);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(8566);
						match(UPDATE);
						setState(8569);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(8567);
							match(OF);
							setState(8568);
							column_name_list();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(8576);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1189,_ctx) ) {
				case 1:
					{
					setState(8575);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8578);
				set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(TSqlParser.DISTRIBUTED, 0); }
		public TerminalNode TRAN() { return getToken(TSqlParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(TSqlParser.TRANSACTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode MARK() { return getToken(TSqlParser.MARK, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode COMMIT() { return getToken(TSqlParser.COMMIT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode WORK() { return getToken(TSqlParser.WORK, 0); }
		public TerminalNode ROLLBACK() { return getToken(TSqlParser.ROLLBACK, 0); }
		public TerminalNode SAVE() { return getToken(TSqlParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_statement; }
	}

	public final Transaction_statementContext transaction_statement() throws RecognitionException {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_transaction_statement);
		int _la;
		try {
			setState(8662);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1209,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8581);
				match(BEGIN);
				setState(8582);
				match(DISTRIBUTED);
				setState(8583);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8586);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1191,_ctx) ) {
				case 1:
					{
					setState(8584);
					id();
					}
					break;
				case 2:
					{
					setState(8585);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8589);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1192,_ctx) ) {
				case 1:
					{
					setState(8588);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8591);
				match(BEGIN);
				setState(8592);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8602);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1195,_ctx) ) {
				case 1:
					{
					setState(8595);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(8593);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(8594);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8600);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1194,_ctx) ) {
					case 1:
						{
						setState(8597);
						match(WITH);
						setState(8598);
						match(MARK);
						setState(8599);
						match(STRING);
						}
						break;
					}
					}
					break;
				}
				setState(8605);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1196,_ctx) ) {
				case 1:
					{
					setState(8604);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8607);
				match(COMMIT);
				setState(8608);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8621);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1199,_ctx) ) {
				case 1:
					{
					setState(8611);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case OPENJSON:
					case PRECISION:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(8609);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(8610);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8619);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1198,_ctx) ) {
					case 1:
						{
						setState(8613);
						match(WITH);
						setState(8614);
						match(LR_BRACKET);
						setState(8615);
						match(DELAYED_DURABILITY);
						setState(8616);
						match(EQUAL);
						setState(8617);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8618);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(8624);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1200,_ctx) ) {
				case 1:
					{
					setState(8623);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8626);
				match(COMMIT);
				setState(8628);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1201,_ctx) ) {
				case 1:
					{
					setState(8627);
					match(WORK);
					}
					break;
				}
				setState(8631);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1202,_ctx) ) {
				case 1:
					{
					setState(8630);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8633);
				match(COMMIT);
				setState(8634);
				id();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8635);
				match(ROLLBACK);
				setState(8636);
				id();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8637);
				match(ROLLBACK);
				setState(8638);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8641);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1203,_ctx) ) {
				case 1:
					{
					setState(8639);
					id();
					}
					break;
				case 2:
					{
					setState(8640);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8644);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1204,_ctx) ) {
				case 1:
					{
					setState(8643);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8646);
				match(ROLLBACK);
				setState(8648);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1205,_ctx) ) {
				case 1:
					{
					setState(8647);
					match(WORK);
					}
					break;
				}
				setState(8651);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1206,_ctx) ) {
				case 1:
					{
					setState(8650);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8653);
				match(SAVE);
				setState(8654);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8657);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1207,_ctx) ) {
				case 1:
					{
					setState(8655);
					id();
					}
					break;
				case 2:
					{
					setState(8656);
					match(LOCAL_ID);
					}
					break;
				}
				setState(8660);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1208,_ctx) ) {
				case 1:
					{
					setState(8659);
					match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_batch_statementContext extends ParserRuleContext {
		public Token count;
		public TerminalNode GO_BATCH() { return getToken(TSqlParser.GO_BATCH, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Go_batch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_batch_statement; }
	}

	public final Go_batch_statementContext go_batch_statement() throws RecognitionException {
		Go_batch_statementContext _localctx = new Go_batch_statementContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_go_batch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8664);
			match(GO_BATCH);
			setState(8666);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECIMAL) {
				{
				setState(8665);
				((Go_batch_statementContext)_localctx).count = match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_statementContext extends ParserRuleContext {
		public Token count;
		public TerminalNode GO() { return getToken(TSqlParser.GO, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_statement; }
	}

	public final Go_statementContext go_statement() throws RecognitionException {
		Go_statementContext _localctx = new Go_statementContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_go_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8668);
			match(GO);
			setState(8670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECIMAL) {
				{
				setState(8669);
				((Go_statementContext)_localctx).count = match(DECIMAL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public IdContext database;
		public TerminalNode USE() { return getToken(TSqlParser.USE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_use_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8672);
			match(USE);
			setState(8673);
			((Use_statementContext)_localctx).database = id();
			setState(8675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1212,_ctx) ) {
			case 1:
				{
				setState(8674);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Setuser_statementContext extends ParserRuleContext {
		public Token user;
		public TerminalNode SETUSER() { return getToken(TSqlParser.SETUSER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setuser_statement; }
	}

	public final Setuser_statementContext setuser_statement() throws RecognitionException {
		Setuser_statementContext _localctx = new Setuser_statementContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_setuser_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8677);
			match(SETUSER);
			setState(8679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(8678);
				((Setuser_statementContext)_localctx).user = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reconfigure_statementContext extends ParserRuleContext {
		public TerminalNode RECONFIGURE() { return getToken(TSqlParser.RECONFIGURE, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode OVERRIDE() { return getToken(TSqlParser.OVERRIDE, 0); }
		public Reconfigure_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reconfigure_statement; }
	}

	public final Reconfigure_statementContext reconfigure_statement() throws RecognitionException {
		Reconfigure_statementContext _localctx = new Reconfigure_statementContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_reconfigure_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8681);
			match(RECONFIGURE);
			setState(8684);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1214,_ctx) ) {
			case 1:
				{
				setState(8682);
				match(WITH);
				setState(8683);
				match(OVERRIDE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Shutdown_statementContext extends ParserRuleContext {
		public TerminalNode SHUTDOWN() { return getToken(TSqlParser.SHUTDOWN, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode NOWAIT() { return getToken(TSqlParser.NOWAIT, 0); }
		public Shutdown_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shutdown_statement; }
	}

	public final Shutdown_statementContext shutdown_statement() throws RecognitionException {
		Shutdown_statementContext _localctx = new Shutdown_statementContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_shutdown_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8686);
			match(SHUTDOWN);
			setState(8689);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1215,_ctx) ) {
			case 1:
				{
				setState(8687);
				match(WITH);
				setState(8688);
				match(NOWAIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_specialContext extends ParserRuleContext {
		public TerminalNode DBCC() { return getToken(TSqlParser.DBCC, 0); }
		public TerminalNode SHRINKLOG() { return getToken(TSqlParser.SHRINKLOG, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Dbcc_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_special; }
	}

	public final Dbcc_specialContext dbcc_special() throws RecognitionException {
		Dbcc_specialContext _localctx = new Dbcc_specialContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_dbcc_special);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8691);
			match(DBCC);
			setState(8692);
			match(SHRINKLOG);
			setState(8702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1217,_ctx) ) {
			case 1:
				{
				setState(8693);
				match(LR_BRACKET);
				setState(8694);
				match(SIZE);
				setState(8695);
				match(EQUAL);
				setState(8699);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1216,_ctx) ) {
				case 1:
					{
					setState(8696);
					constant_expression();
					}
					break;
				case 2:
					{
					setState(8697);
					id();
					}
					break;
				case 3:
					{
					setState(8698);
					match(DEFAULT);
					}
					break;
				}
				setState(8701);
				match(RR_BRACKET);
				}
				break;
			}
			setState(8705);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1218,_ctx) ) {
			case 1:
				{
				setState(8704);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_clauseContext extends ParserRuleContext {
		public Dbcc_commandContext name;
		public TerminalNode DBCC() { return getToken(TSqlParser.DBCC, 0); }
		public Dbcc_commandContext dbcc_command() {
			return getRuleContext(Dbcc_commandContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Dbcc_optionsContext dbcc_options() {
			return getRuleContext(Dbcc_optionsContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_clause; }
	}

	public final Dbcc_clauseContext dbcc_clause() throws RecognitionException {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_dbcc_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8707);
			match(DBCC);
			setState(8708);
			((Dbcc_clauseContext)_localctx).name = dbcc_command();
			setState(8713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1219,_ctx) ) {
			case 1:
				{
				setState(8709);
				match(LR_BRACKET);
				setState(8710);
				expression_list();
				setState(8711);
				match(RR_BRACKET);
				}
				break;
			}
			setState(8717);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1220,_ctx) ) {
			case 1:
				{
				setState(8715);
				match(WITH);
				setState(8716);
				dbcc_options();
				}
				break;
			}
			setState(8720);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1221,_ctx) ) {
			case 1:
				{
				setState(8719);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_commandContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public Dbcc_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_command; }
	}

	public final Dbcc_commandContext dbcc_command() throws RecognitionException {
		Dbcc_commandContext _localctx = new Dbcc_commandContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_dbcc_command);
		try {
			setState(8724);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8722);
				simple_id();
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(8723);
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_optionsContext extends ParserRuleContext {
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Dbcc_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_options; }
	}

	public final Dbcc_optionsContext dbcc_options() throws RecognitionException {
		Dbcc_optionsContext _localctx = new Dbcc_optionsContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_dbcc_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8726);
			simple_id();
			setState(8729);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8727);
				match(COMMA);
				setState(8728);
				simple_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_clauseContext extends ParserRuleContext {
		public Token clause;
		public TerminalNode EXECUTE() { return getToken(TSqlParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode CALLER() { return getToken(TSqlParser.CALLER, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_clause; }
	}

	public final Execute_clauseContext execute_clause() throws RecognitionException {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_execute_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8731);
			match(EXECUTE);
			setState(8732);
			match(AS);
			setState(8733);
			((Execute_clauseContext)_localctx).clause = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				((Execute_clauseContext)_localctx).clause = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_localContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_local; }
	}

	public final Declare_localContext declare_local() throws RecognitionException {
		Declare_localContext _localctx = new Declare_localContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_declare_local);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8735);
			match(LOCAL_ID);
			setState(8737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(8736);
				match(AS);
				}
			}

			setState(8739);
			data_type();
			setState(8742);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(8740);
				match(EQUAL);
				setState(8741);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_definitionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(TSqlParser.TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<Table_type_indicesContext> table_type_indices() {
			return getRuleContexts(Table_type_indicesContext.class);
		}
		public Table_type_indicesContext table_type_indices(int i) {
			return getRuleContext(Table_type_indicesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_definition; }
	}

	public final Table_type_definitionContext table_type_definition() throws RecognitionException {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_table_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8744);
			match(TABLE);
			setState(8745);
			match(LR_BRACKET);
			setState(8746);
			column_def_table_constraints();
			setState(8753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CHECK || _la==INDEX || _la==PRIMARY || _la==UNIQUE || _la==COMMA) {
				{
				{
				setState(8748);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8747);
					match(COMMA);
					}
				}

				setState(8750);
				table_type_indices();
				}
				}
				setState(8755);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8756);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_indicesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CLUSTERED() { return getToken(TSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(TSqlParser.NONCLUSTERED, 0); }
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Table_type_indicesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_indices; }
	}

	public final Table_type_indicesContext table_type_indices() throws RecognitionException {
		Table_type_indicesContext _localctx = new Table_type_indicesContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_table_type_indices);
		int _la;
		try {
			setState(8779);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8768);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case INDEX:
				case PRIMARY:
					{
					{
					setState(8762);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PRIMARY:
						{
						setState(8758);
						match(PRIMARY);
						setState(8759);
						match(KEY);
						}
						break;
					case INDEX:
						{
						setState(8760);
						match(INDEX);
						setState(8761);
						id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(8765);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CLUSTERED || _la==NONCLUSTERED) {
						{
						setState(8764);
						_la = _input.LA(1);
						if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					}
					break;
				case UNIQUE:
					{
					setState(8767);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8770);
				match(LR_BRACKET);
				setState(8771);
				column_name_list_with_order();
				setState(8772);
				match(RR_BRACKET);
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 2);
				{
				setState(8774);
				match(CHECK);
				setState(8775);
				match(LR_BRACKET);
				setState(8776);
				search_condition();
				setState(8777);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_type_definitionContext extends ParserRuleContext {
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return getRuleContext(Xml_schema_collectionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public TerminalNode DOCUMENT() { return getToken(TSqlParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_type_definition; }
	}

	public final Xml_type_definitionContext xml_type_definition() throws RecognitionException {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_xml_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8781);
			match(XML);
			setState(8782);
			match(LR_BRACKET);
			setState(8784);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT || _la==DOCUMENT) {
				{
				setState(8783);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(8786);
			xml_schema_collection();
			setState(8787);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_schema_collectionContext extends ParserRuleContext {
		public List<TerminalNode> ID() { return getTokens(TSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(TSqlParser.ID, i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_schema_collection; }
	}

	public final Xml_schema_collectionContext xml_schema_collection() throws RecognitionException {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8789);
			match(ID);
			setState(8790);
			match(DOT);
			setState(8791);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintsContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraints; }
	}

	public final Column_def_table_constraintsContext column_def_table_constraints() throws RecognitionException {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_column_def_table_constraints);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8793);
			column_def_table_constraint();
			setState(8800);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1234,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8795);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(8794);
						match(COMMA);
						}
					}

					setState(8797);
					column_def_table_constraint();
					}
					} 
				}
				setState(8802);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1234,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public Materialized_column_definitionContext materialized_column_definition() {
			return getRuleContext(Materialized_column_definitionContext.class,0);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_column_def_table_constraint);
		try {
			setState(8806);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8803);
				column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8804);
				materialized_column_definition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8805);
				table_constraint();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public IdContext constraint;
		public Token seed;
		public Token increment;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public List<Null_or_defaultContext> null_or_default() {
			return getRuleContexts(Null_or_defaultContext.class);
		}
		public Null_or_defaultContext null_or_default(int i) {
			return getRuleContext(Null_or_defaultContext.class,i);
		}
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUIDCOL() { return getToken(TSqlParser.ROWGUIDCOL, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public TerminalNode PERSISTED() { return getToken(TSqlParser.PERSISTED, 0); }
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8808);
			id();
			setState(8815);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE:
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(8809);
				data_type();
				}
				break;
			case AS:
				{
				setState(8810);
				match(AS);
				setState(8811);
				expression(0);
				setState(8813);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1236,_ctx) ) {
				case 1:
					{
					setState(8812);
					match(PERSISTED);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8819);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(8817);
				match(COLLATE);
				setState(8818);
				id();
				}
			}

			setState(8822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1239,_ctx) ) {
			case 1:
				{
				setState(8821);
				null_notnull();
				}
				break;
			}
			setState(8845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1244,_ctx) ) {
			case 1:
				{
				setState(8826);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(8824);
					match(CONSTRAINT);
					setState(8825);
					((Column_definitionContext)_localctx).constraint = id();
					}
				}

				setState(8828);
				null_or_default();
				setState(8830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1241,_ctx) ) {
				case 1:
					{
					setState(8829);
					null_or_default();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(8832);
				match(IDENTITY);
				setState(8838);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1242,_ctx) ) {
				case 1:
					{
					setState(8833);
					match(LR_BRACKET);
					setState(8834);
					((Column_definitionContext)_localctx).seed = match(DECIMAL);
					setState(8835);
					match(COMMA);
					setState(8836);
					((Column_definitionContext)_localctx).increment = match(DECIMAL);
					setState(8837);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8843);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1243,_ctx) ) {
				case 1:
					{
					setState(8840);
					match(NOT);
					setState(8841);
					match(FOR);
					setState(8842);
					match(REPLICATION);
					}
					break;
				}
				}
				break;
			}
			setState(8848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWGUIDCOL) {
				{
				setState(8847);
				match(ROWGUIDCOL);
				}
			}

			setState(8853);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1246,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8850);
					column_constraint();
					}
					} 
				}
				setState(8855);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1246,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Materialized_column_definitionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode COMPUTE() { return getToken(TSqlParser.COMPUTE, 0); }
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode MATERIALIZED() { return getToken(TSqlParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public Materialized_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_materialized_column_definition; }
	}

	public final Materialized_column_definitionContext materialized_column_definition() throws RecognitionException {
		Materialized_column_definitionContext _localctx = new Materialized_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_materialized_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8856);
			id();
			setState(8857);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==COMPUTE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(8858);
			expression(0);
			setState(8862);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1247,_ctx) ) {
			case 1:
				{
				setState(8859);
				match(MATERIALIZED);
				}
				break;
			case 2:
				{
				setState(8860);
				match(NOT);
				setState(8861);
				match(MATERIALIZED);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext pk;
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(8864);
				match(CONSTRAINT);
				setState(8865);
				((Column_constraintContext)_localctx).constraint = id();
				}
			}

			setState(8905);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(8871);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(8868);
					match(PRIMARY);
					setState(8869);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(8870);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8874);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(8873);
					clustered();
					}
				}

				setState(8877);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1251,_ctx) ) {
				case 1:
					{
					setState(8876);
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				{
				setState(8879);
				match(CHECK);
				setState(8883);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8880);
					match(NOT);
					setState(8881);
					match(FOR);
					setState(8882);
					match(REPLICATION);
					}
				}

				setState(8885);
				match(LR_BRACKET);
				setState(8886);
				search_condition();
				setState(8887);
				match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				{
				setState(8891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(8889);
					match(FOREIGN);
					setState(8890);
					match(KEY);
					}
				}

				setState(8893);
				match(REFERENCES);
				setState(8894);
				table_name();
				setState(8895);
				match(LR_BRACKET);
				setState(8896);
				((Column_constraintContext)_localctx).pk = column_name_list();
				setState(8897);
				match(RR_BRACKET);
				setState(8899);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1254,_ctx) ) {
				case 1:
					{
					setState(8898);
					on_delete();
					}
					break;
				}
				setState(8902);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8901);
					on_update();
					}
				}

				}
				break;
			case NOT:
			case NULL:
				{
				setState(8904);
				null_notnull();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode CHECK() { return getToken(TSqlParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(TSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(TSqlParser.KEY, 0); }
		public TerminalNode REFERENCES() { return getToken(TSqlParser.REFERENCES, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSqlParser.CONSTRAINT, 0); }
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public TerminalNode PRIMARY() { return getToken(TSqlParser.PRIMARY, 0); }
		public TerminalNode UNIQUE() { return getToken(TSqlParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public TerminalNode REPLICATION() { return getToken(TSqlParser.REPLICATION, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> PLUS() { return getTokens(TSqlParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(TSqlParser.PLUS, i);
		}
		public List<Function_callContext> function_call() {
			return getRuleContexts(Function_callContext.class);
		}
		public Function_callContext function_call(int i) {
			return getRuleContext(Function_callContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(8907);
				match(CONSTRAINT);
				setState(8908);
				((Table_constraintContext)_localctx).constraint = id();
				}
			}

			setState(8975);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				{
				setState(8914);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(8911);
					match(PRIMARY);
					setState(8912);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(8913);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8917);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(8916);
					clustered();
					}
				}

				setState(8919);
				match(LR_BRACKET);
				setState(8920);
				column_name_list_with_order();
				setState(8921);
				match(RR_BRACKET);
				setState(8923);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1260,_ctx) ) {
				case 1:
					{
					setState(8922);
					index_options();
					}
					break;
				}
				setState(8927);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8925);
					match(ON);
					setState(8926);
					id();
					}
				}

				}
				break;
			case CHECK:
				{
				setState(8929);
				match(CHECK);
				setState(8933);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8930);
					match(NOT);
					setState(8931);
					match(FOR);
					setState(8932);
					match(REPLICATION);
					}
				}

				setState(8935);
				match(LR_BRACKET);
				setState(8936);
				search_condition();
				setState(8937);
				match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				{
				setState(8939);
				match(DEFAULT);
				setState(8941);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1263,_ctx) ) {
				case 1:
					{
					setState(8940);
					match(LR_BRACKET);
					}
					break;
				}
				setState(8947); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(8947);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(8943);
						match(STRING);
						}
						break;
					case PLUS:
						{
						setState(8944);
						match(PLUS);
						}
						break;
					case COALESCE:
					case CONTAINSTABLE:
					case CONVERT:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case FREETEXTTABLE:
					case IDENTITY:
					case LEFT:
					case NULLIF:
					case OPENJSON:
					case PRECISION:
					case RIGHT:
					case SEMANTICKEYPHRASETABLE:
					case SEMANTICSIMILARITYDETAILSTABLE:
					case SEMANTICSIMILARITYTABLE:
					case SESSION_USER:
					case SYSTEM_USER:
					case USER:
					case ABSOLUTE:
					case AT_KEYWORD:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPLICATION_LOG:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case AUDIT:
					case AUDIT_GUID:
					case AUTO:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AVAILABILITY:
					case AVG:
					case BACKUP_PRIORITY:
					case BEGIN_DIALOG:
					case BIGINT:
					case BINARY_KEYWORD:
					case BINARY_BASE64:
					case BINARY_CHECKSUM:
					case BINDING:
					case BLOB_STORAGE:
					case BROKER:
					case BROKER_INSTANCE:
					case BULK_LOGGED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case TRY_CAST:
					case CATALOG:
					case CATCH:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHECKSUM:
					case CHECKSUM_AGG:
					case CLEANUP:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case CONCAT:
					case CONCAT_NULL_YIELDS_NULL:
					case CONTENT:
					case CONTROL:
					case COOKIE:
					case COUNT:
					case COUNT_BIG:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CUME_DIST:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case DATA:
					case DATE_CORRELATION_OPTIMIZATION:
					case DATEADD:
					case DATEDIFF:
					case DATENAME:
					case DATEPART:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DOUBLE_QUOTE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DELAY:
					case DELAYED_DURABILITY:
					case DELETED:
					case DENSE_RANK:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIALOG:
					case DIRECTORY_NAME:
					case DISABLE:
					case DISABLE_BROKER:
					case DISABLED:
					case DISK_DRIVE:
					case DOCUMENT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE:
					case ENABLE_BROKER:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ERROR_BROKER_CONVERSATIONS:
					case EXCLUSIVE:
					case EXECUTABLE:
					case EXIST:
					case EXPAND:
					case EXPIRY_DATE:
					case EXPLICIT:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILURE:
					case FAILURE_CONDITION_LEVEL:
					case FAST:
					case FAST_FORWARD:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FIRST_VALUE:
					case FOLLOWING:
					case FORCE:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCED:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GETDATE:
					case GETUTCDATE:
					case GLOBAL:
					case GO_BATCH:
					case GO:
					case GROUP_MAX_REQUESTS:
					case GROUPING:
					case GROUPING_ID:
					case HADR:
					case HASH:
					case HEALTH_CHECK_TIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCREMENTAL:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSERTED:
					case INT:
					case IP:
					case ISOLATION:
					case JOB:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KEY_SOURCE:
					case KEYS:
					case KEYSET:
					case LAG:
					case LAST:
					case LAST_VALUE:
					case LEAD:
					case LEVEL:
					case LIST:
					case LISTENER:
					case LISTENER_URL:
					case LOB_COMPACTION:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCK_ESCALATION:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MATERIALIZED:
					case MAX:
					case MAX_CPU_PERCENT:
					case MAX_DOP:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MB:
					case MEDIUM:
					case MEMORY_OPTIMIZED_DATA:
					case MESSAGE:
					case MIN:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MIRROR_ADDRESS:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case NAME:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEXT:
					case NO:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NOCOUNT:
					case NODES:
					case NOEXPAND:
					case NON_TRANSACTED_ACCESS:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOWAIT:
					case NTILE:
					case NUMANODE:
					case NUMBER:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OVERRIDE:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PATH:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case POISON_MESSAGE_HANDLING:
					case POOL:
					case PORT:
					case PRECEDING:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY:
					case PRIORITY_LEVEL:
					case PRIVATE:
					case PRIVATE_KEY:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROPERTY:
					case PROVIDER:
					case PROVIDER_KEY_NAME:
					case QUERY:
					case QUEUE:
					case QUEUE_DELAY:
					case QUOTED_IDENTIFIER:
					case RANGE:
					case RANK:
					case RC2:
					case RC4:
					case RC4_128:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY:
					case READ_ONLY_ROUTING_LIST:
					case READ_WRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case RELATIVE:
					case REMOTE:
					case REMOTE_SERVICE_NAME:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case RESERVE_DISK_SPACE:
					case RESOURCE:
					case RESOURCE_MANAGER_LOCATION:
					case RESTRICTED_USER:
					case RETENTION:
					case ROBUST:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROW_NUMBER:
					case ROWGUID:
					case ROWS:
					case SAMPLE:
					case SCHEMABINDING:
					case SCOPED:
					case SCROLL:
					case SCROLL_LOCKS:
					case SEARCH:
					case SECONDARY:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDS:
					case SECRET:
					case SECURITY:
					case SECURITY_LOG:
					case SEEDING_MODE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SESSION_TIMEOUT:
					case SETERROR:
					case SHARE:
					case SHOWPLAN:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SIZE:
					case SMALLINT:
					case SNAPSHOT:
					case SPATIAL_WINDOW_MAX_CELLS:
					case STANDBY:
					case START_DATE:
					case STATIC:
					case STATS_STREAM:
					case STATUS:
					case STATUSONLY:
					case STDEV:
					case STDEVP:
					case STOPLIST:
					case STRING_AGG:
					case STUFF:
					case SUBJECT:
					case SUBSCRIPTION:
					case SUM:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TARGET_RECOVERY_TIME:
					case TB:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TINYINT:
					case TORN_PAGE_DETECTION:
					case TRANSFORM_NOISE_WORDS:
					case TRIPLE_DES:
					case TRIPLE_DES_3KEY:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE:
					case TYPE_WARNING:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNKNOWN:
					case UNLIMITED:
					case UOW:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VAR:
					case VARBINARY_KEYWORD:
					case VARP:
					case VIEW_METADATA:
					case VIEWS:
					case WAIT:
					case WELL_FORMED_XML:
					case WITHOUT_ARRAY_WRAPPER:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XSINIL:
					case ZONE:
					case ABSENT:
					case AES:
					case ALLOW_CONNECTIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ANONYMOUS:
					case APPEND:
					case APPLICATION:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUTHENTICATION:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case BEFORE:
					case BLOCK:
					case BLOCKSIZE:
					case BLOCKING_HIERARCHY:
					case BUFFER:
					case BUFFERCOUNT:
					case CACHE:
					case CALLED:
					case CERTIFICATE:
					case CHANGETABLE:
					case CHANGES:
					case CHECK_POLICY:
					case CHECK_EXPIRATION:
					case CLASSIFIER_FUNCTION:
					case CLUSTER:
					case COMPRESSION:
					case CONFIGURATION:
					case CONTAINMENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT:
					case CONTRACT_NAME:
					case CONVERSATION:
					case COPY_ONLY:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATABASE_MIRRORING:
					case DEFAULT_DATABASE:
					case DEFAULT_SCHEMA:
					case DIAGNOSTICS:
					case DIFFERENTIAL:
					case DTC_SUPPORT:
					case ENABLED:
					case ENDPOINT:
					case ERROR:
					case EVENT:
					case EVENTDATA:
					case EVENT_RETENTION_MODE:
					case EXECUTABLE_FILE:
					case EXPIREDATE:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAILOVER:
					case FAILURECONDITIONLEVEL:
					case FAN_IN:
					case FILE_SNAPSHOT:
					case FORCESEEK:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case GET:
					case GOVERNOR:
					case HASHED:
					case HEALTHCHECKTIMEOUT:
					case IIF:
					case IO:
					case INCLUDE:
					case INCREMENT:
					case INFINITE:
					case INIT:
					case INSTEAD:
					case ISNULL:
					case KERBEROS:
					case KEY_PATH:
					case KEY_STORE_PROVIDER_NAME:
					case LANGUAGE:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LOCAL_SERVICE_NAME:
					case LOG:
					case MATCHED:
					case MASTER:
					case MAX_MEMORY:
					case MAXTRANSFER:
					case MAXVALUE:
					case MAX_DISPATCH_LATENCY:
					case MAX_EVENT_SIZE:
					case MAX_SIZE:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEMBER:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARDING:
					case MESSAGE_FORWARD_SIZE:
					case MINVALUE:
					case MIRROR:
					case MUST_CHANGE:
					case NOFORMAT:
					case NOINIT:
					case NONE:
					case NOREWIND:
					case NOSKIP:
					case NOUNLOAD:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NOTIFICATION:
					case NTLM:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case PAGE:
					case PARAM_NODE:
					case PARTIAL:
					case PASSWORD:
					case PERMISSION_SET:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERSISTED:
					case PLATFORM:
					case POLICY:
					case PREDICATE:
					case PROCESS:
					case PROFILE:
					case PYTHON:
					case R:
					case READ_WRITE_FILEGROUPS:
					case REGENERATE:
					case RELATED_CONVERSATION:
					case RELATED_CONVERSATION_GROUP:
					case REQUIRED:
					case RESET:
					case RESTART:
					case RESUME:
					case RETAINDAYS:
					case RETURNS:
					case REWIND:
					case ROLE:
					case RSA_512:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case SAFETY:
					case SAFE:
					case SCHEDULER:
					case SCHEME:
					case SERVER:
					case SERVICE:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SESSION:
					case SID:
					case SKIP_KEYWORD:
					case SOFTNUMA:
					case SOURCE:
					case SPECIFICATION:
					case SPLIT:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STATE:
					case STATS:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STOP:
					case STOPPED:
					case STOP_ON_ERROR:
					case SUPPORTED:
					case TAPE:
					case TARGET:
					case TCP:
					case TRACK_CAUSALITY:
					case TRANSFER:
					case UNCHECKED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case VERBOSELOGGING:
					case VISIBILITY:
					case WINDOWS:
					case WITHOUT:
					case WITNESS:
					case VARCHAR:
					case NVARCHAR:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case LOCAL_ID:
					case ID:
					case DOT:
					case LR_BRACKET:
						{
						setState(8945);
						function_call();
						}
						break;
					case DECIMAL:
						{
						setState(8946);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(8949); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 23)) & ~0x3f) == 0 && ((1L << (_la - 23)) & ((1L << (COALESCE - 23)) | (1L << (CONTAINSTABLE - 23)) | (1L << (CONVERT - 23)) | (1L << (CURRENT_TIMESTAMP - 23)) | (1L << (CURRENT_USER - 23)) | (1L << (FREETEXTTABLE - 23)) | (1L << (IDENTITY - 23)))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (LEFT - 95)) | (1L << (NULLIF - 95)) | (1L << (OPENJSON - 95)) | (1L << (PRECISION - 95)) | (1L << (RIGHT - 95)) | (1L << (SEMANTICKEYPHRASETABLE - 95)) | (1L << (SEMANTICSIMILARITYDETAILSTABLE - 95)) | (1L << (SEMANTICSIMILARITYTABLE - 95)) | (1L << (SESSION_USER - 95)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (SYSTEM_USER - 161)) | (1L << (USER - 161)) | (1L << (ABSOLUTE - 161)) | (1L << (AT_KEYWORD - 161)) | (1L << (ACCENT_SENSITIVITY - 161)) | (1L << (ACTION - 161)) | (1L << (ACTIVATION - 161)) | (1L << (ACTIVE - 161)) | (1L << (ADDRESS - 161)) | (1L << (AES_128 - 161)) | (1L << (AES_192 - 161)) | (1L << (AES_256 - 161)) | (1L << (AFFINITY - 161)) | (1L << (AFTER - 161)) | (1L << (AGGREGATE - 161)) | (1L << (ALGORITHM - 161)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 161)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 161)) | (1L << (ALLOWED - 161)) | (1L << (ANSI_NULL_DEFAULT - 161)) | (1L << (ANSI_NULLS - 161)) | (1L << (ANSI_PADDING - 161)) | (1L << (ANSI_WARNINGS - 161)) | (1L << (APPLICATION_LOG - 161)) | (1L << (APPLY - 161)) | (1L << (ARITHABORT - 161)) | (1L << (ASSEMBLY - 161)) | (1L << (AUDIT - 161)) | (1L << (AUDIT_GUID - 161)) | (1L << (AUTO - 161)) | (1L << (AUTO_CLEANUP - 161)) | (1L << (AUTO_CLOSE - 161)) | (1L << (AUTO_CREATE_STATISTICS - 161)) | (1L << (AUTO_SHRINK - 161)) | (1L << (AUTO_UPDATE_STATISTICS - 161)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 161)) | (1L << (AVAILABILITY - 161)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (AVG - 225)) | (1L << (BACKUP_PRIORITY - 225)) | (1L << (BEGIN_DIALOG - 225)) | (1L << (BIGINT - 225)) | (1L << (BINARY_KEYWORD - 225)) | (1L << (BINARY_BASE64 - 225)) | (1L << (BINARY_CHECKSUM - 225)) | (1L << (BINDING - 225)) | (1L << (BLOB_STORAGE - 225)) | (1L << (BROKER - 225)) | (1L << (BROKER_INSTANCE - 225)) | (1L << (BULK_LOGGED - 225)) | (1L << (CALLER - 225)) | (1L << (CAP_CPU_PERCENT - 225)) | (1L << (CAST - 225)) | (1L << (TRY_CAST - 225)) | (1L << (CATALOG - 225)) | (1L << (CATCH - 225)) | (1L << (CHANGE_RETENTION - 225)) | (1L << (CHANGE_TRACKING - 225)) | (1L << (CHECKSUM - 225)) | (1L << (CHECKSUM_AGG - 225)) | (1L << (CLEANUP - 225)) | (1L << (COLLECTION - 225)) | (1L << (COLUMN_MASTER_KEY - 225)) | (1L << (COMMITTED - 225)) | (1L << (COMPATIBILITY_LEVEL - 225)) | (1L << (CONCAT - 225)) | (1L << (CONCAT_NULL_YIELDS_NULL - 225)) | (1L << (CONTENT - 225)) | (1L << (CONTROL - 225)) | (1L << (COOKIE - 225)) | (1L << (COUNT - 225)) | (1L << (COUNT_BIG - 225)) | (1L << (COUNTER - 225)) | (1L << (CPU - 225)) | (1L << (CREATE_NEW - 225)) | (1L << (CREATION_DISPOSITION - 225)) | (1L << (CREDENTIAL - 225)) | (1L << (CRYPTOGRAPHIC - 225)) | (1L << (CUME_DIST - 225)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 225)) | (1L << (CURSOR_DEFAULT - 225)) | (1L << (DATA - 225)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 225)) | (1L << (DATEADD - 225)) | (1L << (DATEDIFF - 225)) | (1L << (DATENAME - 225)) | (1L << (DATEPART - 225)) | (1L << (DAYS - 225)) | (1L << (DB_CHAINING - 225)) | (1L << (DB_FAILOVER - 225)) | (1L << (DECRYPTION - 225)) | (1L << (DEFAULT_DOUBLE_QUOTE - 225)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 225)) | (1L << (DEFAULT_LANGUAGE - 225)) | (1L << (DELAY - 225)) | (1L << (DELAYED_DURABILITY - 225)) | (1L << (DELETED - 225)) | (1L << (DENSE_RANK - 225)) | (1L << (DEPENDENTS - 225)) | (1L << (DES - 225)) | (1L << (DESCRIPTION - 225)) | (1L << (DESX - 225)))) != 0) || ((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & ((1L << (DHCP - 289)) | (1L << (DIALOG - 289)) | (1L << (DIRECTORY_NAME - 289)) | (1L << (DISABLE - 289)) | (1L << (DISABLE_BROKER - 289)) | (1L << (DISABLED - 289)) | (1L << (DISK_DRIVE - 289)) | (1L << (DOCUMENT - 289)) | (1L << (DYNAMIC - 289)) | (1L << (ELEMENTS - 289)) | (1L << (EMERGENCY - 289)) | (1L << (EMPTY - 289)) | (1L << (ENABLE - 289)) | (1L << (ENABLE_BROKER - 289)) | (1L << (ENCRYPTED_VALUE - 289)) | (1L << (ENCRYPTION - 289)) | (1L << (ENDPOINT_URL - 289)) | (1L << (ERROR_BROKER_CONVERSATIONS - 289)) | (1L << (EXCLUSIVE - 289)) | (1L << (EXECUTABLE - 289)) | (1L << (EXIST - 289)) | (1L << (EXPAND - 289)) | (1L << (EXPIRY_DATE - 289)) | (1L << (EXPLICIT - 289)) | (1L << (FAIL_OPERATION - 289)) | (1L << (FAILOVER_MODE - 289)) | (1L << (FAILURE - 289)) | (1L << (FAILURE_CONDITION_LEVEL - 289)) | (1L << (FAST - 289)) | (1L << (FAST_FORWARD - 289)) | (1L << (FILEGROUP - 289)) | (1L << (FILEGROWTH - 289)) | (1L << (FILENAME - 289)) | (1L << (FILEPATH - 289)) | (1L << (FILESTREAM - 289)) | (1L << (FILTER - 289)) | (1L << (FIRST - 289)) | (1L << (FIRST_VALUE - 289)) | (1L << (FOLLOWING - 289)) | (1L << (FORCE - 289)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 289)) | (1L << (FORCED - 289)) | (1L << (FORMAT - 289)) | (1L << (FORWARD_ONLY - 289)) | (1L << (FULLSCAN - 289)) | (1L << (FULLTEXT - 289)) | (1L << (GB - 289)) | (1L << (GETDATE - 289)) | (1L << (GETUTCDATE - 289)) | (1L << (GLOBAL - 289)) | (1L << (GO_BATCH - 289)) | (1L << (GO - 289)) | (1L << (GROUP_MAX_REQUESTS - 289)) | (1L << (GROUPING - 289)) | (1L << (GROUPING_ID - 289)) | (1L << (HADR - 289)) | (1L << (HASH - 289)) | (1L << (HEALTH_CHECK_TIMEOUT - 289)) | (1L << (HIGH - 289)) | (1L << (HONOR_BROKER_PRIORITY - 289)) | (1L << (HOURS - 289)) | (1L << (IDENTITY_VALUE - 289)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 289)) | (1L << (IMMEDIATE - 289)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (IMPERSONATE - 353)) | (1L << (IMPORTANCE - 353)) | (1L << (INCLUDE_NULL_VALUES - 353)) | (1L << (INCREMENTAL - 353)) | (1L << (INITIATOR - 353)) | (1L << (INPUT - 353)) | (1L << (INSENSITIVE - 353)) | (1L << (INSERTED - 353)) | (1L << (INT - 353)) | (1L << (IP - 353)) | (1L << (ISOLATION - 353)) | (1L << (JOB - 353)) | (1L << (JSON - 353)) | (1L << (KB - 353)) | (1L << (KEEP - 353)) | (1L << (KEEPFIXED - 353)) | (1L << (KEY_SOURCE - 353)) | (1L << (KEYS - 353)) | (1L << (KEYSET - 353)) | (1L << (LAG - 353)) | (1L << (LAST - 353)) | (1L << (LAST_VALUE - 353)) | (1L << (LEAD - 353)) | (1L << (LEVEL - 353)) | (1L << (LIST - 353)) | (1L << (LISTENER - 353)) | (1L << (LISTENER_URL - 353)) | (1L << (LOB_COMPACTION - 353)) | (1L << (LOCAL - 353)) | (1L << (LOCATION - 353)) | (1L << (LOCK - 353)) | (1L << (LOCK_ESCALATION - 353)) | (1L << (LOGIN - 353)) | (1L << (LOOP - 353)) | (1L << (LOW - 353)) | (1L << (MANUAL - 353)) | (1L << (MARK - 353)) | (1L << (MATERIALIZED - 353)) | (1L << (MAX - 353)) | (1L << (MAX_CPU_PERCENT - 353)) | (1L << (MAX_DOP - 353)) | (1L << (MAX_FILES - 353)) | (1L << (MAX_IOPS_PER_VOLUME - 353)) | (1L << (MAX_MEMORY_PERCENT - 353)) | (1L << (MAX_PROCESSES - 353)) | (1L << (MAX_QUEUE_READERS - 353)) | (1L << (MAX_ROLLOVER_FILES - 353)) | (1L << (MAXDOP - 353)) | (1L << (MAXRECURSION - 353)) | (1L << (MAXSIZE - 353)) | (1L << (MB - 353)) | (1L << (MEDIUM - 353)) | (1L << (MEMORY_OPTIMIZED_DATA - 353)) | (1L << (MESSAGE - 353)) | (1L << (MIN - 353)) | (1L << (MIN_ACTIVE_ROWVERSION - 353)) | (1L << (MIN_CPU_PERCENT - 353)) | (1L << (MIN_IOPS_PER_VOLUME - 353)) | (1L << (MIN_MEMORY_PERCENT - 353)) | (1L << (MINUTES - 353)) | (1L << (MIRROR_ADDRESS - 353)) | (1L << (MIXED_PAGE_ALLOCATION - 353)) | (1L << (MODE - 353)) | (1L << (MODIFY - 353)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MOVE - 417)) | (1L << (MULTI_USER - 417)) | (1L << (NAME - 417)) | (1L << (NESTED_TRIGGERS - 417)) | (1L << (NEW_ACCOUNT - 417)) | (1L << (NEW_BROKER - 417)) | (1L << (NEW_PASSWORD - 417)) | (1L << (NEXT - 417)) | (1L << (NO - 417)) | (1L << (NO_TRUNCATE - 417)) | (1L << (NO_WAIT - 417)) | (1L << (NOCOUNT - 417)) | (1L << (NODES - 417)) | (1L << (NOEXPAND - 417)) | (1L << (NON_TRANSACTED_ACCESS - 417)) | (1L << (NORECOMPUTE - 417)) | (1L << (NORECOVERY - 417)) | (1L << (NOWAIT - 417)) | (1L << (NTILE - 417)) | (1L << (NUMANODE - 417)) | (1L << (NUMBER - 417)) | (1L << (NUMERIC_ROUNDABORT - 417)) | (1L << (OBJECT - 417)) | (1L << (OFFLINE - 417)) | (1L << (OFFSET - 417)) | (1L << (OLD_ACCOUNT - 417)) | (1L << (ONLINE - 417)) | (1L << (ONLY - 417)) | (1L << (OPEN_EXISTING - 417)) | (1L << (OPTIMISTIC - 417)) | (1L << (OPTIMIZE - 417)) | (1L << (OUT - 417)) | (1L << (OUTPUT - 417)) | (1L << (OVERRIDE - 417)) | (1L << (OWNER - 417)) | (1L << (PAGE_VERIFY - 417)) | (1L << (PARAMETERIZATION - 417)) | (1L << (PARTITION - 417)) | (1L << (PARTITIONS - 417)) | (1L << (PARTNER - 417)) | (1L << (PATH - 417)) | (1L << (PERCENT_RANK - 417)) | (1L << (PERCENTILE_CONT - 417)) | (1L << (PERCENTILE_DISC - 417)) | (1L << (POISON_MESSAGE_HANDLING - 417)) | (1L << (POOL - 417)) | (1L << (PORT - 417)) | (1L << (PRECEDING - 417)) | (1L << (PRIMARY_ROLE - 417)) | (1L << (PRIOR - 417)) | (1L << (PRIORITY - 417)) | (1L << (PRIORITY_LEVEL - 417)) | (1L << (PRIVATE - 417)) | (1L << (PRIVATE_KEY - 417)) | (1L << (PRIVILEGES - 417)) | (1L << (PROCEDURE_NAME - 417)) | (1L << (PROPERTY - 417)) | (1L << (PROVIDER - 417)) | (1L << (PROVIDER_KEY_NAME - 417)) | (1L << (QUERY - 417)) | (1L << (QUEUE - 417)) | (1L << (QUEUE_DELAY - 417)) | (1L << (QUOTED_IDENTIFIER - 417)) | (1L << (RANGE - 417)))) != 0) || ((((_la - 481)) & ~0x3f) == 0 && ((1L << (_la - 481)) & ((1L << (RANK - 481)) | (1L << (RC2 - 481)) | (1L << (RC4 - 481)) | (1L << (RC4_128 - 481)) | (1L << (READ_COMMITTED_SNAPSHOT - 481)) | (1L << (READ_ONLY - 481)) | (1L << (READ_ONLY_ROUTING_LIST - 481)) | (1L << (READ_WRITE - 481)) | (1L << (READONLY - 481)) | (1L << (REBUILD - 481)) | (1L << (RECEIVE - 481)) | (1L << (RECOMPILE - 481)) | (1L << (RECOVERY - 481)) | (1L << (RECURSIVE_TRIGGERS - 481)) | (1L << (RELATIVE - 481)) | (1L << (REMOTE - 481)) | (1L << (REMOTE_SERVICE_NAME - 481)) | (1L << (REMOVE - 481)) | (1L << (REORGANIZE - 481)) | (1L << (REPEATABLE - 481)) | (1L << (REPLICA - 481)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 481)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 481)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 481)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 481)) | (1L << (RESERVE_DISK_SPACE - 481)) | (1L << (RESOURCE - 481)) | (1L << (RESOURCE_MANAGER_LOCATION - 481)) | (1L << (RESTRICTED_USER - 481)) | (1L << (RETENTION - 481)) | (1L << (ROBUST - 481)) | (1L << (ROOT - 481)) | (1L << (ROUTE - 481)) | (1L << (ROW - 481)) | (1L << (ROW_NUMBER - 481)) | (1L << (ROWGUID - 481)) | (1L << (ROWS - 481)) | (1L << (SAMPLE - 481)) | (1L << (SCHEMABINDING - 481)) | (1L << (SCOPED - 481)) | (1L << (SCROLL - 481)) | (1L << (SCROLL_LOCKS - 481)) | (1L << (SEARCH - 481)) | (1L << (SECONDARY - 481)) | (1L << (SECONDARY_ONLY - 481)) | (1L << (SECONDARY_ROLE - 481)) | (1L << (SECONDS - 481)) | (1L << (SECRET - 481)) | (1L << (SECURITY - 481)) | (1L << (SECURITY_LOG - 481)) | (1L << (SEEDING_MODE - 481)) | (1L << (SELF - 481)) | (1L << (SEMI_SENSITIVE - 481)) | (1L << (SEND - 481)) | (1L << (SENT - 481)) | (1L << (SEQUENCE - 481)) | (1L << (SERIALIZABLE - 481)) | (1L << (SESSION_TIMEOUT - 481)) | (1L << (SETERROR - 481)) | (1L << (SHARE - 481)) | (1L << (SHOWPLAN - 481)) | (1L << (SIGNATURE - 481)) | (1L << (SIMPLE - 481)) | (1L << (SINGLE_USER - 481)))) != 0) || ((((_la - 545)) & ~0x3f) == 0 && ((1L << (_la - 545)) & ((1L << (SIZE - 545)) | (1L << (SMALLINT - 545)) | (1L << (SNAPSHOT - 545)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 545)) | (1L << (STANDBY - 545)) | (1L << (START_DATE - 545)) | (1L << (STATIC - 545)) | (1L << (STATS_STREAM - 545)) | (1L << (STATUS - 545)) | (1L << (STATUSONLY - 545)) | (1L << (STDEV - 545)) | (1L << (STDEVP - 545)) | (1L << (STOPLIST - 545)) | (1L << (STRING_AGG - 545)) | (1L << (STUFF - 545)) | (1L << (SUBJECT - 545)) | (1L << (SUBSCRIPTION - 545)) | (1L << (SUM - 545)) | (1L << (SUSPEND - 545)) | (1L << (SYMMETRIC - 545)) | (1L << (SYNCHRONOUS_COMMIT - 545)) | (1L << (SYNONYM - 545)) | (1L << (SYSTEM - 545)) | (1L << (TAKE - 545)) | (1L << (TARGET_RECOVERY_TIME - 545)) | (1L << (TB - 545)) | (1L << (TEXTIMAGE_ON - 545)) | (1L << (THROW - 545)) | (1L << (TIES - 545)) | (1L << (TIME - 545)) | (1L << (TIMEOUT - 545)) | (1L << (TIMER - 545)) | (1L << (TINYINT - 545)) | (1L << (TORN_PAGE_DETECTION - 545)) | (1L << (TRANSFORM_NOISE_WORDS - 545)) | (1L << (TRIPLE_DES - 545)) | (1L << (TRIPLE_DES_3KEY - 545)) | (1L << (TRUSTWORTHY - 545)) | (1L << (TRY - 545)) | (1L << (TSQL - 545)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 545)) | (1L << (TYPE - 545)) | (1L << (TYPE_WARNING - 545)) | (1L << (UNBOUNDED - 545)) | (1L << (UNCOMMITTED - 545)) | (1L << (UNKNOWN - 545)) | (1L << (UNLIMITED - 545)) | (1L << (UOW - 545)) | (1L << (USING - 545)) | (1L << (VALID_XML - 545)) | (1L << (VALIDATION - 545)) | (1L << (VALUE - 545)) | (1L << (VAR - 545)) | (1L << (VARBINARY_KEYWORD - 545)) | (1L << (VARP - 545)) | (1L << (VIEW_METADATA - 545)) | (1L << (VIEWS - 545)) | (1L << (WAIT - 545)) | (1L << (WELL_FORMED_XML - 545)) | (1L << (WITHOUT_ARRAY_WRAPPER - 545)) | (1L << (WORK - 545)) | (1L << (WORKLOAD - 545)) | (1L << (XML - 545)) | (1L << (XMLDATA - 545)))) != 0) || ((((_la - 609)) & ~0x3f) == 0 && ((1L << (_la - 609)) & ((1L << (XMLNAMESPACES - 609)) | (1L << (XMLSCHEMA - 609)) | (1L << (XSINIL - 609)) | (1L << (ZONE - 609)) | (1L << (ABSENT - 609)) | (1L << (AES - 609)) | (1L << (ALLOW_CONNECTIONS - 609)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 609)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 609)) | (1L << (ANONYMOUS - 609)) | (1L << (APPEND - 609)) | (1L << (APPLICATION - 609)) | (1L << (ASYMMETRIC - 609)) | (1L << (ASYNCHRONOUS_COMMIT - 609)) | (1L << (AUTHENTICATION - 609)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 609)) | (1L << (AUTOMATIC - 609)) | (1L << (AVAILABILITY_MODE - 609)) | (1L << (BEFORE - 609)) | (1L << (BLOCK - 609)) | (1L << (BLOCKSIZE - 609)) | (1L << (BLOCKING_HIERARCHY - 609)) | (1L << (BUFFER - 609)) | (1L << (BUFFERCOUNT - 609)) | (1L << (CACHE - 609)) | (1L << (CALLED - 609)) | (1L << (CERTIFICATE - 609)) | (1L << (CHANGETABLE - 609)) | (1L << (CHANGES - 609)) | (1L << (CHECK_POLICY - 609)) | (1L << (CHECK_EXPIRATION - 609)) | (1L << (CLASSIFIER_FUNCTION - 609)) | (1L << (CLUSTER - 609)) | (1L << (COMPRESSION - 609)) | (1L << (CONFIGURATION - 609)) | (1L << (CONTAINMENT - 609)) | (1L << (CONTEXT - 609)) | (1L << (CONTINUE_AFTER_ERROR - 609)) | (1L << (CONTRACT - 609)) | (1L << (CONTRACT_NAME - 609)) | (1L << (CONVERSATION - 609)) | (1L << (COPY_ONLY - 609)) | (1L << (CYCLE - 609)) | (1L << (DATA_COMPRESSION - 609)) | (1L << (DATA_SOURCE - 609)) | (1L << (DATABASE_MIRRORING - 609)) | (1L << (DEFAULT_DATABASE - 609)) | (1L << (DEFAULT_SCHEMA - 609)) | (1L << (DIAGNOSTICS - 609)) | (1L << (DIFFERENTIAL - 609)) | (1L << (DTC_SUPPORT - 609)) | (1L << (ENABLED - 609)) | (1L << (ENDPOINT - 609)) | (1L << (ERROR - 609)) | (1L << (EVENT - 609)) | (1L << (EVENTDATA - 609)) | (1L << (EVENT_RETENTION_MODE - 609)) | (1L << (EXECUTABLE_FILE - 609)) | (1L << (EXPIREDATE - 609)) | (1L << (EXTENSION - 609)) | (1L << (EXTERNAL_ACCESS - 609)) | (1L << (FAILOVER - 609)) | (1L << (FAILURECONDITIONLEVEL - 609)))) != 0) || ((((_la - 673)) & ~0x3f) == 0 && ((1L << (_la - 673)) & ((1L << (FAN_IN - 673)) | (1L << (FILE_SNAPSHOT - 673)) | (1L << (FORCESEEK - 673)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 673)) | (1L << (GET - 673)) | (1L << (GOVERNOR - 673)) | (1L << (HASHED - 673)) | (1L << (HEALTHCHECKTIMEOUT - 673)) | (1L << (IIF - 673)) | (1L << (IO - 673)) | (1L << (INCLUDE - 673)) | (1L << (INCREMENT - 673)) | (1L << (INFINITE - 673)) | (1L << (INIT - 673)) | (1L << (INSTEAD - 673)) | (1L << (ISNULL - 673)) | (1L << (KERBEROS - 673)) | (1L << (KEY_PATH - 673)) | (1L << (KEY_STORE_PROVIDER_NAME - 673)) | (1L << (LANGUAGE - 673)) | (1L << (LIBRARY - 673)) | (1L << (LIFETIME - 673)) | (1L << (LINUX - 673)) | (1L << (LISTENER_IP - 673)) | (1L << (LISTENER_PORT - 673)) | (1L << (LOCAL_SERVICE_NAME - 673)) | (1L << (LOG - 673)) | (1L << (MATCHED - 673)) | (1L << (MASTER - 673)) | (1L << (MAX_MEMORY - 673)) | (1L << (MAXTRANSFER - 673)) | (1L << (MAXVALUE - 673)) | (1L << (MAX_DISPATCH_LATENCY - 673)) | (1L << (MAX_EVENT_SIZE - 673)) | (1L << (MAX_SIZE - 673)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 673)) | (1L << (MEDIADESCRIPTION - 673)) | (1L << (MEDIANAME - 673)) | (1L << (MEMBER - 673)) | (1L << (MEMORY_PARTITION_MODE - 673)) | (1L << (MESSAGE_FORWARDING - 673)) | (1L << (MESSAGE_FORWARD_SIZE - 673)) | (1L << (MINVALUE - 673)) | (1L << (MIRROR - 673)) | (1L << (MUST_CHANGE - 673)) | (1L << (NOFORMAT - 673)) | (1L << (NOINIT - 673)) | (1L << (NONE - 673)) | (1L << (NOREWIND - 673)) | (1L << (NOSKIP - 673)) | (1L << (NOUNLOAD - 673)) | (1L << (NO_CHECKSUM - 673)) | (1L << (NO_COMPRESSION - 673)) | (1L << (NO_EVENT_LOSS - 673)) | (1L << (NOTIFICATION - 673)) | (1L << (NTLM - 673)) | (1L << (OLD_PASSWORD - 673)) | (1L << (ON_FAILURE - 673)) | (1L << (PAGE - 673)) | (1L << (PARAM_NODE - 673)) | (1L << (PARTIAL - 673)) | (1L << (PASSWORD - 673)) | (1L << (PERMISSION_SET - 673)) | (1L << (PER_CPU - 673)))) != 0) || ((((_la - 737)) & ~0x3f) == 0 && ((1L << (_la - 737)) & ((1L << (PER_DB - 737)) | (1L << (PER_NODE - 737)) | (1L << (PERSISTED - 737)) | (1L << (PLATFORM - 737)) | (1L << (POLICY - 737)) | (1L << (PREDICATE - 737)) | (1L << (PROCESS - 737)) | (1L << (PROFILE - 737)) | (1L << (PYTHON - 737)) | (1L << (R - 737)) | (1L << (READ_WRITE_FILEGROUPS - 737)) | (1L << (REGENERATE - 737)) | (1L << (RELATED_CONVERSATION - 737)) | (1L << (RELATED_CONVERSATION_GROUP - 737)) | (1L << (REQUIRED - 737)) | (1L << (RESET - 737)) | (1L << (RESTART - 737)) | (1L << (RESUME - 737)) | (1L << (RETAINDAYS - 737)) | (1L << (RETURNS - 737)) | (1L << (REWIND - 737)) | (1L << (ROLE - 737)) | (1L << (RSA_512 - 737)) | (1L << (RSA_1024 - 737)) | (1L << (RSA_2048 - 737)) | (1L << (RSA_3072 - 737)) | (1L << (RSA_4096 - 737)) | (1L << (SAFETY - 737)) | (1L << (SAFE - 737)) | (1L << (SCHEDULER - 737)) | (1L << (SCHEME - 737)) | (1L << (SERVER - 737)) | (1L << (SERVICE - 737)) | (1L << (SERVICE_BROKER - 737)) | (1L << (SERVICE_NAME - 737)) | (1L << (SESSION - 737)) | (1L << (SID - 737)) | (1L << (SKIP_KEYWORD - 737)) | (1L << (SOFTNUMA - 737)) | (1L << (SOURCE - 737)) | (1L << (SPECIFICATION - 737)) | (1L << (SPLIT - 737)) | (1L << (SQLDUMPERFLAGS - 737)) | (1L << (SQLDUMPERPATH - 737)) | (1L << (SQLDUMPERTIMEOUT - 737)) | (1L << (STATE - 737)) | (1L << (STATS - 737)) | (1L << (START - 737)) | (1L << (STARTED - 737)) | (1L << (STARTUP_STATE - 737)) | (1L << (STOP - 737)) | (1L << (STOPPED - 737)) | (1L << (STOP_ON_ERROR - 737)) | (1L << (SUPPORTED - 737)) | (1L << (TAPE - 737)) | (1L << (TARGET - 737)) | (1L << (TCP - 737)) | (1L << (TRACK_CAUSALITY - 737)) | (1L << (TRANSFER - 737)) | (1L << (UNCHECKED - 737)) | (1L << (UNLOCK - 737)) | (1L << (UNSAFE - 737)) | (1L << (URL - 737)))) != 0) || ((((_la - 801)) & ~0x3f) == 0 && ((1L << (_la - 801)) & ((1L << (USED - 801)) | (1L << (VERBOSELOGGING - 801)) | (1L << (VISIBILITY - 801)) | (1L << (WINDOWS - 801)) | (1L << (WITHOUT - 801)) | (1L << (WITNESS - 801)) | (1L << (VARCHAR - 801)) | (1L << (NVARCHAR - 801)) | (1L << (DOUBLE_QUOTE_ID - 801)) | (1L << (SQUARE_BRACKET_ID - 801)) | (1L << (LOCAL_ID - 801)) | (1L << (DECIMAL - 801)) | (1L << (ID - 801)) | (1L << (STRING - 801)) | (1L << (DOT - 801)) | (1L << (LR_BRACKET - 801)) | (1L << (PLUS - 801)))) != 0) );
				setState(8952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(8951);
					match(RR_BRACKET);
					}
				}

				setState(8954);
				match(FOR);
				setState(8955);
				id();
				}
				break;
			case FOREIGN:
				{
				setState(8956);
				match(FOREIGN);
				setState(8957);
				match(KEY);
				setState(8958);
				match(LR_BRACKET);
				setState(8959);
				((Table_constraintContext)_localctx).fk = column_name_list();
				setState(8960);
				match(RR_BRACKET);
				setState(8961);
				match(REFERENCES);
				setState(8962);
				table_name();
				setState(8967);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1267,_ctx) ) {
				case 1:
					{
					setState(8963);
					match(LR_BRACKET);
					setState(8964);
					((Table_constraintContext)_localctx).pk = column_name_list();
					setState(8965);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8970);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1268,_ctx) ) {
				case 1:
					{
					setState(8969);
					on_delete();
					}
					break;
				}
				setState(8973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8972);
					on_update();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(TSqlParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(TSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete; }
	}

	public final On_deleteContext on_delete() throws RecognitionException {
		On_deleteContext _localctx = new On_deleteContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_on_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8977);
			match(ON);
			setState(8978);
			match(DELETE);
			setState(8986);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1271,_ctx) ) {
			case 1:
				{
				setState(8979);
				match(NO);
				setState(8980);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(8981);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(8982);
				match(SET);
				setState(8983);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(8984);
				match(SET);
				setState(8985);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(TSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update; }
	}

	public final On_updateContext on_update() throws RecognitionException {
		On_updateContext _localctx = new On_updateContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_on_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8988);
			match(ON);
			setState(8989);
			match(UPDATE);
			setState(8997);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1272,_ctx) ) {
			case 1:
				{
				setState(8990);
				match(NO);
				setState(8991);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(8992);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(8993);
				match(SET);
				setState(8994);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(8995);
				match(SET);
				setState(8996);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_options; }
	}

	public final Index_optionsContext index_options() throws RecognitionException {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8999);
			match(WITH);
			setState(9000);
			match(LR_BRACKET);
			setState(9001);
			index_option();
			setState(9006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9002);
				match(COMMA);
				setState(9003);
				index_option();
				}
				}
				setState(9008);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9009);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<Simple_idContext> simple_id() {
			return getRuleContexts(Simple_idContext.class);
		}
		public Simple_idContext simple_id(int i) {
			return getRuleContext(Simple_idContext.class,i);
		}
		public List<KeywordContext> keyword() {
			return getRuleContexts(KeywordContext.class);
		}
		public KeywordContext keyword(int i) {
			return getRuleContext(KeywordContext.class,i);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_index_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9013);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				{
				setState(9011);
				simple_id();
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
				{
				setState(9012);
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9015);
			match(EQUAL);
			setState(9020);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				{
				setState(9016);
				simple_id();
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
				{
				setState(9017);
				keyword();
				}
				break;
			case OFF:
			case ON:
				{
				setState(9018);
				on_off();
				}
				break;
			case DECIMAL:
				{
				setState(9019);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursorContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(TSqlParser.DECLARE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(TSqlParser.CURSOR, 0); }
		public List<TerminalNode> FOR() { return getTokens(TSqlParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(TSqlParser.FOR, i);
		}
		public Select_statement_standaloneContext select_statement_standalone() {
			return getRuleContext(Select_statement_standaloneContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Declare_set_cursor_commonContext declare_set_cursor_common() {
			return getRuleContext(Declare_set_cursor_commonContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(TSqlParser.INSENSITIVE, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(TSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(TSqlParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Declare_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor; }
	}

	public final Declare_cursorContext declare_cursor() throws RecognitionException {
		Declare_cursorContext _localctx = new Declare_cursorContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_declare_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9022);
			match(DECLARE);
			setState(9023);
			cursor_name();
			setState(9055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1283,_ctx) ) {
			case 1:
				{
				setState(9024);
				match(CURSOR);
				setState(9034);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1278,_ctx) ) {
				case 1:
					{
					setState(9025);
					declare_set_cursor_common();
					setState(9032);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FOR) {
						{
						setState(9026);
						match(FOR);
						setState(9027);
						match(UPDATE);
						setState(9030);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==OF) {
							{
							setState(9028);
							match(OF);
							setState(9029);
							column_name_list();
							}
						}

						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(9037);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INSENSITIVE || _la==SEMI_SENSITIVE) {
					{
					setState(9036);
					_la = _input.LA(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCROLL) {
					{
					setState(9039);
					match(SCROLL);
					}
				}

				setState(9042);
				match(CURSOR);
				setState(9043);
				match(FOR);
				setState(9044);
				select_statement_standalone();
				setState(9053);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(9045);
					match(FOR);
					setState(9051);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case READ:
						{
						setState(9046);
						match(READ);
						setState(9047);
						match(ONLY);
						}
						break;
					case UPDATE:
						{
						setState(9048);
						match(UPDATE);
						}
						break;
					case OF:
						{
						{
						setState(9049);
						match(OF);
						setState(9050);
						column_name_list();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
			setState(9058);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1284,_ctx) ) {
			case 1:
				{
				setState(9057);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_commonContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Select_statement_standaloneContext select_statement_standalone() {
			return getRuleContext(Select_statement_standaloneContext.class,0);
		}
		public List<Declare_set_cursor_common_partialContext> declare_set_cursor_common_partial() {
			return getRuleContexts(Declare_set_cursor_common_partialContext.class);
		}
		public Declare_set_cursor_common_partialContext declare_set_cursor_common_partial(int i) {
			return getRuleContext(Declare_set_cursor_common_partialContext.class,i);
		}
		public Declare_set_cursor_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common; }
	}

	public final Declare_set_cursor_commonContext declare_set_cursor_common() throws RecognitionException {
		Declare_set_cursor_commonContext _localctx = new Declare_set_cursor_commonContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_declare_set_cursor_common);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9063);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (DYNAMIC - 297)) | (1L << (FAST_FORWARD - 297)) | (1L << (FORWARD_ONLY - 297)) | (1L << (GLOBAL - 297)))) != 0) || _la==KEYSET || _la==LOCAL || _la==OPTIMISTIC || _la==READ_ONLY || ((((_la - 521)) & ~0x3f) == 0 && ((1L << (_la - 521)) & ((1L << (SCROLL - 521)) | (1L << (SCROLL_LOCKS - 521)) | (1L << (STATIC - 521)))) != 0) || _la==TYPE_WARNING) {
				{
				{
				setState(9060);
				declare_set_cursor_common_partial();
				}
				}
				setState(9065);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9066);
			match(FOR);
			setState(9067);
			select_statement_standalone();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_set_cursor_common_partialContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(TSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode STATIC() { return getToken(TSqlParser.STATIC, 0); }
		public TerminalNode KEYSET() { return getToken(TSqlParser.KEYSET, 0); }
		public TerminalNode DYNAMIC() { return getToken(TSqlParser.DYNAMIC, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(TSqlParser.FAST_FORWARD, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(TSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(TSqlParser.OPTIMISTIC, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(TSqlParser.TYPE_WARNING, 0); }
		public Declare_set_cursor_common_partialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_set_cursor_common_partial; }
	}

	public final Declare_set_cursor_common_partialContext declare_set_cursor_common_partial() throws RecognitionException {
		Declare_set_cursor_common_partialContext _localctx = new Declare_set_cursor_common_partialContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_declare_set_cursor_common_partial);
		int _la;
		try {
			setState(9074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9069);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case FORWARD_ONLY:
			case SCROLL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9070);
				_la = _input.LA(1);
				if ( !(_la==FORWARD_ONLY || _la==SCROLL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DYNAMIC:
			case FAST_FORWARD:
			case KEYSET:
			case STATIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(9071);
				_la = _input.LA(1);
				if ( !(_la==DYNAMIC || _la==FAST_FORWARD || _la==KEYSET || _la==STATIC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case OPTIMISTIC:
			case READ_ONLY:
			case SCROLL_LOCKS:
				enterOuterAlt(_localctx, 4);
				{
				setState(9072);
				_la = _input.LA(1);
				if ( !(_la==OPTIMISTIC || _la==READ_ONLY || _la==SCROLL_LOCKS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TYPE_WARNING:
				enterOuterAlt(_localctx, 5);
				{
				setState(9073);
				match(TYPE_WARNING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_cursorContext extends ParserRuleContext {
		public TerminalNode FETCH() { return getToken(TSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(TSqlParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(TSqlParser.LAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode ABSOLUTE() { return getToken(TSqlParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(TSqlParser.RELATIVE, 0); }
		public Fetch_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_cursor; }
	}

	public final Fetch_cursorContext fetch_cursor() throws RecognitionException {
		Fetch_cursorContext _localctx = new Fetch_cursorContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_fetch_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9076);
			match(FETCH);
			setState(9086);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1288,_ctx) ) {
			case 1:
				{
				setState(9083);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NEXT:
					{
					setState(9077);
					match(NEXT);
					}
					break;
				case PRIOR:
					{
					setState(9078);
					match(PRIOR);
					}
					break;
				case FIRST:
					{
					setState(9079);
					match(FIRST);
					}
					break;
				case LAST:
					{
					setState(9080);
					match(LAST);
					}
					break;
				case ABSOLUTE:
				case RELATIVE:
					{
					setState(9081);
					_la = _input.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9082);
					expression(0);
					}
					break;
				case FROM:
					break;
				default:
					break;
				}
				setState(9085);
				match(FROM);
				}
				break;
			}
			setState(9089);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1289,_ctx) ) {
			case 1:
				{
				setState(9088);
				match(GLOBAL);
				}
				break;
			}
			setState(9091);
			cursor_name();
			setState(9101);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(9092);
				match(INTO);
				setState(9093);
				match(LOCAL_ID);
				setState(9098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9094);
					match(COMMA);
					setState(9095);
					match(LOCAL_ID);
					}
					}
					setState(9100);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(9104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1292,_ctx) ) {
			case 1:
				{
				setState(9103);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_specialContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(TSqlParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode STATISTICS() { return getToken(TSqlParser.STATISTICS, 0); }
		public TerminalNode IO() { return getToken(TSqlParser.IO, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode PROFILE() { return getToken(TSqlParser.PROFILE, 0); }
		public TerminalNode ROWCOUNT() { return getToken(TSqlParser.ROWCOUNT, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(TSqlParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(TSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(TSqlParser.LEVEL, 0); }
		public TerminalNode READ() { return getToken(TSqlParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(TSqlParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(TSqlParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(TSqlParser.REPEATABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode IDENTITY_INSERT() { return getToken(TSqlParser.IDENTITY_INSERT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode ANSI_DEFAULTS() { return getToken(TSqlParser.ANSI_DEFAULTS, 0); }
		public TerminalNode ANSI_NULL_DFLT_OFF() { return getToken(TSqlParser.ANSI_NULL_DFLT_OFF, 0); }
		public TerminalNode ANSI_NULL_DFLT_ON() { return getToken(TSqlParser.ANSI_NULL_DFLT_ON, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode ARITHIGNORE() { return getToken(TSqlParser.ARITHIGNORE, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode FMTONLY() { return getToken(TSqlParser.FMTONLY, 0); }
		public TerminalNode FORCEPLAN() { return getToken(TSqlParser.FORCEPLAN, 0); }
		public TerminalNode IMPLICIT_TRANSACTIONS() { return getToken(TSqlParser.IMPLICIT_TRANSACTIONS, 0); }
		public TerminalNode NOCOUNT() { return getToken(TSqlParser.NOCOUNT, 0); }
		public TerminalNode NOEXEC() { return getToken(TSqlParser.NOEXEC, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode PARSEONLY() { return getToken(TSqlParser.PARSEONLY, 0); }
		public TerminalNode REMOTE_PROC_TRANSACTIONS() { return getToken(TSqlParser.REMOTE_PROC_TRANSACTIONS, 0); }
		public TerminalNode SHOWPLAN_ALL() { return getToken(TSqlParser.SHOWPLAN_ALL, 0); }
		public TerminalNode SHOWPLAN_TEXT() { return getToken(TSqlParser.SHOWPLAN_TEXT, 0); }
		public TerminalNode SHOWPLAN_XML() { return getToken(TSqlParser.SHOWPLAN_XML, 0); }
		public TerminalNode XACT_ABORT() { return getToken(TSqlParser.XACT_ABORT, 0); }
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_special; }
	}

	public final Set_specialContext set_special() throws RecognitionException {
		Set_specialContext _localctx = new Set_specialContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_set_special);
		int _la;
		try {
			setState(9159);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9106);
				match(SET);
				setState(9107);
				id();
				setState(9111);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(9108);
					id();
					}
					break;
				case LOCAL_ID:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(9109);
					constant_LOCAL_ID();
					}
					break;
				case OFF:
				case ON:
					{
					setState(9110);
					on_off();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9114);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1294,_ctx) ) {
				case 1:
					{
					setState(9113);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9116);
				match(SET);
				setState(9117);
				match(STATISTICS);
				setState(9118);
				_la = _input.LA(1);
				if ( !(_la==TIME || _la==XML || _la==IO || _la==PROFILE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9119);
				on_off();
				setState(9121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1295,_ctx) ) {
				case 1:
					{
					setState(9120);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9123);
				match(SET);
				setState(9124);
				match(ROWCOUNT);
				setState(9125);
				_la = _input.LA(1);
				if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9127);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1296,_ctx) ) {
				case 1:
					{
					setState(9126);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9129);
				match(SET);
				setState(9130);
				match(TRANSACTION);
				setState(9131);
				match(ISOLATION);
				setState(9132);
				match(LEVEL);
				setState(9142);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1297,_ctx) ) {
				case 1:
					{
					setState(9133);
					match(READ);
					setState(9134);
					match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					setState(9135);
					match(READ);
					setState(9136);
					match(COMMITTED);
					}
					break;
				case 3:
					{
					setState(9137);
					match(REPEATABLE);
					setState(9138);
					match(READ);
					}
					break;
				case 4:
					{
					setState(9139);
					match(SNAPSHOT);
					}
					break;
				case 5:
					{
					setState(9140);
					match(SERIALIZABLE);
					}
					break;
				case 6:
					{
					setState(9141);
					match(DECIMAL);
					}
					break;
				}
				setState(9145);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1298,_ctx) ) {
				case 1:
					{
					setState(9144);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9147);
				match(SET);
				setState(9148);
				match(IDENTITY_INSERT);
				setState(9149);
				table_name();
				setState(9150);
				on_off();
				setState(9152);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1299,_ctx) ) {
				case 1:
					{
					setState(9151);
					match(SEMI);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9154);
				match(SET);
				setState(9155);
				_la = _input.LA(1);
				if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (ANSI_NULLS - 208)) | (1L << (ANSI_PADDING - 208)) | (1L << (ANSI_WARNINGS - 208)) | (1L << (ARITHABORT - 208)) | (1L << (CONCAT_NULL_YIELDS_NULL - 208)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 208)))) != 0) || ((((_la - 428)) & ~0x3f) == 0 && ((1L << (_la - 428)) & ((1L << (NOCOUNT - 428)) | (1L << (NUMERIC_ROUNDABORT - 428)) | (1L << (QUOTED_IDENTIFIER - 428)))) != 0) || ((((_la - 856)) & ~0x3f) == 0 && ((1L << (_la - 856)) & ((1L << (ANSI_DEFAULTS - 856)) | (1L << (ANSI_NULL_DFLT_OFF - 856)) | (1L << (ANSI_NULL_DFLT_ON - 856)) | (1L << (ARITHIGNORE - 856)) | (1L << (FMTONLY - 856)) | (1L << (FORCEPLAN - 856)) | (1L << (IMPLICIT_TRANSACTIONS - 856)) | (1L << (NOEXEC - 856)) | (1L << (PARSEONLY - 856)) | (1L << (REMOTE_PROC_TRANSACTIONS - 856)) | (1L << (SHOWPLAN_ALL - 856)) | (1L << (SHOWPLAN_TEXT - 856)) | (1L << (SHOWPLAN_XML - 856)) | (1L << (XACT_ABORT - 856)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9156);
				on_off();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9157);
				match(SET);
				setState(9158);
				modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_LOCAL_IDContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_LOCAL_ID; }
	}

	public final Constant_LOCAL_IDContext constant_LOCAL_ID() throws RecognitionException {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_constant_LOCAL_ID);
		try {
			setState(9163);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(9161);
				constant();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(9162);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Token op;
		public Primitive_expressionContext primitive_expression() {
			return getRuleContext(Primitive_expressionContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public Bracket_expressionContext bracket_expression() {
			return getRuleContext(Bracket_expressionContext.class,0);
		}
		public Unary_operator_expressionContext unary_operator_expression() {
			return getRuleContext(Unary_operator_expressionContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode STAR() { return getToken(TSqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(TSqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(TSqlParser.MODULE, 0); }
		public TerminalNode PLUS() { return getToken(TSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(TSqlParser.MINUS, 0); }
		public TerminalNode BIT_AND() { return getToken(TSqlParser.BIT_AND, 0); }
		public TerminalNode BIT_XOR() { return getToken(TSqlParser.BIT_XOR, 0); }
		public TerminalNode BIT_OR() { return getToken(TSqlParser.BIT_OR, 0); }
		public TerminalNode DOUBLE_BAR() { return getToken(TSqlParser.DOUBLE_BAR, 0); }
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Value_callContext value_call() {
			return getRuleContext(Value_callContext.class,0);
		}
		public Query_callContext query_call() {
			return getRuleContext(Query_callContext.class,0);
		}
		public Exist_callContext exist_call() {
			return getRuleContext(Exist_callContext.class,0);
		}
		public Modify_callContext modify_call() {
			return getRuleContext(Modify_callContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Time_zoneContext time_zone() {
			return getRuleContext(Time_zoneContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 760;
		enterRecursionRule(_localctx, 760, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1302,_ctx) ) {
			case 1:
				{
				setState(9166);
				primitive_expression();
				}
				break;
			case 2:
				{
				setState(9167);
				function_call();
				}
				break;
			case 3:
				{
				setState(9168);
				case_expression();
				}
				break;
			case 4:
				{
				setState(9169);
				full_column_name();
				}
				break;
			case 5:
				{
				setState(9170);
				bracket_expression();
				}
				break;
			case 6:
				{
				setState(9171);
				unary_operator_expression();
				}
				break;
			case 7:
				{
				setState(9172);
				over_clause();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(9196);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1305,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(9194);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1304,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(9175);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(9176);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 845)) & ~0x3f) == 0 && ((1L << (_la - 845)) & ((1L << (STAR - 845)) | (1L << (DIVIDE - 845)) | (1L << (MODULE - 845)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9177);
						expression(5);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(9178);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(9179);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 834)) & ~0x3f) == 0 && ((1L << (_la - 834)) & ((1L << (DOUBLE_BAR - 834)) | (1L << (PLUS - 834)) | (1L << (MINUS - 834)) | (1L << (BIT_OR - 834)) | (1L << (BIT_AND - 834)) | (1L << (BIT_XOR - 834)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(9180);
						expression(4);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(9181);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(9182);
						match(DOT);
						setState(9187);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case VALUE:
							{
							setState(9183);
							value_call();
							}
							break;
						case QUERY:
							{
							setState(9184);
							query_call();
							}
							break;
						case EXIST:
							{
							setState(9185);
							exist_call();
							}
							break;
						case MODIFY:
							{
							setState(9186);
							modify_call();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(9189);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(9190);
						match(COLLATE);
						setState(9191);
						id();
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(9192);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(9193);
						time_zone();
						}
						break;
					}
					} 
				}
				setState(9198);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1305,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Time_zoneContext extends ParserRuleContext {
		public TerminalNode AT_KEYWORD() { return getToken(TSqlParser.AT_KEYWORD, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(TSqlParser.ZONE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Time_zoneContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone; }
	}

	public final Time_zoneContext time_zone() throws RecognitionException {
		Time_zoneContext _localctx = new Time_zoneContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_time_zone);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9199);
			match(AT_KEYWORD);
			setState(9200);
			match(TIME);
			setState(9201);
			match(ZONE);
			setState(9202);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primitive_expressionContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitive_expression; }
	}

	public final Primitive_expressionContext primitive_expression() throws RecognitionException {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_primitive_expression);
		try {
			setState(9208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9204);
				match(DEFAULT);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9205);
				match(NULL);
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(9206);
				match(LOCAL_ID);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 4);
				{
				setState(9207);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public TerminalNode CASE() { return getToken(TSqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(TSqlParser.ELSE, 0); }
		public List<Switch_search_condition_sectionContext> switch_search_condition_section() {
			return getRuleContexts(Switch_search_condition_sectionContext.class);
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return getRuleContext(Switch_search_condition_sectionContext.class,i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_case_expression);
		int _la;
		try {
			setState(9235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1311,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9210);
				match(CASE);
				setState(9211);
				((Case_expressionContext)_localctx).caseExpr = expression(0);
				setState(9213); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(9212);
					switch_section();
					}
					}
					setState(9215); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(9219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(9217);
					match(ELSE);
					setState(9218);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(9221);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9223);
				match(CASE);
				setState(9225); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(9224);
					switch_search_condition_section();
					}
					}
					setState(9227); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(9231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(9229);
					match(ELSE);
					setState(9230);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(9233);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_operator_expressionContext extends ParserRuleContext {
		public Token op;
		public TerminalNode BIT_NOT() { return getToken(TSqlParser.BIT_NOT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode PLUS() { return getToken(TSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(TSqlParser.MINUS, 0); }
		public Unary_operator_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_operator_expression; }
	}

	public final Unary_operator_expressionContext unary_operator_expression() throws RecognitionException {
		Unary_operator_expressionContext _localctx = new Unary_operator_expressionContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_unary_operator_expression);
		int _la;
		try {
			setState(9241);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIT_NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(9237);
				match(BIT_NOT);
				setState(9238);
				expression(0);
				}
				break;
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(9239);
				((Unary_operator_expressionContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					((Unary_operator_expressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9240);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bracket_expressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bracket_expression; }
	}

	public final Bracket_expressionContext bracket_expression() throws RecognitionException {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_bracket_expression);
		try {
			setState(9251);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1313,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9243);
				match(LR_BRACKET);
				setState(9244);
				expression(0);
				setState(9245);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9247);
				match(LR_BRACKET);
				setState(9248);
				subquery();
				setState(9249);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_expressionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_constant_expression);
		try {
			setState(9261);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1314,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9253);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9254);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9255);
				function_call();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9256);
				match(LOCAL_ID);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9257);
				match(LR_BRACKET);
				setState(9258);
				constant_expression();
				setState(9259);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9263);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_expressionContext extends ParserRuleContext {
		public Common_table_expressionContext common_table_expression;
		public List<Common_table_expressionContext> ctes = new ArrayList<Common_table_expressionContext>();
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_with_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9265);
			match(WITH);
			setState(9266);
			((With_expressionContext)_localctx).common_table_expression = common_table_expression();
			((With_expressionContext)_localctx).ctes.add(((With_expressionContext)_localctx).common_table_expression);
			setState(9271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9267);
				match(COMMA);
				setState(9268);
				((With_expressionContext)_localctx).common_table_expression = common_table_expression();
				((With_expressionContext)_localctx).ctes.add(((With_expressionContext)_localctx).common_table_expression);
				}
				}
				setState(9273);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_expressionContext extends ParserRuleContext {
		public IdContext expression_name;
		public Column_name_listContext columns;
		public Select_statementContext cte_query;
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9274);
			((Common_table_expressionContext)_localctx).expression_name = id();
			setState(9279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(9275);
				match(LR_BRACKET);
				setState(9276);
				((Common_table_expressionContext)_localctx).columns = column_name_list();
				setState(9277);
				match(RR_BRACKET);
				}
			}

			setState(9281);
			match(AS);
			setState(9282);
			match(LR_BRACKET);
			setState(9283);
			((Common_table_expressionContext)_localctx).cte_query = select_statement();
			setState(9284);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_update_elem);
		try {
			setState(9311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9286);
				match(LOCAL_ID);
				setState(9287);
				match(EQUAL);
				setState(9288);
				full_column_name();
				setState(9291);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(9289);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(9290);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9293);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9297);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(9295);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(9296);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9301);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(9299);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(9300);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9303);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9304);
				((Update_elemContext)_localctx).udt_column_name = id();
				setState(9305);
				match(DOT);
				setState(9306);
				((Update_elemContext)_localctx).method_name = id();
				setState(9307);
				match(LR_BRACKET);
				setState(9308);
				expression_list();
				setState(9309);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elem_mergeContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Update_elem_mergeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem_merge; }
	}

	public final Update_elem_mergeContext update_elem_merge() throws RecognitionException {
		Update_elem_mergeContext _localctx = new Update_elem_mergeContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_update_elem_merge);
		try {
			setState(9329);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1323,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9315);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(9313);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(9314);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9319);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(9317);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(9318);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9321);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9322);
				((Update_elem_mergeContext)_localctx).udt_column_name = id();
				setState(9323);
				match(DOT);
				setState(9324);
				((Update_elem_mergeContext)_localctx).method_name = id();
				setState(9325);
				match(LR_BRACKET);
				setState(9326);
				expression_list();
				setState(9327);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public Predicate_brContext predicate_br;
		public List<Predicate_brContext> pred = new ArrayList<Predicate_brContext>();
		public Token log;
		public List<Predicate_brContext> predicate_br() {
			return getRuleContexts(Predicate_brContext.class);
		}
		public Predicate_brContext predicate_br(int i) {
			return getRuleContext(Predicate_brContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(TSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(TSqlParser.OR, i);
		}
		public List<TerminalNode> AND() { return getTokens(TSqlParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSqlParser.AND, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_search_condition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9331);
			((Search_conditionContext)_localctx).predicate_br = predicate_br();
			((Search_conditionContext)_localctx).pred.add(((Search_conditionContext)_localctx).predicate_br);
			setState(9336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AND || _la==OR) {
				{
				{
				setState(9332);
				((Search_conditionContext)_localctx).log = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==AND || _la==OR) ) {
					((Search_conditionContext)_localctx).log = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9333);
				((Search_conditionContext)_localctx).predicate_br = predicate_br();
				((Search_conditionContext)_localctx).pred.add(((Search_conditionContext)_localctx).predicate_br);
				}
				}
				setState(9338);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Predicate_brContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Predicate_brContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate_br; }
	}

	public final Predicate_brContext predicate_br() throws RecognitionException {
		Predicate_brContext _localctx = new Predicate_brContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_predicate_br);
		int _la;
		try {
			setState(9356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1327,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NOT) {
					{
					{
					setState(9339);
					match(NOT);
					}
					}
					setState(9344);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9345);
				predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9349);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NOT) {
					{
					{
					setState(9346);
					match(NOT);
					}
					}
					setState(9351);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9352);
				match(LR_BRACKET);
				setState(9353);
				search_condition();
				setState(9354);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(TSqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Freetext_predicateContext freetext_predicate() {
			return getRuleContext(Freetext_predicateContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(TSqlParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(TSqlParser.ANY, 0); }
		public TerminalNode BETWEEN() { return getToken(TSqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public List<TerminalNode> NOT() { return getTokens(TSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSqlParser.NOT, i);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(TSqlParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(TSqlParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(TSqlParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_predicate);
		int _la;
		try {
			setState(9419);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9358);
				match(EXISTS);
				setState(9359);
				match(LR_BRACKET);
				setState(9360);
				subquery();
				setState(9361);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9363);
				freetext_predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9364);
				expression(0);
				setState(9365);
				comparison_operator();
				setState(9366);
				expression(0);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9368);
				expression(0);
				setState(9369);
				comparison_operator();
				setState(9370);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9371);
				match(LR_BRACKET);
				setState(9372);
				subquery();
				setState(9373);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9375);
				expression(0);
				setState(9379);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NOT) {
					{
					{
					setState(9376);
					match(NOT);
					}
					}
					setState(9381);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9382);
				match(BETWEEN);
				setState(9383);
				expression(0);
				setState(9384);
				match(AND);
				setState(9385);
				expression(0);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9387);
				expression(0);
				setState(9391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NOT) {
					{
					{
					setState(9388);
					match(NOT);
					}
					}
					setState(9393);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9394);
				match(IN);
				setState(9395);
				match(LR_BRACKET);
				setState(9398);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1330,_ctx) ) {
				case 1:
					{
					setState(9396);
					subquery();
					}
					break;
				case 2:
					{
					setState(9397);
					expression_list();
					}
					break;
				}
				setState(9400);
				match(RR_BRACKET);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9402);
				expression(0);
				setState(9406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==NOT) {
					{
					{
					setState(9403);
					match(NOT);
					}
					}
					setState(9408);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9409);
				match(LIKE);
				setState(9410);
				expression(0);
				setState(9413);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ESCAPE) {
					{
					setState(9411);
					match(ESCAPE);
					setState(9412);
					expression(0);
					}
				}

				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9415);
				expression(0);
				setState(9416);
				match(IS);
				setState(9417);
				null_notnull();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Sql_unionContext sql_union;
		public List<Sql_unionContext> unions = new ArrayList<Sql_unionContext>();
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public List<Sql_unionContext> sql_union() {
			return getRuleContexts(Sql_unionContext.class);
		}
		public Sql_unionContext sql_union(int i) {
			return getRuleContext(Sql_unionContext.class,i);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_query_expression);
		int _la;
		try {
			setState(9437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1337,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9426);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
					{
					setState(9421);
					query_specification();
					}
					break;
				case LR_BRACKET:
					{
					setState(9422);
					match(LR_BRACKET);
					setState(9423);
					query_expression();
					setState(9424);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9428);
				query_specification();
				setState(9430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(9429);
					order_by_clause();
					}
				}

				setState(9433); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(9432);
					((Query_expressionContext)_localctx).sql_union = sql_union();
					((Query_expressionContext)_localctx).unions.add(((Query_expressionContext)_localctx).sql_union);
					}
					}
					setState(9435); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==EXCEPT || _la==INTERSECT || _la==UNION );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_unionContext extends ParserRuleContext {
		public Query_specificationContext spec;
		public Query_expressionContext op;
		public TerminalNode UNION() { return getToken(TSqlParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(TSqlParser.EXCEPT, 0); }
		public TerminalNode INTERSECT() { return getToken(TSqlParser.INTERSECT, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Sql_unionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_union; }
	}

	public final Sql_unionContext sql_union() throws RecognitionException {
		Sql_unionContext _localctx = new Sql_unionContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_sql_union);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9445);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(9439);
				match(UNION);
				setState(9441);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(9440);
					match(ALL);
					}
				}

				}
				break;
			case EXCEPT:
				{
				setState(9443);
				match(EXCEPT);
				}
				break;
			case INTERSECT:
				{
				setState(9444);
				match(INTERSECT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9452);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(9447);
				((Sql_unionContext)_localctx).spec = query_specification();
				}
				break;
			case LR_BRACKET:
				{
				{
				setState(9448);
				match(LR_BRACKET);
				setState(9449);
				((Sql_unionContext)_localctx).op = query_expression();
				setState(9450);
				match(RR_BRACKET);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Token allOrDistinct;
		public Top_clauseContext top;
		public Select_listContext columns;
		public Table_nameContext into;
		public Table_sourcesContext from;
		public Search_conditionContext where;
		public Token groupByAll;
		public Group_by_itemContext group_by_item;
		public List<Group_by_itemContext> groupBys = new ArrayList<Group_by_itemContext>();
		public Search_conditionContext having;
		public TerminalNode SELECT() { return getToken(TSqlParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSqlParser.INTO, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public TerminalNode WHERE() { return getToken(TSqlParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public TerminalNode HAVING() { return getToken(TSqlParser.HAVING, 0); }
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Table_sourcesContext table_sources() {
			return getRuleContext(Table_sourcesContext.class,0);
		}
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<Group_by_itemContext> group_by_item() {
			return getRuleContexts(Group_by_itemContext.class);
		}
		public Group_by_itemContext group_by_item(int i) {
			return getRuleContext(Group_by_itemContext.class,i);
		}
		public List<TerminalNode> ALL() { return getTokens(TSqlParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSqlParser.ALL, i);
		}
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_query_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9454);
			match(SELECT);
			setState(9456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(9455);
				((Query_specificationContext)_localctx).allOrDistinct = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((Query_specificationContext)_localctx).allOrDistinct = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9459);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(9458);
				((Query_specificationContext)_localctx).top = top_clause();
				}
			}

			setState(9461);
			((Query_specificationContext)_localctx).columns = select_list();
			setState(9464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(9462);
				match(INTO);
				setState(9463);
				((Query_specificationContext)_localctx).into = table_name();
				}
			}

			setState(9468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(9466);
				match(FROM);
				setState(9467);
				((Query_specificationContext)_localctx).from = table_sources();
				}
			}

			setState(9472);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(9470);
				match(WHERE);
				setState(9471);
				((Query_specificationContext)_localctx).where = search_condition();
				}
			}

			setState(9487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(9474);
				match(GROUP);
				setState(9475);
				match(BY);
				setState(9477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(9476);
					((Query_specificationContext)_localctx).groupByAll = match(ALL);
					}
				}

				setState(9479);
				((Query_specificationContext)_localctx).group_by_item = group_by_item();
				((Query_specificationContext)_localctx).groupBys.add(((Query_specificationContext)_localctx).group_by_item);
				setState(9484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9480);
					match(COMMA);
					setState(9481);
					((Query_specificationContext)_localctx).group_by_item = group_by_item();
					((Query_specificationContext)_localctx).groupBys.add(((Query_specificationContext)_localctx).group_by_item);
					}
					}
					setState(9486);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(9491);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(9489);
				match(HAVING);
				setState(9490);
				((Query_specificationContext)_localctx).having = search_condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_clauseContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(TSqlParser.TOP, 0); }
		public Top_percentContext top_percent() {
			return getRuleContext(Top_percentContext.class,0);
		}
		public Top_countContext top_count() {
			return getRuleContext(Top_countContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(TSqlParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_clause; }
	}

	public final Top_clauseContext top_clause() throws RecognitionException {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_top_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9493);
			match(TOP);
			setState(9496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1350,_ctx) ) {
			case 1:
				{
				setState(9494);
				top_percent();
				}
				break;
			case 2:
				{
				setState(9495);
				top_count();
				}
				break;
			}
			setState(9500);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9498);
				match(WITH);
				setState(9499);
				match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_percentContext extends ParserRuleContext {
		public Token percent_constant;
		public ExpressionContext topper_expression;
		public TerminalNode PERCENT() { return getToken(TSqlParser.PERCENT, 0); }
		public TerminalNode REAL() { return getToken(TSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSqlParser.FLOAT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_percentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_percent; }
	}

	public final Top_percentContext top_percent() throws RecognitionException {
		Top_percentContext _localctx = new Top_percentContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_top_percent);
		int _la;
		try {
			setState(9509);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case FLOAT:
			case REAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9502);
				((Top_percentContext)_localctx).percent_constant = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 816)) & ~0x3f) == 0 && ((1L << (_la - 816)) & ((1L << (DECIMAL - 816)) | (1L << (FLOAT - 816)) | (1L << (REAL - 816)))) != 0)) ) {
					((Top_percentContext)_localctx).percent_constant = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9503);
				match(PERCENT);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9504);
				match(LR_BRACKET);
				setState(9505);
				((Top_percentContext)_localctx).topper_expression = expression(0);
				setState(9506);
				match(RR_BRACKET);
				setState(9507);
				match(PERCENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_countContext extends ParserRuleContext {
		public Token count_constant;
		public ExpressionContext topcount_expression;
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Top_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_count; }
	}

	public final Top_countContext top_count() throws RecognitionException {
		Top_countContext _localctx = new Top_countContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_top_count);
		try {
			setState(9516);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9511);
				((Top_countContext)_localctx).count_constant = match(DECIMAL);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9512);
				match(LR_BRACKET);
				setState(9513);
				((Top_countContext)_localctx).topcount_expression = expression(0);
				setState(9514);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public Order_by_expressionContext order_by_expression;
		public List<Order_by_expressionContext> order_bys = new ArrayList<Order_by_expressionContext>();
		public ExpressionContext offset_exp;
		public Token offset_rows;
		public Token fetch_offset;
		public ExpressionContext fetch_exp;
		public Token fetch_rows;
		public TerminalNode ORDER() { return getToken(TSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode OFFSET() { return getToken(TSqlParser.OFFSET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ROW() { return getTokens(TSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(TSqlParser.ROW, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(TSqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(TSqlParser.ROWS, i);
		}
		public TerminalNode FETCH() { return getToken(TSqlParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9518);
			match(ORDER);
			setState(9519);
			match(BY);
			setState(9520);
			((Order_by_clauseContext)_localctx).order_by_expression = order_by_expression();
			((Order_by_clauseContext)_localctx).order_bys.add(((Order_by_clauseContext)_localctx).order_by_expression);
			setState(9525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9521);
				match(COMMA);
				setState(9522);
				((Order_by_clauseContext)_localctx).order_by_expression = order_by_expression();
				((Order_by_clauseContext)_localctx).order_bys.add(((Order_by_clauseContext)_localctx).order_by_expression);
				}
				}
				setState(9527);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9539);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1356,_ctx) ) {
			case 1:
				{
				setState(9528);
				match(OFFSET);
				setState(9529);
				((Order_by_clauseContext)_localctx).offset_exp = expression(0);
				setState(9530);
				((Order_by_clauseContext)_localctx).offset_rows = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
					((Order_by_clauseContext)_localctx).offset_rows = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9537);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1355,_ctx) ) {
				case 1:
					{
					setState(9531);
					match(FETCH);
					setState(9532);
					((Order_by_clauseContext)_localctx).fetch_offset = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
						((Order_by_clauseContext)_localctx).fetch_offset = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9533);
					((Order_by_clauseContext)_localctx).fetch_exp = expression(0);
					setState(9534);
					((Order_by_clauseContext)_localctx).fetch_rows = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
						((Order_by_clauseContext)_localctx).fetch_rows = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9535);
					match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode BROWSE() { return getToken(TSqlParser.BROWSE, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode RAW() { return getToken(TSqlParser.RAW, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public List<Xml_common_directivesContext> xml_common_directives() {
			return getRuleContexts(Xml_common_directivesContext.class);
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return getRuleContext(Xml_common_directivesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode ELEMENTS() { return getToken(TSqlParser.ELEMENTS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode XMLDATA() { return getToken(TSqlParser.XMLDATA, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(TSqlParser.XMLSCHEMA, 0); }
		public TerminalNode XSINIL() { return getToken(TSqlParser.XSINIL, 0); }
		public TerminalNode ABSENT() { return getToken(TSqlParser.ABSENT, 0); }
		public TerminalNode EXPLICIT() { return getToken(TSqlParser.EXPLICIT, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode JSON() { return getToken(TSqlParser.JSON, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public TerminalNode INCLUDE_NULL_VALUES() { return getToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER() { return getToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_for_clause);
		int _la;
		try {
			int _alt;
			setState(9633);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1375,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9541);
				match(FOR);
				setState(9542);
				match(BROWSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9543);
				match(FOR);
				setState(9544);
				match(XML);
				setState(9552);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RAW:
					{
					setState(9545);
					match(RAW);
					setState(9549);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1357,_ctx) ) {
					case 1:
						{
						setState(9546);
						match(LR_BRACKET);
						setState(9547);
						match(STRING);
						setState(9548);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case AUTO:
					{
					setState(9551);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9557);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1359,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9554);
						xml_common_directives();
						}
						} 
					}
					setState(9559);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1359,_ctx);
				}
				setState(9570);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1362,_ctx) ) {
				case 1:
					{
					setState(9560);
					match(COMMA);
					setState(9568);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case XMLDATA:
						{
						setState(9561);
						match(XMLDATA);
						}
						break;
					case XMLSCHEMA:
						{
						setState(9562);
						match(XMLSCHEMA);
						setState(9566);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1360,_ctx) ) {
						case 1:
							{
							setState(9563);
							match(LR_BRACKET);
							setState(9564);
							match(STRING);
							setState(9565);
							match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(9577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9572);
					match(COMMA);
					setState(9573);
					match(ELEMENTS);
					setState(9575);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1363,_ctx) ) {
					case 1:
						{
						setState(9574);
						_la = _input.LA(1);
						if ( !(_la==XSINIL || _la==ABSENT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9579);
				match(FOR);
				setState(9580);
				match(XML);
				setState(9581);
				match(EXPLICIT);
				setState(9585);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1365,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9582);
						xml_common_directives();
						}
						} 
					}
					setState(9587);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1365,_ctx);
				}
				setState(9590);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9588);
					match(COMMA);
					setState(9589);
					match(XMLDATA);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9592);
				match(FOR);
				setState(9593);
				match(XML);
				setState(9594);
				match(PATH);
				setState(9598);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1367,_ctx) ) {
				case 1:
					{
					setState(9595);
					match(LR_BRACKET);
					setState(9596);
					match(STRING);
					setState(9597);
					match(RR_BRACKET);
					}
					break;
				}
				setState(9603);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1368,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9600);
						xml_common_directives();
						}
						} 
					}
					setState(9605);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1368,_ctx);
				}
				setState(9611);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9606);
					match(COMMA);
					setState(9607);
					match(ELEMENTS);
					setState(9609);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1369,_ctx) ) {
					case 1:
						{
						setState(9608);
						_la = _input.LA(1);
						if ( !(_la==XSINIL || _la==ABSENT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9613);
				match(FOR);
				setState(9614);
				match(JSON);
				setState(9615);
				_la = _input.LA(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9623);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1372,_ctx) ) {
				case 1:
					{
					setState(9616);
					match(COMMA);
					setState(9617);
					match(ROOT);
					setState(9621);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1371,_ctx) ) {
					case 1:
						{
						setState(9618);
						match(LR_BRACKET);
						setState(9619);
						match(STRING);
						setState(9620);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(9627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1373,_ctx) ) {
				case 1:
					{
					setState(9625);
					match(COMMA);
					setState(9626);
					match(INCLUDE_NULL_VALUES);
					}
					break;
				}
				setState(9631);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9629);
					match(COMMA);
					setState(9630);
					match(WITHOUT_ARRAY_WRAPPER);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_common_directivesContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode BINARY_BASE64() { return getToken(TSqlParser.BINARY_BASE64, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_common_directives; }
	}

	public final Xml_common_directivesContext xml_common_directives() throws RecognitionException {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_xml_common_directives);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9635);
			match(COMMA);
			setState(9644);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_BASE64:
				{
				setState(9636);
				match(BINARY_BASE64);
				}
				break;
			case TYPE:
				{
				setState(9637);
				match(TYPE);
				}
				break;
			case ROOT:
				{
				setState(9638);
				match(ROOT);
				setState(9642);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1376,_ctx) ) {
				case 1:
					{
					setState(9639);
					match(LR_BRACKET);
					setState(9640);
					match(STRING);
					setState(9641);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_expressionContext extends ParserRuleContext {
		public ExpressionContext order_by;
		public Token ascending;
		public Token descending;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(TSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(TSqlParser.DESC, 0); }
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_order_by_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9646);
			((Order_by_expressionContext)_localctx).order_by = expression(0);
			setState(9649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC:
				{
				setState(9647);
				((Order_by_expressionContext)_localctx).ascending = match(ASC);
				}
				break;
			case DESC:
				{
				setState(9648);
				((Order_by_expressionContext)_localctx).descending = match(DESC);
				}
				break;
			case EOF:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DENY:
			case DROP:
			case ELSE:
			case END:
			case EXCEPT:
			case EXECUTE:
			case FETCH:
			case FOR:
			case GOTO:
			case GRANT:
			case IF:
			case INSERT:
			case INTERSECT:
			case KILL:
			case MERGE:
			case OPEN:
			case OPENJSON:
			case OPTION:
			case PRECISION:
			case PRINT:
			case RAISERROR:
			case RECONFIGURE:
			case RETURN:
			case REVERT:
			case REVOKE:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case SHUTDOWN:
			case TRUNCATE:
			case UNION:
			case UPDATE:
			case USE:
			case WAITFOR:
			case WHILE:
			case WITH:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
			case DOT:
			case LR_BRACKET:
			case RR_BRACKET:
			case COMMA:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_itemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_item; }
	}

	public final Group_by_itemContext group_by_item() throws RecognitionException {
		Group_by_itemContext _localctx = new Group_by_itemContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_group_by_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9651);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_clauseContext extends ParserRuleContext {
		public OptionContext option;
		public List<OptionContext> options = new ArrayList<OptionContext>();
		public TerminalNode OPTION() { return getToken(TSqlParser.OPTION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_clause; }
	}

	public final Option_clauseContext option_clause() throws RecognitionException {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_option_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9653);
			match(OPTION);
			setState(9654);
			match(LR_BRACKET);
			setState(9655);
			((Option_clauseContext)_localctx).option = option();
			((Option_clauseContext)_localctx).options.add(((Option_clauseContext)_localctx).option);
			setState(9660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9656);
				match(COMMA);
				setState(9657);
				((Option_clauseContext)_localctx).option = option();
				((Option_clauseContext)_localctx).options.add(((Option_clauseContext)_localctx).option);
				}
				}
				setState(9662);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9663);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public Token number_rows;
		public Token number_of_processors;
		public Token number_recursion;
		public TerminalNode FAST() { return getToken(TSqlParser.FAST, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode ORDER() { return getToken(TSqlParser.ORDER, 0); }
		public TerminalNode UNION() { return getToken(TSqlParser.UNION, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public TerminalNode CONCAT() { return getToken(TSqlParser.CONCAT, 0); }
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode EXPAND() { return getToken(TSqlParser.EXPAND, 0); }
		public TerminalNode VIEWS() { return getToken(TSqlParser.VIEWS, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode KEEP() { return getToken(TSqlParser.KEEP, 0); }
		public TerminalNode PLAN() { return getToken(TSqlParser.PLAN, 0); }
		public TerminalNode KEEPFIXED() { return getToken(TSqlParser.KEEPFIXED, 0); }
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(TSqlParser.MAXRECURSION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(TSqlParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<Optimize_for_argContext> optimize_for_arg() {
			return getRuleContexts(Optimize_for_argContext.class);
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return getRuleContext(Optimize_for_argContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public TerminalNode ROBUST() { return getToken(TSqlParser.ROBUST, 0); }
		public TerminalNode USE() { return getToken(TSqlParser.USE, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_option);
		int _la;
		try {
			setState(9710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1381,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9665);
				match(FAST);
				setState(9666);
				((OptionContext)_localctx).number_rows = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9667);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9668);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9669);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9670);
				match(UNION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9671);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9672);
				match(JOIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9673);
				match(EXPAND);
				setState(9674);
				match(VIEWS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9675);
				match(FORCE);
				setState(9676);
				match(ORDER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9677);
				match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9678);
				match(KEEP);
				setState(9679);
				match(PLAN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9680);
				match(KEEPFIXED);
				setState(9681);
				match(PLAN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9682);
				match(MAXDOP);
				setState(9683);
				((OptionContext)_localctx).number_of_processors = match(DECIMAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9684);
				match(MAXRECURSION);
				setState(9685);
				((OptionContext)_localctx).number_recursion = match(DECIMAL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9686);
				match(OPTIMIZE);
				setState(9687);
				match(FOR);
				setState(9688);
				match(LR_BRACKET);
				setState(9689);
				optimize_for_arg();
				setState(9694);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9690);
					match(COMMA);
					setState(9691);
					optimize_for_arg();
					}
					}
					setState(9696);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9697);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9699);
				match(OPTIMIZE);
				setState(9700);
				match(FOR);
				setState(9701);
				match(UNKNOWN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9702);
				match(PARAMETERIZATION);
				setState(9703);
				_la = _input.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9704);
				match(RECOMPILE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9705);
				match(ROBUST);
				setState(9706);
				match(PLAN);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9707);
				match(USE);
				setState(9708);
				match(PLAN);
				setState(9709);
				match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_for_argContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_for_arg; }
	}

	public final Optimize_for_argContext optimize_for_arg() throws RecognitionException {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_optimize_for_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9712);
			match(LOCAL_ID);
			setState(9719);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNKNOWN:
				{
				setState(9713);
				match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				setState(9714);
				match(EQUAL);
				setState(9717);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(9715);
					constant();
					}
					break;
				case NULL:
					{
					setState(9716);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public Select_list_elemContext select_list_elem;
		public List<Select_list_elemContext> selectElement = new ArrayList<Select_list_elemContext>();
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_select_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9721);
			((Select_listContext)_localctx).select_list_elem = select_list_elem();
			((Select_listContext)_localctx).selectElement.add(((Select_listContext)_localctx).select_list_elem);
			setState(9726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9722);
				match(COMMA);
				setState(9723);
				((Select_listContext)_localctx).select_list_elem = select_list_elem();
				((Select_listContext)_localctx).selectElement.add(((Select_listContext)_localctx).select_list_elem);
				}
				}
				setState(9728);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_method_argumentsContext extends ParserRuleContext {
		public Execute_var_stringContext execute_var_string;
		public List<Execute_var_stringContext> argument = new ArrayList<Execute_var_stringContext>();
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<Execute_var_stringContext> execute_var_string() {
			return getRuleContexts(Execute_var_stringContext.class);
		}
		public Execute_var_stringContext execute_var_string(int i) {
			return getRuleContext(Execute_var_stringContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Udt_method_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_method_arguments; }
	}

	public final Udt_method_argumentsContext udt_method_arguments() throws RecognitionException {
		Udt_method_argumentsContext _localctx = new Udt_method_argumentsContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_udt_method_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9729);
			match(LR_BRACKET);
			setState(9730);
			((Udt_method_argumentsContext)_localctx).execute_var_string = execute_var_string();
			((Udt_method_argumentsContext)_localctx).argument.add(((Udt_method_argumentsContext)_localctx).execute_var_string);
			setState(9735);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9731);
				match(COMMA);
				setState(9732);
				((Udt_method_argumentsContext)_localctx).execute_var_string = execute_var_string();
				((Udt_method_argumentsContext)_localctx).argument.add(((Udt_method_argumentsContext)_localctx).execute_var_string);
				}
				}
				setState(9737);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9738);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AsteriskContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(TSqlParser.STAR, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public AsteriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asterisk; }
	}

	public final AsteriskContext asterisk() throws RecognitionException {
		AsteriskContext _localctx = new AsteriskContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_asterisk);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
				{
				setState(9740);
				table_name();
				setState(9741);
				match(DOT);
				}
			}

			setState(9745);
			match(STAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_elemContext extends ParserRuleContext {
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode DOLLAR() { return getToken(TSqlParser.DOLLAR, 0); }
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode ROWGUID() { return getToken(TSqlParser.ROWGUID, 0); }
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_elem; }
	}

	public final Column_elemContext column_elem() throws RecognitionException {
		Column_elemContext _localctx = new Column_elemContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_column_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9753);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1387,_ctx) ) {
			case 1:
				{
				setState(9747);
				full_column_name();
				}
				break;
			case 2:
				{
				setState(9748);
				match(DOLLAR);
				setState(9749);
				match(IDENTITY);
				}
				break;
			case 3:
				{
				setState(9750);
				match(DOLLAR);
				setState(9751);
				match(ROWGUID);
				}
				break;
			case 4:
				{
				setState(9752);
				match(NULL);
				}
				break;
			}
			setState(9756);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1388,_ctx) ) {
			case 1:
				{
				setState(9755);
				as_column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Udt_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext non_static_attr;
		public IdContext static_attr;
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Udt_method_argumentsContext udt_method_arguments() {
			return getRuleContext(Udt_method_argumentsContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public Udt_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_udt_elem; }
	}

	public final Udt_elemContext udt_elem() throws RecognitionException {
		Udt_elemContext _localctx = new Udt_elemContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_udt_elem);
		try {
			setState(9775);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9758);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(9759);
				match(DOT);
				setState(9760);
				((Udt_elemContext)_localctx).non_static_attr = id();
				setState(9761);
				udt_method_arguments();
				setState(9763);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1389,_ctx) ) {
				case 1:
					{
					setState(9762);
					as_column_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9765);
				((Udt_elemContext)_localctx).udt_column_name = id();
				setState(9766);
				match(COLON);
				setState(9767);
				match(COLON);
				setState(9768);
				((Udt_elemContext)_localctx).static_attr = id();
				setState(9770);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1390,_ctx) ) {
				case 1:
					{
					setState(9769);
					udt_method_arguments();
					}
					break;
				}
				setState(9773);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1391,_ctx) ) {
				case 1:
					{
					setState(9772);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_elemContext extends ParserRuleContext {
		public Column_aliasContext leftAlias;
		public Token eq;
		public ExpressionContext leftAssignment;
		public ExpressionContext expressionAs;
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public As_column_aliasContext as_column_alias() {
			return getRuleContext(As_column_aliasContext.class,0);
		}
		public Expression_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_elem; }
	}

	public final Expression_elemContext expression_elem() throws RecognitionException {
		Expression_elemContext _localctx = new Expression_elemContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_expression_elem);
		try {
			setState(9785);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1394,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9777);
				((Expression_elemContext)_localctx).leftAlias = column_alias();
				setState(9778);
				((Expression_elemContext)_localctx).eq = match(EQUAL);
				setState(9779);
				((Expression_elemContext)_localctx).leftAssignment = expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9781);
				((Expression_elemContext)_localctx).expressionAs = expression(0);
				setState(9783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1393,_ctx) ) {
				case 1:
					{
					setState(9782);
					as_column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elemContext extends ParserRuleContext {
		public AsteriskContext asterisk() {
			return getRuleContext(AsteriskContext.class,0);
		}
		public Column_elemContext column_elem() {
			return getRuleContext(Column_elemContext.class,0);
		}
		public Udt_elemContext udt_elem() {
			return getRuleContext(Udt_elemContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public Expression_elemContext expression_elem() {
			return getRuleContext(Expression_elemContext.class,0);
		}
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_select_list_elem);
		try {
			setState(9797);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1396,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9787);
				asterisk();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9788);
				column_elem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9789);
				udt_elem();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9790);
				match(LOCAL_ID);
				setState(9793);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(9791);
					assignment_operator();
					}
					break;
				case EQUAL:
					{
					setState(9792);
					match(EQUAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9795);
				expression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9796);
				expression_elem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourcesContext extends ParserRuleContext {
		public Table_sourceContext table_source;
		public List<Table_sourceContext> source = new ArrayList<Table_sourceContext>();
		public List<Table_sourceContext> table_source() {
			return getRuleContexts(Table_sourceContext.class);
		}
		public Table_sourceContext table_source(int i) {
			return getRuleContext(Table_sourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Table_sourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_sources; }
	}

	public final Table_sourcesContext table_sources() throws RecognitionException {
		Table_sourcesContext _localctx = new Table_sourcesContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_table_sources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9799);
			((Table_sourcesContext)_localctx).table_source = table_source();
			((Table_sourcesContext)_localctx).source.add(((Table_sourcesContext)_localctx).table_source);
			setState(9804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9800);
				match(COMMA);
				setState(9801);
				((Table_sourcesContext)_localctx).table_source = table_source();
				((Table_sourcesContext)_localctx).source.add(((Table_sourcesContext)_localctx).table_source);
				}
				}
				setState(9806);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_sourceContext extends ParserRuleContext {
		public Table_source_item_joinedContext table_source_item_joined() {
			return getRuleContext(Table_source_item_joinedContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Table_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source; }
	}

	public final Table_sourceContext table_source() throws RecognitionException {
		Table_sourceContext _localctx = new Table_sourceContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_table_source);
		try {
			setState(9812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1398,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9807);
				table_source_item_joined();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9808);
				match(LR_BRACKET);
				setState(9809);
				table_source_item_joined();
				setState(9810);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_item_joinedContext extends ParserRuleContext {
		public Join_partContext join_part;
		public List<Join_partContext> joins = new ArrayList<Join_partContext>();
		public Table_source_itemContext table_source_item() {
			return getRuleContext(Table_source_itemContext.class,0);
		}
		public List<Join_partContext> join_part() {
			return getRuleContexts(Join_partContext.class);
		}
		public Join_partContext join_part(int i) {
			return getRuleContext(Join_partContext.class,i);
		}
		public Table_source_item_joinedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item_joined; }
	}

	public final Table_source_item_joinedContext table_source_item_joined() throws RecognitionException {
		Table_source_item_joinedContext _localctx = new Table_source_item_joinedContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_table_source_item_joined);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9814);
			table_source_item();
			setState(9818);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1399,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9815);
					((Table_source_item_joinedContext)_localctx).join_part = join_part();
					((Table_source_item_joinedContext)_localctx).joins.add(((Table_source_item_joinedContext)_localctx).join_part);
					}
					} 
				}
				setState(9820);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1399,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_source_itemContext extends ParserRuleContext {
		public Token loc_id;
		public Token loc_id_call;
		public Function_callContext loc_fcall;
		public Function_callContext oldstyle_fcall;
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Rowset_functionContext rowset_function() {
			return getRuleContext(Rowset_functionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public Change_tableContext change_table() {
			return getRuleContext(Change_tableContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Nodes_methodContext nodes_method() {
			return getRuleContext(Nodes_methodContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Open_xmlContext open_xml() {
			return getRuleContext(Open_xmlContext.class,0);
		}
		public Open_jsonContext open_json() {
			return getRuleContext(Open_jsonContext.class,0);
		}
		public List<TerminalNode> COLON() { return getTokens(TSqlParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSqlParser.COLON, i);
		}
		public Table_source_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_source_item; }
	}

	public final Table_source_itemContext table_source_item() throws RecognitionException {
		Table_source_itemContext _localctx = new Table_source_itemContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_table_source_item);
		try {
			setState(9881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1414,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9821);
				table_name_with_hint();
				setState(9823);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1400,_ctx) ) {
				case 1:
					{
					setState(9822);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9825);
				full_table_name();
				setState(9827);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1401,_ctx) ) {
				case 1:
					{
					setState(9826);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9829);
				rowset_function();
				setState(9831);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1402,_ctx) ) {
				case 1:
					{
					setState(9830);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9833);
				match(LR_BRACKET);
				setState(9834);
				derived_table();
				setState(9835);
				match(RR_BRACKET);
				setState(9840);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1404,_ctx) ) {
				case 1:
					{
					setState(9836);
					as_table_alias();
					setState(9838);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1403,_ctx) ) {
					case 1:
						{
						setState(9837);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9842);
				change_table();
				setState(9844);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1405,_ctx) ) {
				case 1:
					{
					setState(9843);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9846);
				function_call();
				setState(9851);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1407,_ctx) ) {
				case 1:
					{
					setState(9847);
					as_table_alias();
					setState(9849);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1406,_ctx) ) {
					case 1:
						{
						setState(9848);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9853);
				((Table_source_itemContext)_localctx).loc_id = match(LOCAL_ID);
				setState(9855);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1408,_ctx) ) {
				case 1:
					{
					setState(9854);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9857);
				nodes_method();
				setState(9862);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1410,_ctx) ) {
				case 1:
					{
					setState(9858);
					as_table_alias();
					setState(9860);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1409,_ctx) ) {
					case 1:
						{
						setState(9859);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9864);
				((Table_source_itemContext)_localctx).loc_id_call = match(LOCAL_ID);
				setState(9865);
				match(DOT);
				setState(9866);
				((Table_source_itemContext)_localctx).loc_fcall = function_call();
				setState(9871);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1412,_ctx) ) {
				case 1:
					{
					setState(9867);
					as_table_alias();
					setState(9869);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1411,_ctx) ) {
					case 1:
						{
						setState(9868);
						column_alias_list();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9873);
				open_xml();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9874);
				open_json();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9875);
				match(COLON);
				setState(9876);
				match(COLON);
				setState(9877);
				((Table_source_itemContext)_localctx).oldstyle_fcall = function_call();
				setState(9879);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1413,_ctx) ) {
				case 1:
					{
					setState(9878);
					as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_xmlContext extends ParserRuleContext {
		public TerminalNode OPENXML() { return getToken(TSqlParser.OPENXML, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return getRuleContext(Schema_declarationContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_xml; }
	}

	public final Open_xmlContext open_xml() throws RecognitionException {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_open_xml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9883);
			match(OPENXML);
			setState(9884);
			match(LR_BRACKET);
			setState(9885);
			expression(0);
			setState(9886);
			match(COMMA);
			setState(9887);
			expression(0);
			setState(9890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9888);
				match(COMMA);
				setState(9889);
				expression(0);
				}
			}

			setState(9892);
			match(RR_BRACKET);
			setState(9898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1416,_ctx) ) {
			case 1:
				{
				setState(9893);
				match(WITH);
				setState(9894);
				match(LR_BRACKET);
				setState(9895);
				schema_declaration();
				setState(9896);
				match(RR_BRACKET);
				}
				break;
			}
			setState(9901);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1417,_ctx) ) {
			case 1:
				{
				setState(9900);
				as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_jsonContext extends ParserRuleContext {
		public TerminalNode OPENJSON() { return getToken(TSqlParser.OPENJSON, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public Json_declarationContext json_declaration() {
			return getRuleContext(Json_declarationContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Open_jsonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_json; }
	}

	public final Open_jsonContext open_json() throws RecognitionException {
		Open_jsonContext _localctx = new Open_jsonContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_open_json);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9903);
			match(OPENJSON);
			setState(9904);
			match(LR_BRACKET);
			setState(9905);
			expression(0);
			setState(9908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9906);
				match(COMMA);
				setState(9907);
				expression(0);
				}
			}

			setState(9910);
			match(RR_BRACKET);
			setState(9916);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1419,_ctx) ) {
			case 1:
				{
				setState(9911);
				match(WITH);
				setState(9912);
				match(LR_BRACKET);
				setState(9913);
				json_declaration();
				setState(9914);
				match(RR_BRACKET);
				}
				break;
			}
			setState(9919);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1420,_ctx) ) {
			case 1:
				{
				setState(9918);
				as_table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_declarationContext extends ParserRuleContext {
		public Json_column_declarationContext json_column_declaration;
		public List<Json_column_declarationContext> json_col = new ArrayList<Json_column_declarationContext>();
		public List<Json_column_declarationContext> json_column_declaration() {
			return getRuleContexts(Json_column_declarationContext.class);
		}
		public Json_column_declarationContext json_column_declaration(int i) {
			return getRuleContext(Json_column_declarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Json_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_declaration; }
	}

	public final Json_declarationContext json_declaration() throws RecognitionException {
		Json_declarationContext _localctx = new Json_declarationContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_json_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9921);
			((Json_declarationContext)_localctx).json_column_declaration = json_column_declaration();
			((Json_declarationContext)_localctx).json_col.add(((Json_declarationContext)_localctx).json_column_declaration);
			setState(9926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9922);
				match(COMMA);
				setState(9923);
				((Json_declarationContext)_localctx).json_column_declaration = json_column_declaration();
				((Json_declarationContext)_localctx).json_col.add(((Json_declarationContext)_localctx).json_column_declaration);
				}
				}
				setState(9928);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Json_column_declarationContext extends ParserRuleContext {
		public Column_declarationContext column_declaration() {
			return getRuleContext(Column_declarationContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public TerminalNode JSON() { return getToken(TSqlParser.JSON, 0); }
		public Json_column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_json_column_declaration; }
	}

	public final Json_column_declarationContext json_column_declaration() throws RecognitionException {
		Json_column_declarationContext _localctx = new Json_column_declarationContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_json_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9929);
			column_declaration();
			setState(9932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9930);
				match(AS);
				setState(9931);
				match(JSON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_declarationContext extends ParserRuleContext {
		public Column_declarationContext column_declaration;
		public List<Column_declarationContext> xml_col = new ArrayList<Column_declarationContext>();
		public List<Column_declarationContext> column_declaration() {
			return getRuleContexts(Column_declarationContext.class);
		}
		public Column_declarationContext column_declaration(int i) {
			return getRuleContext(Column_declarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_declaration; }
	}

	public final Schema_declarationContext schema_declaration() throws RecognitionException {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_schema_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9934);
			((Schema_declarationContext)_localctx).column_declaration = column_declaration();
			((Schema_declarationContext)_localctx).xml_col.add(((Schema_declarationContext)_localctx).column_declaration);
			setState(9939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9935);
				match(COMMA);
				setState(9936);
				((Schema_declarationContext)_localctx).column_declaration = column_declaration();
				((Schema_declarationContext)_localctx).xml_col.add(((Schema_declarationContext)_localctx).column_declaration);
				}
				}
				setState(9941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_declarationContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_declaration; }
	}

	public final Column_declarationContext column_declaration() throws RecognitionException {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9942);
			id();
			setState(9943);
			data_type();
			setState(9945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(9944);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tableContext extends ParserRuleContext {
		public Change_table_changesContext change_table_changes() {
			return getRuleContext(Change_table_changesContext.class,0);
		}
		public Change_table_versionContext change_table_version() {
			return getRuleContext(Change_table_versionContext.class,0);
		}
		public Change_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table; }
	}

	public final Change_tableContext change_table() throws RecognitionException {
		Change_tableContext _localctx = new Change_tableContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_change_table);
		try {
			setState(9949);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1425,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9947);
				change_table_changes();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9948);
				change_table_version();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_table_changesContext extends ParserRuleContext {
		public Table_nameContext changetable;
		public Token changesid;
		public TerminalNode CHANGETABLE() { return getToken(TSqlParser.CHANGETABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode CHANGES() { return getToken(TSqlParser.CHANGES, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Change_table_changesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table_changes; }
	}

	public final Change_table_changesContext change_table_changes() throws RecognitionException {
		Change_table_changesContext _localctx = new Change_table_changesContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_change_table_changes);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9951);
			match(CHANGETABLE);
			setState(9952);
			match(LR_BRACKET);
			setState(9953);
			match(CHANGES);
			setState(9954);
			((Change_table_changesContext)_localctx).changetable = table_name();
			setState(9955);
			match(COMMA);
			setState(9956);
			((Change_table_changesContext)_localctx).changesid = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
				((Change_table_changesContext)_localctx).changesid = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9957);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_table_versionContext extends ParserRuleContext {
		public Table_nameContext versiontable;
		public Full_column_name_listContext pk_columns;
		public Select_listContext pk_values;
		public TerminalNode CHANGETABLE() { return getToken(TSqlParser.CHANGETABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode VERSION() { return getToken(TSqlParser.VERSION, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Change_table_versionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table_version; }
	}

	public final Change_table_versionContext change_table_version() throws RecognitionException {
		Change_table_versionContext _localctx = new Change_table_versionContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_change_table_version);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9959);
			match(CHANGETABLE);
			setState(9960);
			match(LR_BRACKET);
			setState(9961);
			match(VERSION);
			setState(9962);
			((Change_table_versionContext)_localctx).versiontable = table_name();
			setState(9963);
			match(COMMA);
			setState(9964);
			((Change_table_versionContext)_localctx).pk_columns = full_column_name_list();
			setState(9965);
			match(COMMA);
			setState(9966);
			((Change_table_versionContext)_localctx).pk_values = select_list();
			setState(9967);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_partContext extends ParserRuleContext {
		public Join_onContext join_on() {
			return getRuleContext(Join_onContext.class,0);
		}
		public Cross_joinContext cross_join() {
			return getRuleContext(Cross_joinContext.class,0);
		}
		public ApplyContext apply() {
			return getRuleContext(ApplyContext.class,0);
		}
		public PivotContext pivot() {
			return getRuleContext(PivotContext.class,0);
		}
		public UnpivotContext unpivot() {
			return getRuleContext(UnpivotContext.class,0);
		}
		public Join_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_part; }
	}

	public final Join_partContext join_part() throws RecognitionException {
		Join_partContext _localctx = new Join_partContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_join_part);
		try {
			setState(9974);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1426,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9969);
				join_on();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9970);
				cross_join();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9971);
				apply();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9972);
				pivot();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9973);
				unpivot();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_onContext extends ParserRuleContext {
		public Token inner;
		public Token join_type;
		public Token outer;
		public Token join_hint;
		public Table_sourceContext source;
		public Search_conditionContext cond;
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(TSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(TSqlParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode MERGE() { return getToken(TSqlParser.MERGE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode INNER() { return getToken(TSqlParser.INNER, 0); }
		public TerminalNode OUTER() { return getToken(TSqlParser.OUTER, 0); }
		public Join_onContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on; }
	}

	public final Join_onContext join_on() throws RecognitionException {
		Join_onContext _localctx = new Join_onContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_join_on);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9983);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
			case JOIN:
			case MERGE:
			case HASH:
			case LOOP:
			case REMOTE:
				{
				setState(9977);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INNER) {
					{
					setState(9976);
					((Join_onContext)_localctx).inner = match(INNER);
					}
				}

				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(9979);
				((Join_onContext)_localctx).join_type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
					((Join_onContext)_localctx).join_type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(9980);
					((Join_onContext)_localctx).outer = match(OUTER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9986);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
				{
				setState(9985);
				((Join_onContext)_localctx).join_hint = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
					((Join_onContext)_localctx).join_hint = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(9988);
			match(JOIN);
			setState(9989);
			((Join_onContext)_localctx).source = table_source();
			setState(9990);
			match(ON);
			setState(9991);
			((Join_onContext)_localctx).cond = search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cross_joinContext extends ParserRuleContext {
		public TerminalNode CROSS() { return getToken(TSqlParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(TSqlParser.JOIN, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public Cross_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cross_join; }
	}

	public final Cross_joinContext cross_join() throws RecognitionException {
		Cross_joinContext _localctx = new Cross_joinContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_cross_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9993);
			match(CROSS);
			setState(9994);
			match(JOIN);
			setState(9995);
			table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ApplyContext extends ParserRuleContext {
		public Token apply_style;
		public Table_sourceContext source;
		public TerminalNode APPLY() { return getToken(TSqlParser.APPLY, 0); }
		public Table_sourceContext table_source() {
			return getRuleContext(Table_sourceContext.class,0);
		}
		public TerminalNode CROSS() { return getToken(TSqlParser.CROSS, 0); }
		public TerminalNode OUTER() { return getToken(TSqlParser.OUTER, 0); }
		public ApplyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_apply; }
	}

	public final ApplyContext apply() throws RecognitionException {
		ApplyContext _localctx = new ApplyContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_apply);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9997);
			((ApplyContext)_localctx).apply_style = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CROSS || _la==OUTER) ) {
				((ApplyContext)_localctx).apply_style = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9998);
			match(APPLY);
			setState(9999);
			((ApplyContext)_localctx).source = table_source();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PivotContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(TSqlParser.PIVOT, 0); }
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public PivotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot; }
	}

	public final PivotContext pivot() throws RecognitionException {
		PivotContext _localctx = new PivotContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_pivot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10001);
			match(PIVOT);
			setState(10002);
			pivot_clause();
			setState(10003);
			as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnpivotContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(TSqlParser.UNPIVOT, 0); }
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public UnpivotContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot; }
	}

	public final UnpivotContext unpivot() throws RecognitionException {
		UnpivotContext _localctx = new UnpivotContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_unpivot);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10005);
			match(UNPIVOT);
			setState(10006);
			unpivot_clause();
			setState(10007);
			as_table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_pivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10009);
			match(LR_BRACKET);
			setState(10010);
			aggregate_windowed_function();
			setState(10011);
			match(FOR);
			setState(10012);
			full_column_name();
			setState(10013);
			match(IN);
			setState(10014);
			column_alias_list();
			setState(10015);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public ExpressionContext unpivot_exp;
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode FOR() { return getToken(TSqlParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSqlParser.IN, 0); }
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_unpivot_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10017);
			match(LR_BRACKET);
			setState(10018);
			((Unpivot_clauseContext)_localctx).unpivot_exp = expression(0);
			setState(10019);
			match(FOR);
			setState(10020);
			full_column_name();
			setState(10021);
			match(IN);
			setState(10022);
			match(LR_BRACKET);
			setState(10023);
			full_column_name_list();
			setState(10024);
			match(RR_BRACKET);
			setState(10025);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_name_listContext extends ParserRuleContext {
		public Full_column_nameContext full_column_name;
		public List<Full_column_nameContext> column = new ArrayList<Full_column_nameContext>();
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name_list; }
	}

	public final Full_column_name_listContext full_column_name_list() throws RecognitionException {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_full_column_name_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10027);
			((Full_column_name_listContext)_localctx).full_column_name = full_column_name();
			((Full_column_name_listContext)_localctx).column.add(((Full_column_name_listContext)_localctx).full_column_name);
			setState(10032);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1431,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10028);
					match(COMMA);
					setState(10029);
					((Full_column_name_listContext)_localctx).full_column_name = full_column_name();
					((Full_column_name_listContext)_localctx).column.add(((Full_column_name_listContext)_localctx).full_column_name);
					}
					} 
				}
				setState(10034);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1431,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_name_with_hintContext extends ParserRuleContext {
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_with_hint; }
	}

	public final Table_name_with_hintContext table_name_with_hint() throws RecognitionException {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_table_name_with_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10035);
			table_name();
			setState(10037);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1432,_ctx) ) {
			case 1:
				{
				setState(10036);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_functionContext extends ParserRuleContext {
		public Token provider_name;
		public Token connectionString;
		public Token sql;
		public Token data_file;
		public TerminalNode OPENROWSET() { return getToken(TSqlParser.OPENROWSET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public TerminalNode BULK() { return getToken(TSqlParser.BULK, 0); }
		public List<Bulk_optionContext> bulk_option() {
			return getRuleContexts(Bulk_optionContext.class);
		}
		public Bulk_optionContext bulk_option(int i) {
			return getRuleContext(Bulk_optionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function; }
	}

	public final Rowset_functionContext rowset_function() throws RecognitionException {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_rowset_function);
		int _la;
		try {
			setState(10065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1435,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(10039);
				match(OPENROWSET);
				setState(10040);
				match(LR_BRACKET);
				setState(10041);
				((Rowset_functionContext)_localctx).provider_name = match(STRING);
				setState(10042);
				match(COMMA);
				setState(10043);
				((Rowset_functionContext)_localctx).connectionString = match(STRING);
				setState(10044);
				match(COMMA);
				setState(10045);
				((Rowset_functionContext)_localctx).sql = match(STRING);
				setState(10046);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(10047);
				match(OPENROWSET);
				setState(10048);
				match(LR_BRACKET);
				setState(10049);
				match(BULK);
				setState(10050);
				((Rowset_functionContext)_localctx).data_file = match(STRING);
				setState(10051);
				match(COMMA);
				setState(10061);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1434,_ctx) ) {
				case 1:
					{
					setState(10052);
					bulk_option();
					setState(10057);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10053);
						match(COMMA);
						setState(10054);
						bulk_option();
						}
						}
						setState(10059);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(10060);
					id();
					}
					break;
				}
				setState(10063);
				match(RR_BRACKET);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bulk_optionContext extends ParserRuleContext {
		public Token bulk_option_value;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulk_option; }
	}

	public final Bulk_optionContext bulk_option() throws RecognitionException {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_bulk_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10067);
			id();
			setState(10068);
			match(EQUAL);
			setState(10069);
			((Bulk_optionContext)_localctx).bulk_option_value = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				((Bulk_optionContext)_localctx).bulk_option_value = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_derived_table);
		try {
			setState(10081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1436,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10071);
				subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10072);
				match(LR_BRACKET);
				setState(10073);
				subquery();
				setState(10074);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10076);
				table_value_constructor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10077);
				match(LR_BRACKET);
				setState(10078);
				table_value_constructor();
				setState(10079);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
	 
		public Function_callContext() { }
		public void copyFrom(Function_callContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RANKING_WINDOWED_FUNCContext extends Function_callContext {
		public Ranking_windowed_functionContext ranking_windowed_function() {
			return getRuleContext(Ranking_windowed_functionContext.class,0);
		}
		public RANKING_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	public static class BUILT_IN_FUNCContext extends Function_callContext {
		public Build_in_functionsContext build_in_functions() {
			return getRuleContext(Build_in_functionsContext.class,0);
		}
		public BUILT_IN_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	public static class FREE_TEXTContext extends Function_callContext {
		public Freetext_functionContext freetext_function() {
			return getRuleContext(Freetext_functionContext.class,0);
		}
		public FREE_TEXTContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	public static class ANALYTIC_WINDOWED_FUNCContext extends Function_callContext {
		public Analytic_windowed_functionContext analytic_windowed_function() {
			return getRuleContext(Analytic_windowed_functionContext.class,0);
		}
		public ANALYTIC_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	public static class SCALAR_FUNCTIONContext extends Function_callContext {
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public SCALAR_FUNCTIONContext(Function_callContext ctx) { copyFrom(ctx); }
	}
	public static class AGGREGATE_WINDOWED_FUNCContext extends Function_callContext {
		public Aggregate_windowed_functionContext aggregate_windowed_function() {
			return getRuleContext(Aggregate_windowed_functionContext.class,0);
		}
		public AGGREGATE_WINDOWED_FUNCContext(Function_callContext ctx) { copyFrom(ctx); }
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_function_call);
		int _la;
		try {
			setState(10095);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1438,_ctx) ) {
			case 1:
				_localctx = new RANKING_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(10083);
				ranking_windowed_function();
				}
				break;
			case 2:
				_localctx = new AGGREGATE_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(10084);
				aggregate_windowed_function();
				}
				break;
			case 3:
				_localctx = new ANALYTIC_WINDOWED_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(10085);
				analytic_windowed_function();
				}
				break;
			case 4:
				_localctx = new SCALAR_FUNCTIONContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(10086);
				scalar_function_name();
				setState(10087);
				match(LR_BRACKET);
				setState(10089);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 18)) & ~0x3f) == 0 && ((1L << (_la - 18)) & ((1L << (CASE - 18)) | (1L << (COALESCE - 18)) | (1L << (CONTAINSTABLE - 18)) | (1L << (CONVERT - 18)) | (1L << (CURRENT_TIMESTAMP - 18)) | (1L << (CURRENT_USER - 18)) | (1L << (DEFAULT - 18)) | (1L << (FREETEXTTABLE - 18)) | (1L << (IDENTITY - 18)))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (LEFT - 95)) | (1L << (NULL - 95)) | (1L << (NULLIF - 95)) | (1L << (OPENJSON - 95)) | (1L << (OVER - 95)) | (1L << (PRECISION - 95)) | (1L << (RIGHT - 95)) | (1L << (SEMANTICKEYPHRASETABLE - 95)) | (1L << (SEMANTICSIMILARITYDETAILSTABLE - 95)) | (1L << (SEMANTICSIMILARITYTABLE - 95)) | (1L << (SESSION_USER - 95)))) != 0) || ((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (SYSTEM_USER - 161)) | (1L << (USER - 161)) | (1L << (ABSOLUTE - 161)) | (1L << (AT_KEYWORD - 161)) | (1L << (ACCENT_SENSITIVITY - 161)) | (1L << (ACTION - 161)) | (1L << (ACTIVATION - 161)) | (1L << (ACTIVE - 161)) | (1L << (ADDRESS - 161)) | (1L << (AES_128 - 161)) | (1L << (AES_192 - 161)) | (1L << (AES_256 - 161)) | (1L << (AFFINITY - 161)) | (1L << (AFTER - 161)) | (1L << (AGGREGATE - 161)) | (1L << (ALGORITHM - 161)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 161)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 161)) | (1L << (ALLOWED - 161)) | (1L << (ANSI_NULL_DEFAULT - 161)) | (1L << (ANSI_NULLS - 161)) | (1L << (ANSI_PADDING - 161)) | (1L << (ANSI_WARNINGS - 161)) | (1L << (APPLICATION_LOG - 161)) | (1L << (APPLY - 161)) | (1L << (ARITHABORT - 161)) | (1L << (ASSEMBLY - 161)) | (1L << (AUDIT - 161)) | (1L << (AUDIT_GUID - 161)) | (1L << (AUTO - 161)) | (1L << (AUTO_CLEANUP - 161)) | (1L << (AUTO_CLOSE - 161)) | (1L << (AUTO_CREATE_STATISTICS - 161)) | (1L << (AUTO_SHRINK - 161)) | (1L << (AUTO_UPDATE_STATISTICS - 161)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 161)) | (1L << (AVAILABILITY - 161)))) != 0) || ((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (AVG - 225)) | (1L << (BACKUP_PRIORITY - 225)) | (1L << (BEGIN_DIALOG - 225)) | (1L << (BIGINT - 225)) | (1L << (BINARY_KEYWORD - 225)) | (1L << (BINARY_BASE64 - 225)) | (1L << (BINARY_CHECKSUM - 225)) | (1L << (BINDING - 225)) | (1L << (BLOB_STORAGE - 225)) | (1L << (BROKER - 225)) | (1L << (BROKER_INSTANCE - 225)) | (1L << (BULK_LOGGED - 225)) | (1L << (CALLER - 225)) | (1L << (CAP_CPU_PERCENT - 225)) | (1L << (CAST - 225)) | (1L << (TRY_CAST - 225)) | (1L << (CATALOG - 225)) | (1L << (CATCH - 225)) | (1L << (CHANGE_RETENTION - 225)) | (1L << (CHANGE_TRACKING - 225)) | (1L << (CHECKSUM - 225)) | (1L << (CHECKSUM_AGG - 225)) | (1L << (CLEANUP - 225)) | (1L << (COLLECTION - 225)) | (1L << (COLUMN_MASTER_KEY - 225)) | (1L << (COMMITTED - 225)) | (1L << (COMPATIBILITY_LEVEL - 225)) | (1L << (CONCAT - 225)) | (1L << (CONCAT_NULL_YIELDS_NULL - 225)) | (1L << (CONTENT - 225)) | (1L << (CONTROL - 225)) | (1L << (COOKIE - 225)) | (1L << (COUNT - 225)) | (1L << (COUNT_BIG - 225)) | (1L << (COUNTER - 225)) | (1L << (CPU - 225)) | (1L << (CREATE_NEW - 225)) | (1L << (CREATION_DISPOSITION - 225)) | (1L << (CREDENTIAL - 225)) | (1L << (CRYPTOGRAPHIC - 225)) | (1L << (CUME_DIST - 225)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 225)) | (1L << (CURSOR_DEFAULT - 225)) | (1L << (DATA - 225)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 225)) | (1L << (DATEADD - 225)) | (1L << (DATEDIFF - 225)) | (1L << (DATENAME - 225)) | (1L << (DATEPART - 225)) | (1L << (DAYS - 225)) | (1L << (DB_CHAINING - 225)) | (1L << (DB_FAILOVER - 225)) | (1L << (DECRYPTION - 225)) | (1L << (DEFAULT_DOUBLE_QUOTE - 225)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 225)) | (1L << (DEFAULT_LANGUAGE - 225)) | (1L << (DELAY - 225)) | (1L << (DELAYED_DURABILITY - 225)) | (1L << (DELETED - 225)) | (1L << (DENSE_RANK - 225)) | (1L << (DEPENDENTS - 225)) | (1L << (DES - 225)) | (1L << (DESCRIPTION - 225)) | (1L << (DESX - 225)))) != 0) || ((((_la - 289)) & ~0x3f) == 0 && ((1L << (_la - 289)) & ((1L << (DHCP - 289)) | (1L << (DIALOG - 289)) | (1L << (DIRECTORY_NAME - 289)) | (1L << (DISABLE - 289)) | (1L << (DISABLE_BROKER - 289)) | (1L << (DISABLED - 289)) | (1L << (DISK_DRIVE - 289)) | (1L << (DOCUMENT - 289)) | (1L << (DYNAMIC - 289)) | (1L << (ELEMENTS - 289)) | (1L << (EMERGENCY - 289)) | (1L << (EMPTY - 289)) | (1L << (ENABLE - 289)) | (1L << (ENABLE_BROKER - 289)) | (1L << (ENCRYPTED_VALUE - 289)) | (1L << (ENCRYPTION - 289)) | (1L << (ENDPOINT_URL - 289)) | (1L << (ERROR_BROKER_CONVERSATIONS - 289)) | (1L << (EXCLUSIVE - 289)) | (1L << (EXECUTABLE - 289)) | (1L << (EXIST - 289)) | (1L << (EXPAND - 289)) | (1L << (EXPIRY_DATE - 289)) | (1L << (EXPLICIT - 289)) | (1L << (FAIL_OPERATION - 289)) | (1L << (FAILOVER_MODE - 289)) | (1L << (FAILURE - 289)) | (1L << (FAILURE_CONDITION_LEVEL - 289)) | (1L << (FAST - 289)) | (1L << (FAST_FORWARD - 289)) | (1L << (FILEGROUP - 289)) | (1L << (FILEGROWTH - 289)) | (1L << (FILENAME - 289)) | (1L << (FILEPATH - 289)) | (1L << (FILESTREAM - 289)) | (1L << (FILTER - 289)) | (1L << (FIRST - 289)) | (1L << (FIRST_VALUE - 289)) | (1L << (FOLLOWING - 289)) | (1L << (FORCE - 289)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 289)) | (1L << (FORCED - 289)) | (1L << (FORMAT - 289)) | (1L << (FORWARD_ONLY - 289)) | (1L << (FULLSCAN - 289)) | (1L << (FULLTEXT - 289)) | (1L << (GB - 289)) | (1L << (GETDATE - 289)) | (1L << (GETUTCDATE - 289)) | (1L << (GLOBAL - 289)) | (1L << (GO_BATCH - 289)) | (1L << (GO - 289)) | (1L << (GROUP_MAX_REQUESTS - 289)) | (1L << (GROUPING - 289)) | (1L << (GROUPING_ID - 289)) | (1L << (HADR - 289)) | (1L << (HASH - 289)) | (1L << (HEALTH_CHECK_TIMEOUT - 289)) | (1L << (HIGH - 289)) | (1L << (HONOR_BROKER_PRIORITY - 289)) | (1L << (HOURS - 289)) | (1L << (IDENTITY_VALUE - 289)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 289)) | (1L << (IMMEDIATE - 289)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (IMPERSONATE - 353)) | (1L << (IMPORTANCE - 353)) | (1L << (INCLUDE_NULL_VALUES - 353)) | (1L << (INCREMENTAL - 353)) | (1L << (INITIATOR - 353)) | (1L << (INPUT - 353)) | (1L << (INSENSITIVE - 353)) | (1L << (INSERTED - 353)) | (1L << (INT - 353)) | (1L << (IP - 353)) | (1L << (ISOLATION - 353)) | (1L << (JOB - 353)) | (1L << (JSON - 353)) | (1L << (KB - 353)) | (1L << (KEEP - 353)) | (1L << (KEEPFIXED - 353)) | (1L << (KEY_SOURCE - 353)) | (1L << (KEYS - 353)) | (1L << (KEYSET - 353)) | (1L << (LAG - 353)) | (1L << (LAST - 353)) | (1L << (LAST_VALUE - 353)) | (1L << (LEAD - 353)) | (1L << (LEVEL - 353)) | (1L << (LIST - 353)) | (1L << (LISTENER - 353)) | (1L << (LISTENER_URL - 353)) | (1L << (LOB_COMPACTION - 353)) | (1L << (LOCAL - 353)) | (1L << (LOCATION - 353)) | (1L << (LOCK - 353)) | (1L << (LOCK_ESCALATION - 353)) | (1L << (LOGIN - 353)) | (1L << (LOOP - 353)) | (1L << (LOW - 353)) | (1L << (MANUAL - 353)) | (1L << (MARK - 353)) | (1L << (MATERIALIZED - 353)) | (1L << (MAX - 353)) | (1L << (MAX_CPU_PERCENT - 353)) | (1L << (MAX_DOP - 353)) | (1L << (MAX_FILES - 353)) | (1L << (MAX_IOPS_PER_VOLUME - 353)) | (1L << (MAX_MEMORY_PERCENT - 353)) | (1L << (MAX_PROCESSES - 353)) | (1L << (MAX_QUEUE_READERS - 353)) | (1L << (MAX_ROLLOVER_FILES - 353)) | (1L << (MAXDOP - 353)) | (1L << (MAXRECURSION - 353)) | (1L << (MAXSIZE - 353)) | (1L << (MB - 353)) | (1L << (MEDIUM - 353)) | (1L << (MEMORY_OPTIMIZED_DATA - 353)) | (1L << (MESSAGE - 353)) | (1L << (MIN - 353)) | (1L << (MIN_ACTIVE_ROWVERSION - 353)) | (1L << (MIN_CPU_PERCENT - 353)) | (1L << (MIN_IOPS_PER_VOLUME - 353)) | (1L << (MIN_MEMORY_PERCENT - 353)) | (1L << (MINUTES - 353)) | (1L << (MIRROR_ADDRESS - 353)) | (1L << (MIXED_PAGE_ALLOCATION - 353)) | (1L << (MODE - 353)) | (1L << (MODIFY - 353)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MOVE - 417)) | (1L << (MULTI_USER - 417)) | (1L << (NAME - 417)) | (1L << (NESTED_TRIGGERS - 417)) | (1L << (NEW_ACCOUNT - 417)) | (1L << (NEW_BROKER - 417)) | (1L << (NEW_PASSWORD - 417)) | (1L << (NEXT - 417)) | (1L << (NO - 417)) | (1L << (NO_TRUNCATE - 417)) | (1L << (NO_WAIT - 417)) | (1L << (NOCOUNT - 417)) | (1L << (NODES - 417)) | (1L << (NOEXPAND - 417)) | (1L << (NON_TRANSACTED_ACCESS - 417)) | (1L << (NORECOMPUTE - 417)) | (1L << (NORECOVERY - 417)) | (1L << (NOWAIT - 417)) | (1L << (NTILE - 417)) | (1L << (NUMANODE - 417)) | (1L << (NUMBER - 417)) | (1L << (NUMERIC_ROUNDABORT - 417)) | (1L << (OBJECT - 417)) | (1L << (OFFLINE - 417)) | (1L << (OFFSET - 417)) | (1L << (OLD_ACCOUNT - 417)) | (1L << (ONLINE - 417)) | (1L << (ONLY - 417)) | (1L << (OPEN_EXISTING - 417)) | (1L << (OPTIMISTIC - 417)) | (1L << (OPTIMIZE - 417)) | (1L << (OUT - 417)) | (1L << (OUTPUT - 417)) | (1L << (OVERRIDE - 417)) | (1L << (OWNER - 417)) | (1L << (PAGE_VERIFY - 417)) | (1L << (PARAMETERIZATION - 417)) | (1L << (PARTITION - 417)) | (1L << (PARTITIONS - 417)) | (1L << (PARTNER - 417)) | (1L << (PATH - 417)) | (1L << (PERCENT_RANK - 417)) | (1L << (PERCENTILE_CONT - 417)) | (1L << (PERCENTILE_DISC - 417)) | (1L << (POISON_MESSAGE_HANDLING - 417)) | (1L << (POOL - 417)) | (1L << (PORT - 417)) | (1L << (PRECEDING - 417)) | (1L << (PRIMARY_ROLE - 417)) | (1L << (PRIOR - 417)) | (1L << (PRIORITY - 417)) | (1L << (PRIORITY_LEVEL - 417)) | (1L << (PRIVATE - 417)) | (1L << (PRIVATE_KEY - 417)) | (1L << (PRIVILEGES - 417)) | (1L << (PROCEDURE_NAME - 417)) | (1L << (PROPERTY - 417)) | (1L << (PROVIDER - 417)) | (1L << (PROVIDER_KEY_NAME - 417)) | (1L << (QUERY - 417)) | (1L << (QUEUE - 417)) | (1L << (QUEUE_DELAY - 417)) | (1L << (QUOTED_IDENTIFIER - 417)) | (1L << (RANGE - 417)))) != 0) || ((((_la - 481)) & ~0x3f) == 0 && ((1L << (_la - 481)) & ((1L << (RANK - 481)) | (1L << (RC2 - 481)) | (1L << (RC4 - 481)) | (1L << (RC4_128 - 481)) | (1L << (READ_COMMITTED_SNAPSHOT - 481)) | (1L << (READ_ONLY - 481)) | (1L << (READ_ONLY_ROUTING_LIST - 481)) | (1L << (READ_WRITE - 481)) | (1L << (READONLY - 481)) | (1L << (REBUILD - 481)) | (1L << (RECEIVE - 481)) | (1L << (RECOMPILE - 481)) | (1L << (RECOVERY - 481)) | (1L << (RECURSIVE_TRIGGERS - 481)) | (1L << (RELATIVE - 481)) | (1L << (REMOTE - 481)) | (1L << (REMOTE_SERVICE_NAME - 481)) | (1L << (REMOVE - 481)) | (1L << (REORGANIZE - 481)) | (1L << (REPEATABLE - 481)) | (1L << (REPLICA - 481)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 481)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 481)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 481)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 481)) | (1L << (RESERVE_DISK_SPACE - 481)) | (1L << (RESOURCE - 481)) | (1L << (RESOURCE_MANAGER_LOCATION - 481)) | (1L << (RESTRICTED_USER - 481)) | (1L << (RETENTION - 481)) | (1L << (ROBUST - 481)) | (1L << (ROOT - 481)) | (1L << (ROUTE - 481)) | (1L << (ROW - 481)) | (1L << (ROW_NUMBER - 481)) | (1L << (ROWGUID - 481)) | (1L << (ROWS - 481)) | (1L << (SAMPLE - 481)) | (1L << (SCHEMABINDING - 481)) | (1L << (SCOPED - 481)) | (1L << (SCROLL - 481)) | (1L << (SCROLL_LOCKS - 481)) | (1L << (SEARCH - 481)) | (1L << (SECONDARY - 481)) | (1L << (SECONDARY_ONLY - 481)) | (1L << (SECONDARY_ROLE - 481)) | (1L << (SECONDS - 481)) | (1L << (SECRET - 481)) | (1L << (SECURITY - 481)) | (1L << (SECURITY_LOG - 481)) | (1L << (SEEDING_MODE - 481)) | (1L << (SELF - 481)) | (1L << (SEMI_SENSITIVE - 481)) | (1L << (SEND - 481)) | (1L << (SENT - 481)) | (1L << (SEQUENCE - 481)) | (1L << (SERIALIZABLE - 481)) | (1L << (SESSION_TIMEOUT - 481)) | (1L << (SETERROR - 481)) | (1L << (SHARE - 481)) | (1L << (SHOWPLAN - 481)) | (1L << (SIGNATURE - 481)) | (1L << (SIMPLE - 481)) | (1L << (SINGLE_USER - 481)))) != 0) || ((((_la - 545)) & ~0x3f) == 0 && ((1L << (_la - 545)) & ((1L << (SIZE - 545)) | (1L << (SMALLINT - 545)) | (1L << (SNAPSHOT - 545)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 545)) | (1L << (STANDBY - 545)) | (1L << (START_DATE - 545)) | (1L << (STATIC - 545)) | (1L << (STATS_STREAM - 545)) | (1L << (STATUS - 545)) | (1L << (STATUSONLY - 545)) | (1L << (STDEV - 545)) | (1L << (STDEVP - 545)) | (1L << (STOPLIST - 545)) | (1L << (STRING_AGG - 545)) | (1L << (STUFF - 545)) | (1L << (SUBJECT - 545)) | (1L << (SUBSCRIPTION - 545)) | (1L << (SUM - 545)) | (1L << (SUSPEND - 545)) | (1L << (SYMMETRIC - 545)) | (1L << (SYNCHRONOUS_COMMIT - 545)) | (1L << (SYNONYM - 545)) | (1L << (SYSTEM - 545)) | (1L << (TAKE - 545)) | (1L << (TARGET_RECOVERY_TIME - 545)) | (1L << (TB - 545)) | (1L << (TEXTIMAGE_ON - 545)) | (1L << (THROW - 545)) | (1L << (TIES - 545)) | (1L << (TIME - 545)) | (1L << (TIMEOUT - 545)) | (1L << (TIMER - 545)) | (1L << (TINYINT - 545)) | (1L << (TORN_PAGE_DETECTION - 545)) | (1L << (TRANSFORM_NOISE_WORDS - 545)) | (1L << (TRIPLE_DES - 545)) | (1L << (TRIPLE_DES_3KEY - 545)) | (1L << (TRUSTWORTHY - 545)) | (1L << (TRY - 545)) | (1L << (TSQL - 545)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 545)) | (1L << (TYPE - 545)) | (1L << (TYPE_WARNING - 545)) | (1L << (UNBOUNDED - 545)) | (1L << (UNCOMMITTED - 545)) | (1L << (UNKNOWN - 545)) | (1L << (UNLIMITED - 545)) | (1L << (UOW - 545)) | (1L << (USING - 545)) | (1L << (VALID_XML - 545)) | (1L << (VALIDATION - 545)) | (1L << (VALUE - 545)) | (1L << (VAR - 545)) | (1L << (VARBINARY_KEYWORD - 545)) | (1L << (VARP - 545)) | (1L << (VIEW_METADATA - 545)) | (1L << (VIEWS - 545)) | (1L << (WAIT - 545)) | (1L << (WELL_FORMED_XML - 545)) | (1L << (WITHOUT_ARRAY_WRAPPER - 545)) | (1L << (WORK - 545)) | (1L << (WORKLOAD - 545)) | (1L << (XML - 545)) | (1L << (XMLDATA - 545)))) != 0) || ((((_la - 609)) & ~0x3f) == 0 && ((1L << (_la - 609)) & ((1L << (XMLNAMESPACES - 609)) | (1L << (XMLSCHEMA - 609)) | (1L << (XSINIL - 609)) | (1L << (ZONE - 609)) | (1L << (ABSENT - 609)) | (1L << (AES - 609)) | (1L << (ALLOW_CONNECTIONS - 609)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 609)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 609)) | (1L << (ANONYMOUS - 609)) | (1L << (APPEND - 609)) | (1L << (APPLICATION - 609)) | (1L << (ASYMMETRIC - 609)) | (1L << (ASYNCHRONOUS_COMMIT - 609)) | (1L << (AUTHENTICATION - 609)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 609)) | (1L << (AUTOMATIC - 609)) | (1L << (AVAILABILITY_MODE - 609)) | (1L << (BEFORE - 609)) | (1L << (BLOCK - 609)) | (1L << (BLOCKSIZE - 609)) | (1L << (BLOCKING_HIERARCHY - 609)) | (1L << (BUFFER - 609)) | (1L << (BUFFERCOUNT - 609)) | (1L << (CACHE - 609)) | (1L << (CALLED - 609)) | (1L << (CERTIFICATE - 609)) | (1L << (CHANGETABLE - 609)) | (1L << (CHANGES - 609)) | (1L << (CHECK_POLICY - 609)) | (1L << (CHECK_EXPIRATION - 609)) | (1L << (CLASSIFIER_FUNCTION - 609)) | (1L << (CLUSTER - 609)) | (1L << (COMPRESSION - 609)) | (1L << (CONFIGURATION - 609)) | (1L << (CONTAINMENT - 609)) | (1L << (CONTEXT - 609)) | (1L << (CONTINUE_AFTER_ERROR - 609)) | (1L << (CONTRACT - 609)) | (1L << (CONTRACT_NAME - 609)) | (1L << (CONVERSATION - 609)) | (1L << (COPY_ONLY - 609)) | (1L << (CYCLE - 609)) | (1L << (DATA_COMPRESSION - 609)) | (1L << (DATA_SOURCE - 609)) | (1L << (DATABASE_MIRRORING - 609)) | (1L << (DEFAULT_DATABASE - 609)) | (1L << (DEFAULT_SCHEMA - 609)) | (1L << (DIAGNOSTICS - 609)) | (1L << (DIFFERENTIAL - 609)) | (1L << (DTC_SUPPORT - 609)) | (1L << (ENABLED - 609)) | (1L << (ENDPOINT - 609)) | (1L << (ERROR - 609)) | (1L << (EVENT - 609)) | (1L << (EVENTDATA - 609)) | (1L << (EVENT_RETENTION_MODE - 609)) | (1L << (EXECUTABLE_FILE - 609)) | (1L << (EXPIREDATE - 609)) | (1L << (EXTENSION - 609)) | (1L << (EXTERNAL_ACCESS - 609)) | (1L << (FAILOVER - 609)) | (1L << (FAILURECONDITIONLEVEL - 609)))) != 0) || ((((_la - 673)) & ~0x3f) == 0 && ((1L << (_la - 673)) & ((1L << (FAN_IN - 673)) | (1L << (FILE_SNAPSHOT - 673)) | (1L << (FORCESEEK - 673)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 673)) | (1L << (GET - 673)) | (1L << (GOVERNOR - 673)) | (1L << (HASHED - 673)) | (1L << (HEALTHCHECKTIMEOUT - 673)) | (1L << (IIF - 673)) | (1L << (IO - 673)) | (1L << (INCLUDE - 673)) | (1L << (INCREMENT - 673)) | (1L << (INFINITE - 673)) | (1L << (INIT - 673)) | (1L << (INSTEAD - 673)) | (1L << (ISNULL - 673)) | (1L << (KERBEROS - 673)) | (1L << (KEY_PATH - 673)) | (1L << (KEY_STORE_PROVIDER_NAME - 673)) | (1L << (LANGUAGE - 673)) | (1L << (LIBRARY - 673)) | (1L << (LIFETIME - 673)) | (1L << (LINUX - 673)) | (1L << (LISTENER_IP - 673)) | (1L << (LISTENER_PORT - 673)) | (1L << (LOCAL_SERVICE_NAME - 673)) | (1L << (LOG - 673)) | (1L << (MATCHED - 673)) | (1L << (MASTER - 673)) | (1L << (MAX_MEMORY - 673)) | (1L << (MAXTRANSFER - 673)) | (1L << (MAXVALUE - 673)) | (1L << (MAX_DISPATCH_LATENCY - 673)) | (1L << (MAX_EVENT_SIZE - 673)) | (1L << (MAX_SIZE - 673)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 673)) | (1L << (MEDIADESCRIPTION - 673)) | (1L << (MEDIANAME - 673)) | (1L << (MEMBER - 673)) | (1L << (MEMORY_PARTITION_MODE - 673)) | (1L << (MESSAGE_FORWARDING - 673)) | (1L << (MESSAGE_FORWARD_SIZE - 673)) | (1L << (MINVALUE - 673)) | (1L << (MIRROR - 673)) | (1L << (MUST_CHANGE - 673)) | (1L << (NOFORMAT - 673)) | (1L << (NOINIT - 673)) | (1L << (NONE - 673)) | (1L << (NOREWIND - 673)) | (1L << (NOSKIP - 673)) | (1L << (NOUNLOAD - 673)) | (1L << (NO_CHECKSUM - 673)) | (1L << (NO_COMPRESSION - 673)) | (1L << (NO_EVENT_LOSS - 673)) | (1L << (NOTIFICATION - 673)) | (1L << (NTLM - 673)) | (1L << (OLD_PASSWORD - 673)) | (1L << (ON_FAILURE - 673)) | (1L << (PAGE - 673)) | (1L << (PARAM_NODE - 673)) | (1L << (PARTIAL - 673)) | (1L << (PASSWORD - 673)) | (1L << (PERMISSION_SET - 673)) | (1L << (PER_CPU - 673)))) != 0) || ((((_la - 737)) & ~0x3f) == 0 && ((1L << (_la - 737)) & ((1L << (PER_DB - 737)) | (1L << (PER_NODE - 737)) | (1L << (PERSISTED - 737)) | (1L << (PLATFORM - 737)) | (1L << (POLICY - 737)) | (1L << (PREDICATE - 737)) | (1L << (PROCESS - 737)) | (1L << (PROFILE - 737)) | (1L << (PYTHON - 737)) | (1L << (R - 737)) | (1L << (READ_WRITE_FILEGROUPS - 737)) | (1L << (REGENERATE - 737)) | (1L << (RELATED_CONVERSATION - 737)) | (1L << (RELATED_CONVERSATION_GROUP - 737)) | (1L << (REQUIRED - 737)) | (1L << (RESET - 737)) | (1L << (RESTART - 737)) | (1L << (RESUME - 737)) | (1L << (RETAINDAYS - 737)) | (1L << (RETURNS - 737)) | (1L << (REWIND - 737)) | (1L << (ROLE - 737)) | (1L << (RSA_512 - 737)) | (1L << (RSA_1024 - 737)) | (1L << (RSA_2048 - 737)) | (1L << (RSA_3072 - 737)) | (1L << (RSA_4096 - 737)) | (1L << (SAFETY - 737)) | (1L << (SAFE - 737)) | (1L << (SCHEDULER - 737)) | (1L << (SCHEME - 737)) | (1L << (SERVER - 737)) | (1L << (SERVICE - 737)) | (1L << (SERVICE_BROKER - 737)) | (1L << (SERVICE_NAME - 737)) | (1L << (SESSION - 737)) | (1L << (SID - 737)) | (1L << (SKIP_KEYWORD - 737)) | (1L << (SOFTNUMA - 737)) | (1L << (SOURCE - 737)) | (1L << (SPECIFICATION - 737)) | (1L << (SPLIT - 737)) | (1L << (SQLDUMPERFLAGS - 737)) | (1L << (SQLDUMPERPATH - 737)) | (1L << (SQLDUMPERTIMEOUT - 737)) | (1L << (STATE - 737)) | (1L << (STATS - 737)) | (1L << (START - 737)) | (1L << (STARTED - 737)) | (1L << (STARTUP_STATE - 737)) | (1L << (STOP - 737)) | (1L << (STOPPED - 737)) | (1L << (STOP_ON_ERROR - 737)) | (1L << (SUPPORTED - 737)) | (1L << (TAPE - 737)) | (1L << (TARGET - 737)) | (1L << (TCP - 737)) | (1L << (TRACK_CAUSALITY - 737)) | (1L << (TRANSFER - 737)) | (1L << (UNCHECKED - 737)) | (1L << (UNLOCK - 737)) | (1L << (UNSAFE - 737)) | (1L << (URL - 737)))) != 0) || ((((_la - 801)) & ~0x3f) == 0 && ((1L << (_la - 801)) & ((1L << (USED - 801)) | (1L << (VERBOSELOGGING - 801)) | (1L << (VISIBILITY - 801)) | (1L << (WINDOWS - 801)) | (1L << (WITHOUT - 801)) | (1L << (WITNESS - 801)) | (1L << (VARCHAR - 801)) | (1L << (NVARCHAR - 801)) | (1L << (DOUBLE_QUOTE_ID - 801)) | (1L << (SQUARE_BRACKET_ID - 801)) | (1L << (LOCAL_ID - 801)) | (1L << (DECIMAL - 801)) | (1L << (ID - 801)) | (1L << (STRING - 801)) | (1L << (BINARY - 801)) | (1L << (FLOAT - 801)) | (1L << (REAL - 801)) | (1L << (DOT - 801)) | (1L << (DOLLAR - 801)) | (1L << (LR_BRACKET - 801)) | (1L << (PLUS - 801)) | (1L << (MINUS - 801)) | (1L << (BIT_NOT - 801)))) != 0)) {
					{
					setState(10088);
					expression_list();
					}
				}

				setState(10091);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new BUILT_IN_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(10093);
				build_in_functions();
				}
				break;
			case 6:
				_localctx = new FREE_TEXTContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(10094);
				freetext_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Freetext_functionContext extends ParserRuleContext {
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode CONTAINSTABLE() { return getToken(TSqlParser.CONTAINSTABLE, 0); }
		public TerminalNode FREETEXTTABLE() { return getToken(TSqlParser.FREETEXTTABLE, 0); }
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public TerminalNode STAR() { return getToken(TSqlParser.STAR, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSqlParser.LANGUAGE, 0); }
		public TerminalNode SEMANTICSIMILARITYTABLE() { return getToken(TSqlParser.SEMANTICSIMILARITYTABLE, 0); }
		public TerminalNode SEMANTICKEYPHRASETABLE() { return getToken(TSqlParser.SEMANTICKEYPHRASETABLE, 0); }
		public TerminalNode SEMANTICSIMILARITYDETAILSTABLE() { return getToken(TSqlParser.SEMANTICSIMILARITYDETAILSTABLE, 0); }
		public Freetext_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freetext_function; }
	}

	public final Freetext_functionContext freetext_function() throws RecognitionException {
		Freetext_functionContext _localctx = new Freetext_functionContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_freetext_function);
		int _la;
		try {
			setState(10165);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTAINSTABLE:
			case FREETEXTTABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10097);
				_la = _input.LA(1);
				if ( !(_la==CONTAINSTABLE || _la==FREETEXTTABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10098);
				match(LR_BRACKET);
				setState(10099);
				table_name();
				setState(10100);
				match(COMMA);
				setState(10114);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(10101);
					full_column_name();
					}
					break;
				case LR_BRACKET:
					{
					setState(10102);
					match(LR_BRACKET);
					setState(10103);
					full_column_name();
					setState(10108);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10104);
						match(COMMA);
						setState(10105);
						full_column_name();
						}
						}
						setState(10110);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10111);
					match(RR_BRACKET);
					}
					break;
				case STAR:
					{
					setState(10113);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10116);
				match(COMMA);
				setState(10117);
				expression(0);
				setState(10121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1441,_ctx) ) {
				case 1:
					{
					setState(10118);
					match(COMMA);
					setState(10119);
					match(LANGUAGE);
					setState(10120);
					expression(0);
					}
					break;
				}
				setState(10125);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10123);
					match(COMMA);
					setState(10124);
					expression(0);
					}
				}

				setState(10127);
				match(RR_BRACKET);
				}
				break;
			case SEMANTICKEYPHRASETABLE:
			case SEMANTICSIMILARITYTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10129);
				_la = _input.LA(1);
				if ( !(_la==SEMANTICKEYPHRASETABLE || _la==SEMANTICSIMILARITYTABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10130);
				match(LR_BRACKET);
				setState(10131);
				table_name();
				setState(10132);
				match(COMMA);
				setState(10146);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(10133);
					full_column_name();
					}
					break;
				case LR_BRACKET:
					{
					setState(10134);
					match(LR_BRACKET);
					setState(10135);
					full_column_name();
					setState(10140);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10136);
						match(COMMA);
						setState(10137);
						full_column_name();
						}
						}
						setState(10142);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10143);
					match(RR_BRACKET);
					}
					break;
				case STAR:
					{
					setState(10145);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10148);
				match(COMMA);
				setState(10149);
				expression(0);
				setState(10150);
				match(RR_BRACKET);
				}
				break;
			case SEMANTICSIMILARITYDETAILSTABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10152);
				match(SEMANTICSIMILARITYDETAILSTABLE);
				setState(10153);
				match(LR_BRACKET);
				setState(10154);
				table_name();
				setState(10155);
				match(COMMA);
				setState(10156);
				full_column_name();
				setState(10157);
				match(COMMA);
				setState(10158);
				expression(0);
				setState(10159);
				match(COMMA);
				setState(10160);
				full_column_name();
				setState(10161);
				match(COMMA);
				setState(10162);
				expression(0);
				setState(10163);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Freetext_predicateContext extends ParserRuleContext {
		public TerminalNode CONTAINS() { return getToken(TSqlParser.CONTAINS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public TerminalNode STAR() { return getToken(TSqlParser.STAR, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode FREETEXT() { return getToken(TSqlParser.FREETEXT, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(TSqlParser.LANGUAGE, 0); }
		public Freetext_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_freetext_predicate; }
	}

	public final Freetext_predicateContext freetext_predicate() throws RecognitionException {
		Freetext_predicateContext _localctx = new Freetext_predicateContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_freetext_predicate);
		int _la;
		try {
			setState(10223);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONTAINS:
				enterOuterAlt(_localctx, 1);
				{
				setState(10167);
				match(CONTAINS);
				setState(10168);
				match(LR_BRACKET);
				setState(10189);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1447,_ctx) ) {
				case 1:
					{
					setState(10169);
					full_column_name();
					}
					break;
				case 2:
					{
					setState(10170);
					match(LR_BRACKET);
					setState(10171);
					full_column_name();
					setState(10176);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10172);
						match(COMMA);
						setState(10173);
						full_column_name();
						}
						}
						setState(10178);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10179);
					match(RR_BRACKET);
					}
					break;
				case 3:
					{
					setState(10181);
					match(STAR);
					}
					break;
				case 4:
					{
					setState(10182);
					match(PROPERTY);
					setState(10183);
					match(LR_BRACKET);
					setState(10184);
					full_column_name();
					setState(10185);
					match(COMMA);
					setState(10186);
					expression(0);
					setState(10187);
					match(RR_BRACKET);
					}
					break;
				}
				setState(10191);
				match(COMMA);
				setState(10192);
				expression(0);
				setState(10193);
				match(RR_BRACKET);
				}
				break;
			case FREETEXT:
				enterOuterAlt(_localctx, 2);
				{
				setState(10195);
				match(FREETEXT);
				setState(10196);
				match(LR_BRACKET);
				setState(10197);
				table_name();
				setState(10198);
				match(COMMA);
				setState(10212);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOT:
					{
					setState(10199);
					full_column_name();
					}
					break;
				case LR_BRACKET:
					{
					setState(10200);
					match(LR_BRACKET);
					setState(10201);
					full_column_name();
					setState(10206);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10202);
						match(COMMA);
						setState(10203);
						full_column_name();
						}
						}
						setState(10208);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10209);
					match(RR_BRACKET);
					}
					break;
				case STAR:
					{
					setState(10211);
					match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10214);
				match(COMMA);
				setState(10215);
				expression(0);
				setState(10219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10216);
					match(COMMA);
					setState(10217);
					match(LANGUAGE);
					setState(10218);
					expression(0);
					}
				}

				setState(10221);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Build_in_functionsContext extends ParserRuleContext {
		public Build_in_functionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_build_in_functions; }
	 
		public Build_in_functionsContext() { }
		public void copyFrom(Build_in_functionsContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class CURRENT_USERContext extends Build_in_functionsContext {
		public TerminalNode CURRENT_USER() { return getToken(TSqlParser.CURRENT_USER, 0); }
		public CURRENT_USERContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class DATEADDContext extends Build_in_functionsContext {
		public Token datepart;
		public ExpressionContext number;
		public ExpressionContext date;
		public TerminalNode DATEADD() { return getToken(TSqlParser.DATEADD, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEADDContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class CHECKSUMContext extends Build_in_functionsContext {
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(TSqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public CHECKSUMContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class CURRENT_TIMESTAMPContext extends Build_in_functionsContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(TSqlParser.CURRENT_TIMESTAMP, 0); }
		public CURRENT_TIMESTAMPContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class BINARY_CHECKSUMContext extends Build_in_functionsContext {
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(TSqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public BINARY_CHECKSUMContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class SYSTEM_USERContext extends Build_in_functionsContext {
		public TerminalNode SYSTEM_USER() { return getToken(TSqlParser.SYSTEM_USER, 0); }
		public SYSTEM_USERContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class NULLIFContext extends Build_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public TerminalNode NULLIF() { return getToken(TSqlParser.NULLIF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public NULLIFContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class SESSION_USERContext extends Build_in_functionsContext {
		public TerminalNode SESSION_USER() { return getToken(TSqlParser.SESSION_USER, 0); }
		public SESSION_USERContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class CONVERTContext extends Build_in_functionsContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public TerminalNode CONVERT() { return getToken(TSqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public CONVERTContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class XML_DATA_TYPE_FUNCContext extends Build_in_functionsContext {
		public Xml_data_type_methodsContext xml_data_type_methods() {
			return getRuleContext(Xml_data_type_methodsContext.class,0);
		}
		public XML_DATA_TYPE_FUNCContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class COALESCEContext extends Build_in_functionsContext {
		public TerminalNode COALESCE() { return getToken(TSqlParser.COALESCE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public COALESCEContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class CASTContext extends Build_in_functionsContext {
		public TerminalNode CAST() { return getToken(TSqlParser.CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public CASTContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class MIN_ACTIVE_ROWVERSIONContext extends Build_in_functionsContext {
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public MIN_ACTIVE_ROWVERSIONContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class IIFContext extends Build_in_functionsContext {
		public Search_conditionContext cond;
		public ExpressionContext left;
		public ExpressionContext right;
		public TerminalNode IIF() { return getToken(TSqlParser.IIF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public IIFContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class DATEPARTContext extends Build_in_functionsContext {
		public Token datepart;
		public ExpressionContext date;
		public TerminalNode DATEPART() { return getToken(TSqlParser.DATEPART, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATEPARTContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class USERContext extends Build_in_functionsContext {
		public TerminalNode USER() { return getToken(TSqlParser.USER, 0); }
		public USERContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class STUFFContext extends Build_in_functionsContext {
		public ExpressionContext str;
		public Token from;
		public Token to;
		public ExpressionContext str_with;
		public TerminalNode STUFF() { return getToken(TSqlParser.STUFF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public STUFFContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class IDENTITYContext extends Build_in_functionsContext {
		public Token seed;
		public Token increment;
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public IDENTITYContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class DATENAMEContext extends Build_in_functionsContext {
		public Token datepart;
		public ExpressionContext date;
		public TerminalNode DATENAME() { return getToken(TSqlParser.DATENAME, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DATENAMEContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class GETUTCDATEContext extends Build_in_functionsContext {
		public TerminalNode GETUTCDATE() { return getToken(TSqlParser.GETUTCDATE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public GETUTCDATEContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class TRY_CASTContext extends Build_in_functionsContext {
		public TerminalNode TRY_CAST() { return getToken(TSqlParser.TRY_CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TRY_CASTContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class ISNULLContext extends Build_in_functionsContext {
		public ExpressionContext left;
		public ExpressionContext right;
		public TerminalNode ISNULL() { return getToken(TSqlParser.ISNULL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public ISNULLContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class DATEDIFFContext extends Build_in_functionsContext {
		public Token datepart;
		public ExpressionContext date_first;
		public ExpressionContext date_second;
		public TerminalNode DATEDIFF() { return getToken(TSqlParser.DATEDIFF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DATEDIFFContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class GETDATEContext extends Build_in_functionsContext {
		public TerminalNode GETDATE() { return getToken(TSqlParser.GETDATE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public GETDATEContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}
	public static class STRINGAGGContext extends Build_in_functionsContext {
		public ExpressionContext expr;
		public ExpressionContext separator;
		public TerminalNode STRING_AGG() { return getToken(TSqlParser.STRING_AGG, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITHIN() { return getToken(TSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public STRINGAGGContext(Build_in_functionsContext ctx) { copyFrom(ctx); }
	}

	public final Build_in_functionsContext build_in_functions() throws RecognitionException {
		Build_in_functionsContext _localctx = new Build_in_functionsContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_build_in_functions);
		int _la;
		try {
			setState(10371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1456,_ctx) ) {
			case 1:
				_localctx = new BINARY_CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(10225);
				match(BINARY_CHECKSUM);
				setState(10226);
				match(LR_BRACKET);
				setState(10227);
				match(STAR);
				setState(10228);
				match(RR_BRACKET);
				}
				break;
			case 2:
				_localctx = new CASTContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(10229);
				match(CAST);
				setState(10230);
				match(LR_BRACKET);
				setState(10231);
				expression(0);
				setState(10232);
				match(AS);
				setState(10233);
				data_type();
				setState(10234);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new TRY_CASTContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(10236);
				match(TRY_CAST);
				setState(10237);
				match(LR_BRACKET);
				setState(10238);
				expression(0);
				setState(10239);
				match(AS);
				setState(10240);
				data_type();
				setState(10241);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new CONVERTContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(10243);
				match(CONVERT);
				setState(10244);
				match(LR_BRACKET);
				setState(10245);
				((CONVERTContext)_localctx).convert_data_type = data_type();
				setState(10246);
				match(COMMA);
				setState(10247);
				((CONVERTContext)_localctx).convert_expression = expression(0);
				setState(10250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10248);
					match(COMMA);
					setState(10249);
					((CONVERTContext)_localctx).style = expression(0);
					}
				}

				setState(10252);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new CHECKSUMContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(10254);
				match(CHECKSUM);
				setState(10255);
				match(LR_BRACKET);
				setState(10256);
				match(STAR);
				setState(10257);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new COALESCEContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(10258);
				match(COALESCE);
				setState(10259);
				match(LR_BRACKET);
				setState(10260);
				expression_list();
				setState(10261);
				match(RR_BRACKET);
				}
				break;
			case 7:
				_localctx = new CURRENT_TIMESTAMPContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(10263);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 8:
				_localctx = new CURRENT_USERContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(10264);
				match(CURRENT_USER);
				}
				break;
			case 9:
				_localctx = new DATEADDContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(10265);
				match(DATEADD);
				setState(10266);
				match(LR_BRACKET);
				setState(10267);
				((DATEADDContext)_localctx).datepart = match(ID);
				setState(10268);
				match(COMMA);
				setState(10269);
				((DATEADDContext)_localctx).number = expression(0);
				setState(10270);
				match(COMMA);
				setState(10271);
				((DATEADDContext)_localctx).date = expression(0);
				setState(10272);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new DATEDIFFContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(10274);
				match(DATEDIFF);
				setState(10275);
				match(LR_BRACKET);
				setState(10276);
				((DATEDIFFContext)_localctx).datepart = match(ID);
				setState(10277);
				match(COMMA);
				setState(10278);
				((DATEDIFFContext)_localctx).date_first = expression(0);
				setState(10279);
				match(COMMA);
				setState(10280);
				((DATEDIFFContext)_localctx).date_second = expression(0);
				setState(10281);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new DATENAMEContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(10283);
				match(DATENAME);
				setState(10284);
				match(LR_BRACKET);
				setState(10285);
				((DATENAMEContext)_localctx).datepart = match(ID);
				setState(10286);
				match(COMMA);
				setState(10287);
				((DATENAMEContext)_localctx).date = expression(0);
				setState(10288);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new DATEPARTContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(10290);
				match(DATEPART);
				setState(10291);
				match(LR_BRACKET);
				setState(10292);
				((DATEPARTContext)_localctx).datepart = match(ID);
				setState(10293);
				match(COMMA);
				setState(10294);
				((DATEPARTContext)_localctx).date = expression(0);
				setState(10295);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new GETDATEContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(10297);
				match(GETDATE);
				setState(10298);
				match(LR_BRACKET);
				setState(10299);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new GETUTCDATEContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(10300);
				match(GETUTCDATE);
				setState(10301);
				match(LR_BRACKET);
				setState(10302);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new IDENTITYContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(10303);
				match(IDENTITY);
				setState(10304);
				match(LR_BRACKET);
				setState(10305);
				data_type();
				setState(10308);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1453,_ctx) ) {
				case 1:
					{
					setState(10306);
					match(COMMA);
					setState(10307);
					((IDENTITYContext)_localctx).seed = match(DECIMAL);
					}
					break;
				}
				setState(10312);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10310);
					match(COMMA);
					setState(10311);
					((IDENTITYContext)_localctx).increment = match(DECIMAL);
					}
				}

				setState(10314);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new MIN_ACTIVE_ROWVERSIONContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(10316);
				match(MIN_ACTIVE_ROWVERSION);
				setState(10317);
				match(LR_BRACKET);
				setState(10318);
				match(RR_BRACKET);
				}
				break;
			case 17:
				_localctx = new NULLIFContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(10319);
				match(NULLIF);
				setState(10320);
				match(LR_BRACKET);
				setState(10321);
				((NULLIFContext)_localctx).left = expression(0);
				setState(10322);
				match(COMMA);
				setState(10323);
				((NULLIFContext)_localctx).right = expression(0);
				setState(10324);
				match(RR_BRACKET);
				}
				break;
			case 18:
				_localctx = new STUFFContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(10326);
				match(STUFF);
				setState(10327);
				match(LR_BRACKET);
				setState(10328);
				((STUFFContext)_localctx).str = expression(0);
				setState(10329);
				match(COMMA);
				setState(10330);
				((STUFFContext)_localctx).from = match(DECIMAL);
				setState(10331);
				match(COMMA);
				setState(10332);
				((STUFFContext)_localctx).to = match(DECIMAL);
				setState(10333);
				match(COMMA);
				setState(10334);
				((STUFFContext)_localctx).str_with = expression(0);
				setState(10335);
				match(RR_BRACKET);
				}
				break;
			case 19:
				_localctx = new SESSION_USERContext(_localctx);
				enterOuterAlt(_localctx, 19);
				{
				setState(10337);
				match(SESSION_USER);
				}
				break;
			case 20:
				_localctx = new SYSTEM_USERContext(_localctx);
				enterOuterAlt(_localctx, 20);
				{
				setState(10338);
				match(SYSTEM_USER);
				}
				break;
			case 21:
				_localctx = new USERContext(_localctx);
				enterOuterAlt(_localctx, 21);
				{
				setState(10339);
				match(USER);
				}
				break;
			case 22:
				_localctx = new ISNULLContext(_localctx);
				enterOuterAlt(_localctx, 22);
				{
				setState(10340);
				match(ISNULL);
				setState(10341);
				match(LR_BRACKET);
				setState(10342);
				((ISNULLContext)_localctx).left = expression(0);
				setState(10343);
				match(COMMA);
				setState(10344);
				((ISNULLContext)_localctx).right = expression(0);
				setState(10345);
				match(RR_BRACKET);
				}
				break;
			case 23:
				_localctx = new XML_DATA_TYPE_FUNCContext(_localctx);
				enterOuterAlt(_localctx, 23);
				{
				setState(10347);
				xml_data_type_methods();
				}
				break;
			case 24:
				_localctx = new IIFContext(_localctx);
				enterOuterAlt(_localctx, 24);
				{
				setState(10348);
				match(IIF);
				setState(10349);
				match(LR_BRACKET);
				setState(10350);
				((IIFContext)_localctx).cond = search_condition();
				setState(10351);
				match(COMMA);
				setState(10352);
				((IIFContext)_localctx).left = expression(0);
				setState(10353);
				match(COMMA);
				setState(10354);
				((IIFContext)_localctx).right = expression(0);
				setState(10355);
				match(RR_BRACKET);
				}
				break;
			case 25:
				_localctx = new STRINGAGGContext(_localctx);
				enterOuterAlt(_localctx, 25);
				{
				setState(10357);
				match(STRING_AGG);
				setState(10358);
				match(LR_BRACKET);
				setState(10359);
				((STRINGAGGContext)_localctx).expr = expression(0);
				setState(10360);
				match(COMMA);
				setState(10361);
				((STRINGAGGContext)_localctx).separator = expression(0);
				setState(10362);
				match(RR_BRACKET);
				setState(10369);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1455,_ctx) ) {
				case 1:
					{
					setState(10363);
					match(WITHIN);
					setState(10364);
					match(GROUP);
					setState(10365);
					match(LR_BRACKET);
					setState(10366);
					order_by_clause();
					setState(10367);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_data_type_methodsContext extends ParserRuleContext {
		public Value_methodContext value_method() {
			return getRuleContext(Value_methodContext.class,0);
		}
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Exist_methodContext exist_method() {
			return getRuleContext(Exist_methodContext.class,0);
		}
		public Modify_methodContext modify_method() {
			return getRuleContext(Modify_methodContext.class,0);
		}
		public Xml_data_type_methodsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_data_type_methods; }
	}

	public final Xml_data_type_methodsContext xml_data_type_methods() throws RecognitionException {
		Xml_data_type_methodsContext _localctx = new Xml_data_type_methodsContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_xml_data_type_methods);
		try {
			setState(10377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1457,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10373);
				value_method();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10374);
				query_method();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(10375);
				exist_method();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(10376);
				modify_method();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_methodContext extends ParserRuleContext {
		public Token loc_id;
		public IdContext value_id;
		public Token eventdata;
		public Query_methodContext query;
		public Value_callContext call;
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Value_callContext value_call() {
			return getRuleContext(Value_callContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode EVENTDATA() { return getToken(TSqlParser.EVENTDATA, 0); }
		public Query_methodContext query_method() {
			return getRuleContext(Query_methodContext.class,0);
		}
		public Value_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_method; }
	}

	public final Value_methodContext value_method() throws RecognitionException {
		Value_methodContext _localctx = new Value_methodContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_value_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1458,_ctx) ) {
			case 1:
				{
				setState(10379);
				((Value_methodContext)_localctx).loc_id = match(LOCAL_ID);
				}
				break;
			case 2:
				{
				setState(10380);
				((Value_methodContext)_localctx).value_id = id();
				}
				break;
			case 3:
				{
				setState(10381);
				((Value_methodContext)_localctx).eventdata = match(EVENTDATA);
				}
				break;
			case 4:
				{
				setState(10382);
				((Value_methodContext)_localctx).query = query_method();
				}
				break;
			case 5:
				{
				setState(10383);
				match(LR_BRACKET);
				setState(10384);
				subquery();
				setState(10385);
				match(RR_BRACKET);
				}
				break;
			}
			setState(10389);
			match(DOT);
			setState(10390);
			((Value_methodContext)_localctx).call = value_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_callContext extends ParserRuleContext {
		public Token xquery;
		public Token sqltype;
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public Value_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_call; }
	}

	public final Value_callContext value_call() throws RecognitionException {
		Value_callContext _localctx = new Value_callContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_value_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10392);
			match(VALUE);
			setState(10393);
			match(LR_BRACKET);
			setState(10394);
			((Value_callContext)_localctx).xquery = match(STRING);
			setState(10395);
			match(COMMA);
			setState(10396);
			((Value_callContext)_localctx).sqltype = match(STRING);
			setState(10397);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_methodContext extends ParserRuleContext {
		public Token loc_id;
		public IdContext value_id;
		public Full_table_nameContext table;
		public Query_callContext call;
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Query_callContext query_call() {
			return getRuleContext(Query_callContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public Query_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_method; }
	}

	public final Query_methodContext query_method() throws RecognitionException {
		Query_methodContext _localctx = new Query_methodContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_query_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1459,_ctx) ) {
			case 1:
				{
				setState(10399);
				((Query_methodContext)_localctx).loc_id = match(LOCAL_ID);
				}
				break;
			case 2:
				{
				setState(10400);
				((Query_methodContext)_localctx).value_id = id();
				}
				break;
			case 3:
				{
				setState(10401);
				((Query_methodContext)_localctx).table = full_table_name();
				}
				break;
			case 4:
				{
				setState(10402);
				match(LR_BRACKET);
				setState(10403);
				subquery();
				setState(10404);
				match(RR_BRACKET);
				}
				break;
			}
			setState(10408);
			match(DOT);
			setState(10409);
			((Query_methodContext)_localctx).call = query_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_callContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode QUERY() { return getToken(TSqlParser.QUERY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Query_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_call; }
	}

	public final Query_callContext query_call() throws RecognitionException {
		Query_callContext _localctx = new Query_callContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_query_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10411);
			match(QUERY);
			setState(10412);
			match(LR_BRACKET);
			setState(10413);
			((Query_callContext)_localctx).xquery = match(STRING);
			setState(10414);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exist_methodContext extends ParserRuleContext {
		public Token loc_id;
		public IdContext value_id;
		public Exist_callContext call;
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Exist_callContext exist_call() {
			return getRuleContext(Exist_callContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Exist_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_method; }
	}

	public final Exist_methodContext exist_method() throws RecognitionException {
		Exist_methodContext _localctx = new Exist_methodContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_exist_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10422);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(10416);
				((Exist_methodContext)_localctx).loc_id = match(LOCAL_ID);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(10417);
				((Exist_methodContext)_localctx).value_id = id();
				}
				break;
			case LR_BRACKET:
				{
				setState(10418);
				match(LR_BRACKET);
				setState(10419);
				subquery();
				setState(10420);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10424);
			match(DOT);
			setState(10425);
			((Exist_methodContext)_localctx).call = exist_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exist_callContext extends ParserRuleContext {
		public Token xquery;
		public TerminalNode EXIST() { return getToken(TSqlParser.EXIST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Exist_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_call; }
	}

	public final Exist_callContext exist_call() throws RecognitionException {
		Exist_callContext _localctx = new Exist_callContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_exist_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10427);
			match(EXIST);
			setState(10428);
			match(LR_BRACKET);
			setState(10429);
			((Exist_callContext)_localctx).xquery = match(STRING);
			setState(10430);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_methodContext extends ParserRuleContext {
		public Token loc_id;
		public IdContext value_id;
		public Modify_callContext call;
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Modify_callContext modify_call() {
			return getRuleContext(Modify_callContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Modify_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_method; }
	}

	public final Modify_methodContext modify_method() throws RecognitionException {
		Modify_methodContext _localctx = new Modify_methodContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_modify_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10438);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(10432);
				((Modify_methodContext)_localctx).loc_id = match(LOCAL_ID);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(10433);
				((Modify_methodContext)_localctx).value_id = id();
				}
				break;
			case LR_BRACKET:
				{
				setState(10434);
				match(LR_BRACKET);
				setState(10435);
				subquery();
				setState(10436);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10440);
			match(DOT);
			setState(10441);
			((Modify_methodContext)_localctx).call = modify_call();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modify_callContext extends ParserRuleContext {
		public Token xml_dml;
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Modify_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modify_call; }
	}

	public final Modify_callContext modify_call() throws RecognitionException {
		Modify_callContext _localctx = new Modify_callContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_modify_call);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10443);
			match(MODIFY);
			setState(10444);
			match(LR_BRACKET);
			setState(10445);
			((Modify_callContext)_localctx).xml_dml = match(STRING);
			setState(10446);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nodes_methodContext extends ParserRuleContext {
		public Token loc_id;
		public IdContext value_id;
		public Token xquery;
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public TerminalNode NODES() { return getToken(TSqlParser.NODES, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Nodes_methodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodes_method; }
	}

	public final Nodes_methodContext nodes_method() throws RecognitionException {
		Nodes_methodContext _localctx = new Nodes_methodContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_nodes_method);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10454);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				{
				setState(10448);
				((Nodes_methodContext)_localctx).loc_id = match(LOCAL_ID);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(10449);
				((Nodes_methodContext)_localctx).value_id = id();
				}
				break;
			case LR_BRACKET:
				{
				setState(10450);
				match(LR_BRACKET);
				setState(10451);
				subquery();
				setState(10452);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10456);
			match(DOT);
			setState(10457);
			match(NODES);
			setState(10458);
			match(LR_BRACKET);
			setState(10459);
			((Nodes_methodContext)_localctx).xquery = match(STRING);
			setState(10460);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(TSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(TSqlParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10462);
			match(WHEN);
			setState(10463);
			expression(0);
			setState(10464);
			match(THEN);
			setState(10465);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_search_condition_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(TSqlParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(TSqlParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_search_condition_section; }
	}

	public final Switch_search_condition_sectionContext switch_search_condition_section() throws RecognitionException {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_switch_search_condition_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10467);
			match(WHEN);
			setState(10468);
			search_condition();
			setState(10469);
			match(THEN);
			setState(10470);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_column_aliasContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public As_column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_column_alias; }
	}

	public final As_column_aliasContext as_column_alias() throws RecognitionException {
		As_column_aliasContext _localctx = new As_column_aliasContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_as_column_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(10472);
				match(AS);
				}
			}

			setState(10475);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_table_aliasContext extends ParserRuleContext {
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSqlParser.AS, 0); }
		public As_table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_table_alias; }
	}

	public final As_table_aliasContext as_table_alias() throws RecognitionException {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_as_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(10477);
				match(AS);
				}
			}

			setState(10480);
			table_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10482);
			id();
			setState(10484);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1465,_ctx) ) {
			case 1:
				{
				setState(10483);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_table_hintsContext extends ParserRuleContext {
		public Table_hintContext table_hint;
		public List<Table_hintContext> hint = new ArrayList<Table_hintContext>();
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public With_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_table_hints; }
	}

	public final With_table_hintsContext with_table_hints() throws RecognitionException {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10487);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(10486);
				match(WITH);
				}
			}

			setState(10489);
			match(LR_BRACKET);
			setState(10490);
			((With_table_hintsContext)_localctx).table_hint = table_hint();
			((With_table_hintsContext)_localctx).hint.add(((With_table_hintsContext)_localctx).table_hint);
			setState(10497);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==HOLDLOCK || _la==INDEX || _la==NOEXPAND || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (SERIALIZABLE - 537)) | (1L << (SNAPSHOT - 537)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 537)))) != 0) || _la==FORCESEEK || _la==ID || _la==COMMA) {
				{
				{
				setState(10492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10491);
					match(COMMA);
					}
				}

				setState(10494);
				((With_table_hintsContext)_localctx).table_hint = table_hint();
				((With_table_hintsContext)_localctx).hint.add(((With_table_hintsContext)_localctx).table_hint);
				}
				}
				setState(10499);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(10500);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_with_table_hintsContext extends ParserRuleContext {
		public Table_hintContext table_hint;
		public List<Table_hintContext> hint = new ArrayList<Table_hintContext>();
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_with_table_hints; }
	}

	public final Insert_with_table_hintsContext insert_with_table_hints() throws RecognitionException {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_insert_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10502);
			match(WITH);
			setState(10503);
			match(LR_BRACKET);
			setState(10504);
			((Insert_with_table_hintsContext)_localctx).table_hint = table_hint();
			((Insert_with_table_hintsContext)_localctx).hint.add(((Insert_with_table_hintsContext)_localctx).table_hint);
			setState(10511);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==HOLDLOCK || _la==INDEX || _la==NOEXPAND || ((((_la - 537)) & ~0x3f) == 0 && ((1L << (_la - 537)) & ((1L << (SERIALIZABLE - 537)) | (1L << (SNAPSHOT - 537)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 537)))) != 0) || _la==FORCESEEK || _la==ID || _la==COMMA) {
				{
				{
				setState(10506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10505);
					match(COMMA);
					}
				}

				setState(10508);
				((Insert_with_table_hintsContext)_localctx).table_hint = table_hint();
				((Insert_with_table_hintsContext)_localctx).hint.add(((Insert_with_table_hintsContext)_localctx).table_hint);
				}
				}
				setState(10513);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(10514);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_hintContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(TSqlParser.INDEX, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public List<Index_valueContext> index_value() {
			return getRuleContexts(Index_valueContext.class);
		}
		public Index_valueContext index_value(int i) {
			return getRuleContext(Index_valueContext.class,i);
		}
		public TerminalNode FORCESEEK() { return getToken(TSqlParser.FORCESEEK, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode HOLDLOCK() { return getToken(TSqlParser.HOLDLOCK, 0); }
		public List<TerminalNode> ID() { return getTokens(TSqlParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(TSqlParser.ID, i);
		}
		public TerminalNode NOEXPAND() { return getToken(TSqlParser.NOEXPAND, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Table_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_hint; }
	}

	public final Table_hintContext table_hint() throws RecognitionException {
		Table_hintContext _localctx = new Table_hintContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_table_hint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10517);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOEXPAND) {
				{
				setState(10516);
				match(NOEXPAND);
				}
			}

			setState(10568);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1477,_ctx) ) {
			case 1:
				{
				setState(10519);
				match(INDEX);
				setState(10539);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(10520);
					match(LR_BRACKET);
					setState(10521);
					index_value();
					setState(10526);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10522);
						match(COMMA);
						setState(10523);
						index_value();
						}
						}
						setState(10528);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10529);
					match(RR_BRACKET);
					}
					break;
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case DECIMAL:
				case ID:
					{
					setState(10531);
					index_value();
					setState(10536);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1473,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(10532);
							match(COMMA);
							setState(10533);
							index_value();
							}
							} 
						}
						setState(10538);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1473,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(10541);
				match(INDEX);
				setState(10542);
				match(EQUAL);
				setState(10543);
				index_value();
				}
				break;
			case 3:
				{
				setState(10544);
				match(FORCESEEK);
				setState(10559);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(10545);
					match(LR_BRACKET);
					setState(10546);
					index_value();
					setState(10547);
					match(LR_BRACKET);
					setState(10548);
					match(ID);
					setState(10553);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(10549);
						match(COMMA);
						setState(10550);
						match(ID);
						}
						}
						setState(10555);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(10556);
					match(RR_BRACKET);
					setState(10557);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				setState(10561);
				match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				setState(10562);
				match(SNAPSHOT);
				}
				break;
			case 6:
				{
				setState(10563);
				match(SPATIAL_WINDOW_MAX_CELLS);
				setState(10564);
				match(EQUAL);
				setState(10565);
				match(DECIMAL);
				}
				break;
			case 7:
				{
				setState(10566);
				match(HOLDLOCK);
				}
				break;
			case 8:
				{
				setState(10567);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_valueContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_value; }
	}

	public final Index_valueContext index_value() throws RecognitionException {
		Index_valueContext _localctx = new Index_valueContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_index_value);
		try {
			setState(10572);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(10570);
				id();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10571);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_alias_listContext extends ParserRuleContext {
		public Column_aliasContext column_alias;
		public List<Column_aliasContext> alias = new ArrayList<Column_aliasContext>();
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list; }
	}

	public final Column_alias_listContext column_alias_list() throws RecognitionException {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_column_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10574);
			match(LR_BRACKET);
			setState(10575);
			((Column_alias_listContext)_localctx).column_alias = column_alias();
			((Column_alias_listContext)_localctx).alias.add(((Column_alias_listContext)_localctx).column_alias);
			setState(10580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10576);
				match(COMMA);
				setState(10577);
				((Column_alias_listContext)_localctx).column_alias = column_alias();
				((Column_alias_listContext)_localctx).alias.add(((Column_alias_listContext)_localctx).column_alias);
				}
				}
				setState(10582);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(10583);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 932, RULE_column_alias);
		try {
			setState(10587);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(10585);
				id();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(10586);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public Expression_listContext expression_list;
		public List<Expression_listContext> exps = new ArrayList<Expression_listContext>();
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 934, RULE_table_value_constructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10589);
			match(VALUES);
			setState(10590);
			match(LR_BRACKET);
			setState(10591);
			((Table_value_constructorContext)_localctx).expression_list = expression_list();
			((Table_value_constructorContext)_localctx).exps.add(((Table_value_constructorContext)_localctx).expression_list);
			setState(10592);
			match(RR_BRACKET);
			setState(10600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10593);
				match(COMMA);
				setState(10594);
				match(LR_BRACKET);
				setState(10595);
				((Table_value_constructorContext)_localctx).expression_list = expression_list();
				((Table_value_constructorContext)_localctx).exps.add(((Table_value_constructorContext)_localctx).expression_list);
				setState(10596);
				match(RR_BRACKET);
				}
				}
				setState(10602);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public ExpressionContext expression;
		public List<ExpressionContext> exp = new ArrayList<ExpressionContext>();
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 936, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10603);
			((Expression_listContext)_localctx).expression = expression(0);
			((Expression_listContext)_localctx).exp.add(((Expression_listContext)_localctx).expression);
			setState(10608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(10604);
				match(COMMA);
				setState(10605);
				((Expression_listContext)_localctx).expression = expression(0);
				((Expression_listContext)_localctx).exp.add(((Expression_listContext)_localctx).expression);
				}
				}
				setState(10610);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ranking_windowed_functionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode RANK() { return getToken(TSqlParser.RANK, 0); }
		public TerminalNode DENSE_RANK() { return getToken(TSqlParser.DENSE_RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(TSqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTILE() { return getToken(TSqlParser.NTILE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Ranking_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ranking_windowed_function; }
	}

	public final Ranking_windowed_functionContext ranking_windowed_function() throws RecognitionException {
		Ranking_windowed_functionContext _localctx = new Ranking_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_ranking_windowed_function);
		int _la;
		try {
			setState(10621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DENSE_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(10611);
				_la = _input.LA(1);
				if ( !(_la==DENSE_RANK || _la==RANK || _la==ROW_NUMBER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10612);
				match(LR_BRACKET);
				setState(10613);
				match(RR_BRACKET);
				setState(10614);
				over_clause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10615);
				match(NTILE);
				setState(10616);
				match(LR_BRACKET);
				setState(10617);
				expression(0);
				setState(10618);
				match(RR_BRACKET);
				setState(10619);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_windowed_functionContext extends ParserRuleContext {
		public Token agg_func;
		public Token cnt;
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public All_distinct_expressionContext all_distinct_expression() {
			return getRuleContext(All_distinct_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(TSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(TSqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(TSqlParser.SUM, 0); }
		public TerminalNode STDEV() { return getToken(TSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(TSqlParser.STDEVP, 0); }
		public TerminalNode VAR() { return getToken(TSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(TSqlParser.VARP, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(TSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(TSqlParser.COUNT_BIG, 0); }
		public TerminalNode STAR() { return getToken(TSqlParser.STAR, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(TSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode GROUPING() { return getToken(TSqlParser.GROUPING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode GROUPING_ID() { return getToken(TSqlParser.GROUPING_ID, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Aggregate_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_windowed_function; }
	}

	public final Aggregate_windowed_functionContext aggregate_windowed_function() throws RecognitionException {
		Aggregate_windowed_functionContext _localctx = new Aggregate_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_aggregate_windowed_function);
		int _la;
		try {
			setState(10655);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case STDEV:
			case STDEVP:
			case SUM:
			case VAR:
			case VARP:
				enterOuterAlt(_localctx, 1);
				{
				setState(10623);
				((Aggregate_windowed_functionContext)_localctx).agg_func = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==AVG || _la==MAX || _la==MIN || ((((_la - 555)) & ~0x3f) == 0 && ((1L << (_la - 555)) & ((1L << (STDEV - 555)) | (1L << (STDEVP - 555)) | (1L << (SUM - 555)) | (1L << (VAR - 555)) | (1L << (VARP - 555)))) != 0)) ) {
					((Aggregate_windowed_functionContext)_localctx).agg_func = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10624);
				match(LR_BRACKET);
				setState(10625);
				all_distinct_expression();
				setState(10626);
				match(RR_BRACKET);
				setState(10628);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1484,_ctx) ) {
				case 1:
					{
					setState(10627);
					over_clause();
					}
					break;
				}
				}
				break;
			case COUNT:
			case COUNT_BIG:
				enterOuterAlt(_localctx, 2);
				{
				setState(10630);
				((Aggregate_windowed_functionContext)_localctx).cnt = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COUNT || _la==COUNT_BIG) ) {
					((Aggregate_windowed_functionContext)_localctx).cnt = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10631);
				match(LR_BRACKET);
				setState(10634);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(10632);
					match(STAR);
					}
					break;
				case ALL:
				case CASE:
				case COALESCE:
				case CONTAINSTABLE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case DISTINCT:
				case FREETEXTTABLE:
				case IDENTITY:
				case LEFT:
				case NULL:
				case NULLIF:
				case OPENJSON:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SEMANTICKEYPHRASETABLE:
				case SEMANTICSIMILARITYDETAILSTABLE:
				case SEMANTICSIMILARITYTABLE:
				case SESSION_USER:
				case SYSTEM_USER:
				case USER:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case DOT:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(10633);
					all_distinct_expression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10636);
				match(RR_BRACKET);
				setState(10638);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1486,_ctx) ) {
				case 1:
					{
					setState(10637);
					over_clause();
					}
					break;
				}
				}
				break;
			case CHECKSUM_AGG:
				enterOuterAlt(_localctx, 3);
				{
				setState(10640);
				match(CHECKSUM_AGG);
				setState(10641);
				match(LR_BRACKET);
				setState(10642);
				all_distinct_expression();
				setState(10643);
				match(RR_BRACKET);
				}
				break;
			case GROUPING:
				enterOuterAlt(_localctx, 4);
				{
				setState(10645);
				match(GROUPING);
				setState(10646);
				match(LR_BRACKET);
				setState(10647);
				expression(0);
				setState(10648);
				match(RR_BRACKET);
				}
				break;
			case GROUPING_ID:
				enterOuterAlt(_localctx, 5);
				{
				setState(10650);
				match(GROUPING_ID);
				setState(10651);
				match(LR_BRACKET);
				setState(10652);
				expression_list();
				setState(10653);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Analytic_windowed_functionContext extends ParserRuleContext {
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSqlParser.LR_BRACKET, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSqlParser.RR_BRACKET, i);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode FIRST_VALUE() { return getToken(TSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(TSqlParser.LAST_VALUE, 0); }
		public TerminalNode LAG() { return getToken(TSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(TSqlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode OVER() { return getToken(TSqlParser.OVER, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode CUME_DIST() { return getToken(TSqlParser.CUME_DIST, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(TSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public List<TerminalNode> BY() { return getTokens(TSqlParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSqlParser.BY, i);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode WITHIN() { return getToken(TSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode ORDER() { return getToken(TSqlParser.ORDER, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(TSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(TSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode ASC() { return getToken(TSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(TSqlParser.DESC, 0); }
		public Analytic_windowed_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analytic_windowed_function; }
	}

	public final Analytic_windowed_functionContext analytic_windowed_function() throws RecognitionException {
		Analytic_windowed_functionContext _localctx = new Analytic_windowed_functionContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_analytic_windowed_function);
		int _la;
		try {
			setState(10713);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(10657);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10658);
				match(LR_BRACKET);
				setState(10659);
				expression(0);
				setState(10660);
				match(RR_BRACKET);
				setState(10661);
				over_clause();
				}
				break;
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 2);
				{
				setState(10663);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10664);
				match(LR_BRACKET);
				setState(10665);
				expression(0);
				setState(10672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10666);
					match(COMMA);
					setState(10667);
					expression(0);
					setState(10670);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(10668);
						match(COMMA);
						setState(10669);
						expression(0);
						}
					}

					}
				}

				setState(10674);
				match(RR_BRACKET);
				setState(10675);
				over_clause();
				}
				break;
			case CUME_DIST:
			case PERCENT_RANK:
				enterOuterAlt(_localctx, 3);
				{
				setState(10677);
				_la = _input.LA(1);
				if ( !(_la==CUME_DIST || _la==PERCENT_RANK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10678);
				match(LR_BRACKET);
				setState(10679);
				match(RR_BRACKET);
				setState(10680);
				match(OVER);
				setState(10681);
				match(LR_BRACKET);
				setState(10685);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(10682);
					match(PARTITION);
					setState(10683);
					match(BY);
					setState(10684);
					expression_list();
					}
				}

				setState(10687);
				order_by_clause();
				setState(10688);
				match(RR_BRACKET);
				}
				break;
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
				enterOuterAlt(_localctx, 4);
				{
				setState(10690);
				_la = _input.LA(1);
				if ( !(_la==PERCENTILE_CONT || _la==PERCENTILE_DISC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(10691);
				match(LR_BRACKET);
				setState(10692);
				expression(0);
				setState(10693);
				match(RR_BRACKET);
				setState(10694);
				match(WITHIN);
				setState(10695);
				match(GROUP);
				setState(10696);
				match(LR_BRACKET);
				setState(10697);
				match(ORDER);
				setState(10698);
				match(BY);
				setState(10699);
				expression(0);
				setState(10701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(10700);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(10703);
				match(RR_BRACKET);
				setState(10704);
				match(OVER);
				setState(10705);
				match(LR_BRACKET);
				setState(10709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(10706);
					match(PARTITION);
					setState(10707);
					match(BY);
					setState(10708);
					expression_list();
					}
				}

				setState(10711);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_distinct_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(TSqlParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct_expression; }
	}

	public final All_distinct_expressionContext all_distinct_expression() throws RecognitionException {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_all_distinct_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10716);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(10715);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(10718);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(TSqlParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(TSqlParser.BY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return getRuleContext(Row_or_range_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10720);
			match(OVER);
			setState(10721);
			match(LR_BRACKET);
			setState(10725);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(10722);
				match(PARTITION);
				setState(10723);
				match(BY);
				setState(10724);
				expression_list();
				}
			}

			setState(10728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(10727);
				order_by_clause();
				}
			}

			setState(10731);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(10730);
				row_or_range_clause();
				}
			}

			setState(10733);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_range_clauseContext extends ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_range_clause; }
	}

	public final Row_or_range_clauseContext row_or_range_clause() throws RecognitionException {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_row_or_range_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10735);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(10736);
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_extentContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(TSqlParser.BETWEEN, 0); }
		public List<Window_frame_boundContext> window_frame_bound() {
			return getRuleContexts(Window_frame_boundContext.class);
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return getRuleContext(Window_frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(TSqlParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_window_frame_extent);
		try {
			setState(10744);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(10738);
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(10739);
				match(BETWEEN);
				setState(10740);
				window_frame_bound();
				setState(10741);
				match(AND);
				setState(10742);
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_window_frame_bound);
		try {
			setState(10748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1499,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10746);
				window_frame_preceding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10747);
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_precedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(TSqlParser.PRECEDING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode CURRENT() { return getToken(TSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_window_frame_preceding);
		try {
			setState(10756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(10750);
				match(UNBOUNDED);
				setState(10751);
				match(PRECEDING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10752);
				match(DECIMAL);
				setState(10753);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(10754);
				match(CURRENT);
				setState(10755);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_followingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(TSqlParser.FOLLOWING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_window_frame_following);
		try {
			setState(10762);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(10758);
				match(UNBOUNDED);
				setState(10759);
				match(FOLLOWING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(10760);
				match(DECIMAL);
				setState(10761);
				match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_optionContext extends ParserRuleContext {
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public List<Database_filestream_optionContext> database_filestream_option() {
			return getRuleContexts(Database_filestream_optionContext.class);
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return getRuleContext(Database_filestream_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_option; }
	}

	public final Create_database_optionContext create_database_option() throws RecognitionException {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_create_database_option);
		int _la;
		try {
			int _alt;
			setState(10798);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESTREAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(10764);
				match(FILESTREAM);
				{
				setState(10765);
				database_filestream_option();
				setState(10770);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1502,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(10766);
						match(COMMA);
						setState(10767);
						database_filestream_option();
						}
						} 
					}
					setState(10772);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1502,_ctx);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(10773);
				match(DEFAULT_LANGUAGE);
				setState(10774);
				match(EQUAL);
				setState(10777);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(10775);
					id();
					}
					break;
				case STRING:
					{
					setState(10776);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(10779);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(10780);
				match(EQUAL);
				setState(10783);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OPENJSON:
				case PRECISION:
				case ABSOLUTE:
				case AT_KEYWORD:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPLICATION_LOG:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case AUDIT:
				case AUDIT_GUID:
				case AUTO:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AVAILABILITY:
				case AVG:
				case BACKUP_PRIORITY:
				case BEGIN_DIALOG:
				case BIGINT:
				case BINARY_KEYWORD:
				case BINARY_BASE64:
				case BINARY_CHECKSUM:
				case BINDING:
				case BLOB_STORAGE:
				case BROKER:
				case BROKER_INSTANCE:
				case BULK_LOGGED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case TRY_CAST:
				case CATALOG:
				case CATCH:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHECKSUM:
				case CHECKSUM_AGG:
				case CLEANUP:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case CONCAT:
				case CONCAT_NULL_YIELDS_NULL:
				case CONTENT:
				case CONTROL:
				case COOKIE:
				case COUNT:
				case COUNT_BIG:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CUME_DIST:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case DATA:
				case DATE_CORRELATION_OPTIMIZATION:
				case DATEADD:
				case DATEDIFF:
				case DATENAME:
				case DATEPART:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DOUBLE_QUOTE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DELAY:
				case DELAYED_DURABILITY:
				case DELETED:
				case DENSE_RANK:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIALOG:
				case DIRECTORY_NAME:
				case DISABLE:
				case DISABLE_BROKER:
				case DISABLED:
				case DISK_DRIVE:
				case DOCUMENT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE:
				case ENABLE_BROKER:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ERROR_BROKER_CONVERSATIONS:
				case EXCLUSIVE:
				case EXECUTABLE:
				case EXIST:
				case EXPAND:
				case EXPIRY_DATE:
				case EXPLICIT:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILURE:
				case FAILURE_CONDITION_LEVEL:
				case FAST:
				case FAST_FORWARD:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FIRST_VALUE:
				case FOLLOWING:
				case FORCE:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCED:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GETDATE:
				case GETUTCDATE:
				case GLOBAL:
				case GO_BATCH:
				case GO:
				case GROUP_MAX_REQUESTS:
				case GROUPING:
				case GROUPING_ID:
				case HADR:
				case HASH:
				case HEALTH_CHECK_TIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCREMENTAL:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSERTED:
				case INT:
				case IP:
				case ISOLATION:
				case JOB:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KEY_SOURCE:
				case KEYS:
				case KEYSET:
				case LAG:
				case LAST:
				case LAST_VALUE:
				case LEAD:
				case LEVEL:
				case LIST:
				case LISTENER:
				case LISTENER_URL:
				case LOB_COMPACTION:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCK_ESCALATION:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MATERIALIZED:
				case MAX:
				case MAX_CPU_PERCENT:
				case MAX_DOP:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MB:
				case MEDIUM:
				case MEMORY_OPTIMIZED_DATA:
				case MESSAGE:
				case MIN:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MIRROR_ADDRESS:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case NAME:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEXT:
				case NO:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NOCOUNT:
				case NODES:
				case NOEXPAND:
				case NON_TRANSACTED_ACCESS:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOWAIT:
				case NTILE:
				case NUMANODE:
				case NUMBER:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OVERRIDE:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PATH:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POISON_MESSAGE_HANDLING:
				case POOL:
				case PORT:
				case PRECEDING:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY:
				case PRIORITY_LEVEL:
				case PRIVATE:
				case PRIVATE_KEY:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROPERTY:
				case PROVIDER:
				case PROVIDER_KEY_NAME:
				case QUERY:
				case QUEUE:
				case QUEUE_DELAY:
				case QUOTED_IDENTIFIER:
				case RANGE:
				case RANK:
				case RC2:
				case RC4:
				case RC4_128:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY:
				case READ_ONLY_ROUTING_LIST:
				case READ_WRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case RELATIVE:
				case REMOTE:
				case REMOTE_SERVICE_NAME:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case RESERVE_DISK_SPACE:
				case RESOURCE:
				case RESOURCE_MANAGER_LOCATION:
				case RESTRICTED_USER:
				case RETENTION:
				case ROBUST:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROW_NUMBER:
				case ROWGUID:
				case ROWS:
				case SAMPLE:
				case SCHEMABINDING:
				case SCOPED:
				case SCROLL:
				case SCROLL_LOCKS:
				case SEARCH:
				case SECONDARY:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDS:
				case SECRET:
				case SECURITY:
				case SECURITY_LOG:
				case SEEDING_MODE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SESSION_TIMEOUT:
				case SETERROR:
				case SHARE:
				case SHOWPLAN:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SIZE:
				case SMALLINT:
				case SNAPSHOT:
				case SPATIAL_WINDOW_MAX_CELLS:
				case STANDBY:
				case START_DATE:
				case STATIC:
				case STATS_STREAM:
				case STATUS:
				case STATUSONLY:
				case STDEV:
				case STDEVP:
				case STOPLIST:
				case STRING_AGG:
				case STUFF:
				case SUBJECT:
				case SUBSCRIPTION:
				case SUM:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TARGET_RECOVERY_TIME:
				case TB:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TINYINT:
				case TORN_PAGE_DETECTION:
				case TRANSFORM_NOISE_WORDS:
				case TRIPLE_DES:
				case TRIPLE_DES_3KEY:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE:
				case TYPE_WARNING:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNKNOWN:
				case UNLIMITED:
				case UOW:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VAR:
				case VARBINARY_KEYWORD:
				case VARP:
				case VIEW_METADATA:
				case VIEWS:
				case WAIT:
				case WELL_FORMED_XML:
				case WITHOUT_ARRAY_WRAPPER:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XSINIL:
				case ZONE:
				case ABSENT:
				case AES:
				case ALLOW_CONNECTIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ANONYMOUS:
				case APPEND:
				case APPLICATION:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUTHENTICATION:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case BEFORE:
				case BLOCK:
				case BLOCKSIZE:
				case BLOCKING_HIERARCHY:
				case BUFFER:
				case BUFFERCOUNT:
				case CACHE:
				case CALLED:
				case CERTIFICATE:
				case CHANGETABLE:
				case CHANGES:
				case CHECK_POLICY:
				case CHECK_EXPIRATION:
				case CLASSIFIER_FUNCTION:
				case CLUSTER:
				case COMPRESSION:
				case CONFIGURATION:
				case CONTAINMENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT:
				case CONTRACT_NAME:
				case CONVERSATION:
				case COPY_ONLY:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATABASE_MIRRORING:
				case DEFAULT_DATABASE:
				case DEFAULT_SCHEMA:
				case DIAGNOSTICS:
				case DIFFERENTIAL:
				case DTC_SUPPORT:
				case ENABLED:
				case ENDPOINT:
				case ERROR:
				case EVENT:
				case EVENTDATA:
				case EVENT_RETENTION_MODE:
				case EXECUTABLE_FILE:
				case EXPIREDATE:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAILOVER:
				case FAILURECONDITIONLEVEL:
				case FAN_IN:
				case FILE_SNAPSHOT:
				case FORCESEEK:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case GET:
				case GOVERNOR:
				case HASHED:
				case HEALTHCHECKTIMEOUT:
				case IIF:
				case IO:
				case INCLUDE:
				case INCREMENT:
				case INFINITE:
				case INIT:
				case INSTEAD:
				case ISNULL:
				case KERBEROS:
				case KEY_PATH:
				case KEY_STORE_PROVIDER_NAME:
				case LANGUAGE:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LOCAL_SERVICE_NAME:
				case LOG:
				case MATCHED:
				case MASTER:
				case MAX_MEMORY:
				case MAXTRANSFER:
				case MAXVALUE:
				case MAX_DISPATCH_LATENCY:
				case MAX_EVENT_SIZE:
				case MAX_SIZE:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEMBER:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARDING:
				case MESSAGE_FORWARD_SIZE:
				case MINVALUE:
				case MIRROR:
				case MUST_CHANGE:
				case NOFORMAT:
				case NOINIT:
				case NONE:
				case NOREWIND:
				case NOSKIP:
				case NOUNLOAD:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NOTIFICATION:
				case NTLM:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case PAGE:
				case PARAM_NODE:
				case PARTIAL:
				case PASSWORD:
				case PERMISSION_SET:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERSISTED:
				case PLATFORM:
				case POLICY:
				case PREDICATE:
				case PROCESS:
				case PROFILE:
				case PYTHON:
				case R:
				case READ_WRITE_FILEGROUPS:
				case REGENERATE:
				case RELATED_CONVERSATION:
				case RELATED_CONVERSATION_GROUP:
				case REQUIRED:
				case RESET:
				case RESTART:
				case RESUME:
				case RETAINDAYS:
				case RETURNS:
				case REWIND:
				case ROLE:
				case RSA_512:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case SAFETY:
				case SAFE:
				case SCHEDULER:
				case SCHEME:
				case SERVER:
				case SERVICE:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SESSION:
				case SID:
				case SKIP_KEYWORD:
				case SOFTNUMA:
				case SOURCE:
				case SPECIFICATION:
				case SPLIT:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STATE:
				case STATS:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STOP:
				case STOPPED:
				case STOP_ON_ERROR:
				case SUPPORTED:
				case TAPE:
				case TARGET:
				case TCP:
				case TRACK_CAUSALITY:
				case TRANSFER:
				case UNCHECKED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case VERBOSELOGGING:
				case VISIBILITY:
				case WINDOWS:
				case WITHOUT:
				case WITNESS:
				case VARCHAR:
				case NVARCHAR:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(10781);
					id();
					}
					break;
				case STRING:
					{
					setState(10782);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(10785);
				match(NESTED_TRIGGERS);
				setState(10786);
				match(EQUAL);
				setState(10787);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 5);
				{
				setState(10788);
				match(TRANSFORM_NOISE_WORDS);
				setState(10789);
				match(EQUAL);
				setState(10790);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 6);
				{
				setState(10791);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(10792);
				match(EQUAL);
				setState(10793);
				match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				enterOuterAlt(_localctx, 7);
				{
				setState(10794);
				match(DB_CHAINING);
				setState(10795);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 8);
				{
				setState(10796);
				match(TRUSTWORTHY);
				setState(10797);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_filestream_optionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(TSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode FULL() { return getToken(TSqlParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_filestream_option; }
	}

	public final Database_filestream_optionContext database_filestream_option() throws RecognitionException {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_database_filestream_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10800);
			match(LR_BRACKET);
			setState(10807);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				{
				setState(10801);
				match(NON_TRANSACTED_ACCESS);
				setState(10802);
				match(EQUAL);
				setState(10803);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				{
				setState(10804);
				match(DIRECTORY_NAME);
				setState(10805);
				match(EQUAL);
				setState(10806);
				match(STRING);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10809);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_file_specContext extends ParserRuleContext {
		public File_groupContext file_group() {
			return getRuleContext(File_groupContext.class,0);
		}
		public File_specContext file_spec() {
			return getRuleContext(File_specContext.class,0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_file_spec; }
	}

	public final Database_file_specContext database_file_spec() throws RecognitionException {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_database_file_spec);
		try {
			setState(10813);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILEGROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(10811);
				file_group();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(10812);
				file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_groupContext extends ParserRuleContext {
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<File_specContext> file_spec() {
			return getRuleContexts(File_specContext.class);
		}
		public File_specContext file_spec(int i) {
			return getRuleContext(File_specContext.class,i);
		}
		public List<TerminalNode> CONTAINS() { return getTokens(TSqlParser.CONTAINS); }
		public TerminalNode CONTAINS(int i) {
			return getToken(TSqlParser.CONTAINS, i);
		}
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public File_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_group; }
	}

	public final File_groupContext file_group() throws RecognitionException {
		File_groupContext _localctx = new File_groupContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_file_group);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(10815);
			match(FILEGROUP);
			setState(10816);
			id();
			setState(10819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1508,_ctx) ) {
			case 1:
				{
				setState(10817);
				match(CONTAINS);
				setState(10818);
				match(FILESTREAM);
				}
				break;
			}
			setState(10822);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(10821);
				match(DEFAULT);
				}
			}

			setState(10826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(10824);
				match(CONTAINS);
				setState(10825);
				match(MEMORY_OPTIMIZED_DATA);
				}
			}

			setState(10828);
			file_spec();
			setState(10833);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1511,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(10829);
					match(COMMA);
					setState(10830);
					file_spec();
					}
					} 
				}
				setState(10835);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1511,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_specContext extends ParserRuleContext {
		public Token file;
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public List<File_sizeContext> file_size() {
			return getRuleContexts(File_sizeContext.class);
		}
		public File_sizeContext file_size(int i) {
			return getRuleContext(File_sizeContext.class,i);
		}
		public TerminalNode MAXSIZE() { return getToken(TSqlParser.MAXSIZE, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSqlParser.FILEGROWTH, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSqlParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_spec; }
	}

	public final File_specContext file_spec() throws RecognitionException {
		File_specContext _localctx = new File_specContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_file_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10836);
			match(LR_BRACKET);
			setState(10837);
			match(NAME);
			setState(10838);
			match(EQUAL);
			setState(10841);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(10839);
				id();
				}
				break;
			case STRING:
				{
				setState(10840);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(10844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(10843);
				match(COMMA);
				}
			}

			setState(10846);
			match(FILENAME);
			setState(10847);
			match(EQUAL);
			setState(10848);
			((File_specContext)_localctx).file = match(STRING);
			setState(10850);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(10849);
				match(COMMA);
				}
			}

			setState(10858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(10852);
				match(SIZE);
				setState(10853);
				match(EQUAL);
				setState(10854);
				file_size();
				setState(10856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10855);
					match(COMMA);
					}
				}

				}
			}

			setState(10869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAXSIZE) {
				{
				setState(10860);
				match(MAXSIZE);
				setState(10861);
				match(EQUAL);
				setState(10864);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(10862);
					file_size();
					}
					break;
				case UNLIMITED:
					{
					setState(10863);
					match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(10867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10866);
					match(COMMA);
					}
				}

				}
			}

			setState(10877);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILEGROWTH) {
				{
				setState(10871);
				match(FILEGROWTH);
				setState(10872);
				match(EQUAL);
				setState(10873);
				file_size();
				setState(10875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(10874);
					match(COMMA);
					}
				}

				}
			}

			setState(10879);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Entity_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name; }
	}

	public final Entity_nameContext entity_name() throws RecognitionException {
		Entity_nameContext _localctx = new Entity_nameContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_entity_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1523,_ctx) ) {
			case 1:
				{
				setState(10881);
				((Entity_nameContext)_localctx).server = id();
				setState(10882);
				match(DOT);
				setState(10883);
				((Entity_nameContext)_localctx).database = id();
				setState(10884);
				match(DOT);
				setState(10885);
				((Entity_nameContext)_localctx).schema = id();
				setState(10886);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(10888);
				((Entity_nameContext)_localctx).database = id();
				setState(10889);
				match(DOT);
				setState(10891);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(10890);
					((Entity_nameContext)_localctx).schema = id();
					}
				}

				setState(10893);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(10895);
				((Entity_nameContext)_localctx).schema = id();
				setState(10896);
				match(DOT);
				}
				break;
			}
			setState(10900);
			((Entity_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_name_for_azure_dwContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext object_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Entity_name_for_azure_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name_for_azure_dw; }
	}

	public final Entity_name_for_azure_dwContext entity_name_for_azure_dw() throws RecognitionException {
		Entity_name_for_azure_dwContext _localctx = new Entity_name_for_azure_dwContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_entity_name_for_azure_dw);
		try {
			setState(10907);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1524,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10902);
				((Entity_name_for_azure_dwContext)_localctx).schema = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10903);
				((Entity_name_for_azure_dwContext)_localctx).schema = id();
				setState(10904);
				match(DOT);
				setState(10905);
				((Entity_name_for_azure_dwContext)_localctx).object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Entity_name_for_parallel_dwContext extends ParserRuleContext {
		public IdContext schema_database;
		public IdContext schema;
		public IdContext object_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Entity_name_for_parallel_dwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_entity_name_for_parallel_dw; }
	}

	public final Entity_name_for_parallel_dwContext entity_name_for_parallel_dw() throws RecognitionException {
		Entity_name_for_parallel_dwContext _localctx = new Entity_name_for_parallel_dwContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_entity_name_for_parallel_dw);
		try {
			setState(10914);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10909);
				((Entity_name_for_parallel_dwContext)_localctx).schema_database = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10910);
				((Entity_name_for_parallel_dwContext)_localctx).schema = id();
				setState(10911);
				match(DOT);
				setState(10912);
				((Entity_name_for_parallel_dwContext)_localctx).object_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_table_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Full_table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_table_name; }
	}

	public final Full_table_nameContext full_table_name() throws RecognitionException {
		Full_table_nameContext _localctx = new Full_table_nameContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_full_table_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1527,_ctx) ) {
			case 1:
				{
				setState(10916);
				((Full_table_nameContext)_localctx).server = id();
				setState(10917);
				match(DOT);
				setState(10918);
				((Full_table_nameContext)_localctx).database = id();
				setState(10919);
				match(DOT);
				setState(10920);
				((Full_table_nameContext)_localctx).schema = id();
				setState(10921);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(10923);
				((Full_table_nameContext)_localctx).database = id();
				setState(10924);
				match(DOT);
				setState(10926);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(10925);
					((Full_table_nameContext)_localctx).schema = id();
					}
				}

				setState(10928);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(10930);
				((Full_table_nameContext)_localctx).schema = id();
				setState(10931);
				match(DOT);
				}
				break;
			}
			setState(10935);
			((Full_table_nameContext)_localctx).table = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext table;
		public Token blocking_hierarchy;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_table_name);
		int _la;
		try {
			setState(10963);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1532,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10947);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1529,_ctx) ) {
				case 1:
					{
					setState(10937);
					((Table_nameContext)_localctx).database = id();
					setState(10938);
					match(DOT);
					setState(10940);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
						{
						setState(10939);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(10942);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(10944);
					((Table_nameContext)_localctx).schema = id();
					setState(10945);
					match(DOT);
					}
					break;
				}
				setState(10949);
				((Table_nameContext)_localctx).table = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10960);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1531,_ctx) ) {
				case 1:
					{
					setState(10950);
					((Table_nameContext)_localctx).database = id();
					setState(10951);
					match(DOT);
					setState(10953);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
						{
						setState(10952);
						((Table_nameContext)_localctx).schema = id();
						}
					}

					setState(10955);
					match(DOT);
					}
					break;
				case 2:
					{
					setState(10957);
					((Table_nameContext)_localctx).schema = id();
					setState(10958);
					match(DOT);
					}
					break;
				}
				setState(10962);
				((Table_nameContext)_localctx).blocking_hierarchy = match(BLOCKING_HIERARCHY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_nameContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Simple_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_name; }
	}

	public final Simple_nameContext simple_name() throws RecognitionException {
		Simple_nameContext _localctx = new Simple_nameContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_simple_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10968);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1533,_ctx) ) {
			case 1:
				{
				setState(10965);
				((Simple_nameContext)_localctx).schema = id();
				setState(10966);
				match(DOT);
				}
				break;
			}
			setState(10970);
			((Simple_nameContext)_localctx).name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_schemaContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext procedure;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSqlParser.DOT, 0); }
		public Func_proc_name_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_schema; }
	}

	public final Func_proc_name_schemaContext func_proc_name_schema() throws RecognitionException {
		Func_proc_name_schemaContext _localctx = new Func_proc_name_schemaContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_func_proc_name_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(10975);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1534,_ctx) ) {
			case 1:
				{
				{
				setState(10972);
				((Func_proc_name_schemaContext)_localctx).schema = id();
				}
				setState(10973);
				match(DOT);
				}
				break;
			}
			setState(10977);
			((Func_proc_name_schemaContext)_localctx).procedure = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_database_schemaContext extends ParserRuleContext {
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_name_schemaContext func_proc_name_schema() {
			return getRuleContext(Func_proc_name_schemaContext.class,0);
		}
		public Func_proc_name_database_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_database_schema; }
	}

	public final Func_proc_name_database_schemaContext func_proc_name_database_schema() throws RecognitionException {
		Func_proc_name_database_schemaContext _localctx = new Func_proc_name_database_schemaContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_func_proc_name_database_schema);
		int _la;
		try {
			setState(10989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1537,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(10979);
					((Func_proc_name_database_schemaContext)_localctx).database = id();
					}
				}

				setState(10982);
				match(DOT);
				setState(10984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(10983);
					((Func_proc_name_database_schemaContext)_localctx).schema = id();
					}
				}

				setState(10986);
				match(DOT);
				setState(10987);
				((Func_proc_name_database_schemaContext)_localctx).procedure = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(10988);
				func_proc_name_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_proc_name_server_database_schemaContext extends ParserRuleContext {
		public IdContext server;
		public IdContext database;
		public IdContext schema;
		public IdContext procedure;
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Func_proc_name_database_schemaContext func_proc_name_database_schema() {
			return getRuleContext(Func_proc_name_database_schemaContext.class,0);
		}
		public Func_proc_name_server_database_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_proc_name_server_database_schema; }
	}

	public final Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() throws RecognitionException {
		Func_proc_name_server_database_schemaContext _localctx = new Func_proc_name_server_database_schemaContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_func_proc_name_server_database_schema);
		int _la;
		try {
			setState(11005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1541,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(10992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(10991);
					((Func_proc_name_server_database_schemaContext)_localctx).server = id();
					}
				}

				setState(10994);
				match(DOT);
				setState(10996);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(10995);
					((Func_proc_name_server_database_schemaContext)_localctx).database = id();
					}
				}

				setState(10998);
				match(DOT);
				setState(11000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(10999);
					((Func_proc_name_server_database_schemaContext)_localctx).schema = id();
					}
				}

				setState(11002);
				match(DOT);
				setState(11003);
				((Func_proc_name_server_database_schemaContext)_localctx).procedure = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11004);
				func_proc_name_database_schema();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_objectContext extends ParserRuleContext {
		public Full_table_nameContext full_table_name() {
			return getRuleContext(Full_table_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Ddl_objectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_object; }
	}

	public final Ddl_objectContext ddl_object() throws RecognitionException {
		Ddl_objectContext _localctx = new Ddl_objectContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_ddl_object);
		try {
			setState(11009);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(11007);
				full_table_name();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(11008);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_nameContext extends ParserRuleContext {
		public IdContext server;
		public IdContext schema;
		public IdContext tablename;
		public IdContext column_name;
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_full_column_name);
		int _la;
		try {
			setState(11039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1549,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(11011);
					((Full_column_nameContext)_localctx).server = id();
					}
				}

				setState(11014);
				match(DOT);
				setState(11016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(11015);
					((Full_column_nameContext)_localctx).schema = id();
					}
				}

				setState(11018);
				match(DOT);
				setState(11020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(11019);
					((Full_column_nameContext)_localctx).tablename = id();
					}
				}

				setState(11022);
				match(DOT);
				setState(11023);
				((Full_column_nameContext)_localctx).column_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(11024);
					((Full_column_nameContext)_localctx).schema = id();
					}
				}

				setState(11027);
				match(DOT);
				setState(11029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(11028);
					((Full_column_nameContext)_localctx).tablename = id();
					}
				}

				setState(11031);
				match(DOT);
				setState(11032);
				((Full_column_nameContext)_localctx).column_name = id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11034);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
					{
					setState(11033);
					((Full_column_nameContext)_localctx).tablename = id();
					}
				}

				setState(11036);
				match(DOT);
				setState(11037);
				((Full_column_nameContext)_localctx).column_name = id();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11038);
				((Full_column_nameContext)_localctx).column_name = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_list_with_orderContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public List<TerminalNode> ASC() { return getTokens(TSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(TSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(TSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(TSqlParser.DESC, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_with_order; }
	}

	public final Column_name_list_with_orderContext column_name_list_with_order() throws RecognitionException {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_column_name_list_with_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11041);
			id();
			setState(11043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(11042);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(11052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11045);
				match(COMMA);
				setState(11046);
				id();
				setState(11048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC || _la==DESC) {
					{
					setState(11047);
					_la = _input.LA(1);
					if ( !(_la==ASC || _la==DESC) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				setState(11054);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_name_listContext extends ParserRuleContext {
		public Insert_column_idContext insert_column_id;
		public List<Insert_column_idContext> col = new ArrayList<Insert_column_idContext>();
		public List<Insert_column_idContext> insert_column_id() {
			return getRuleContexts(Insert_column_idContext.class);
		}
		public Insert_column_idContext insert_column_id(int i) {
			return getRuleContext(Insert_column_idContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Insert_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_name_list; }
	}

	public final Insert_column_name_listContext insert_column_name_list() throws RecognitionException {
		Insert_column_name_listContext _localctx = new Insert_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_insert_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11055);
			((Insert_column_name_listContext)_localctx).insert_column_id = insert_column_id();
			((Insert_column_name_listContext)_localctx).col.add(((Insert_column_name_listContext)_localctx).insert_column_id);
			setState(11060);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11056);
				match(COMMA);
				setState(11057);
				((Insert_column_name_listContext)_localctx).insert_column_id = insert_column_id();
				((Insert_column_name_listContext)_localctx).col.add(((Insert_column_name_listContext)_localctx).insert_column_id);
				}
				}
				setState(11062);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_column_idContext extends ParserRuleContext {
		public IdContext id;
		public List<IdContext> ignore = new ArrayList<IdContext>();
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public Insert_column_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_column_id; }
	}

	public final Insert_column_idContext insert_column_id() throws RecognitionException {
		Insert_column_idContext _localctx = new Insert_column_idContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_insert_column_id);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(11069);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1555,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(11064);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)) | (1L << (DOUBLE_QUOTE_ID - 766)) | (1L << (SQUARE_BRACKET_ID - 766)) | (1L << (ID - 766)))) != 0)) {
						{
						setState(11063);
						((Insert_column_idContext)_localctx).id = id();
						((Insert_column_idContext)_localctx).ignore.add(((Insert_column_idContext)_localctx).id);
						}
					}

					setState(11066);
					match(DOT);
					}
					} 
				}
				setState(11071);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1555,_ctx);
			}
			setState(11072);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public IdContext id;
		public List<IdContext> col = new ArrayList<IdContext>();
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11074);
			((Column_name_listContext)_localctx).id = id();
			((Column_name_listContext)_localctx).col.add(((Column_name_listContext)_localctx).id);
			setState(11079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(11075);
				match(COMMA);
				setState(11076);
				((Column_name_listContext)_localctx).id = id();
				((Column_name_listContext)_localctx).col.add(((Column_name_listContext)_localctx).id);
				}
				}
				setState(11081);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_cursor_name);
		try {
			setState(11084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(11082);
				id();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(11083);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_offContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_off; }
	}

	public final On_offContext on_off() throws RecognitionException {
		On_offContext _localctx = new On_offContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_on_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11086);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusteredContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(TSqlParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(TSqlParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustered; }
	}

	public final ClusteredContext clustered() throws RecognitionException {
		ClusteredContext _localctx = new ClusteredContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_clustered);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11088);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(TSqlParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_null_notnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11091);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(11090);
				match(NOT);
				}
			}

			setState(11093);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_or_defaultContext extends ParserRuleContext {
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSqlParser.COLLATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(TSqlParser.VALUES, 0); }
		public Null_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_or_default; }
	}

	public final Null_or_defaultContext null_or_default() throws RecognitionException {
		Null_or_defaultContext _localctx = new Null_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_null_or_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11106);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL:
				{
				setState(11095);
				null_notnull();
				}
				break;
			case DEFAULT:
				{
				setState(11096);
				match(DEFAULT);
				setState(11097);
				constant_expression();
				setState(11100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(11098);
					match(COLLATE);
					setState(11099);
					id();
					}
				}

				setState(11104);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1560,_ctx) ) {
				case 1:
					{
					setState(11102);
					match(WITH);
					setState(11103);
					match(VALUES);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_function_nameContext extends ParserRuleContext {
		public Func_proc_name_server_database_schemaContext func_proc_name_server_database_schema() {
			return getRuleContext(Func_proc_name_server_database_schemaContext.class,0);
		}
		public TerminalNode RIGHT() { return getToken(TSqlParser.RIGHT, 0); }
		public TerminalNode LEFT() { return getToken(TSqlParser.LEFT, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_scalar_function_name);
		try {
			setState(11113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1562,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11108);
				func_proc_name_server_database_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11109);
				match(RIGHT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11110);
				match(LEFT);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11111);
				match(BINARY_CHECKSUM);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11112);
				match(CHECKSUM);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_timerContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode TIMER() { return getToken(TSqlParser.TIMER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_timer; }
	}

	public final Begin_conversation_timerContext begin_conversation_timer() throws RecognitionException {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_begin_conversation_timer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11115);
			match(BEGIN);
			setState(11116);
			match(CONVERSATION);
			setState(11117);
			match(TIMER);
			setState(11118);
			match(LR_BRACKET);
			setState(11119);
			match(LOCAL_ID);
			setState(11120);
			match(RR_BRACKET);
			setState(11121);
			match(TIMEOUT);
			setState(11122);
			match(EQUAL);
			setState(11123);
			time();
			setState(11125);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1563,_ctx) ) {
			case 1:
				{
				setState(11124);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_dialogContext extends ParserRuleContext {
		public Token dialog_handle;
		public Service_nameContext initiator_service_name;
		public Service_nameContext target_service_name;
		public Token service_broker_guid;
		public TerminalNode BEGIN() { return getToken(TSqlParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(TSqlParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(TSqlParser.SERVICE, i);
		}
		public TerminalNode TO() { return getToken(TSqlParser.TO, 0); }
		public List<TerminalNode> ON() { return getTokens(TSqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSqlParser.ON, i);
		}
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public Contract_nameContext contract_name() {
			return getRuleContext(Contract_nameContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public List<Service_nameContext> service_name() {
			return getRuleContexts(Service_nameContext.class);
		}
		public Service_nameContext service_name(int i) {
			return getRuleContext(Service_nameContext.class,i);
		}
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode LIFETIME() { return getToken(TSqlParser.LIFETIME, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode RELATED_CONVERSATION() { return getToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public TerminalNode RELATED_CONVERSATION_GROUP() { return getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode OFF() { return getToken(TSqlParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_dialog; }
	}

	public final Begin_conversation_dialogContext begin_conversation_dialog() throws RecognitionException {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_begin_conversation_dialog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11127);
			match(BEGIN);
			setState(11128);
			match(DIALOG);
			setState(11130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERSATION) {
				{
				setState(11129);
				match(CONVERSATION);
				}
			}

			setState(11132);
			((Begin_conversation_dialogContext)_localctx).dialog_handle = match(LOCAL_ID);
			setState(11133);
			match(FROM);
			setState(11134);
			match(SERVICE);
			setState(11135);
			((Begin_conversation_dialogContext)_localctx).initiator_service_name = service_name();
			setState(11136);
			match(TO);
			setState(11137);
			match(SERVICE);
			setState(11138);
			((Begin_conversation_dialogContext)_localctx).target_service_name = service_name();
			setState(11141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(11139);
				match(COMMA);
				setState(11140);
				((Begin_conversation_dialogContext)_localctx).service_broker_guid = match(STRING);
				}
			}

			setState(11143);
			match(ON);
			setState(11144);
			match(CONTRACT);
			setState(11145);
			contract_name();
			setState(11168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1571,_ctx) ) {
			case 1:
				{
				setState(11146);
				match(WITH);
				setState(11153);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1567,_ctx) ) {
				case 1:
					{
					setState(11147);
					_la = _input.LA(1);
					if ( !(_la==RELATED_CONVERSATION || _la==RELATED_CONVERSATION_GROUP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(11148);
					match(EQUAL);
					setState(11149);
					match(LOCAL_ID);
					setState(11151);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(11150);
						match(COMMA);
						}
					}

					}
					break;
				}
				setState(11161);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1569,_ctx) ) {
				case 1:
					{
					setState(11155);
					match(LIFETIME);
					setState(11156);
					match(EQUAL);
					setState(11157);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(11159);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(11158);
						match(COMMA);
						}
					}

					}
					break;
				}
				setState(11166);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1570,_ctx) ) {
				case 1:
					{
					setState(11163);
					match(ENCRYPTION);
					setState(11164);
					match(EQUAL);
					setState(11165);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			}
			setState(11171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1572,_ctx) ) {
			case 1:
				{
				setState(11170);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Contract_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Contract_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_contract_name; }
	}

	public final Contract_nameContext contract_name() throws RecognitionException {
		Contract_nameContext _localctx = new Contract_nameContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_contract_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11175);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1573,_ctx) ) {
			case 1:
				{
				setState(11173);
				id();
				}
				break;
			case 2:
				{
				setState(11174);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Service_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_name; }
	}

	public final Service_nameContext service_name() throws RecognitionException {
		Service_nameContext _localctx = new Service_nameContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_service_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1574,_ctx) ) {
			case 1:
				{
				setState(11177);
				id();
				}
				break;
			case 2:
				{
				setState(11178);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public Token faliure_code;
		public Token failure_text;
		public TerminalNode END() { return getToken(TSqlParser.END, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TerminalNode WITH() { return getToken(TSqlParser.WITH, 0); }
		public TerminalNode ERROR() { return getToken(TSqlParser.ERROR, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSqlParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSqlParser.EQUAL, i);
		}
		public TerminalNode DESCRIPTION() { return getToken(TSqlParser.DESCRIPTION, 0); }
		public TerminalNode CLEANUP() { return getToken(TSqlParser.CLEANUP, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_conversation; }
	}

	public final End_conversationContext end_conversation() throws RecognitionException {
		End_conversationContext _localctx = new End_conversationContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_end_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11181);
			match(END);
			setState(11182);
			match(CONVERSATION);
			setState(11183);
			((End_conversationContext)_localctx).conversation_handle = match(LOCAL_ID);
			setState(11185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1575,_ctx) ) {
			case 1:
				{
				setState(11184);
				match(SEMI);
				}
				break;
			}
			setState(11199);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1578,_ctx) ) {
			case 1:
				{
				setState(11187);
				match(WITH);
				setState(11194);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1576,_ctx) ) {
				case 1:
					{
					setState(11188);
					match(ERROR);
					setState(11189);
					match(EQUAL);
					setState(11190);
					((End_conversationContext)_localctx).faliure_code = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).faliure_code = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(11191);
					match(DESCRIPTION);
					setState(11192);
					match(EQUAL);
					setState(11193);
					((End_conversationContext)_localctx).failure_text = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).failure_text = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(11197);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1577,_ctx) ) {
				case 1:
					{
					setState(11196);
					match(CLEANUP);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_conversationContext extends ParserRuleContext {
		public TimeContext timeout;
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode WAITFOR() { return getToken(TSqlParser.WAITFOR, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_conversation; }
	}

	public final Waitfor_conversationContext waitfor_conversation() throws RecognitionException {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_waitfor_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11202);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAITFOR) {
				{
				setState(11201);
				match(WAITFOR);
				}
			}

			setState(11204);
			match(LR_BRACKET);
			setState(11205);
			get_conversation();
			setState(11206);
			match(RR_BRACKET);
			setState(11212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1581,_ctx) ) {
			case 1:
				{
				setState(11208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(11207);
					match(COMMA);
					}
				}

				setState(11210);
				match(TIMEOUT);
				setState(11211);
				((Waitfor_conversationContext)_localctx).timeout = time();
				}
				break;
			}
			setState(11215);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1582,_ctx) ) {
			case 1:
				{
				setState(11214);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_conversationContext extends ParserRuleContext {
		public Token conversation_group_id;
		public Queue_idContext queue;
		public TerminalNode GET() { return getToken(TSqlParser.GET, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode GROUP() { return getToken(TSqlParser.GROUP, 0); }
		public TerminalNode FROM() { return getToken(TSqlParser.FROM, 0); }
		public Queue_idContext queue_id() {
			return getRuleContext(Queue_idContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSqlParser.LOCAL_ID, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Get_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_conversation; }
	}

	public final Get_conversationContext get_conversation() throws RecognitionException {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_get_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11217);
			match(GET);
			setState(11218);
			match(CONVERSATION);
			setState(11219);
			match(GROUP);
			setState(11220);
			((Get_conversationContext)_localctx).conversation_group_id = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Get_conversationContext)_localctx).conversation_group_id = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(11221);
			match(FROM);
			setState(11222);
			((Get_conversationContext)_localctx).queue = queue_id();
			setState(11224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1583,_ctx) ) {
			case 1:
				{
				setState(11223);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_idContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext schema_name;
		public IdContext name;
		public List<TerminalNode> DOT() { return getTokens(TSqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSqlParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_id; }
	}

	public final Queue_idContext queue_id() throws RecognitionException {
		Queue_idContext _localctx = new Queue_idContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_queue_id);
		try {
			setState(11233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1584,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(11226);
				((Queue_idContext)_localctx).database_name = id();
				setState(11227);
				match(DOT);
				setState(11228);
				((Queue_idContext)_localctx).schema_name = id();
				setState(11229);
				match(DOT);
				setState(11230);
				((Queue_idContext)_localctx).name = id();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11232);
				id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Send_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public ExpressionContext message_type_name;
		public Token message_body_expression;
		public TerminalNode SEND() { return getToken(TSqlParser.SEND, 0); }
		public TerminalNode ON() { return getToken(TSqlParser.ON, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSqlParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSqlParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSqlParser.LOCAL_ID, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode SEMI() { return getToken(TSqlParser.SEMI, 0); }
		public Send_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_send_conversation; }
	}

	public final Send_conversationContext send_conversation() throws RecognitionException {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_send_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11235);
			match(SEND);
			setState(11236);
			match(ON);
			setState(11237);
			match(CONVERSATION);
			setState(11238);
			((Send_conversationContext)_localctx).conversation_handle = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
				((Send_conversationContext)_localctx).conversation_handle = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(11239);
			match(MESSAGE);
			setState(11240);
			match(TYPE);
			setState(11241);
			((Send_conversationContext)_localctx).message_type_name = expression(0);
			setState(11245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1585,_ctx) ) {
			case 1:
				{
				setState(11242);
				match(LR_BRACKET);
				setState(11243);
				((Send_conversationContext)_localctx).message_body_expression = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOCAL_ID || _la==STRING) ) {
					((Send_conversationContext)_localctx).message_body_expression = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11244);
				match(RR_BRACKET);
				}
				break;
			}
			setState(11248);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1586,_ctx) ) {
			case 1:
				{
				setState(11247);
				match(SEMI);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public Token scaled;
		public IdContext ext_type;
		public Token scale;
		public Token prec;
		public Token seed;
		public Token inc;
		public Token double_prec;
		public IdContext unscaled_type;
		public TerminalNode LR_BRACKET() { return getToken(TSqlParser.LR_BRACKET, 0); }
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSqlParser.RR_BRACKET, 0); }
		public TerminalNode VARCHAR() { return getToken(TSqlParser.VARCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(TSqlParser.NVARCHAR, 0); }
		public TerminalNode BINARY_KEYWORD() { return getToken(TSqlParser.BINARY_KEYWORD, 0); }
		public TerminalNode VARBINARY_KEYWORD() { return getToken(TSqlParser.VARBINARY_KEYWORD, 0); }
		public TerminalNode COMMA() { return getToken(TSqlParser.COMMA, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSqlParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSqlParser.DECIMAL, i);
		}
		public TerminalNode IDENTITY() { return getToken(TSqlParser.IDENTITY, 0); }
		public TerminalNode DOUBLE() { return getToken(TSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(TSqlParser.PRECISION, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_data_type);
		int _la;
		try {
			setState(11280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1589,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11250);
				((Data_typeContext)_localctx).scaled = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY_KEYWORD || _la==VARBINARY_KEYWORD || _la==VARCHAR || _la==NVARCHAR) ) {
					((Data_typeContext)_localctx).scaled = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(11251);
				match(LR_BRACKET);
				setState(11252);
				match(MAX);
				setState(11253);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11254);
				((Data_typeContext)_localctx).ext_type = id();
				setState(11255);
				match(LR_BRACKET);
				setState(11256);
				((Data_typeContext)_localctx).scale = match(DECIMAL);
				setState(11257);
				match(COMMA);
				setState(11258);
				((Data_typeContext)_localctx).prec = match(DECIMAL);
				setState(11259);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11261);
				((Data_typeContext)_localctx).ext_type = id();
				setState(11262);
				match(LR_BRACKET);
				setState(11263);
				((Data_typeContext)_localctx).scale = match(DECIMAL);
				setState(11264);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11266);
				((Data_typeContext)_localctx).ext_type = id();
				setState(11267);
				match(IDENTITY);
				setState(11273);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1587,_ctx) ) {
				case 1:
					{
					setState(11268);
					match(LR_BRACKET);
					setState(11269);
					((Data_typeContext)_localctx).seed = match(DECIMAL);
					setState(11270);
					match(COMMA);
					setState(11271);
					((Data_typeContext)_localctx).inc = match(DECIMAL);
					setState(11272);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11275);
				((Data_typeContext)_localctx).double_prec = match(DOUBLE);
				setState(11277);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1588,_ctx) ) {
				case 1:
					{
					setState(11276);
					match(PRECISION);
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11279);
				((Data_typeContext)_localctx).unscaled_type = id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_valueContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSqlParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSqlParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 1030, RULE_default_value);
		try {
			setState(11285);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(11282);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(11283);
				match(DEFAULT);
				}
				break;
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(11284);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token dollar;
		public TerminalNode STRING() { return getToken(TSqlParser.STRING, 0); }
		public TerminalNode BINARY() { return getToken(TSqlParser.BINARY, 0); }
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode REAL() { return getToken(TSqlParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSqlParser.FLOAT, 0); }
		public TerminalNode DOLLAR() { return getToken(TSqlParser.DOLLAR, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 1032, RULE_constant);
		int _la;
		try {
			setState(11302);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1594,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11287);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11288);
				match(BINARY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(11289);
					sign();
					}
				}

				setState(11292);
				match(DECIMAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(11293);
					sign();
					}
				}

				setState(11296);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11298);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(11297);
					sign();
					}
				}

				setState(11300);
				((ConstantContext)_localctx).dollar = match(DOLLAR);
				setState(11301);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(TSqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(TSqlParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 1034, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11304);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordContext extends ParserRuleContext {
		public TerminalNode ABSOLUTE() { return getToken(TSqlParser.ABSOLUTE, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSqlParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode ACTION() { return getToken(TSqlParser.ACTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(TSqlParser.ACTIVATION, 0); }
		public TerminalNode ACTIVE() { return getToken(TSqlParser.ACTIVE, 0); }
		public TerminalNode ADDRESS() { return getToken(TSqlParser.ADDRESS, 0); }
		public TerminalNode AES_128() { return getToken(TSqlParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSqlParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSqlParser.AES_256, 0); }
		public TerminalNode AFFINITY() { return getToken(TSqlParser.AFFINITY, 0); }
		public TerminalNode AFTER() { return getToken(TSqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(TSqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSqlParser.ALGORITHM, 0); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(TSqlParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(TSqlParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public TerminalNode ALLOWED() { return getToken(TSqlParser.ALLOWED, 0); }
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(TSqlParser.ANSI_NULL_DEFAULT, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(TSqlParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSqlParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSqlParser.ANSI_WARNINGS, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSqlParser.APPLICATION_LOG, 0); }
		public TerminalNode APPLY() { return getToken(TSqlParser.APPLY, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSqlParser.ARITHABORT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSqlParser.ASSEMBLY, 0); }
		public TerminalNode AT_KEYWORD() { return getToken(TSqlParser.AT_KEYWORD, 0); }
		public TerminalNode AUDIT() { return getToken(TSqlParser.AUDIT, 0); }
		public TerminalNode AUDIT_GUID() { return getToken(TSqlParser.AUDIT_GUID, 0); }
		public TerminalNode AUTO() { return getToken(TSqlParser.AUTO, 0); }
		public TerminalNode AUTO_CLEANUP() { return getToken(TSqlParser.AUTO_CLEANUP, 0); }
		public TerminalNode AUTO_CLOSE() { return getToken(TSqlParser.AUTO_CLOSE, 0); }
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(TSqlParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(TSqlParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(TSqlParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSqlParser.AVAILABILITY, 0); }
		public TerminalNode AVG() { return getToken(TSqlParser.AVG, 0); }
		public TerminalNode BACKUP_PRIORITY() { return getToken(TSqlParser.BACKUP_PRIORITY, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(TSqlParser.BEGIN_DIALOG, 0); }
		public TerminalNode BIGINT() { return getToken(TSqlParser.BIGINT, 0); }
		public TerminalNode BINARY_BASE64() { return getToken(TSqlParser.BINARY_BASE64, 0); }
		public TerminalNode BINARY_CHECKSUM() { return getToken(TSqlParser.BINARY_CHECKSUM, 0); }
		public TerminalNode BINDING() { return getToken(TSqlParser.BINDING, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(TSqlParser.BLOB_STORAGE, 0); }
		public TerminalNode BROKER() { return getToken(TSqlParser.BROKER, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(TSqlParser.BROKER_INSTANCE, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(TSqlParser.BULK_LOGGED, 0); }
		public TerminalNode CALLER() { return getToken(TSqlParser.CALLER, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(TSqlParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode CAST() { return getToken(TSqlParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(TSqlParser.CATALOG, 0); }
		public TerminalNode CATCH() { return getToken(TSqlParser.CATCH, 0); }
		public TerminalNode CHANGE_RETENTION() { return getToken(TSqlParser.CHANGE_RETENTION, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(TSqlParser.CHANGE_TRACKING, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSqlParser.CHECKSUM, 0); }
		public TerminalNode CHECKSUM_AGG() { return getToken(TSqlParser.CHECKSUM_AGG, 0); }
		public TerminalNode CLEANUP() { return getToken(TSqlParser.CLEANUP, 0); }
		public TerminalNode COLLECTION() { return getToken(TSqlParser.COLLECTION, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(TSqlParser.COLUMN_MASTER_KEY, 0); }
		public TerminalNode COMMITTED() { return getToken(TSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSqlParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode CONCAT() { return getToken(TSqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSqlParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CONTENT() { return getToken(TSqlParser.CONTENT, 0); }
		public TerminalNode CONTROL() { return getToken(TSqlParser.CONTROL, 0); }
		public TerminalNode COOKIE() { return getToken(TSqlParser.COOKIE, 0); }
		public TerminalNode COUNT() { return getToken(TSqlParser.COUNT, 0); }
		public TerminalNode COUNT_BIG() { return getToken(TSqlParser.COUNT_BIG, 0); }
		public TerminalNode COUNTER() { return getToken(TSqlParser.COUNTER, 0); }
		public TerminalNode CPU() { return getToken(TSqlParser.CPU, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSqlParser.CREATE_NEW, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSqlParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSqlParser.CREDENTIAL, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSqlParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSqlParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode CURSOR_DEFAULT() { return getToken(TSqlParser.CURSOR_DEFAULT, 0); }
		public TerminalNode DATA() { return getToken(TSqlParser.DATA, 0); }
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(TSqlParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public TerminalNode DATEADD() { return getToken(TSqlParser.DATEADD, 0); }
		public TerminalNode DATEDIFF() { return getToken(TSqlParser.DATEDIFF, 0); }
		public TerminalNode DATENAME() { return getToken(TSqlParser.DATENAME, 0); }
		public TerminalNode DATEPART() { return getToken(TSqlParser.DATEPART, 0); }
		public TerminalNode DAYS() { return getToken(TSqlParser.DAYS, 0); }
		public TerminalNode DB_CHAINING() { return getToken(TSqlParser.DB_CHAINING, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(TSqlParser.DB_FAILOVER, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSqlParser.DECRYPTION, 0); }
		public TerminalNode DEFAULT_DOUBLE_QUOTE() { return getToken(TSqlParser.DEFAULT_DOUBLE_QUOTE, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSqlParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode DELAY() { return getToken(TSqlParser.DELAY, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSqlParser.DELAYED_DURABILITY, 0); }
		public TerminalNode DELETED() { return getToken(TSqlParser.DELETED, 0); }
		public TerminalNode DENSE_RANK() { return getToken(TSqlParser.DENSE_RANK, 0); }
		public TerminalNode DEPENDENTS() { return getToken(TSqlParser.DEPENDENTS, 0); }
		public TerminalNode DES() { return getToken(TSqlParser.DES, 0); }
		public TerminalNode DESCRIPTION() { return getToken(TSqlParser.DESCRIPTION, 0); }
		public TerminalNode DESX() { return getToken(TSqlParser.DESX, 0); }
		public TerminalNode DHCP() { return getToken(TSqlParser.DHCP, 0); }
		public TerminalNode DIALOG() { return getToken(TSqlParser.DIALOG, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(TSqlParser.DIRECTORY_NAME, 0); }
		public TerminalNode DISABLE() { return getToken(TSqlParser.DISABLE, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(TSqlParser.DISABLE_BROKER, 0); }
		public TerminalNode DISABLED() { return getToken(TSqlParser.DISABLED, 0); }
		public TerminalNode DISK_DRIVE() { return getToken(TSqlParser.DISK_DRIVE, 0); }
		public TerminalNode DOCUMENT() { return getToken(TSqlParser.DOCUMENT, 0); }
		public TerminalNode DYNAMIC() { return getToken(TSqlParser.DYNAMIC, 0); }
		public TerminalNode ELEMENTS() { return getToken(TSqlParser.ELEMENTS, 0); }
		public TerminalNode EMERGENCY() { return getToken(TSqlParser.EMERGENCY, 0); }
		public TerminalNode EMPTY() { return getToken(TSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(TSqlParser.ENABLE, 0); }
		public TerminalNode ENABLE_BROKER() { return getToken(TSqlParser.ENABLE_BROKER, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(TSqlParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSqlParser.ENCRYPTION, 0); }
		public TerminalNode ENDPOINT_URL() { return getToken(TSqlParser.ENDPOINT_URL, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(TSqlParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(TSqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTABLE() { return getToken(TSqlParser.EXECUTABLE, 0); }
		public TerminalNode EXIST() { return getToken(TSqlParser.EXIST, 0); }
		public TerminalNode EXPAND() { return getToken(TSqlParser.EXPAND, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(TSqlParser.EXPIRY_DATE, 0); }
		public TerminalNode EXPLICIT() { return getToken(TSqlParser.EXPLICIT, 0); }
		public TerminalNode FAIL_OPERATION() { return getToken(TSqlParser.FAIL_OPERATION, 0); }
		public TerminalNode FAILOVER_MODE() { return getToken(TSqlParser.FAILOVER_MODE, 0); }
		public TerminalNode FAILURE() { return getToken(TSqlParser.FAILURE, 0); }
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(TSqlParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode FAST() { return getToken(TSqlParser.FAST, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(TSqlParser.FAST_FORWARD, 0); }
		public TerminalNode FILEGROUP() { return getToken(TSqlParser.FILEGROUP, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSqlParser.FILEGROWTH, 0); }
		public TerminalNode FILEPATH() { return getToken(TSqlParser.FILEPATH, 0); }
		public TerminalNode FILESTREAM() { return getToken(TSqlParser.FILESTREAM, 0); }
		public TerminalNode FILTER() { return getToken(TSqlParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(TSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(TSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FOLLOWING() { return getToken(TSqlParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(TSqlParser.FORCE, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode FORCED() { return getToken(TSqlParser.FORCED, 0); }
		public TerminalNode FORMAT() { return getToken(TSqlParser.FORMAT, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(TSqlParser.FORWARD_ONLY, 0); }
		public TerminalNode FULLSCAN() { return getToken(TSqlParser.FULLSCAN, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSqlParser.FULLTEXT, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode GETDATE() { return getToken(TSqlParser.GETDATE, 0); }
		public TerminalNode GETUTCDATE() { return getToken(TSqlParser.GETUTCDATE, 0); }
		public TerminalNode GLOBAL() { return getToken(TSqlParser.GLOBAL, 0); }
		public TerminalNode GO() { return getToken(TSqlParser.GO, 0); }
		public TerminalNode GO_BATCH() { return getToken(TSqlParser.GO_BATCH, 0); }
		public TerminalNode GROUP_MAX_REQUESTS() { return getToken(TSqlParser.GROUP_MAX_REQUESTS, 0); }
		public TerminalNode GROUPING() { return getToken(TSqlParser.GROUPING, 0); }
		public TerminalNode GROUPING_ID() { return getToken(TSqlParser.GROUPING_ID, 0); }
		public TerminalNode HADR() { return getToken(TSqlParser.HADR, 0); }
		public TerminalNode HASH() { return getToken(TSqlParser.HASH, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(TSqlParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode HIGH() { return getToken(TSqlParser.HIGH, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(TSqlParser.HONOR_BROKER_PRIORITY, 0); }
		public TerminalNode HOURS() { return getToken(TSqlParser.HOURS, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(TSqlParser.IDENTITY_VALUE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(TSqlParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode IMMEDIATE() { return getToken(TSqlParser.IMMEDIATE, 0); }
		public TerminalNode IMPERSONATE() { return getToken(TSqlParser.IMPERSONATE, 0); }
		public TerminalNode IMPORTANCE() { return getToken(TSqlParser.IMPORTANCE, 0); }
		public TerminalNode INCLUDE_NULL_VALUES() { return getToken(TSqlParser.INCLUDE_NULL_VALUES, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSqlParser.INCREMENTAL, 0); }
		public TerminalNode INITIATOR() { return getToken(TSqlParser.INITIATOR, 0); }
		public TerminalNode INPUT() { return getToken(TSqlParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(TSqlParser.INSENSITIVE, 0); }
		public TerminalNode INSERTED() { return getToken(TSqlParser.INSERTED, 0); }
		public TerminalNode INT() { return getToken(TSqlParser.INT, 0); }
		public TerminalNode IP() { return getToken(TSqlParser.IP, 0); }
		public TerminalNode ISOLATION() { return getToken(TSqlParser.ISOLATION, 0); }
		public TerminalNode JOB() { return getToken(TSqlParser.JOB, 0); }
		public TerminalNode JSON() { return getToken(TSqlParser.JSON, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode KEEP() { return getToken(TSqlParser.KEEP, 0); }
		public TerminalNode KEEPFIXED() { return getToken(TSqlParser.KEEPFIXED, 0); }
		public TerminalNode KEY_SOURCE() { return getToken(TSqlParser.KEY_SOURCE, 0); }
		public TerminalNode KEYS() { return getToken(TSqlParser.KEYS, 0); }
		public TerminalNode KEYSET() { return getToken(TSqlParser.KEYSET, 0); }
		public TerminalNode LAG() { return getToken(TSqlParser.LAG, 0); }
		public TerminalNode LAST() { return getToken(TSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(TSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEAD() { return getToken(TSqlParser.LEAD, 0); }
		public TerminalNode LEVEL() { return getToken(TSqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(TSqlParser.LIST, 0); }
		public TerminalNode LISTENER() { return getToken(TSqlParser.LISTENER, 0); }
		public TerminalNode LISTENER_URL() { return getToken(TSqlParser.LISTENER_URL, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(TSqlParser.LOB_COMPACTION, 0); }
		public TerminalNode LOCAL() { return getToken(TSqlParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(TSqlParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(TSqlParser.LOCK, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(TSqlParser.LOCK_ESCALATION, 0); }
		public TerminalNode LOGIN() { return getToken(TSqlParser.LOGIN, 0); }
		public TerminalNode LOOP() { return getToken(TSqlParser.LOOP, 0); }
		public TerminalNode LOW() { return getToken(TSqlParser.LOW, 0); }
		public TerminalNode MANUAL() { return getToken(TSqlParser.MANUAL, 0); }
		public TerminalNode MARK() { return getToken(TSqlParser.MARK, 0); }
		public TerminalNode MATERIALIZED() { return getToken(TSqlParser.MATERIALIZED, 0); }
		public TerminalNode MAX() { return getToken(TSqlParser.MAX, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSqlParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode MAX_DOP() { return getToken(TSqlParser.MAX_DOP, 0); }
		public TerminalNode MAX_FILES() { return getToken(TSqlParser.MAX_FILES, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(TSqlParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSqlParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSqlParser.MAX_PROCESSES, 0); }
		public TerminalNode MAX_QUEUE_READERS() { return getToken(TSqlParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode MAX_ROLLOVER_FILES() { return getToken(TSqlParser.MAX_ROLLOVER_FILES, 0); }
		public TerminalNode MAXDOP() { return getToken(TSqlParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(TSqlParser.MAXRECURSION, 0); }
		public TerminalNode MAXSIZE() { return getToken(TSqlParser.MAXSIZE, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode MEDIUM() { return getToken(TSqlParser.MEDIUM, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSqlParser.MEMORY_OPTIMIZED_DATA, 0); }
		public TerminalNode MESSAGE() { return getToken(TSqlParser.MESSAGE, 0); }
		public TerminalNode MIN() { return getToken(TSqlParser.MIN, 0); }
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(TSqlParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode MIN_CPU_PERCENT() { return getToken(TSqlParser.MIN_CPU_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(TSqlParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(TSqlParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MINUTES() { return getToken(TSqlParser.MINUTES, 0); }
		public TerminalNode MIRROR_ADDRESS() { return getToken(TSqlParser.MIRROR_ADDRESS, 0); }
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(TSqlParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode MODE() { return getToken(TSqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(TSqlParser.MODIFY, 0); }
		public TerminalNode MOVE() { return getToken(TSqlParser.MOVE, 0); }
		public TerminalNode MULTI_USER() { return getToken(TSqlParser.MULTI_USER, 0); }
		public TerminalNode NAME() { return getToken(TSqlParser.NAME, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSqlParser.NESTED_TRIGGERS, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(TSqlParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_BROKER() { return getToken(TSqlParser.NEW_BROKER, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(TSqlParser.NEW_PASSWORD, 0); }
		public TerminalNode NEXT() { return getToken(TSqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(TSqlParser.NO, 0); }
		public TerminalNode NO_TRUNCATE() { return getToken(TSqlParser.NO_TRUNCATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(TSqlParser.NO_WAIT, 0); }
		public TerminalNode NOCOUNT() { return getToken(TSqlParser.NOCOUNT, 0); }
		public TerminalNode NODES() { return getToken(TSqlParser.NODES, 0); }
		public TerminalNode NOEXPAND() { return getToken(TSqlParser.NOEXPAND, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(TSqlParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(TSqlParser.NORECOMPUTE, 0); }
		public TerminalNode NORECOVERY() { return getToken(TSqlParser.NORECOVERY, 0); }
		public TerminalNode NOWAIT() { return getToken(TSqlParser.NOWAIT, 0); }
		public TerminalNode NTILE() { return getToken(TSqlParser.NTILE, 0); }
		public TerminalNode NUMANODE() { return getToken(TSqlParser.NUMANODE, 0); }
		public TerminalNode NUMBER() { return getToken(TSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSqlParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode OBJECT() { return getToken(TSqlParser.OBJECT, 0); }
		public TerminalNode OFFLINE() { return getToken(TSqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(TSqlParser.OFFSET, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(TSqlParser.OLD_ACCOUNT, 0); }
		public TerminalNode ONLINE() { return getToken(TSqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(TSqlParser.ONLY, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSqlParser.OPEN_EXISTING, 0); }
		public TerminalNode OPENJSON() { return getToken(TSqlParser.OPENJSON, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(TSqlParser.OPTIMISTIC, 0); }
		public TerminalNode OPTIMIZE() { return getToken(TSqlParser.OPTIMIZE, 0); }
		public TerminalNode OUT() { return getToken(TSqlParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(TSqlParser.OUTPUT, 0); }
		public TerminalNode OVERRIDE() { return getToken(TSqlParser.OVERRIDE, 0); }
		public TerminalNode OWNER() { return getToken(TSqlParser.OWNER, 0); }
		public TerminalNode PAGE_VERIFY() { return getToken(TSqlParser.PAGE_VERIFY, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(TSqlParser.PARAMETERIZATION, 0); }
		public TerminalNode PARTITION() { return getToken(TSqlParser.PARTITION, 0); }
		public TerminalNode PARTITIONS() { return getToken(TSqlParser.PARTITIONS, 0); }
		public TerminalNode PARTNER() { return getToken(TSqlParser.PARTNER, 0); }
		public TerminalNode PATH() { return getToken(TSqlParser.PATH, 0); }
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(TSqlParser.POISON_MESSAGE_HANDLING, 0); }
		public TerminalNode POOL() { return getToken(TSqlParser.POOL, 0); }
		public TerminalNode PORT() { return getToken(TSqlParser.PORT, 0); }
		public TerminalNode PRECEDING() { return getToken(TSqlParser.PRECEDING, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(TSqlParser.PRIMARY_ROLE, 0); }
		public TerminalNode PRIOR() { return getToken(TSqlParser.PRIOR, 0); }
		public TerminalNode PRIORITY() { return getToken(TSqlParser.PRIORITY, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(TSqlParser.PRIORITY_LEVEL, 0); }
		public TerminalNode PRIVATE() { return getToken(TSqlParser.PRIVATE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(TSqlParser.PRIVATE_KEY, 0); }
		public TerminalNode PRIVILEGES() { return getToken(TSqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE_NAME() { return getToken(TSqlParser.PROCEDURE_NAME, 0); }
		public TerminalNode PROPERTY() { return getToken(TSqlParser.PROPERTY, 0); }
		public TerminalNode PROVIDER() { return getToken(TSqlParser.PROVIDER, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSqlParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode QUERY() { return getToken(TSqlParser.QUERY, 0); }
		public TerminalNode QUEUE() { return getToken(TSqlParser.QUEUE, 0); }
		public TerminalNode QUEUE_DELAY() { return getToken(TSqlParser.QUEUE_DELAY, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSqlParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RANGE() { return getToken(TSqlParser.RANGE, 0); }
		public TerminalNode RANK() { return getToken(TSqlParser.RANK, 0); }
		public TerminalNode RC2() { return getToken(TSqlParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSqlParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSqlParser.RC4_128, 0); }
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(TSqlParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSqlParser.READ_ONLY, 0); }
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(TSqlParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSqlParser.READ_WRITE, 0); }
		public TerminalNode READONLY() { return getToken(TSqlParser.READONLY, 0); }
		public TerminalNode REBUILD() { return getToken(TSqlParser.REBUILD, 0); }
		public TerminalNode RECEIVE() { return getToken(TSqlParser.RECEIVE, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSqlParser.RECOMPILE, 0); }
		public TerminalNode RECOVERY() { return getToken(TSqlParser.RECOVERY, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(TSqlParser.RECURSIVE_TRIGGERS, 0); }
		public TerminalNode RELATIVE() { return getToken(TSqlParser.RELATIVE, 0); }
		public TerminalNode REMOTE() { return getToken(TSqlParser.REMOTE, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(TSqlParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode REMOVE() { return getToken(TSqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSqlParser.REORGANIZE, 0); }
		public TerminalNode REPEATABLE() { return getToken(TSqlParser.REPEATABLE, 0); }
		public TerminalNode REPLICA() { return getToken(TSqlParser.REPLICA, 0); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC() { return getToken(TSqlParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getToken(TSqlParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getToken(TSqlParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(TSqlParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode RESERVE_DISK_SPACE() { return getToken(TSqlParser.RESERVE_DISK_SPACE, 0); }
		public TerminalNode RESOURCE() { return getToken(TSqlParser.RESOURCE, 0); }
		public TerminalNode RESOURCE_MANAGER_LOCATION() { return getToken(TSqlParser.RESOURCE_MANAGER_LOCATION, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(TSqlParser.RESTRICTED_USER, 0); }
		public TerminalNode RETENTION() { return getToken(TSqlParser.RETENTION, 0); }
		public TerminalNode ROBUST() { return getToken(TSqlParser.ROBUST, 0); }
		public TerminalNode ROOT() { return getToken(TSqlParser.ROOT, 0); }
		public TerminalNode ROUTE() { return getToken(TSqlParser.ROUTE, 0); }
		public TerminalNode ROW() { return getToken(TSqlParser.ROW, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(TSqlParser.ROW_NUMBER, 0); }
		public TerminalNode ROWGUID() { return getToken(TSqlParser.ROWGUID, 0); }
		public TerminalNode ROWS() { return getToken(TSqlParser.ROWS, 0); }
		public TerminalNode SAMPLE() { return getToken(TSqlParser.SAMPLE, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSqlParser.SCHEMABINDING, 0); }
		public TerminalNode SCOPED() { return getToken(TSqlParser.SCOPED, 0); }
		public TerminalNode SCROLL() { return getToken(TSqlParser.SCROLL, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(TSqlParser.SCROLL_LOCKS, 0); }
		public TerminalNode SEARCH() { return getToken(TSqlParser.SEARCH, 0); }
		public TerminalNode SECONDARY() { return getToken(TSqlParser.SECONDARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(TSqlParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY_ROLE() { return getToken(TSqlParser.SECONDARY_ROLE, 0); }
		public TerminalNode SECONDS() { return getToken(TSqlParser.SECONDS, 0); }
		public TerminalNode SECRET() { return getToken(TSqlParser.SECRET, 0); }
		public TerminalNode SECURITY() { return getToken(TSqlParser.SECURITY, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSqlParser.SECURITY_LOG, 0); }
		public TerminalNode SEEDING_MODE() { return getToken(TSqlParser.SEEDING_MODE, 0); }
		public TerminalNode SELF() { return getToken(TSqlParser.SELF, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(TSqlParser.SEMI_SENSITIVE, 0); }
		public TerminalNode SEND() { return getToken(TSqlParser.SEND, 0); }
		public TerminalNode SENT() { return getToken(TSqlParser.SENT, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSqlParser.SEQUENCE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(TSqlParser.SESSION_TIMEOUT, 0); }
		public TerminalNode SETERROR() { return getToken(TSqlParser.SETERROR, 0); }
		public TerminalNode SHARE() { return getToken(TSqlParser.SHARE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(TSqlParser.SHOWPLAN, 0); }
		public TerminalNode SIGNATURE() { return getToken(TSqlParser.SIGNATURE, 0); }
		public TerminalNode SIMPLE() { return getToken(TSqlParser.SIMPLE, 0); }
		public TerminalNode SINGLE_USER() { return getToken(TSqlParser.SINGLE_USER, 0); }
		public TerminalNode SIZE() { return getToken(TSqlParser.SIZE, 0); }
		public TerminalNode SMALLINT() { return getToken(TSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSqlParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(TSqlParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode STANDBY() { return getToken(TSqlParser.STANDBY, 0); }
		public TerminalNode START_DATE() { return getToken(TSqlParser.START_DATE, 0); }
		public TerminalNode STATIC() { return getToken(TSqlParser.STATIC, 0); }
		public TerminalNode STATS_STREAM() { return getToken(TSqlParser.STATS_STREAM, 0); }
		public TerminalNode STATUS() { return getToken(TSqlParser.STATUS, 0); }
		public TerminalNode STATUSONLY() { return getToken(TSqlParser.STATUSONLY, 0); }
		public TerminalNode STDEV() { return getToken(TSqlParser.STDEV, 0); }
		public TerminalNode STDEVP() { return getToken(TSqlParser.STDEVP, 0); }
		public TerminalNode STOPLIST() { return getToken(TSqlParser.STOPLIST, 0); }
		public TerminalNode STRING_AGG() { return getToken(TSqlParser.STRING_AGG, 0); }
		public TerminalNode STUFF() { return getToken(TSqlParser.STUFF, 0); }
		public TerminalNode SUBJECT() { return getToken(TSqlParser.SUBJECT, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(TSqlParser.SUBSCRIPTION, 0); }
		public TerminalNode SUM() { return getToken(TSqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(TSqlParser.SUSPEND, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSqlParser.SYMMETRIC, 0); }
		public TerminalNode SYNCHRONOUS_COMMIT() { return getToken(TSqlParser.SYNCHRONOUS_COMMIT, 0); }
		public TerminalNode SYNONYM() { return getToken(TSqlParser.SYNONYM, 0); }
		public TerminalNode SYSTEM() { return getToken(TSqlParser.SYSTEM, 0); }
		public TerminalNode TAKE() { return getToken(TSqlParser.TAKE, 0); }
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(TSqlParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode TB() { return getToken(TSqlParser.TB, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(TSqlParser.TEXTIMAGE_ON, 0); }
		public TerminalNode THROW() { return getToken(TSqlParser.THROW, 0); }
		public TerminalNode TIES() { return getToken(TSqlParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(TSqlParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSqlParser.TIMEOUT, 0); }
		public TerminalNode TIMER() { return getToken(TSqlParser.TIMER, 0); }
		public TerminalNode TINYINT() { return getToken(TSqlParser.TINYINT, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(TSqlParser.TORN_PAGE_DETECTION, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSqlParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSqlParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSqlParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(TSqlParser.TRUSTWORTHY, 0); }
		public TerminalNode TRY() { return getToken(TSqlParser.TRY, 0); }
		public TerminalNode TSQL() { return getToken(TSqlParser.TSQL, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSqlParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode TYPE() { return getToken(TSqlParser.TYPE, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(TSqlParser.TYPE_WARNING, 0); }
		public TerminalNode UNBOUNDED() { return getToken(TSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(TSqlParser.UNCOMMITTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(TSqlParser.UNKNOWN, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSqlParser.UNLIMITED, 0); }
		public TerminalNode UOW() { return getToken(TSqlParser.UOW, 0); }
		public TerminalNode USING() { return getToken(TSqlParser.USING, 0); }
		public TerminalNode VALID_XML() { return getToken(TSqlParser.VALID_XML, 0); }
		public TerminalNode VALIDATION() { return getToken(TSqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(TSqlParser.VALUE, 0); }
		public TerminalNode VAR() { return getToken(TSqlParser.VAR, 0); }
		public TerminalNode VARP() { return getToken(TSqlParser.VARP, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(TSqlParser.VIEW_METADATA, 0); }
		public TerminalNode VIEWS() { return getToken(TSqlParser.VIEWS, 0); }
		public TerminalNode WAIT() { return getToken(TSqlParser.WAIT, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSqlParser.WELL_FORMED_XML, 0); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER() { return getToken(TSqlParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public TerminalNode WORK() { return getToken(TSqlParser.WORK, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSqlParser.WORKLOAD, 0); }
		public TerminalNode XML() { return getToken(TSqlParser.XML, 0); }
		public TerminalNode XMLDATA() { return getToken(TSqlParser.XMLDATA, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(TSqlParser.XMLSCHEMA, 0); }
		public TerminalNode XSINIL() { return getToken(TSqlParser.XSINIL, 0); }
		public TerminalNode ABSENT() { return getToken(TSqlParser.ABSENT, 0); }
		public TerminalNode AES() { return getToken(TSqlParser.AES, 0); }
		public TerminalNode ALLOW_CONNECTIONS() { return getToken(TSqlParser.ALLOW_CONNECTIONS, 0); }
		public TerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public TerminalNode ALLOW_SINGLE_EVENT_LOSS() { return getToken(TSqlParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSqlParser.ANONYMOUS, 0); }
		public TerminalNode APPEND() { return getToken(TSqlParser.APPEND, 0); }
		public TerminalNode APPLICATION() { return getToken(TSqlParser.APPLICATION, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSqlParser.ASYMMETRIC, 0); }
		public TerminalNode ASYNCHRONOUS_COMMIT() { return getToken(TSqlParser.ASYNCHRONOUS_COMMIT, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(TSqlParser.AUTHENTICATION, 0); }
		public TerminalNode AUTOMATED_BACKUP_PREFERENCE() { return getToken(TSqlParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public TerminalNode AUTOMATIC() { return getToken(TSqlParser.AUTOMATIC, 0); }
		public TerminalNode AVAILABILITY_MODE() { return getToken(TSqlParser.AVAILABILITY_MODE, 0); }
		public TerminalNode BEFORE() { return getToken(TSqlParser.BEFORE, 0); }
		public TerminalNode BLOCK() { return getToken(TSqlParser.BLOCK, 0); }
		public TerminalNode BLOCKSIZE() { return getToken(TSqlParser.BLOCKSIZE, 0); }
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(TSqlParser.BLOCKING_HIERARCHY, 0); }
		public TerminalNode BUFFER() { return getToken(TSqlParser.BUFFER, 0); }
		public TerminalNode BUFFERCOUNT() { return getToken(TSqlParser.BUFFERCOUNT, 0); }
		public TerminalNode CACHE() { return getToken(TSqlParser.CACHE, 0); }
		public TerminalNode CALLED() { return getToken(TSqlParser.CALLED, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSqlParser.CERTIFICATE, 0); }
		public TerminalNode CHANGETABLE() { return getToken(TSqlParser.CHANGETABLE, 0); }
		public TerminalNode CHANGES() { return getToken(TSqlParser.CHANGES, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSqlParser.CHECK_POLICY, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSqlParser.CHECK_EXPIRATION, 0); }
		public TerminalNode CLASSIFIER_FUNCTION() { return getToken(TSqlParser.CLASSIFIER_FUNCTION, 0); }
		public TerminalNode CLUSTER() { return getToken(TSqlParser.CLUSTER, 0); }
		public TerminalNode COMPRESSION() { return getToken(TSqlParser.COMPRESSION, 0); }
		public TerminalNode CONFIGURATION() { return getToken(TSqlParser.CONFIGURATION, 0); }
		public TerminalNode CONTAINMENT() { return getToken(TSqlParser.CONTAINMENT, 0); }
		public TerminalNode CONTEXT() { return getToken(TSqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE_AFTER_ERROR() { return getToken(TSqlParser.CONTINUE_AFTER_ERROR, 0); }
		public TerminalNode CONTRACT() { return getToken(TSqlParser.CONTRACT, 0); }
		public TerminalNode CONTRACT_NAME() { return getToken(TSqlParser.CONTRACT_NAME, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSqlParser.CONVERSATION, 0); }
		public TerminalNode COPY_ONLY() { return getToken(TSqlParser.COPY_ONLY, 0); }
		public TerminalNode CUME_DIST() { return getToken(TSqlParser.CUME_DIST, 0); }
		public TerminalNode CYCLE() { return getToken(TSqlParser.CYCLE, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(TSqlParser.DATA_COMPRESSION, 0); }
		public TerminalNode DATA_SOURCE() { return getToken(TSqlParser.DATA_SOURCE, 0); }
		public TerminalNode DATABASE_MIRRORING() { return getToken(TSqlParser.DATABASE_MIRRORING, 0); }
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSqlParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSqlParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(TSqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIFFERENTIAL() { return getToken(TSqlParser.DIFFERENTIAL, 0); }
		public TerminalNode DTC_SUPPORT() { return getToken(TSqlParser.DTC_SUPPORT, 0); }
		public TerminalNode ENABLED() { return getToken(TSqlParser.ENABLED, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSqlParser.ENDPOINT, 0); }
		public TerminalNode ERROR() { return getToken(TSqlParser.ERROR, 0); }
		public TerminalNode EVENT() { return getToken(TSqlParser.EVENT, 0); }
		public TerminalNode EVENTDATA() { return getToken(TSqlParser.EVENTDATA, 0); }
		public TerminalNode EVENT_RETENTION_MODE() { return getToken(TSqlParser.EVENT_RETENTION_MODE, 0); }
		public TerminalNode EXECUTABLE_FILE() { return getToken(TSqlParser.EXECUTABLE_FILE, 0); }
		public TerminalNode EXPIREDATE() { return getToken(TSqlParser.EXPIREDATE, 0); }
		public TerminalNode EXTENSION() { return getToken(TSqlParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSqlParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode FAILOVER() { return getToken(TSqlParser.FAILOVER, 0); }
		public TerminalNode FAILURECONDITIONLEVEL() { return getToken(TSqlParser.FAILURECONDITIONLEVEL, 0); }
		public TerminalNode FAN_IN() { return getToken(TSqlParser.FAN_IN, 0); }
		public TerminalNode FILE_SNAPSHOT() { return getToken(TSqlParser.FILE_SNAPSHOT, 0); }
		public TerminalNode FILENAME() { return getToken(TSqlParser.FILENAME, 0); }
		public TerminalNode FORCESEEK() { return getToken(TSqlParser.FORCESEEK, 0); }
		public TerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return getToken(TSqlParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public TerminalNode GET() { return getToken(TSqlParser.GET, 0); }
		public TerminalNode GOVERNOR() { return getToken(TSqlParser.GOVERNOR, 0); }
		public TerminalNode HASHED() { return getToken(TSqlParser.HASHED, 0); }
		public TerminalNode HEALTHCHECKTIMEOUT() { return getToken(TSqlParser.HEALTHCHECKTIMEOUT, 0); }
		public TerminalNode IIF() { return getToken(TSqlParser.IIF, 0); }
		public TerminalNode IO() { return getToken(TSqlParser.IO, 0); }
		public TerminalNode INCLUDE() { return getToken(TSqlParser.INCLUDE, 0); }
		public TerminalNode INCREMENT() { return getToken(TSqlParser.INCREMENT, 0); }
		public TerminalNode INFINITE() { return getToken(TSqlParser.INFINITE, 0); }
		public TerminalNode INIT() { return getToken(TSqlParser.INIT, 0); }
		public TerminalNode INSTEAD() { return getToken(TSqlParser.INSTEAD, 0); }
		public TerminalNode ISNULL() { return getToken(TSqlParser.ISNULL, 0); }
		public TerminalNode KERBEROS() { return getToken(TSqlParser.KERBEROS, 0); }
		public TerminalNode KEY_PATH() { return getToken(TSqlParser.KEY_PATH, 0); }
		public TerminalNode KEY_STORE_PROVIDER_NAME() { return getToken(TSqlParser.KEY_STORE_PROVIDER_NAME, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSqlParser.LANGUAGE, 0); }
		public TerminalNode LIBRARY() { return getToken(TSqlParser.LIBRARY, 0); }
		public TerminalNode LIFETIME() { return getToken(TSqlParser.LIFETIME, 0); }
		public TerminalNode LINUX() { return getToken(TSqlParser.LINUX, 0); }
		public TerminalNode LISTENER_IP() { return getToken(TSqlParser.LISTENER_IP, 0); }
		public TerminalNode LISTENER_PORT() { return getToken(TSqlParser.LISTENER_PORT, 0); }
		public TerminalNode LOCAL_SERVICE_NAME() { return getToken(TSqlParser.LOCAL_SERVICE_NAME, 0); }
		public TerminalNode LOG() { return getToken(TSqlParser.LOG, 0); }
		public TerminalNode MATCHED() { return getToken(TSqlParser.MATCHED, 0); }
		public TerminalNode MASTER() { return getToken(TSqlParser.MASTER, 0); }
		public TerminalNode MAX_MEMORY() { return getToken(TSqlParser.MAX_MEMORY, 0); }
		public TerminalNode MAXTRANSFER() { return getToken(TSqlParser.MAXTRANSFER, 0); }
		public TerminalNode MAXVALUE() { return getToken(TSqlParser.MAXVALUE, 0); }
		public TerminalNode MAX_DISPATCH_LATENCY() { return getToken(TSqlParser.MAX_DISPATCH_LATENCY, 0); }
		public TerminalNode MAX_EVENT_SIZE() { return getToken(TSqlParser.MAX_EVENT_SIZE, 0); }
		public TerminalNode MAX_SIZE() { return getToken(TSqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return getToken(TSqlParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public TerminalNode MEDIADESCRIPTION() { return getToken(TSqlParser.MEDIADESCRIPTION, 0); }
		public TerminalNode MEDIANAME() { return getToken(TSqlParser.MEDIANAME, 0); }
		public TerminalNode MEMBER() { return getToken(TSqlParser.MEMBER, 0); }
		public TerminalNode MEMORY_PARTITION_MODE() { return getToken(TSqlParser.MEMORY_PARTITION_MODE, 0); }
		public TerminalNode MESSAGE_FORWARDING() { return getToken(TSqlParser.MESSAGE_FORWARDING, 0); }
		public TerminalNode MESSAGE_FORWARD_SIZE() { return getToken(TSqlParser.MESSAGE_FORWARD_SIZE, 0); }
		public TerminalNode MINVALUE() { return getToken(TSqlParser.MINVALUE, 0); }
		public TerminalNode MIRROR() { return getToken(TSqlParser.MIRROR, 0); }
		public TerminalNode MUST_CHANGE() { return getToken(TSqlParser.MUST_CHANGE, 0); }
		public TerminalNode NOFORMAT() { return getToken(TSqlParser.NOFORMAT, 0); }
		public TerminalNode NOINIT() { return getToken(TSqlParser.NOINIT, 0); }
		public TerminalNode NONE() { return getToken(TSqlParser.NONE, 0); }
		public TerminalNode NOREWIND() { return getToken(TSqlParser.NOREWIND, 0); }
		public TerminalNode NOSKIP() { return getToken(TSqlParser.NOSKIP, 0); }
		public TerminalNode NOUNLOAD() { return getToken(TSqlParser.NOUNLOAD, 0); }
		public TerminalNode NO_CHECKSUM() { return getToken(TSqlParser.NO_CHECKSUM, 0); }
		public TerminalNode NO_COMPRESSION() { return getToken(TSqlParser.NO_COMPRESSION, 0); }
		public TerminalNode NO_EVENT_LOSS() { return getToken(TSqlParser.NO_EVENT_LOSS, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSqlParser.NOTIFICATION, 0); }
		public TerminalNode NTLM() { return getToken(TSqlParser.NTLM, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ON_FAILURE() { return getToken(TSqlParser.ON_FAILURE, 0); }
		public TerminalNode PAGE() { return getToken(TSqlParser.PAGE, 0); }
		public TerminalNode PARAM_NODE() { return getToken(TSqlParser.PARAM_NODE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSqlParser.PARTIAL, 0); }
		public TerminalNode PASSWORD() { return getToken(TSqlParser.PASSWORD, 0); }
		public TerminalNode PERMISSION_SET() { return getToken(TSqlParser.PERMISSION_SET, 0); }
		public TerminalNode PER_CPU() { return getToken(TSqlParser.PER_CPU, 0); }
		public TerminalNode PER_DB() { return getToken(TSqlParser.PER_DB, 0); }
		public TerminalNode PER_NODE() { return getToken(TSqlParser.PER_NODE, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(TSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(TSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(TSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERSISTED() { return getToken(TSqlParser.PERSISTED, 0); }
		public TerminalNode PLATFORM() { return getToken(TSqlParser.PLATFORM, 0); }
		public TerminalNode POLICY() { return getToken(TSqlParser.POLICY, 0); }
		public TerminalNode PREDICATE() { return getToken(TSqlParser.PREDICATE, 0); }
		public TerminalNode PROCESS() { return getToken(TSqlParser.PROCESS, 0); }
		public TerminalNode PROFILE() { return getToken(TSqlParser.PROFILE, 0); }
		public TerminalNode PYTHON() { return getToken(TSqlParser.PYTHON, 0); }
		public TerminalNode R() { return getToken(TSqlParser.R, 0); }
		public TerminalNode READ_WRITE_FILEGROUPS() { return getToken(TSqlParser.READ_WRITE_FILEGROUPS, 0); }
		public TerminalNode REGENERATE() { return getToken(TSqlParser.REGENERATE, 0); }
		public TerminalNode RELATED_CONVERSATION() { return getToken(TSqlParser.RELATED_CONVERSATION, 0); }
		public TerminalNode RELATED_CONVERSATION_GROUP() { return getToken(TSqlParser.RELATED_CONVERSATION_GROUP, 0); }
		public TerminalNode REQUIRED() { return getToken(TSqlParser.REQUIRED, 0); }
		public TerminalNode RESET() { return getToken(TSqlParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(TSqlParser.RESTART, 0); }
		public TerminalNode RESUME() { return getToken(TSqlParser.RESUME, 0); }
		public TerminalNode RETAINDAYS() { return getToken(TSqlParser.RETAINDAYS, 0); }
		public TerminalNode RETURNS() { return getToken(TSqlParser.RETURNS, 0); }
		public TerminalNode REWIND() { return getToken(TSqlParser.REWIND, 0); }
		public TerminalNode ROLE() { return getToken(TSqlParser.ROLE, 0); }
		public TerminalNode RSA_512() { return getToken(TSqlParser.RSA_512, 0); }
		public TerminalNode RSA_1024() { return getToken(TSqlParser.RSA_1024, 0); }
		public TerminalNode RSA_2048() { return getToken(TSqlParser.RSA_2048, 0); }
		public TerminalNode RSA_3072() { return getToken(TSqlParser.RSA_3072, 0); }
		public TerminalNode RSA_4096() { return getToken(TSqlParser.RSA_4096, 0); }
		public TerminalNode SAFETY() { return getToken(TSqlParser.SAFETY, 0); }
		public TerminalNode SAFE() { return getToken(TSqlParser.SAFE, 0); }
		public TerminalNode SCHEDULER() { return getToken(TSqlParser.SCHEDULER, 0); }
		public TerminalNode SCHEME() { return getToken(TSqlParser.SCHEME, 0); }
		public TerminalNode SERVER() { return getToken(TSqlParser.SERVER, 0); }
		public TerminalNode SERVICE() { return getToken(TSqlParser.SERVICE, 0); }
		public TerminalNode SERVICE_BROKER() { return getToken(TSqlParser.SERVICE_BROKER, 0); }
		public TerminalNode SERVICE_NAME() { return getToken(TSqlParser.SERVICE_NAME, 0); }
		public TerminalNode SESSION() { return getToken(TSqlParser.SESSION, 0); }
		public TerminalNode SID() { return getToken(TSqlParser.SID, 0); }
		public TerminalNode SKIP_KEYWORD() { return getToken(TSqlParser.SKIP_KEYWORD, 0); }
		public TerminalNode SOFTNUMA() { return getToken(TSqlParser.SOFTNUMA, 0); }
		public TerminalNode SOURCE() { return getToken(TSqlParser.SOURCE, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSqlParser.SPECIFICATION, 0); }
		public TerminalNode SPLIT() { return getToken(TSqlParser.SPLIT, 0); }
		public TerminalNode SQLDUMPERFLAGS() { return getToken(TSqlParser.SQLDUMPERFLAGS, 0); }
		public TerminalNode SQLDUMPERPATH() { return getToken(TSqlParser.SQLDUMPERPATH, 0); }
		public TerminalNode SQLDUMPERTIMEOUT() { return getToken(TSqlParser.SQLDUMPERTIMEOUT, 0); }
		public TerminalNode STATE() { return getToken(TSqlParser.STATE, 0); }
		public TerminalNode STATS() { return getToken(TSqlParser.STATS, 0); }
		public TerminalNode START() { return getToken(TSqlParser.START, 0); }
		public TerminalNode STARTED() { return getToken(TSqlParser.STARTED, 0); }
		public TerminalNode STARTUP_STATE() { return getToken(TSqlParser.STARTUP_STATE, 0); }
		public TerminalNode STOP() { return getToken(TSqlParser.STOP, 0); }
		public TerminalNode STOPPED() { return getToken(TSqlParser.STOPPED, 0); }
		public TerminalNode STOP_ON_ERROR() { return getToken(TSqlParser.STOP_ON_ERROR, 0); }
		public TerminalNode SUPPORTED() { return getToken(TSqlParser.SUPPORTED, 0); }
		public TerminalNode TAPE() { return getToken(TSqlParser.TAPE, 0); }
		public TerminalNode TARGET() { return getToken(TSqlParser.TARGET, 0); }
		public TerminalNode TCP() { return getToken(TSqlParser.TCP, 0); }
		public TerminalNode TRACK_CAUSALITY() { return getToken(TSqlParser.TRACK_CAUSALITY, 0); }
		public TerminalNode TRANSFER() { return getToken(TSqlParser.TRANSFER, 0); }
		public TerminalNode TRY_CAST() { return getToken(TSqlParser.TRY_CAST, 0); }
		public TerminalNode UNCHECKED() { return getToken(TSqlParser.UNCHECKED, 0); }
		public TerminalNode UNLOCK() { return getToken(TSqlParser.UNLOCK, 0); }
		public TerminalNode UNSAFE() { return getToken(TSqlParser.UNSAFE, 0); }
		public TerminalNode URL() { return getToken(TSqlParser.URL, 0); }
		public TerminalNode USED() { return getToken(TSqlParser.USED, 0); }
		public TerminalNode VERBOSELOGGING() { return getToken(TSqlParser.VERBOSELOGGING, 0); }
		public TerminalNode VISIBILITY() { return getToken(TSqlParser.VISIBILITY, 0); }
		public TerminalNode WINDOWS() { return getToken(TSqlParser.WINDOWS, 0); }
		public TerminalNode WITHOUT() { return getToken(TSqlParser.WITHOUT, 0); }
		public TerminalNode WITNESS() { return getToken(TSqlParser.WITNESS, 0); }
		public TerminalNode ZONE() { return getToken(TSqlParser.ZONE, 0); }
		public TerminalNode VARCHAR() { return getToken(TSqlParser.VARCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(TSqlParser.NVARCHAR, 0); }
		public TerminalNode BINARY_KEYWORD() { return getToken(TSqlParser.BINARY_KEYWORD, 0); }
		public TerminalNode VARBINARY_KEYWORD() { return getToken(TSqlParser.VARBINARY_KEYWORD, 0); }
		public TerminalNode PRECISION() { return getToken(TSqlParser.PRECISION, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyword; }
	}

	public final KeywordContext keyword() throws RecognitionException {
		KeywordContext _localctx = new KeywordContext(_ctx, getState());
		enterRule(_localctx, 1036, RULE_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11306);
			_la = _input.LA(1);
			if ( !(_la==OPENJSON || _la==PRECISION || ((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (ABSOLUTE - 190)) | (1L << (AT_KEYWORD - 190)) | (1L << (ACCENT_SENSITIVITY - 190)) | (1L << (ACTION - 190)) | (1L << (ACTIVATION - 190)) | (1L << (ACTIVE - 190)) | (1L << (ADDRESS - 190)) | (1L << (AES_128 - 190)) | (1L << (AES_192 - 190)) | (1L << (AES_256 - 190)) | (1L << (AFFINITY - 190)) | (1L << (AFTER - 190)) | (1L << (AGGREGATE - 190)) | (1L << (ALGORITHM - 190)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 190)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 190)) | (1L << (ALLOWED - 190)) | (1L << (ANSI_NULL_DEFAULT - 190)) | (1L << (ANSI_NULLS - 190)) | (1L << (ANSI_PADDING - 190)) | (1L << (ANSI_WARNINGS - 190)) | (1L << (APPLICATION_LOG - 190)) | (1L << (APPLY - 190)) | (1L << (ARITHABORT - 190)) | (1L << (ASSEMBLY - 190)) | (1L << (AUDIT - 190)) | (1L << (AUDIT_GUID - 190)) | (1L << (AUTO - 190)) | (1L << (AUTO_CLEANUP - 190)) | (1L << (AUTO_CLOSE - 190)) | (1L << (AUTO_CREATE_STATISTICS - 190)) | (1L << (AUTO_SHRINK - 190)) | (1L << (AUTO_UPDATE_STATISTICS - 190)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 190)) | (1L << (AVAILABILITY - 190)) | (1L << (AVG - 190)) | (1L << (BACKUP_PRIORITY - 190)) | (1L << (BEGIN_DIALOG - 190)) | (1L << (BIGINT - 190)) | (1L << (BINARY_KEYWORD - 190)) | (1L << (BINARY_BASE64 - 190)) | (1L << (BINARY_CHECKSUM - 190)) | (1L << (BINDING - 190)) | (1L << (BLOB_STORAGE - 190)) | (1L << (BROKER - 190)) | (1L << (BROKER_INSTANCE - 190)) | (1L << (BULK_LOGGED - 190)) | (1L << (CALLER - 190)) | (1L << (CAP_CPU_PERCENT - 190)) | (1L << (CAST - 190)) | (1L << (TRY_CAST - 190)) | (1L << (CATALOG - 190)) | (1L << (CATCH - 190)) | (1L << (CHANGE_RETENTION - 190)) | (1L << (CHANGE_TRACKING - 190)) | (1L << (CHECKSUM - 190)) | (1L << (CHECKSUM_AGG - 190)) | (1L << (CLEANUP - 190)) | (1L << (COLLECTION - 190)) | (1L << (COLUMN_MASTER_KEY - 190)) | (1L << (COMMITTED - 190)) | (1L << (COMPATIBILITY_LEVEL - 190)) | (1L << (CONCAT - 190)) | (1L << (CONCAT_NULL_YIELDS_NULL - 190)))) != 0) || ((((_la - 254)) & ~0x3f) == 0 && ((1L << (_la - 254)) & ((1L << (CONTENT - 254)) | (1L << (CONTROL - 254)) | (1L << (COOKIE - 254)) | (1L << (COUNT - 254)) | (1L << (COUNT_BIG - 254)) | (1L << (COUNTER - 254)) | (1L << (CPU - 254)) | (1L << (CREATE_NEW - 254)) | (1L << (CREATION_DISPOSITION - 254)) | (1L << (CREDENTIAL - 254)) | (1L << (CRYPTOGRAPHIC - 254)) | (1L << (CUME_DIST - 254)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 254)) | (1L << (CURSOR_DEFAULT - 254)) | (1L << (DATA - 254)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 254)) | (1L << (DATEADD - 254)) | (1L << (DATEDIFF - 254)) | (1L << (DATENAME - 254)) | (1L << (DATEPART - 254)) | (1L << (DAYS - 254)) | (1L << (DB_CHAINING - 254)) | (1L << (DB_FAILOVER - 254)) | (1L << (DECRYPTION - 254)) | (1L << (DEFAULT_DOUBLE_QUOTE - 254)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 254)) | (1L << (DEFAULT_LANGUAGE - 254)) | (1L << (DELAY - 254)) | (1L << (DELAYED_DURABILITY - 254)) | (1L << (DELETED - 254)) | (1L << (DENSE_RANK - 254)) | (1L << (DEPENDENTS - 254)) | (1L << (DES - 254)) | (1L << (DESCRIPTION - 254)) | (1L << (DESX - 254)) | (1L << (DHCP - 254)) | (1L << (DIALOG - 254)) | (1L << (DIRECTORY_NAME - 254)) | (1L << (DISABLE - 254)) | (1L << (DISABLE_BROKER - 254)) | (1L << (DISABLED - 254)) | (1L << (DISK_DRIVE - 254)) | (1L << (DOCUMENT - 254)) | (1L << (DYNAMIC - 254)) | (1L << (ELEMENTS - 254)) | (1L << (EMERGENCY - 254)) | (1L << (EMPTY - 254)) | (1L << (ENABLE - 254)) | (1L << (ENABLE_BROKER - 254)) | (1L << (ENCRYPTED_VALUE - 254)) | (1L << (ENCRYPTION - 254)) | (1L << (ENDPOINT_URL - 254)) | (1L << (ERROR_BROKER_CONVERSATIONS - 254)) | (1L << (EXCLUSIVE - 254)) | (1L << (EXECUTABLE - 254)) | (1L << (EXIST - 254)) | (1L << (EXPAND - 254)) | (1L << (EXPIRY_DATE - 254)) | (1L << (EXPLICIT - 254)) | (1L << (FAIL_OPERATION - 254)) | (1L << (FAILOVER_MODE - 254)) | (1L << (FAILURE - 254)) | (1L << (FAILURE_CONDITION_LEVEL - 254)) | (1L << (FAST - 254)))) != 0) || ((((_la - 318)) & ~0x3f) == 0 && ((1L << (_la - 318)) & ((1L << (FAST_FORWARD - 318)) | (1L << (FILEGROUP - 318)) | (1L << (FILEGROWTH - 318)) | (1L << (FILENAME - 318)) | (1L << (FILEPATH - 318)) | (1L << (FILESTREAM - 318)) | (1L << (FILTER - 318)) | (1L << (FIRST - 318)) | (1L << (FIRST_VALUE - 318)) | (1L << (FOLLOWING - 318)) | (1L << (FORCE - 318)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 318)) | (1L << (FORCED - 318)) | (1L << (FORMAT - 318)) | (1L << (FORWARD_ONLY - 318)) | (1L << (FULLSCAN - 318)) | (1L << (FULLTEXT - 318)) | (1L << (GB - 318)) | (1L << (GETDATE - 318)) | (1L << (GETUTCDATE - 318)) | (1L << (GLOBAL - 318)) | (1L << (GO_BATCH - 318)) | (1L << (GO - 318)) | (1L << (GROUP_MAX_REQUESTS - 318)) | (1L << (GROUPING - 318)) | (1L << (GROUPING_ID - 318)) | (1L << (HADR - 318)) | (1L << (HASH - 318)) | (1L << (HEALTH_CHECK_TIMEOUT - 318)) | (1L << (HIGH - 318)) | (1L << (HONOR_BROKER_PRIORITY - 318)) | (1L << (HOURS - 318)) | (1L << (IDENTITY_VALUE - 318)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 318)) | (1L << (IMMEDIATE - 318)) | (1L << (IMPERSONATE - 318)) | (1L << (IMPORTANCE - 318)) | (1L << (INCLUDE_NULL_VALUES - 318)) | (1L << (INCREMENTAL - 318)) | (1L << (INITIATOR - 318)) | (1L << (INPUT - 318)) | (1L << (INSENSITIVE - 318)) | (1L << (INSERTED - 318)) | (1L << (INT - 318)) | (1L << (IP - 318)) | (1L << (ISOLATION - 318)) | (1L << (JOB - 318)) | (1L << (JSON - 318)) | (1L << (KB - 318)) | (1L << (KEEP - 318)) | (1L << (KEEPFIXED - 318)) | (1L << (KEY_SOURCE - 318)) | (1L << (KEYS - 318)) | (1L << (KEYSET - 318)) | (1L << (LAG - 318)) | (1L << (LAST - 318)) | (1L << (LAST_VALUE - 318)) | (1L << (LEAD - 318)) | (1L << (LEVEL - 318)) | (1L << (LIST - 318)) | (1L << (LISTENER - 318)) | (1L << (LISTENER_URL - 318)) | (1L << (LOB_COMPACTION - 318)) | (1L << (LOCAL - 318)))) != 0) || ((((_la - 382)) & ~0x3f) == 0 && ((1L << (_la - 382)) & ((1L << (LOCATION - 382)) | (1L << (LOCK - 382)) | (1L << (LOCK_ESCALATION - 382)) | (1L << (LOGIN - 382)) | (1L << (LOOP - 382)) | (1L << (LOW - 382)) | (1L << (MANUAL - 382)) | (1L << (MARK - 382)) | (1L << (MATERIALIZED - 382)) | (1L << (MAX - 382)) | (1L << (MAX_CPU_PERCENT - 382)) | (1L << (MAX_DOP - 382)) | (1L << (MAX_FILES - 382)) | (1L << (MAX_IOPS_PER_VOLUME - 382)) | (1L << (MAX_MEMORY_PERCENT - 382)) | (1L << (MAX_PROCESSES - 382)) | (1L << (MAX_QUEUE_READERS - 382)) | (1L << (MAX_ROLLOVER_FILES - 382)) | (1L << (MAXDOP - 382)) | (1L << (MAXRECURSION - 382)) | (1L << (MAXSIZE - 382)) | (1L << (MB - 382)) | (1L << (MEDIUM - 382)) | (1L << (MEMORY_OPTIMIZED_DATA - 382)) | (1L << (MESSAGE - 382)) | (1L << (MIN - 382)) | (1L << (MIN_ACTIVE_ROWVERSION - 382)) | (1L << (MIN_CPU_PERCENT - 382)) | (1L << (MIN_IOPS_PER_VOLUME - 382)) | (1L << (MIN_MEMORY_PERCENT - 382)) | (1L << (MINUTES - 382)) | (1L << (MIRROR_ADDRESS - 382)) | (1L << (MIXED_PAGE_ALLOCATION - 382)) | (1L << (MODE - 382)) | (1L << (MODIFY - 382)) | (1L << (MOVE - 382)) | (1L << (MULTI_USER - 382)) | (1L << (NAME - 382)) | (1L << (NESTED_TRIGGERS - 382)) | (1L << (NEW_ACCOUNT - 382)) | (1L << (NEW_BROKER - 382)) | (1L << (NEW_PASSWORD - 382)) | (1L << (NEXT - 382)) | (1L << (NO - 382)) | (1L << (NO_TRUNCATE - 382)) | (1L << (NO_WAIT - 382)) | (1L << (NOCOUNT - 382)) | (1L << (NODES - 382)) | (1L << (NOEXPAND - 382)) | (1L << (NON_TRANSACTED_ACCESS - 382)) | (1L << (NORECOMPUTE - 382)) | (1L << (NORECOVERY - 382)) | (1L << (NOWAIT - 382)) | (1L << (NTILE - 382)) | (1L << (NUMANODE - 382)) | (1L << (NUMBER - 382)) | (1L << (NUMERIC_ROUNDABORT - 382)) | (1L << (OBJECT - 382)) | (1L << (OFFLINE - 382)) | (1L << (OFFSET - 382)) | (1L << (OLD_ACCOUNT - 382)) | (1L << (ONLINE - 382)) | (1L << (ONLY - 382)) | (1L << (OPEN_EXISTING - 382)))) != 0) || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (OPTIMISTIC - 446)) | (1L << (OPTIMIZE - 446)) | (1L << (OUT - 446)) | (1L << (OUTPUT - 446)) | (1L << (OVERRIDE - 446)) | (1L << (OWNER - 446)) | (1L << (PAGE_VERIFY - 446)) | (1L << (PARAMETERIZATION - 446)) | (1L << (PARTITION - 446)) | (1L << (PARTITIONS - 446)) | (1L << (PARTNER - 446)) | (1L << (PATH - 446)) | (1L << (PERCENT_RANK - 446)) | (1L << (PERCENTILE_CONT - 446)) | (1L << (PERCENTILE_DISC - 446)) | (1L << (POISON_MESSAGE_HANDLING - 446)) | (1L << (POOL - 446)) | (1L << (PORT - 446)) | (1L << (PRECEDING - 446)) | (1L << (PRIMARY_ROLE - 446)) | (1L << (PRIOR - 446)) | (1L << (PRIORITY - 446)) | (1L << (PRIORITY_LEVEL - 446)) | (1L << (PRIVATE - 446)) | (1L << (PRIVATE_KEY - 446)) | (1L << (PRIVILEGES - 446)) | (1L << (PROCEDURE_NAME - 446)) | (1L << (PROPERTY - 446)) | (1L << (PROVIDER - 446)) | (1L << (PROVIDER_KEY_NAME - 446)) | (1L << (QUERY - 446)) | (1L << (QUEUE - 446)) | (1L << (QUEUE_DELAY - 446)) | (1L << (QUOTED_IDENTIFIER - 446)) | (1L << (RANGE - 446)) | (1L << (RANK - 446)) | (1L << (RC2 - 446)) | (1L << (RC4 - 446)) | (1L << (RC4_128 - 446)) | (1L << (READ_COMMITTED_SNAPSHOT - 446)) | (1L << (READ_ONLY - 446)) | (1L << (READ_ONLY_ROUTING_LIST - 446)) | (1L << (READ_WRITE - 446)) | (1L << (READONLY - 446)) | (1L << (REBUILD - 446)) | (1L << (RECEIVE - 446)) | (1L << (RECOMPILE - 446)) | (1L << (RECOVERY - 446)) | (1L << (RECURSIVE_TRIGGERS - 446)) | (1L << (RELATIVE - 446)) | (1L << (REMOTE - 446)) | (1L << (REMOTE_SERVICE_NAME - 446)) | (1L << (REMOVE - 446)) | (1L << (REORGANIZE - 446)) | (1L << (REPEATABLE - 446)) | (1L << (REPLICA - 446)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 446)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 446)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 446)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 446)) | (1L << (RESERVE_DISK_SPACE - 446)) | (1L << (RESOURCE - 446)) | (1L << (RESOURCE_MANAGER_LOCATION - 446)) | (1L << (RESTRICTED_USER - 446)))) != 0) || ((((_la - 510)) & ~0x3f) == 0 && ((1L << (_la - 510)) & ((1L << (RETENTION - 510)) | (1L << (ROBUST - 510)) | (1L << (ROOT - 510)) | (1L << (ROUTE - 510)) | (1L << (ROW - 510)) | (1L << (ROW_NUMBER - 510)) | (1L << (ROWGUID - 510)) | (1L << (ROWS - 510)) | (1L << (SAMPLE - 510)) | (1L << (SCHEMABINDING - 510)) | (1L << (SCOPED - 510)) | (1L << (SCROLL - 510)) | (1L << (SCROLL_LOCKS - 510)) | (1L << (SEARCH - 510)) | (1L << (SECONDARY - 510)) | (1L << (SECONDARY_ONLY - 510)) | (1L << (SECONDARY_ROLE - 510)) | (1L << (SECONDS - 510)) | (1L << (SECRET - 510)) | (1L << (SECURITY - 510)) | (1L << (SECURITY_LOG - 510)) | (1L << (SEEDING_MODE - 510)) | (1L << (SELF - 510)) | (1L << (SEMI_SENSITIVE - 510)) | (1L << (SEND - 510)) | (1L << (SENT - 510)) | (1L << (SEQUENCE - 510)) | (1L << (SERIALIZABLE - 510)) | (1L << (SESSION_TIMEOUT - 510)) | (1L << (SETERROR - 510)) | (1L << (SHARE - 510)) | (1L << (SHOWPLAN - 510)) | (1L << (SIGNATURE - 510)) | (1L << (SIMPLE - 510)) | (1L << (SINGLE_USER - 510)) | (1L << (SIZE - 510)) | (1L << (SMALLINT - 510)) | (1L << (SNAPSHOT - 510)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 510)) | (1L << (STANDBY - 510)) | (1L << (START_DATE - 510)) | (1L << (STATIC - 510)) | (1L << (STATS_STREAM - 510)) | (1L << (STATUS - 510)) | (1L << (STATUSONLY - 510)) | (1L << (STDEV - 510)) | (1L << (STDEVP - 510)) | (1L << (STOPLIST - 510)) | (1L << (STRING_AGG - 510)) | (1L << (STUFF - 510)) | (1L << (SUBJECT - 510)) | (1L << (SUBSCRIPTION - 510)) | (1L << (SUM - 510)) | (1L << (SUSPEND - 510)) | (1L << (SYMMETRIC - 510)) | (1L << (SYNCHRONOUS_COMMIT - 510)) | (1L << (SYNONYM - 510)) | (1L << (SYSTEM - 510)) | (1L << (TAKE - 510)) | (1L << (TARGET_RECOVERY_TIME - 510)) | (1L << (TB - 510)) | (1L << (TEXTIMAGE_ON - 510)) | (1L << (THROW - 510)) | (1L << (TIES - 510)))) != 0) || ((((_la - 574)) & ~0x3f) == 0 && ((1L << (_la - 574)) & ((1L << (TIME - 574)) | (1L << (TIMEOUT - 574)) | (1L << (TIMER - 574)) | (1L << (TINYINT - 574)) | (1L << (TORN_PAGE_DETECTION - 574)) | (1L << (TRANSFORM_NOISE_WORDS - 574)) | (1L << (TRIPLE_DES - 574)) | (1L << (TRIPLE_DES_3KEY - 574)) | (1L << (TRUSTWORTHY - 574)) | (1L << (TRY - 574)) | (1L << (TSQL - 574)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 574)) | (1L << (TYPE - 574)) | (1L << (TYPE_WARNING - 574)) | (1L << (UNBOUNDED - 574)) | (1L << (UNCOMMITTED - 574)) | (1L << (UNKNOWN - 574)) | (1L << (UNLIMITED - 574)) | (1L << (UOW - 574)) | (1L << (USING - 574)) | (1L << (VALID_XML - 574)) | (1L << (VALIDATION - 574)) | (1L << (VALUE - 574)) | (1L << (VAR - 574)) | (1L << (VARBINARY_KEYWORD - 574)) | (1L << (VARP - 574)) | (1L << (VIEW_METADATA - 574)) | (1L << (VIEWS - 574)) | (1L << (WAIT - 574)) | (1L << (WELL_FORMED_XML - 574)) | (1L << (WITHOUT_ARRAY_WRAPPER - 574)) | (1L << (WORK - 574)) | (1L << (WORKLOAD - 574)) | (1L << (XML - 574)) | (1L << (XMLDATA - 574)) | (1L << (XMLNAMESPACES - 574)) | (1L << (XMLSCHEMA - 574)) | (1L << (XSINIL - 574)) | (1L << (ZONE - 574)) | (1L << (ABSENT - 574)) | (1L << (AES - 574)) | (1L << (ALLOW_CONNECTIONS - 574)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 574)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 574)) | (1L << (ANONYMOUS - 574)) | (1L << (APPEND - 574)) | (1L << (APPLICATION - 574)) | (1L << (ASYMMETRIC - 574)) | (1L << (ASYNCHRONOUS_COMMIT - 574)) | (1L << (AUTHENTICATION - 574)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 574)) | (1L << (AUTOMATIC - 574)) | (1L << (AVAILABILITY_MODE - 574)) | (1L << (BEFORE - 574)) | (1L << (BLOCK - 574)) | (1L << (BLOCKSIZE - 574)) | (1L << (BLOCKING_HIERARCHY - 574)) | (1L << (BUFFER - 574)) | (1L << (BUFFERCOUNT - 574)) | (1L << (CACHE - 574)) | (1L << (CALLED - 574)) | (1L << (CERTIFICATE - 574)) | (1L << (CHANGETABLE - 574)))) != 0) || ((((_la - 638)) & ~0x3f) == 0 && ((1L << (_la - 638)) & ((1L << (CHANGES - 638)) | (1L << (CHECK_POLICY - 638)) | (1L << (CHECK_EXPIRATION - 638)) | (1L << (CLASSIFIER_FUNCTION - 638)) | (1L << (CLUSTER - 638)) | (1L << (COMPRESSION - 638)) | (1L << (CONFIGURATION - 638)) | (1L << (CONTAINMENT - 638)) | (1L << (CONTEXT - 638)) | (1L << (CONTINUE_AFTER_ERROR - 638)) | (1L << (CONTRACT - 638)) | (1L << (CONTRACT_NAME - 638)) | (1L << (CONVERSATION - 638)) | (1L << (COPY_ONLY - 638)) | (1L << (CYCLE - 638)) | (1L << (DATA_COMPRESSION - 638)) | (1L << (DATA_SOURCE - 638)) | (1L << (DATABASE_MIRRORING - 638)) | (1L << (DEFAULT_DATABASE - 638)) | (1L << (DEFAULT_SCHEMA - 638)) | (1L << (DIAGNOSTICS - 638)) | (1L << (DIFFERENTIAL - 638)) | (1L << (DTC_SUPPORT - 638)) | (1L << (ENABLED - 638)) | (1L << (ENDPOINT - 638)) | (1L << (ERROR - 638)) | (1L << (EVENT - 638)) | (1L << (EVENTDATA - 638)) | (1L << (EVENT_RETENTION_MODE - 638)) | (1L << (EXECUTABLE_FILE - 638)) | (1L << (EXPIREDATE - 638)) | (1L << (EXTENSION - 638)) | (1L << (EXTERNAL_ACCESS - 638)) | (1L << (FAILOVER - 638)) | (1L << (FAILURECONDITIONLEVEL - 638)) | (1L << (FAN_IN - 638)) | (1L << (FILE_SNAPSHOT - 638)) | (1L << (FORCESEEK - 638)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 638)) | (1L << (GET - 638)) | (1L << (GOVERNOR - 638)) | (1L << (HASHED - 638)) | (1L << (HEALTHCHECKTIMEOUT - 638)) | (1L << (IIF - 638)) | (1L << (IO - 638)) | (1L << (INCLUDE - 638)) | (1L << (INCREMENT - 638)) | (1L << (INFINITE - 638)) | (1L << (INIT - 638)) | (1L << (INSTEAD - 638)) | (1L << (ISNULL - 638)) | (1L << (KERBEROS - 638)) | (1L << (KEY_PATH - 638)) | (1L << (KEY_STORE_PROVIDER_NAME - 638)) | (1L << (LANGUAGE - 638)) | (1L << (LIBRARY - 638)) | (1L << (LIFETIME - 638)) | (1L << (LINUX - 638)) | (1L << (LISTENER_IP - 638)) | (1L << (LISTENER_PORT - 638)) | (1L << (LOCAL_SERVICE_NAME - 638)) | (1L << (LOG - 638)) | (1L << (MATCHED - 638)) | (1L << (MASTER - 638)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (MAX_MEMORY - 702)) | (1L << (MAXTRANSFER - 702)) | (1L << (MAXVALUE - 702)) | (1L << (MAX_DISPATCH_LATENCY - 702)) | (1L << (MAX_EVENT_SIZE - 702)) | (1L << (MAX_SIZE - 702)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 702)) | (1L << (MEDIADESCRIPTION - 702)) | (1L << (MEDIANAME - 702)) | (1L << (MEMBER - 702)) | (1L << (MEMORY_PARTITION_MODE - 702)) | (1L << (MESSAGE_FORWARDING - 702)) | (1L << (MESSAGE_FORWARD_SIZE - 702)) | (1L << (MINVALUE - 702)) | (1L << (MIRROR - 702)) | (1L << (MUST_CHANGE - 702)) | (1L << (NOFORMAT - 702)) | (1L << (NOINIT - 702)) | (1L << (NONE - 702)) | (1L << (NOREWIND - 702)) | (1L << (NOSKIP - 702)) | (1L << (NOUNLOAD - 702)) | (1L << (NO_CHECKSUM - 702)) | (1L << (NO_COMPRESSION - 702)) | (1L << (NO_EVENT_LOSS - 702)) | (1L << (NOTIFICATION - 702)) | (1L << (NTLM - 702)) | (1L << (OLD_PASSWORD - 702)) | (1L << (ON_FAILURE - 702)) | (1L << (PAGE - 702)) | (1L << (PARAM_NODE - 702)) | (1L << (PARTIAL - 702)) | (1L << (PASSWORD - 702)) | (1L << (PERMISSION_SET - 702)) | (1L << (PER_CPU - 702)) | (1L << (PER_DB - 702)) | (1L << (PER_NODE - 702)) | (1L << (PERSISTED - 702)) | (1L << (PLATFORM - 702)) | (1L << (POLICY - 702)) | (1L << (PREDICATE - 702)) | (1L << (PROCESS - 702)) | (1L << (PROFILE - 702)) | (1L << (PYTHON - 702)) | (1L << (R - 702)) | (1L << (READ_WRITE_FILEGROUPS - 702)) | (1L << (REGENERATE - 702)) | (1L << (RELATED_CONVERSATION - 702)) | (1L << (RELATED_CONVERSATION_GROUP - 702)) | (1L << (REQUIRED - 702)) | (1L << (RESET - 702)) | (1L << (RESTART - 702)) | (1L << (RESUME - 702)) | (1L << (RETAINDAYS - 702)) | (1L << (RETURNS - 702)) | (1L << (REWIND - 702)) | (1L << (ROLE - 702)) | (1L << (RSA_512 - 702)) | (1L << (RSA_1024 - 702)) | (1L << (RSA_2048 - 702)) | (1L << (RSA_3072 - 702)) | (1L << (RSA_4096 - 702)) | (1L << (SAFETY - 702)) | (1L << (SAFE - 702)))) != 0) || ((((_la - 766)) & ~0x3f) == 0 && ((1L << (_la - 766)) & ((1L << (SCHEDULER - 766)) | (1L << (SCHEME - 766)) | (1L << (SERVER - 766)) | (1L << (SERVICE - 766)) | (1L << (SERVICE_BROKER - 766)) | (1L << (SERVICE_NAME - 766)) | (1L << (SESSION - 766)) | (1L << (SID - 766)) | (1L << (SKIP_KEYWORD - 766)) | (1L << (SOFTNUMA - 766)) | (1L << (SOURCE - 766)) | (1L << (SPECIFICATION - 766)) | (1L << (SPLIT - 766)) | (1L << (SQLDUMPERFLAGS - 766)) | (1L << (SQLDUMPERPATH - 766)) | (1L << (SQLDUMPERTIMEOUT - 766)) | (1L << (STATE - 766)) | (1L << (STATS - 766)) | (1L << (START - 766)) | (1L << (STARTED - 766)) | (1L << (STARTUP_STATE - 766)) | (1L << (STOP - 766)) | (1L << (STOPPED - 766)) | (1L << (STOP_ON_ERROR - 766)) | (1L << (SUPPORTED - 766)) | (1L << (TAPE - 766)) | (1L << (TARGET - 766)) | (1L << (TCP - 766)) | (1L << (TRACK_CAUSALITY - 766)) | (1L << (TRANSFER - 766)) | (1L << (UNCHECKED - 766)) | (1L << (UNLOCK - 766)) | (1L << (UNSAFE - 766)) | (1L << (URL - 766)) | (1L << (USED - 766)) | (1L << (VERBOSELOGGING - 766)) | (1L << (VISIBILITY - 766)) | (1L << (WINDOWS - 766)) | (1L << (WITHOUT - 766)) | (1L << (WITNESS - 766)) | (1L << (VARCHAR - 766)) | (1L << (NVARCHAR - 766)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSqlParser.DOUBLE_QUOTE_ID, 0); }
		public TerminalNode SQUARE_BRACKET_ID() { return getToken(TSqlParser.SQUARE_BRACKET_ID, 0); }
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 1038, RULE_id);
		try {
			setState(11312);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(11308);
				match(ID);
				}
				break;
			case DOUBLE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(11309);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(11310);
				match(SQUARE_BRACKET_ID);
				}
				break;
			case OPENJSON:
			case PRECISION:
			case ABSOLUTE:
			case AT_KEYWORD:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPLICATION_LOG:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case AUDIT:
			case AUDIT_GUID:
			case AUTO:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AVAILABILITY:
			case AVG:
			case BACKUP_PRIORITY:
			case BEGIN_DIALOG:
			case BIGINT:
			case BINARY_KEYWORD:
			case BINARY_BASE64:
			case BINARY_CHECKSUM:
			case BINDING:
			case BLOB_STORAGE:
			case BROKER:
			case BROKER_INSTANCE:
			case BULK_LOGGED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case TRY_CAST:
			case CATALOG:
			case CATCH:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHECKSUM:
			case CHECKSUM_AGG:
			case CLEANUP:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case CONCAT:
			case CONCAT_NULL_YIELDS_NULL:
			case CONTENT:
			case CONTROL:
			case COOKIE:
			case COUNT:
			case COUNT_BIG:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CUME_DIST:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case DATA:
			case DATE_CORRELATION_OPTIMIZATION:
			case DATEADD:
			case DATEDIFF:
			case DATENAME:
			case DATEPART:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DOUBLE_QUOTE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DELAY:
			case DELAYED_DURABILITY:
			case DELETED:
			case DENSE_RANK:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIALOG:
			case DIRECTORY_NAME:
			case DISABLE:
			case DISABLE_BROKER:
			case DISABLED:
			case DISK_DRIVE:
			case DOCUMENT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE:
			case ENABLE_BROKER:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ERROR_BROKER_CONVERSATIONS:
			case EXCLUSIVE:
			case EXECUTABLE:
			case EXIST:
			case EXPAND:
			case EXPIRY_DATE:
			case EXPLICIT:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILURE:
			case FAILURE_CONDITION_LEVEL:
			case FAST:
			case FAST_FORWARD:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FIRST_VALUE:
			case FOLLOWING:
			case FORCE:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCED:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GETDATE:
			case GETUTCDATE:
			case GLOBAL:
			case GO_BATCH:
			case GO:
			case GROUP_MAX_REQUESTS:
			case GROUPING:
			case GROUPING_ID:
			case HADR:
			case HASH:
			case HEALTH_CHECK_TIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCREMENTAL:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSERTED:
			case INT:
			case IP:
			case ISOLATION:
			case JOB:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KEY_SOURCE:
			case KEYS:
			case KEYSET:
			case LAG:
			case LAST:
			case LAST_VALUE:
			case LEAD:
			case LEVEL:
			case LIST:
			case LISTENER:
			case LISTENER_URL:
			case LOB_COMPACTION:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCK_ESCALATION:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MATERIALIZED:
			case MAX:
			case MAX_CPU_PERCENT:
			case MAX_DOP:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MB:
			case MEDIUM:
			case MEMORY_OPTIMIZED_DATA:
			case MESSAGE:
			case MIN:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MIRROR_ADDRESS:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case NAME:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEXT:
			case NO:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NOCOUNT:
			case NODES:
			case NOEXPAND:
			case NON_TRANSACTED_ACCESS:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOWAIT:
			case NTILE:
			case NUMANODE:
			case NUMBER:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OVERRIDE:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PATH:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POISON_MESSAGE_HANDLING:
			case POOL:
			case PORT:
			case PRECEDING:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY:
			case PRIORITY_LEVEL:
			case PRIVATE:
			case PRIVATE_KEY:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROPERTY:
			case PROVIDER:
			case PROVIDER_KEY_NAME:
			case QUERY:
			case QUEUE:
			case QUEUE_DELAY:
			case QUOTED_IDENTIFIER:
			case RANGE:
			case RANK:
			case RC2:
			case RC4:
			case RC4_128:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY:
			case READ_ONLY_ROUTING_LIST:
			case READ_WRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case RELATIVE:
			case REMOTE:
			case REMOTE_SERVICE_NAME:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case RESERVE_DISK_SPACE:
			case RESOURCE:
			case RESOURCE_MANAGER_LOCATION:
			case RESTRICTED_USER:
			case RETENTION:
			case ROBUST:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROW_NUMBER:
			case ROWGUID:
			case ROWS:
			case SAMPLE:
			case SCHEMABINDING:
			case SCOPED:
			case SCROLL:
			case SCROLL_LOCKS:
			case SEARCH:
			case SECONDARY:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDS:
			case SECRET:
			case SECURITY:
			case SECURITY_LOG:
			case SEEDING_MODE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SESSION_TIMEOUT:
			case SETERROR:
			case SHARE:
			case SHOWPLAN:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SIZE:
			case SMALLINT:
			case SNAPSHOT:
			case SPATIAL_WINDOW_MAX_CELLS:
			case STANDBY:
			case START_DATE:
			case STATIC:
			case STATS_STREAM:
			case STATUS:
			case STATUSONLY:
			case STDEV:
			case STDEVP:
			case STOPLIST:
			case STRING_AGG:
			case STUFF:
			case SUBJECT:
			case SUBSCRIPTION:
			case SUM:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TARGET_RECOVERY_TIME:
			case TB:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TINYINT:
			case TORN_PAGE_DETECTION:
			case TRANSFORM_NOISE_WORDS:
			case TRIPLE_DES:
			case TRIPLE_DES_3KEY:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE:
			case TYPE_WARNING:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNKNOWN:
			case UNLIMITED:
			case UOW:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VAR:
			case VARBINARY_KEYWORD:
			case VARP:
			case VIEW_METADATA:
			case VIEWS:
			case WAIT:
			case WELL_FORMED_XML:
			case WITHOUT_ARRAY_WRAPPER:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XSINIL:
			case ZONE:
			case ABSENT:
			case AES:
			case ALLOW_CONNECTIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ANONYMOUS:
			case APPEND:
			case APPLICATION:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUTHENTICATION:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case BEFORE:
			case BLOCK:
			case BLOCKSIZE:
			case BLOCKING_HIERARCHY:
			case BUFFER:
			case BUFFERCOUNT:
			case CACHE:
			case CALLED:
			case CERTIFICATE:
			case CHANGETABLE:
			case CHANGES:
			case CHECK_POLICY:
			case CHECK_EXPIRATION:
			case CLASSIFIER_FUNCTION:
			case CLUSTER:
			case COMPRESSION:
			case CONFIGURATION:
			case CONTAINMENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT:
			case CONTRACT_NAME:
			case CONVERSATION:
			case COPY_ONLY:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATABASE_MIRRORING:
			case DEFAULT_DATABASE:
			case DEFAULT_SCHEMA:
			case DIAGNOSTICS:
			case DIFFERENTIAL:
			case DTC_SUPPORT:
			case ENABLED:
			case ENDPOINT:
			case ERROR:
			case EVENT:
			case EVENTDATA:
			case EVENT_RETENTION_MODE:
			case EXECUTABLE_FILE:
			case EXPIREDATE:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAILOVER:
			case FAILURECONDITIONLEVEL:
			case FAN_IN:
			case FILE_SNAPSHOT:
			case FORCESEEK:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case GET:
			case GOVERNOR:
			case HASHED:
			case HEALTHCHECKTIMEOUT:
			case IIF:
			case IO:
			case INCLUDE:
			case INCREMENT:
			case INFINITE:
			case INIT:
			case INSTEAD:
			case ISNULL:
			case KERBEROS:
			case KEY_PATH:
			case KEY_STORE_PROVIDER_NAME:
			case LANGUAGE:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LOCAL_SERVICE_NAME:
			case LOG:
			case MATCHED:
			case MASTER:
			case MAX_MEMORY:
			case MAXTRANSFER:
			case MAXVALUE:
			case MAX_DISPATCH_LATENCY:
			case MAX_EVENT_SIZE:
			case MAX_SIZE:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEMBER:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARDING:
			case MESSAGE_FORWARD_SIZE:
			case MINVALUE:
			case MIRROR:
			case MUST_CHANGE:
			case NOFORMAT:
			case NOINIT:
			case NONE:
			case NOREWIND:
			case NOSKIP:
			case NOUNLOAD:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NOTIFICATION:
			case NTLM:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case PAGE:
			case PARAM_NODE:
			case PARTIAL:
			case PASSWORD:
			case PERMISSION_SET:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERSISTED:
			case PLATFORM:
			case POLICY:
			case PREDICATE:
			case PROCESS:
			case PROFILE:
			case PYTHON:
			case R:
			case READ_WRITE_FILEGROUPS:
			case REGENERATE:
			case RELATED_CONVERSATION:
			case RELATED_CONVERSATION_GROUP:
			case REQUIRED:
			case RESET:
			case RESTART:
			case RESUME:
			case RETAINDAYS:
			case RETURNS:
			case REWIND:
			case ROLE:
			case RSA_512:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case SAFETY:
			case SAFE:
			case SCHEDULER:
			case SCHEME:
			case SERVER:
			case SERVICE:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SESSION:
			case SID:
			case SKIP_KEYWORD:
			case SOFTNUMA:
			case SOURCE:
			case SPECIFICATION:
			case SPLIT:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STATE:
			case STATS:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STOP:
			case STOPPED:
			case STOP_ON_ERROR:
			case SUPPORTED:
			case TAPE:
			case TARGET:
			case TCP:
			case TRACK_CAUSALITY:
			case TRANSFER:
			case UNCHECKED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case VERBOSELOGGING:
			case VISIBILITY:
			case WINDOWS:
			case WITHOUT:
			case WITNESS:
			case VARCHAR:
			case NVARCHAR:
				enterOuterAlt(_localctx, 4);
				{
				setState(11311);
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(TSqlParser.ID, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 1040, RULE_simple_id);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11314);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSqlParser.EQUAL, 0); }
		public TerminalNode GREATER() { return getToken(TSqlParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSqlParser.LESS, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSqlParser.EXCLAMATION, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 1042, RULE_comparison_operator);
		try {
			setState(11331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1596,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(11316);
				match(EQUAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(11317);
				match(GREATER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(11318);
				match(LESS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(11319);
				match(LESS);
				setState(11320);
				match(EQUAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(11321);
				match(GREATER);
				setState(11322);
				match(EQUAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(11323);
				match(LESS);
				setState(11324);
				match(GREATER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(11325);
				match(EXCLAMATION);
				setState(11326);
				match(EQUAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(11327);
				match(EXCLAMATION);
				setState(11328);
				match(GREATER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(11329);
				match(EXCLAMATION);
				setState(11330);
				match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS_ASSIGN() { return getToken(TSqlParser.PLUS_ASSIGN, 0); }
		public TerminalNode MINUS_ASSIGN() { return getToken(TSqlParser.MINUS_ASSIGN, 0); }
		public TerminalNode MULT_ASSIGN() { return getToken(TSqlParser.MULT_ASSIGN, 0); }
		public TerminalNode DIV_ASSIGN() { return getToken(TSqlParser.DIV_ASSIGN, 0); }
		public TerminalNode MOD_ASSIGN() { return getToken(TSqlParser.MOD_ASSIGN, 0); }
		public TerminalNode AND_ASSIGN() { return getToken(TSqlParser.AND_ASSIGN, 0); }
		public TerminalNode XOR_ASSIGN() { return getToken(TSqlParser.XOR_ASSIGN, 0); }
		public TerminalNode OR_ASSIGN() { return getToken(TSqlParser.OR_ASSIGN, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 1044, RULE_assignment_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11333);
			_la = _input.LA(1);
			if ( !(((((_la - 826)) & ~0x3f) == 0 && ((1L << (_la - 826)) & ((1L << (PLUS_ASSIGN - 826)) | (1L << (MINUS_ASSIGN - 826)) | (1L << (MULT_ASSIGN - 826)) | (1L << (DIV_ASSIGN - 826)) | (1L << (MOD_ASSIGN - 826)) | (1L << (AND_ASSIGN - 826)) | (1L << (XOR_ASSIGN - 826)) | (1L << (OR_ASSIGN - 826)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_sizeContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSqlParser.DECIMAL, 0); }
		public TerminalNode KB() { return getToken(TSqlParser.KB, 0); }
		public TerminalNode MB() { return getToken(TSqlParser.MB, 0); }
		public TerminalNode GB() { return getToken(TSqlParser.GB, 0); }
		public TerminalNode TB() { return getToken(TSqlParser.TB, 0); }
		public TerminalNode MODULE() { return getToken(TSqlParser.MODULE, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_size; }
	}

	public final File_sizeContext file_size() throws RecognitionException {
		File_sizeContext _localctx = new File_sizeContext(_ctx, getState());
		enterRule(_localctx, 1046, RULE_file_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(11335);
			match(DECIMAL);
			setState(11337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) {
				{
				setState(11336);
				_la = _input.LA(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 46:
			return assembly_option_sempred((Assembly_optionContext)_localctx, predIndex);
		case 380:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean assembly_option_sempred(Assembly_optionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 4);
		case 2:
			return precpred(_ctx, 3);
		case 3:
			return precpred(_ctx, 10);
		case 4:
			return precpred(_ctx, 9);
		case 5:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 5;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0368\u2c4e\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7\4\u01a8\t\u01a8\4\u01a9\t\u01a9"+
		"\4\u01aa\t\u01aa\4\u01ab\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae"+
		"\t\u01ae\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2\t\u01b2"+
		"\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5\4\u01b6\t\u01b6\4\u01b7"+
		"\t\u01b7\4\u01b8\t\u01b8\4\u01b9\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb"+
		"\4\u01bc\t\u01bc\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0"+
		"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3\4\u01c4\t\u01c4"+
		"\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7\t\u01c7\4\u01c8\t\u01c8\4\u01c9"+
		"\t\u01c9\4\u01ca\t\u01ca\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd"+
		"\4\u01ce\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1\4\u01d2"+
		"\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5\t\u01d5\4\u01d6\t\u01d6"+
		"\4\u01d7\t\u01d7\4\u01d8\t\u01d8\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db"+
		"\t\u01db\4\u01dc\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df"+
		"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3\t\u01e3\4\u01e4"+
		"\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6\4\u01e7\t\u01e7\4\u01e8\t\u01e8"+
		"\4\u01e9\t\u01e9\4\u01ea\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed"+
		"\t\u01ed\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1\t\u01f1"+
		"\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4\4\u01f5\t\u01f5\4\u01f6"+
		"\t\u01f6\4\u01f7\t\u01f7\4\u01f8\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa"+
		"\4\u01fb\t\u01fb\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff"+
		"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202\4\u0203\t\u0203"+
		"\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206\t\u0206\4\u0207\t\u0207\4\u0208"+
		"\t\u0208\4\u0209\t\u0209\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c"+
		"\4\u020d\t\u020d\3\2\7\2\u041c\n\2\f\2\16\2\u041f\13\2\3\2\3\2\3\2\7\2"+
		"\u0424\n\2\f\2\16\2\u0427\13\2\3\2\3\2\5\2\u042b\n\2\3\3\3\3\5\3\u042f"+
		"\n\3\3\3\3\3\6\3\u0433\n\3\r\3\16\3\u0434\5\3\u0437\n\3\3\3\7\3\u043a"+
		"\n\3\f\3\16\3\u043d\13\3\3\3\3\3\7\3\u0441\n\3\f\3\16\3\u0444\13\3\3\3"+
		"\5\3\u0447\n\3\3\4\3\4\3\4\3\4\5\4\u044d\n\4\3\5\3\5\5\5\u0451\n\5\3\5"+
		"\3\5\5\5\u0455\n\5\3\5\3\5\5\5\u0459\n\5\3\5\3\5\5\5\u045d\n\5\3\5\3\5"+
		"\5\5\u0461\n\5\3\5\3\5\5\5\u0465\n\5\3\5\3\5\5\5\u0469\n\5\3\5\5\5\u046c"+
		"\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u0473\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0512\n\7\3\b\3\b\3\b\3\b\3\b"+
		"\5\b\u0519\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0527"+
		"\n\t\3\n\3\n\5\n\u052b\n\n\3\n\7\n\u052e\n\n\f\n\16\n\u0531\13\n\3\n\3"+
		"\n\5\n\u0535\n\n\3\13\3\13\5\13\u0539\n\13\3\f\3\f\5\f\u053d\n\f\3\r\3"+
		"\r\3\r\5\r\u0542\n\r\3\r\3\r\3\r\5\r\u0547\n\r\5\r\u0549\n\r\3\16\3\16"+
		"\5\16\u054d\n\16\3\16\5\16\u0550\n\16\3\17\3\17\3\17\3\17\3\17\5\17\u0557"+
		"\n\17\3\17\5\17\u055a\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0563"+
		"\n\20\3\20\5\20\u0566\n\20\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24"+
		"\5\24\u0571\n\24\3\24\6\24\u0574\n\24\r\24\16\24\u0575\3\24\3\24\3\24"+
		"\5\24\u057b\n\24\3\24\3\24\3\24\5\24\u0580\n\24\3\24\7\24\u0583\n\24\f"+
		"\24\16\24\u0586\13\24\3\24\3\24\3\24\5\24\u058b\n\24\3\25\3\25\5\25\u058f"+
		"\n\25\3\25\5\25\u0592\n\25\3\25\3\25\5\25\u0596\n\25\3\25\5\25\u0599\n"+
		"\25\3\25\5\25\u059c\n\25\3\26\3\26\3\26\3\26\3\26\5\26\u05a3\n\26\3\26"+
		"\3\26\5\26\u05a7\n\26\5\26\u05a9\n\26\3\27\3\27\3\27\5\27\u05ae\n\27\3"+
		"\27\3\27\7\27\u05b2\n\27\f\27\16\27\u05b5\13\27\3\27\5\27\u05b8\n\27\3"+
		"\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u05c3\n\30\f\30\16\30"+
		"\u05c6\13\30\3\30\3\30\3\30\5\30\u05cb\n\30\3\30\5\30\u05ce\n\30\3\30"+
		"\3\30\3\30\3\30\3\30\7\30\u05d5\n\30\f\30\16\30\u05d8\13\30\5\30\u05da"+
		"\n\30\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\5\32\u05ee\n\32\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\5\33\u05f6\n\33\3\33\3\33\3\33\5\33\u05fb\n\33\3\33\5\33\u05fe\n\33\3"+
		"\33\3\33\3\33\5\33\u0603\n\33\3\33\5\33\u0606\n\33\3\33\3\33\3\33\5\33"+
		"\u060b\n\33\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0613\n\34\3\34\3\34\3"+
		"\34\5\34\u0618\n\34\3\34\5\34\u061b\n\34\3\34\3\34\3\34\5\34\u0620\n\34"+
		"\3\35\3\35\3\35\3\35\5\35\u0626\n\35\3\35\3\35\3\35\5\35\u062b\n\35\3"+
		"\35\3\35\3\36\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3 \3 \3 \3!\5!\u063c"+
		"\n!\3!\5!\u063f\n!\3!\5!\u0642\n!\3!\5!\u0645\n!\3\"\3\"\3\"\5\"\u064a"+
		"\n\"\3#\3#\3$\3$\3$\3%\3%\5%\u0653\n%\3&\3&\3\'\3\'\3\'\3(\3(\3(\3(\3"+
		")\3)\3)\3)\5)\u0662\n)\3*\3*\3+\3+\3+\3,\3,\3-\3-\3-\3.\3.\3/\3/\3/\5"+
		"/\u0673\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u067e\n\60"+
		"\3\60\3\60\7\60\u0682\n\60\f\60\16\60\u0685\13\60\3\61\3\61\3\61\3\61"+
		"\3\62\3\62\3\63\3\63\3\64\3\64\3\64\3\64\5\64\u0693\n\64\3\65\3\65\3\66"+
		"\3\66\3\66\3\67\3\67\38\38\38\38\38\38\58\u06a2\n8\39\39\3:\3:\3:\3:\3"+
		":\5:\u06ab\n:\3:\3:\5:\u06af\n:\3:\6:\u06b2\n:\r:\16:\u06b3\3:\3:\3:\3"+
		":\5:\u06ba\n:\3;\3;\3;\3;\5;\u06c0\n;\3;\5;\u06c3\n;\3;\6;\u06c6\n;\r"+
		";\16;\u06c7\3;\3;\3;\5;\u06cd\n;\3<\3<\3<\3<\3<\3<\5<\u06d5\n<\3=\3=\3"+
		"=\3=\3>\3>\3>\3>\5>\u06df\n>\3>\3>\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3@\3"+
		"@\3@\3@\3@\5@\u06f2\n@\3A\3A\3A\3A\3A\3A\5A\u06fa\nA\3A\3A\3A\3A\3A\3"+
		"A\3A\3A\3A\3A\3A\5A\u0707\nA\5A\u0709\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3"+
		"A\5A\u0715\nA\5A\u0717\nA\3A\3A\3A\3A\3A\5A\u071e\nA\3B\3B\3B\3B\3B\3"+
		"B\3B\5B\u0727\nB\3C\3C\3C\3C\5C\u072d\nC\3C\3C\3C\3C\3D\3D\3D\5D\u0736"+
		"\nD\3E\3E\3F\3F\3F\3G\3G\3G\3G\3H\3H\3H\3H\5H\u0745\nH\3H\3H\3H\3H\3I"+
		"\3I\3I\3I\5I\u074f\nI\3I\3I\3I\3I\3J\3J\3J\3J\5J\u0759\nJ\3J\3J\3J\3J"+
		"\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K"+
		"\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u0781\nK\3L\3L\3L\3L\3L\3L\3L\3L"+
		"\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5L\u0798\nL\3M\3M\3N\3N\3O\3O"+
		"\3O\3O\3O\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R"+
		"\3R\3R\3R\3R\3R\5R\u07bc\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R"+
		"\3R\3R\5R\u07ce\nR\3R\5R\u07d1\nR\3R\3R\3R\5R\u07d6\nR\3R\5R\u07d9\nR"+
		"\3R\3R\3R\5R\u07de\nR\3R\5R\u07e1\nR\3R\3R\3R\5R\u07e6\nR\3R\5R\u07e9"+
		"\nR\3R\3R\3R\5R\u07ee\nR\3R\5R\u07f1\nR\3R\3R\3R\3R\3R\3R\5R\u07f9\nR"+
		"\3R\5R\u07fc\nR\3R\3R\3R\3R\3R\3R\5R\u0804\nR\3R\3R\3R\3R\3R\3R\3R\3R"+
		"\3R\3R\3R\5R\u0811\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u081c\nR\3R\7R\u081f"+
		"\nR\fR\16R\u0822\13R\3R\5R\u0825\nR\3R\3R\3R\3R\5R\u082b\nR\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0842\nR\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u084e\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0859"+
		"\nR\3R\7R\u085c\nR\fR\16R\u085f\13R\3R\5R\u0862\nR\3R\3R\3R\3R\5R\u0868"+
		"\nR\5R\u086a\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0877\nR\3R\3R\3R"+
		"\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\6R\u088c\nR\rR\16R\u088d"+
		"\3R\3R\3R\3R\3R\5R\u0895\nR\3R\3R\3R\3R\3R\3R\3R\5R\u089e\nR\3R\3R\3R"+
		"\5R\u08a3\nR\3R\5R\u08a6\nR\3R\3R\3R\5R\u08ab\nR\3R\5R\u08ae\nR\3R\3R"+
		"\3R\5R\u08b3\nR\3R\6R\u08b6\nR\rR\16R\u08b7\3R\3R\3R\3R\3R\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u08d4\nR\3R\3"+
		"R\3R\3R\3R\3R\5R\u08dc\nR\3R\3R\6R\u08e0\nR\rR\16R\u08e1\3R\3R\3R\3R\3"+
		"R\5R\u08e9\nR\5R\u08eb\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u08f8\n"+
		"R\3R\3R\3R\3R\3R\5R\u08ff\nR\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5"+
		"R\u090e\nR\3S\3S\3T\3T\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0920\n"+
		"U\3U\5U\u0923\nU\5U\u0925\nU\3U\3U\3U\5U\u092a\nU\3U\3U\5U\u092e\nU\3"+
		"U\5U\u0931\nU\5U\u0933\nU\3U\3U\3U\3U\5U\u0939\nU\3U\5U\u093c\nU\5U\u093e"+
		"\nU\3U\3U\3U\3U\5U\u0944\nU\5U\u0946\nU\3U\3U\3V\3V\3V\3V\3V\3W\3W\3W"+
		"\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\5W\u095c\nW\3W\3W\3W\3W\3W\3W\5W\u0964"+
		"\nW\3W\3W\3W\3W\3W\3W\5W\u096c\nW\6W\u096e\nW\rW\16W\u096f\3W\3W\3W\3"+
		"W\3W\3W\3W\5W\u0979\nW\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3"+
		"X\3X\3X\3X\5X\u098e\nX\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u099b\nY\3"+
		"Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u09aa\nY\6Y\u09ac\nY\rY\16Y\u09ad"+
		"\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3\\\3\\\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3^"+
		"\3^\3^\3^\3_\3_\3_\3_\3_\3`\3`\3`\3`\5`\u09d1\n`\3`\5`\u09d4\n`\3`\6`"+
		"\u09d7\n`\r`\16`\u09d8\3a\3a\3a\3a\3a\3a\3b\3b\3b\3b\3b\3c\3c\3c\3c\3"+
		"c\3c\3d\3d\3d\3d\5d\u09f0\nd\3d\5d\u09f3\nd\3d\3d\3d\5d\u09f8\nd\3d\3"+
		"d\3e\3e\3e\3e\3f\3f\3f\3f\3f\3f\3g\3g\3g\3g\3g\3g\3h\3h\3h\3h\3h\3h\5"+
		"h\u0a12\nh\3i\3i\3i\3i\3i\3i\3j\3j\3j\3j\3j\3j\5j\u0a20\nj\3j\3j\3j\5"+
		"j\u0a25\nj\3j\3j\3k\3k\3k\3k\5k\u0a2d\nk\3k\6k\u0a30\nk\rk\16k\u0a31\3"+
		"k\3k\3k\3k\3k\5k\u0a39\nk\3l\3l\3l\3l\3l\3l\3l\3m\3m\3m\3m\3m\3n\3n\3"+
		"n\3n\3n\3n\3n\5n\u0a4e\nn\3n\3n\3o\3o\3o\3o\3o\3p\3p\3p\3p\3q\3q\3q\3"+
		"q\3r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3t\3t\3t\3t\3t\3u\3u\3u\3u\3u\5u\u0a73"+
		"\nu\3u\3u\3u\5u\u0a78\nu\3u\3u\3v\3v\3v\3v\3v\3v\3w\3w\3w\3w\3w\3x\3x"+
		"\3x\3x\5x\u0a8b\nx\3x\3x\3y\3y\3y\3y\3z\3z\3z\3z\5z\u0a97\nz\3z\5z\u0a9a"+
		"\nz\3z\3z\3z\5z\u0a9f\nz\3z\5z\u0aa2\nz\3{\3{\3{\3{\5{\u0aa8\n{\3{\3{"+
		"\3|\3|\3|\3|\3|\3|\3}\3}\3}\3}\3}\5}\u0ab7\n}\3}\3}\3}\5}\u0abc\n}\3}"+
		"\3}\3~\3~\3~\3~\5~\u0ac4\n~\3~\5~\u0ac7\n~\3~\3~\3~\5~\u0acc\n~\3~\3~"+
		"\3~\5~\u0ad1\n~\3~\5~\u0ad4\n~\3\177\3\177\3\177\3\177\3\177\3\u0080\3"+
		"\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0083\3\u0083\5\u0083\u0aec"+
		"\n\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0af3\n\u0083"+
		"\3\u0083\3\u0083\3\u0083\5\u0083\u0af8\n\u0083\3\u0083\3\u0083\3\u0083"+
		"\5\u0083\u0afd\n\u0083\3\u0083\3\u0083\3\u0083\6\u0083\u0b02\n\u0083\r"+
		"\u0083\16\u0083\u0b03\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084"+
		"\u0b0b\n\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u0b18\n\u0085\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\5\u0086\u0b1e\n\u0086\3\u0086\3\u0086\3\u0086\5\u0086"+
		"\u0b23\n\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087"+
		"\u0b2b\n\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089\u0b3b"+
		"\n\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\5\u008a\u0b42\n\u008a"+
		"\3\u008a\3\u008a\3\u008a\5\u008a\u0b47\n\u008a\3\u008a\6\u008a\u0b4a\n"+
		"\u008a\r\u008a\16\u008a\u0b4b\3\u008a\5\u008a\u0b4f\n\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\5\u008a\u0b55\n\u008a\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\5\u008a\u0b5b\n\u008a\3\u008b\3\u008b\3\u008b\5\u008b\u0b60\n\u008b"+
		"\3\u008b\3\u008b\3\u008b\5\u008b\u0b65\n\u008b\3\u008b\6\u008b\u0b68\n"+
		"\u008b\r\u008b\16\u008b\u0b69\3\u008b\5\u008b\u0b6d\n\u008b\3\u008b\3"+
		"\u008b\3\u008b\3\u008b\5\u008b\u0b73\n\u008b\3\u008b\3\u008b\3\u008b\3"+
		"\u008b\5\u008b\u0b79\n\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3"+
		"\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u0b84\n\u008c\3\u008c\5\u008c\u0b87"+
		"\n\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\5\u008d\u0b91\n\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0b97\n"+
		"\u008d\6\u008d\u0b99\n\u008d\r\u008d\16\u008d\u0b9a\3\u008d\3\u008d\5"+
		"\u008d\u0b9f\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3"+
		"\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\3\u008f\3\u008f\5\u008f\u0bbc\n\u008f\3\u0090\3\u0090\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090"+
		"\u0bc9\n\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0bcf\n\u0090\3"+
		"\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\5\u0091"+
		"\u0bd9\n\u0091\3\u0091\5\u0091\u0bdc\n\u0091\3\u0092\3\u0092\3\u0092\3"+
		"\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0bf0\n\u0093"+
		"\3\u0093\3\u0093\5\u0093\u0bf4\n\u0093\3\u0093\3\u0093\5\u0093\u0bf8\n"+
		"\u0093\3\u0093\6\u0093\u0bfb\n\u0093\r\u0093\16\u0093\u0bfc\3\u0093\3"+
		"\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\5\u0094\u0c0c\n\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\5\u0094\u0c13\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\5\u0094\u0c1c\n\u0094\3\u0094\3\u0094\3\u0094"+
		"\3\u0094\7\u0094\u0c22\n\u0094\f\u0094\16\u0094\u0c25\13\u0094\5\u0094"+
		"\u0c27\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c2c\n\u0094\3\u0094\3"+
		"\u0094\3\u0094\5\u0094\u0c31\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\6"+
		"\u0094\u0c37\n\u0094\r\u0094\16\u0094\u0c38\3\u0094\3\u0094\6\u0094\u0c3d"+
		"\n\u0094\r\u0094\16\u0094\u0c3e\3\u0094\3\u0094\5\u0094\u0c43\n\u0094"+
		"\3\u0094\3\u0094\7\u0094\u0c47\n\u0094\f\u0094\16\u0094\u0c4a\13\u0094"+
		"\7\u0094\u0c4c\n\u0094\f\u0094\16\u0094\u0c4f\13\u0094\3\u0094\5\u0094"+
		"\u0c52\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c59\n"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\7\u0094\u0c5f\n\u0094\f\u0094\16"+
		"\u0094\u0c62\13\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094"+
		"\u0c69\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094"+
		"\5\u0094\u0c72\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0c77\n\u0094\3"+
		"\u0094\3\u0094\5\u0094\u0c7b\n\u0094\3\u0094\5\u0094\u0c7e\n\u0094\6\u0094"+
		"\u0c80\n\u0094\r\u0094\16\u0094\u0c81\3\u0094\3\u0094\7\u0094\u0c86\n"+
		"\u0094\f\u0094\16\u0094\u0c89\13\u0094\7\u0094\u0c8b\n\u0094\f\u0094\16"+
		"\u0094\u0c8e\13\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094"+
		"\u0c95\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\7\u0094\u0c9b\n\u0094\f"+
		"\u0094\16\u0094\u0c9e\13\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0ca3\n"+
		"\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0ca9\n\u0094\3\u0094\5"+
		"\u0094\u0cac\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cb1\n\u0094\3\u0094"+
		"\5\u0094\u0cb4\n\u0094\3\u0094\3\u0094\3\u0094\3\u0094\3\u0094\5\u0094"+
		"\u0cbb\n\u0094\5\u0094\u0cbd\n\u0094\3\u0094\5\u0094\u0cc0\n\u0094\3\u0094"+
		"\3\u0094\3\u0094\3\u0094\5\u0094\u0cc6\n\u0094\3\u0094\5\u0094\u0cc9\n"+
		"\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cce\n\u0094\3\u0094\5\u0094\u0cd1"+
		"\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cd6\n\u0094\3\u0094\5\u0094"+
		"\u0cd9\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0cde\n\u0094\3\u0094\5"+
		"\u0094\u0ce1\n\u0094\3\u0094\3\u0094\3\u0094\5\u0094\u0ce6\n\u0094\3\u0095"+
		"\5\u0095\u0ce9\n\u0095\3\u0095\5\u0095\u0cec\n\u0095\3\u0095\5\u0095\u0cef"+
		"\n\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\5\u0095\u0cf6\n\u0095"+
		"\6\u0095\u0cf8\n\u0095\r\u0095\16\u0095\u0cf9\3\u0096\3\u0096\3\u0096"+
		"\3\u0096\3\u0096\5\u0096\u0d01\n\u0096\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\5\u0097\u0d08\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097"+
		"\u0d0e\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0d1b\n\u0097\3\u0097\3\u0097"+
		"\5\u0097\u0d1f\n\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0d24\n\u0097\3"+
		"\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097"+
		"\u0d2e\n\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097\3\u0097"+
		"\5\u0097\u0d37\n\u0097\3\u0097\3\u0097\5\u0097\u0d3b\n\u0097\3\u0098\3"+
		"\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\5\u0098\u0d47\n\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0d4d\n"+
		"\u0098\3\u0098\3\u0098\3\u0098\6\u0098\u0d52\n\u0098\r\u0098\16\u0098"+
		"\u0d53\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\5\u0098\u0d68\n\u0098\3\u0098\3\u0098\5\u0098\u0d6c\n\u0098\3"+
		"\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d74\n\u0099\3"+
		"\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d7d\n"+
		"\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0d83\n\u0099\3\u0099\3"+
		"\u0099\3\u0099\3\u0099\5\u0099\u0d89\n\u0099\3\u0099\3\u0099\3\u0099\3"+
		"\u0099\3\u0099\3\u0099\6\u0099\u0d91\n\u0099\r\u0099\16\u0099\u0d92\3"+
		"\u0099\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a"+
		"\u0d9d\n\u009a\3\u009a\3\u009a\5\u009a\u0da1\n\u009a\3\u009a\5\u009a\u0da4"+
		"\n\u009a\3\u009a\3\u009a\5\u009a\u0da8\n\u009a\3\u009a\3\u009a\3\u009a"+
		"\5\u009a\u0dad\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0db3\n"+
		"\u009a\3\u009a\5\u009a\u0db6\n\u009a\3\u009a\3\u009a\5\u009a\u0dba\n\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\6\u009a\u0dc2\n\u009a"+
		"\r\u009a\16\u009a\u0dc3\3\u009a\5\u009a\u0dc7\n\u009a\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0dcf\n\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0dd7\n\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\5\u009b\u0dde\n\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\6\u009b\u0de5\n\u009b\r\u009b\16\u009b\u0de6\5\u009b"+
		"\u0de9\n\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0dee\n\u009b\3\u009b\3"+
		"\u009b\3\u009b\3\u009b\5\u009b\u0df4\n\u009b\3\u009b\6\u009b\u0df7\n\u009b"+
		"\r\u009b\16\u009b\u0df8\5\u009b\u0dfb\n\u009b\3\u009b\5\u009b\u0dfe\n"+
		"\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0e03\n\u009b\3\u009b\5\u009b\u0e06"+
		"\n\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0e0b\n\u009b\3\u009b\3\u009b"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\3\u009c\5\u009c\u0e1a\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\3\u009c\5\u009c\u0e21\n\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c"+
		"\6\u009c\u0e28\n\u009c\r\u009c\16\u009c\u0e29\5\u009c\u0e2c\n\u009c\3"+
		"\u009c\3\u009c\3\u009c\5\u009c\u0e31\n\u009c\3\u009c\3\u009c\3\u009c\3"+
		"\u009c\5\u009c\u0e37\n\u009c\3\u009c\6\u009c\u0e3a\n\u009c\r\u009c\16"+
		"\u009c\u0e3b\5\u009c\u0e3e\n\u009c\3\u009c\5\u009c\u0e41\n\u009c\3\u009c"+
		"\3\u009c\3\u009c\5\u009c\u0e46\n\u009c\3\u009c\5\u009c\u0e49\n\u009c\3"+
		"\u009c\3\u009c\3\u009c\5\u009c\u0e4e\n\u009c\3\u009c\3\u009c\3\u009d\3"+
		"\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d"+
		"\u0e5b\n\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e60\n\u009d\3\u009e\3"+
		"\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u0e69\n\u009e\3"+
		"\u009e\3\u009e\3\u009e\5\u009e\u0e6e\n\u009e\3\u009e\3\u009e\3\u009e\3"+
		"\u009e\5\u009e\u0e74\n\u009e\3\u009e\3\u009e\5\u009e\u0e78\n\u009e\3\u009e"+
		"\3\u009e\5\u009e\u0e7c\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f"+
		"\3\u009f\5\u009f\u0e8d\n\u009f\5\u009f\u0e8f\n\u009f\3\u00a0\3\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u0e99\n\u00a0\3"+
		"\u00a0\3\u00a0\3\u00a0\5\u00a0\u0e9e\n\u00a0\5\u00a0\u0ea0\n\u00a0\3\u00a0"+
		"\3\u00a0\5\u00a0\u0ea4\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1"+
		"\u0eaa\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1"+
		"\u0eb2\n\u00a1\3\u00a1\7\u00a1\u0eb5\n\u00a1\f\u00a1\16\u00a1\u0eb8\13"+
		"\u00a1\5\u00a1\u0eba\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\7\u00a1\u0ec0"+
		"\n\u00a1\f\u00a1\16\u00a1\u0ec3\13\u00a1\5\u00a1\u0ec5\n\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a1\5\u00a1\u0eca\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1"+
		"\u0ecf\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0ed4\n\u00a1\3\u00a1\3"+
		"\u00a1\3\u00a1\5\u00a1\u0ed9\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0ede"+
		"\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0ee3\n\u00a1\3\u00a1\3\u00a1"+
		"\5\u00a1\u0ee7\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0eec\n\u00a1\3"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\5\u00a2\u0ef7\n\u00a2\3\u00a2\7\u00a2\u0efa\n\u00a2\f\u00a2\16\u00a2"+
		"\u0efd\13\u00a2\5\u00a2\u0eff\n\u00a2\3\u00a2\5\u00a2\u0f02\n\u00a2\3"+
		"\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f07\n\u00a2\3\u00a2\5\u00a2\u0f0a\n\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f0f\n\u00a2\3\u00a2\5\u00a2\u0f12\n"+
		"\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f17\n\u00a2\3\u00a2\5\u00a2\u0f1a"+
		"\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f1f\n\u00a2\3\u00a2\5\u00a2"+
		"\u0f22\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f27\n\u00a2\3\u00a2\5"+
		"\u00a2\u0f2a\n\u00a2\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f2f\n\u00a2\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f35\n\u00a2\3\u00a2\3\u00a2\3\u00a2"+
		"\5\u00a2\u0f3a\n\u00a2\3\u00a2\5\u00a2\u0f3d\n\u00a2\3\u00a2\3\u00a2\3"+
		"\u00a2\5\u00a2\u0f42\n\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\5"+
		"\u00a2\u0f49\n\u00a2\5\u00a2\u0f4b\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\5\u00a3\u0f51\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\5\u00a3\u0f5a\n\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0f5f\n"+
		"\u00a3\5\u00a3\u0f61\n\u00a3\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3"+
		"\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f6d\n\u00a4\3\u00a5\3"+
		"\u00a5\3\u00a5\3\u00a5\5\u00a5\u0f73\n\u00a5\3\u00a5\3\u00a5\3\u00a5\3"+
		"\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0f7d\n\u00a5\f\u00a5\16"+
		"\u00a5\u0f80\13\u00a5\5\u00a5\u0f82\n\u00a5\3\u00a5\3\u00a5\3\u00a5\5"+
		"\u00a5\u0f87\n\u00a5\5\u00a5\u0f89\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\3\u00a6\3\u00a6\3\u00a6\5\u00a6\u0f93\n\u00a6\3\u00a6\3\u00a6"+
		"\3\u00a6\5\u00a6\u0f98\n\u00a6\5\u00a6\u0f9a\n\u00a6\3\u00a6\3\u00a6\5"+
		"\u00a6\u0f9e\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0fa4\n\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0fb6"+
		"\n\u00a7\5\u00a7\u0fb8\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9"+
		"\u0fc7\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\5\u00a9\u0fd9\n\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9"+
		"\5\u00a9\u0fe1\n\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa"+
		"\3\u00aa\3\u00aa\5\u00aa\u0feb\n\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\5\u00ab\u0ffb\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u1010\n\u00ad\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae"+
		"\u101b\n\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u1021\n\u00ae\3"+
		"\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u102a\n"+
		"\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af"+
		"\u1033\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u1039\n\u00af\3"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1042\n"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1047\n\u00b0\3\u00b0\5\u00b0\u104a"+
		"\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u104f\n\u00b0\3\u00b0\5\u00b0"+
		"\u1052\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1057\n\u00b0\3\u00b0\5"+
		"\u00b0\u105a\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5"+
		"\u00b0\u1062\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1068\n\u00b0"+
		"\6\u00b0\u106a\n\u00b0\r\u00b0\16\u00b0\u106b\3\u00b0\3\u00b0\3\u00b0"+
		"\3\u00b0\3\u00b0\5\u00b0\u1073\n\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0"+
		"\5\u00b0\u1079\n\u00b0\6\u00b0\u107b\n\u00b0\r\u00b0\16\u00b0\u107c\3"+
		"\u00b0\5\u00b0\u1080\n\u00b0\5\u00b0\u1082\n\u00b0\3\u00b0\5\u00b0\u1085"+
		"\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u108a\n\u00b0\3\u00b0\5\u00b0"+
		"\u108d\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1092\n\u00b0\3\u00b0\5"+
		"\u00b0\u1095\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u109a\n\u00b0\3\u00b0"+
		"\5\u00b0\u109d\n\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u10a2\n\u00b0\3"+
		"\u00b0\5\u00b0\u10a5\n\u00b0\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3"+
		"\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1"+
		"\u10b4\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\5\u00b1\u10bf\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u10cb\n\u00b2"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u10d2\n\u00b3\3\u00b4"+
		"\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u10d9\n\u00b4\3\u00b4\3\u00b4"+
		"\5\u00b4\u10dd\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u10e2\n\u00b4\3"+
		"\u00b4\5\u00b4\u10e5\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u10ea\n\u00b4"+
		"\3\u00b4\5\u00b4\u10ed\n\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u10f2\n"+
		"\u00b4\3\u00b4\5\u00b4\u10f5\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3"+
		"\u00b4\3\u00b4\3\u00b4\5\u00b4\u10fe\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b5\3\u00b5\5\u00b5\u1105\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3"+
		"\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6"+
		"\5\u00b6\u1114\n\u00b6\3\u00b6\3\u00b6\5\u00b6\u1118\n\u00b6\3\u00b6\3"+
		"\u00b6\3\u00b6\5\u00b6\u111d\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1128\n\u00b7\3\u00b7\3"+
		"\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1132\n"+
		"\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\5\u00b7\u113e\n\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\7\u00b7\u1144\n\u00b7\f\u00b7\16\u00b7\u1147\13\u00b7\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u114e\n\u00b8\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u1157\n\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\5\u00b9\u115c\n\u00b9\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u1167\n\u00ba\3\u00ba\5\u00ba"+
		"\u116a\n\u00ba\3\u00ba\3\u00ba\5\u00ba\u116e\n\u00ba\3\u00bb\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1176\n\u00bb\3\u00bb\3\u00bb\5"+
		"\u00bb\u117a\n\u00bb\3\u00bb\3\u00bb\5\u00bb\u117e\n\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u1186\n\u00bb\3\u00bb\6\u00bb"+
		"\u1189\n\u00bb\r\u00bb\16\u00bb\u118a\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\3\u00bb\5\u00bb\u1193\n\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb"+
		"\u1198\n\u00bb\3\u00bb\3\u00bb\7\u00bb\u119c\n\u00bb\f\u00bb\16\u00bb"+
		"\u119f\13\u00bb\6\u00bb\u11a1\n\u00bb\r\u00bb\16\u00bb\u11a2\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11ac\n\u00bb\3"+
		"\u00bb\5\u00bb\u11af\n\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb\u11b4\n\u00bb"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u11bb\n\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u11c1\n\u00bc\5\u00bc\u11c3\n\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\5\u00bc\u11c8\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\5\u00bc\u11ce\n\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u11d4"+
		"\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u11d9\n\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\5\u00bc\u11df\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u11e6\n\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u11eb\n"+
		"\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u11f0\n\u00bd\3\u00bd\3\u00bd\3"+
		"\u00bd\5\u00bd\u11f5\n\u00bd\3\u00bd\5\u00bd\u11f8\n\u00bd\3\u00bd\3\u00bd"+
		"\5\u00bd\u11fc\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u1200\n\u00bd\3\u00bd\3"+
		"\u00bd\5\u00bd\u1204\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u1208\n\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\5\u00bd\u120d\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u1211\n"+
		"\u00bd\3\u00bd\3\u00bd\5\u00bd\u1215\n\u00bd\3\u00be\3\u00be\3\u00be\3"+
		"\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u121f\n\u00be\3\u00be\3"+
		"\u00be\3\u00be\3\u00be\5\u00be\u1225\n\u00be\3\u00be\3\u00be\3\u00be\3"+
		"\u00be\3\u00be\5\u00be\u122c\n\u00be\3\u00be\5\u00be\u122f\n\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\5\u00be\u1235\n\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u123b\n\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u1240\n"+
		"\u00be\f\u00be\16\u00be\u1243\13\u00be\3\u00be\3\u00be\3\u00be\5\u00be"+
		"\u1248\n\u00be\5\u00be\u124a\n\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u124f"+
		"\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u1255\n\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\5\u00be\u125b\n\u00be\3\u00be\3\u00be\3\u00be"+
		"\7\u00be\u1260\n\u00be\f\u00be\16\u00be\u1263\13\u00be\3\u00be\5\u00be"+
		"\u1266\n\u00be\3\u00be\3\u00be\5\u00be\u126a\n\u00be\3\u00be\5\u00be\u126d"+
		"\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u127b\n\u00be\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u1280\n\u00be\3\u00be\3\u00be\5\u00be\u1284\n\u00be\3"+
		"\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\3\u00be\5\u00be\u1291\n\u00be\3\u00be\5\u00be\u1294\n\u00be\5"+
		"\u00be\u1296\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5"+
		"\u00be\u129e\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\5\u00bf\u12a8\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5"+
		"\u00bf\u12ae\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12b5"+
		"\n\u00bf\3\u00bf\5\u00bf\u12b8\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\5\u00bf\u12be\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12c4\n"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u12c9\n\u00bf\f\u00bf\16\u00bf"+
		"\u12cc\13\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12d1\n\u00bf\5\u00bf"+
		"\u12d3\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12d8\n\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\5\u00bf\u12de\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
		"\u00bf\5\u00bf\u12e4\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u12ea"+
		"\n\u00bf\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u12ef\n\u00bf\f\u00bf\16\u00bf"+
		"\u12f2\13\u00bf\3\u00bf\5\u00bf\u12f5\n\u00bf\3\u00bf\3\u00bf\5\u00bf"+
		"\u12f9\n\u00bf\3\u00bf\5\u00bf\u12fc\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf"+
		"\5\u00bf\u130a\n\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u130f\n\u00bf\3"+
		"\u00bf\3\u00bf\5\u00bf\u1313\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u1320\n"+
		"\u00bf\3\u00bf\5\u00bf\u1323\n\u00bf\5\u00bf\u1325\n\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u132d\n\u00bf\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u1338"+
		"\n\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u133f\n\u00c0"+
		"\f\u00c0\16\u00c0\u1342\13\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\5\u00c0\u134a\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u1355\n\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u135c\n\u00c1\f\u00c1\16\u00c1\u135f"+
		"\13\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u1367"+
		"\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\5\u00c2\u1373\n\u00c2\3\u00c2\3\u00c2\5\u00c2\u1377\n"+
		"\u00c2\3\u00c2\3\u00c2\3\u00c2\6\u00c2\u137c\n\u00c2\r\u00c2\16\u00c2"+
		"\u137d\5\u00c2\u1380\n\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u1385\n\u00c2"+
		"\3\u00c2\3\u00c2\5\u00c2\u1389\n\u00c2\3\u00c2\3\u00c2\3\u00c2\6\u00c2"+
		"\u138e\n\u00c2\r\u00c2\16\u00c2\u138f\5\u00c2\u1392\n\u00c2\3\u00c2\3"+
		"\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\5\u00c2\u13a0\n\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2"+
		"\u13a5\n\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u13bb\n\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2"+
		"\5\u00c2\u13d1\n\u00c2\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u13d6\n\u00c2\3"+
		"\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\5\u00c3\u13e3\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4"+
		"\3\u00c4\3\u00c4\5\u00c4\u13eb\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u13ff\n\u00c6\3\u00c6"+
		"\5\u00c6\u1402\n\u00c6\3\u00c6\3\u00c6\7\u00c6\u1406\n\u00c6\f\u00c6\16"+
		"\u00c6\u1409\13\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7"+
		"\u1410\n\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u1417\n"+
		"\u00c7\3\u00c7\3\u00c7\3\u00c7\5\u00c7\u141c\n\u00c7\3\u00c7\3\u00c7\5"+
		"\u00c7\u1420\n\u00c7\6\u00c7\u1422\n\u00c7\r\u00c7\16\u00c7\u1423\3\u00c7"+
		"\5\u00c7\u1427\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8"+
		"\u142e\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\5\u00c8\u1440\n\u00c8\5\u00c8\u1442\n\u00c8\3\u00c9\3\u00c9\3\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1456\n\u00c9"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u145e\n\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1463\n\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1475\n\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00ca\5\u00ca\u1484\n\u00ca\5\u00ca\u1486\n\u00ca\3\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u148d\n\u00cb\3\u00cb\3\u00cb\3"+
		"\u00cb\3\u00cb\3\u00cb\5\u00cb\u1494\n\u00cb\3\u00cb\3\u00cb\3\u00cb\5"+
		"\u00cb\u1499\n\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u149e\n\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u14a4\n\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u14a9\n\u00cb\5\u00cb\u14ab\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3"+
		"\u00cc\3\u00cc\5\u00cc\u14b2\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5"+
		"\u00cc\u14b8\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u14be\n\u00cc"+
		"\3\u00cc\5\u00cc\u14c1\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc"+
		"\u14c7\n\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\6\u00cc"+
		"\u14cf\n\u00cc\r\u00cc\16\u00cc\u14d0\3\u00cc\5\u00cc\u14d4\n\u00cc\3"+
		"\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u14db\n\u00cc\3\u00cc\5"+
		"\u00cc\u14de\n\u00cc\3\u00cc\3\u00cc\3\u00cc\6\u00cc\u14e3\n\u00cc\r\u00cc"+
		"\16\u00cc\u14e4\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd"+
		"\u14ed\n\u00cd\3\u00cd\3\u00cd\5\u00cd\u14f1\n\u00cd\3\u00cd\3\u00cd\3"+
		"\u00cd\3\u00cd\5\u00cd\u14f7\n\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u14fc"+
		"\n\u00cd\f\u00cd\16\u00cd\u14ff\13\u00cd\5\u00cd\u1501\n\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1508\n\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\5\u00cd\u150e\n\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\5\u00cd\u1515\n\u00cd\3\u00cd\5\u00cd\u1518\n\u00cd\3\u00cd\3"+
		"\u00cd\3\u00cd\3\u00cd\5\u00cd\u151e\n\u00cd\3\u00cd\3\u00cd\3\u00cd\7"+
		"\u00cd\u1523\n\u00cd\f\u00cd\16\u00cd\u1526\13\u00cd\5\u00cd\u1528\n\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1530\n\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1536\n\u00cd\3\u00cd\3\u00cd"+
		"\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u153d\n\u00cd\3\u00cd\5\u00cd\u1540\n"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1546\n\u00cd\3\u00cd\3"+
		"\u00cd\3\u00cd\7\u00cd\u154b\n\u00cd\f\u00cd\16\u00cd\u154e\13\u00cd\3"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1555\n\u00cd\3\u00cd\3"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u155d\n\u00cd\3\u00cd\3"+
		"\u00cd\3\u00cd\3\u00cd\5\u00cd\u1563\n\u00cd\3\u00cd\3\u00cd\3\u00cd\7"+
		"\u00cd\u1568\n\u00cd\f\u00cd\16\u00cd\u156b\13\u00cd\3\u00cd\3\u00cd\3"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u1574\n\u00cd\3\u00cd\3"+
		"\u00cd\3\u00cd\5\u00cd\u1579\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1583\n\u00ce\3\u00ce\3\u00ce\3"+
		"\u00ce\3\u00ce\5\u00ce\u1589\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3"+
		"\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u1595\n\u00ce\5"+
		"\u00ce\u1597\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u159e"+
		"\n\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u15a4\n\u00cf\3\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u15aa\n\u00cf\3\u00cf\3\u00cf\3\u00cf"+
		"\3\u00cf\5\u00cf\u15b0\n\u00cf\3\u00cf\3\u00cf\3\u00cf\6\u00cf\u15b5\n"+
		"\u00cf\r\u00cf\16\u00cf\u15b6\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\5\u00d0\u15be\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\5\u00d0\u15c6\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u15cc\n"+
		"\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\6\u00d0\u15da\n\u00d0\r\u00d0\16\u00d0"+
		"\u15db\3\u00d0\5\u00d0\u15df\n\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u15e4"+
		"\n\u00d0\5\u00d0\u15e6\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15f2\n\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u15f8\n\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1"+
		"\6\u00d1\u1606\n\u00d1\r\u00d1\16\u00d1\u1607\3\u00d1\5\u00d1\u160b\n"+
		"\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u1610\n\u00d1\3\u00d1\5\u00d1\u1613"+
		"\n\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u1618\n\u00d1\5\u00d1\u161a\n"+
		"\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2"+
		"\u1623\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u162a\n"+
		"\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1630\n\u00d3\3\u00d3\5"+
		"\u00d3\u1633\n\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u1638\n\u00d3\3\u00d4"+
		"\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u163f\n\u00d4\5\u00d4\u1641\n"+
		"\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u1647\n\u00d4\5\u00d4\u1649"+
		"\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u1651"+
		"\n\u00d4\5\u00d4\u1653\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4"+
		"\u1659\n\u00d4\5\u00d4\u165b\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5"+
		"\u00d4\u1661\n\u00d4\5\u00d4\u1663\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\5\u00d4\u166a\n\u00d4\3\u00d4\5\u00d4\u166d\n\u00d4\5\u00d4\u166f"+
		"\n\u00d4\3\u00d4\5\u00d4\u1672\n\u00d4\3\u00d4\3\u00d4\5\u00d4\u1676\n"+
		"\u00d4\5\u00d4\u1678\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3"+
		"\u00d4\3\u00d4\5\u00d4\u1681\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5"+
		"\u00d5\u1687\n\u00d5\3\u00d5\3\u00d5\5\u00d5\u168b\n\u00d5\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1693\n\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u169a\n\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\5\u00d6\u16a0\n\u00d6\5\u00d6\u16a2\n\u00d6\3\u00d7\3\u00d7\3"+
		"\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u16ad\n"+
		"\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u16b2\n\u00d8\3\u00d8\3\u00d8\3"+
		"\u00d8\3\u00d8\5\u00d8\u16b8\n\u00d8\6\u00d8\u16ba\n\u00d8\r\u00d8\16"+
		"\u00d8\u16bb\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3"+
		"\u00d9\5\u00d9\u16c6\n\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3"+
		"\u00da\5\u00da\u16ce\n\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3"+
		"\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u16da\n\u00da\3\u00db\5"+
		"\u00db\u16dd\n\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\5"+
		"\u00db\u16e5\n\u00db\5\u00db\u16e7\n\u00db\3\u00db\5\u00db\u16ea\n\u00db"+
		"\3\u00db\3\u00db\5\u00db\u16ee\n\u00db\3\u00db\5\u00db\u16f1\n\u00db\3"+
		"\u00db\3\u00db\3\u00db\3\u00db\3\u00db\6\u00db\u16f8\n\u00db\r\u00db\16"+
		"\u00db\u16f9\3\u00db\5\u00db\u16fd\n\u00db\3\u00db\5\u00db\u1700\n\u00db"+
		"\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u1708\n\u00dc"+
		"\3\u00dc\3\u00dc\6\u00dc\u170c\n\u00dc\r\u00dc\16\u00dc\u170d\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u1715\n\u00dc\3\u00dc\3\u00dc"+
		"\5\u00dc\u1719\n\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc"+
		"\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u1724\n\u00dc\3\u00dc\3\u00dc\6\u00dc"+
		"\u1728\n\u00dc\r\u00dc\16\u00dc\u1729\5\u00dc\u172c\n\u00dc\3\u00dd\3"+
		"\u00dd\3\u00dd\3\u00dd\3\u00dd\7\u00dd\u1733\n\u00dd\f\u00dd\16\u00dd"+
		"\u1736\13\u00dd\3\u00dd\5\u00dd\u1739\n\u00dd\3\u00de\3\u00de\3\u00de"+
		"\3\u00de\3\u00de\5\u00de\u1740\n\u00de\3\u00de\3\u00de\3\u00de\5\u00de"+
		"\u1745\n\u00de\3\u00df\5\u00df\u1748\n\u00df\3\u00df\3\u00df\3\u00df\3"+
		"\u00df\3\u00df\3\u00df\5\u00df\u1750\n\u00df\3\u00df\3\u00df\5\u00df\u1754"+
		"\n\u00df\3\u00df\5\u00df\u1757\n\u00df\3\u00df\3\u00df\5\u00df\u175b\n"+
		"\u00df\3\u00df\5\u00df\u175e\n\u00df\3\u00df\3\u00df\5\u00df\u1762\n\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1769\n\u00df\3\u00df"+
		"\3\u00df\5\u00df\u176d\n\u00df\5\u00df\u176f\n\u00df\5\u00df\u1771\n\u00df"+
		"\3\u00df\5\u00df\u1774\n\u00df\3\u00df\5\u00df\u1777\n\u00df\3\u00df\5"+
		"\u00df\u177a\n\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u1780\n\u00e0"+
		"\3\u00e1\5\u00e1\u1783\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\5\u00e1\u178b\n\u00e1\5\u00e1\u178d\n\u00e1\3\u00e1\5\u00e1\u1790"+
		"\n\u00e1\3\u00e1\3\u00e1\5\u00e1\u1794\n\u00e1\3\u00e1\5\u00e1\u1797\n"+
		"\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u179d\n\u00e1\3\u00e1\5"+
		"\u00e1\u17a0\n\u00e1\3\u00e1\3\u00e1\5\u00e1\u17a4\n\u00e1\3\u00e1\5\u00e1"+
		"\u17a7\n\u00e1\3\u00e1\5\u00e1\u17aa\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e2\5\u00e2\u17b1\n\u00e2\3\u00e3\5\u00e3\u17b4\n\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u17bb\n\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\5\u00e3\u17c1\n\u00e3\7\u00e3\u17c3\n\u00e3\f\u00e3\16"+
		"\u00e3\u17c6\13\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\5\u00e3\u17cf\n\u00e3\3\u00e3\5\u00e3\u17d2\n\u00e3\3\u00e4\5"+
		"\u00e4\u17d5\n\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5\5\u00e5\u17db\n\u00e5"+
		"\3\u00e5\5\u00e5\u17de\n\u00e5\3\u00e5\5\u00e5\u17e1\n\u00e5\3\u00e5\5"+
		"\u00e5\u17e4\n\u00e5\3\u00e6\3\u00e6\5\u00e6\u17e8\n\u00e6\3\u00e7\5\u00e7"+
		"\u17eb\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7"+
		"\u17f3\n\u00e7\5\u00e7\u17f5\n\u00e7\3\u00e7\3\u00e7\5\u00e7\u17f9\n\u00e7"+
		"\3\u00e7\5\u00e7\u17fc\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\7\u00e7"+
		"\u1802\n\u00e7\f\u00e7\16\u00e7\u1805\13\u00e7\3\u00e7\5\u00e7\u1808\n"+
		"\u00e7\3\u00e7\3\u00e7\5\u00e7\u180c\n\u00e7\3\u00e7\3\u00e7\3\u00e7\3"+
		"\u00e7\3\u00e7\5\u00e7\u1813\n\u00e7\3\u00e7\3\u00e7\5\u00e7\u1817\n\u00e7"+
		"\5\u00e7\u1819\n\u00e7\5\u00e7\u181b\n\u00e7\3\u00e7\5\u00e7\u181e\n\u00e7"+
		"\3\u00e7\5\u00e7\u1821\n\u00e7\3\u00e7\5\u00e7\u1824\n\u00e7\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\7\u00e8\u182a\n\u00e8\f\u00e8\16\u00e8\u182d\13"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u1832\n\u00e8\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\5\u00e8\u1838\n\u00e8\5\u00e8\u183a\n\u00e8\3\u00e9\3\u00e9"+
		"\5\u00e9\u183e\n\u00e9\3\u00e9\5\u00e9\u1841\n\u00e9\3\u00ea\3\u00ea\3"+
		"\u00ea\5\u00ea\u1846\n\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u184b\n\u00ea"+
		"\3\u00ea\5\u00ea\u184e\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\3\u00eb\5\u00eb\u1856\n\u00eb\3\u00eb\3\u00eb\5\u00eb\u185a\n\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\7\u00eb\u185f\n\u00eb\f\u00eb\16\u00eb\u1862\13"+
		"\u00eb\5\u00eb\u1864\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\7"+
		"\u00eb\u186b\n\u00eb\f\u00eb\16\u00eb\u186e\13\u00eb\5\u00eb\u1870\n\u00eb"+
		"\3\u00eb\3\u00eb\5\u00eb\u1874\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb"+
		"\7\u00eb\u187a\n\u00eb\f\u00eb\16\u00eb\u187d\13\u00eb\5\u00eb\u187f\n"+
		"\u00eb\3\u00ec\3\u00ec\5\u00ec\u1883\n\u00ec\3\u00ec\5\u00ec\u1886\n\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec"+
		"\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u1894\n\u00ec\3\u00ec\3\u00ec\5\u00ec"+
		"\u1898\n\u00ec\3\u00ec\5\u00ec\u189b\n\u00ec\3\u00ec\3\u00ec\5\u00ec\u189f"+
		"\n\u00ec\3\u00ec\5\u00ec\u18a2\n\u00ec\3\u00ed\3\u00ed\5\u00ed\u18a6\n"+
		"\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ed\5\u00ed\u18b6\n\u00ed"+
		"\5\u00ed\u18b8\n\u00ed\5\u00ed\u18ba\n\u00ed\3\u00ed\5\u00ed\u18bd\n\u00ed"+
		"\3\u00ed\5\u00ed\u18c0\n\u00ed\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u18c5\n"+
		"\u00ee\3\u00ee\5\u00ee\u18c8\n\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5"+
		"\u00ee\u18ce\n\u00ee\3\u00ee\5\u00ee\u18d1\n\u00ee\3\u00ee\3\u00ee\3\u00ee"+
		"\7\u00ee\u18d6\n\u00ee\f\u00ee\16\u00ee\u18d9\13\u00ee\3\u00ee\5\u00ee"+
		"\u18dc\n\u00ee\5\u00ee\u18de\n\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7"+
		"\u00ee\u18e4\n\u00ee\f\u00ee\16\u00ee\u18e7\13\u00ee\5\u00ee\u18e9\n\u00ee"+
		"\3\u00ee\3\u00ee\5\u00ee\u18ed\n\u00ee\3\u00ee\3\u00ee\7\u00ee\u18f1\n"+
		"\u00ee\f\u00ee\16\u00ee\u18f4\13\u00ee\3\u00ef\3\u00ef\5\u00ef\u18f8\n"+
		"\u00ef\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u18fd\n\u00f0\3\u00f0\5\u00f0\u1900"+
		"\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\7\u00f0\u190a\n\u00f0\f\u00f0\16\u00f0\u190d\13\u00f0\5\u00f0\u190f\n"+
		"\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u1915\n\u00f0\3\u00f0\3"+
		"\u00f0\3\u00f0\7\u00f0\u191a\n\u00f0\f\u00f0\16\u00f0\u191d\13\u00f0\3"+
		"\u00f0\3\u00f0\5\u00f0\u1921\n\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u1926"+
		"\n\u00f0\3\u00f0\3\u00f0\6\u00f0\u192a\n\u00f0\r\u00f0\16\u00f0\u192b"+
		"\3\u00f1\3\u00f1\5\u00f1\u1930\n\u00f1\3\u00f2\3\u00f2\3\u00f3\3\u00f3"+
		"\3\u00f3\5\u00f3\u1937\n\u00f3\3\u00f3\5\u00f3\u193a\n\u00f3\3\u00f3\3"+
		"\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1942\n\u00f3\3\u00f3\3"+
		"\u00f3\3\u00f3\3\u00f3\7\u00f3\u1948\n\u00f3\f\u00f3\16\u00f3\u194b\13"+
		"\u00f3\5\u00f3\u194d\n\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\7\u00f3\u1953"+
		"\n\u00f3\f\u00f3\16\u00f3\u1956\13\u00f3\3\u00f3\3\u00f3\6\u00f3\u195a"+
		"\n\u00f3\r\u00f3\16\u00f3\u195b\3\u00f4\3\u00f4\3\u00f5\3\u00f5\3\u00f5"+
		"\5\u00f5\u1963\n\u00f5\3\u00f5\5\u00f5\u1966\n\u00f5\3\u00f5\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\7\u00f5\u196e\n\u00f5\f\u00f5\16\u00f5"+
		"\u1971\13\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1977\n\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u197c\n\u00f5\3\u00f5\5\u00f5\u197f\n"+
		"\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\7\u00f6\u1987\n"+
		"\u00f6\f\u00f6\16\u00f6\u198a\13\u00f6\5\u00f6\u198c\n\u00f6\3\u00f6\5"+
		"\u00f6\u198f\n\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5"+
		"\u00f6\u1997\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3"+
		"\u00f7\7\u00f7\u19a0\n\u00f7\f\u00f7\16\u00f7\u19a3\13\u00f7\5\u00f7\u19a5"+
		"\n\u00f7\3\u00f7\5\u00f7\u19a8\n\u00f7\3\u00f7\3\u00f7\7\u00f7\u19ac\n"+
		"\u00f7\f\u00f7\16\u00f7\u19af\13\u00f7\3\u00f7\3\u00f7\5\u00f7\u19b3\n"+
		"\u00f7\3\u00f7\3\u00f7\5\u00f7\u19b7\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3"+
		"\u00f8\3\u00f8\3\u00f8\7\u00f8\u19bf\n\u00f8\f\u00f8\16\u00f8\u19c2\13"+
		"\u00f8\5\u00f8\u19c4\n\u00f8\3\u00f8\5\u00f8\u19c7\n\u00f8\3\u00f8\3\u00f8"+
		"\7\u00f8\u19cb\n\u00f8\f\u00f8\16\u00f8\u19ce\13\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\5\u00f8\u19d3\n\u00f8\3\u00f8\3\u00f8\3\u00f9\3\u00f9\5\u00f9"+
		"\u19d9\n\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u19de\n\u00f9\3\u00f9\3"+
		"\u00f9\5\u00f9\u19e2\n\u00f9\3\u00f9\3\u00f9\5\u00f9\u19e6\n\u00f9\3\u00f9"+
		"\5\u00f9\u19e9\n\u00f9\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u19ee\n\u00fa\3"+
		"\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u19fc\n\u00fb\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc"+
		"\3\u00fc\3\u00fc\5\u00fc\u1a0c\n\u00fc\3\u00fc\3\u00fc\5\u00fc\u1a10\n"+
		"\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u1a16\n\u00fc\5\u00fc\u1a18"+
		"\n\u00fc\3\u00fc\5\u00fc\u1a1b\n\u00fc\3\u00fd\3\u00fd\5\u00fd\u1a1f\n"+
		"\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u1a24\n\u00fd\3\u00fd\3\u00fd\3"+
		"\u00fd\5\u00fd\u1a29\n\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3\u00fe\3"+
		"\u00fe\5\u00fe\u1a31\n\u00fe\3\u00fe\7\u00fe\u1a34\n\u00fe\f\u00fe\16"+
		"\u00fe\u1a37\13\u00fe\3\u00fe\5\u00fe\u1a3a\n\u00fe\3\u00fe\3\u00fe\3"+
		"\u00fe\5\u00fe\u1a3f\n\u00fe\3\u00fe\7\u00fe\u1a42\n\u00fe\f\u00fe\16"+
		"\u00fe\u1a45\13\u00fe\3\u00fe\3\u00fe\3\u00fe\5\u00fe\u1a4a\n\u00fe\3"+
		"\u00fe\3\u00fe\3\u00fe\5\u00fe\u1a4f\n\u00fe\3\u00fe\5\u00fe\u1a52\n\u00fe"+
		"\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u1a57\n\u00ff\3\u00ff\3\u00ff\3\u00ff"+
		"\3\u00ff\5\u00ff\u1a5d\n\u00ff\3\u00ff\3\u00ff\5\u00ff\u1a61\n\u00ff\3"+
		"\u0100\3\u0100\3\u0100\3\u0100\3\u0100\7\u0100\u1a68\n\u0100\f\u0100\16"+
		"\u0100\u1a6b\13\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\7\u0100"+
		"\u1a72\n\u0100\f\u0100\16\u0100\u1a75\13\u0100\5\u0100\u1a77\n\u0100\3"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u1a80\n"+
		"\u0101\3\u0101\3\u0101\3\u0101\3\u0101\7\u0101\u1a86\n\u0101\f\u0101\16"+
		"\u0101\u1a89\13\u0101\5\u0101\u1a8b\n\u0101\3\u0101\3\u0101\3\u0101\3"+
		"\u0101\3\u0101\5\u0101\u1a92\n\u0101\3\u0101\5\u0101\u1a95\n\u0101\3\u0102"+
		"\3\u0102\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u1ac3"+
		"\n\u0103\3\u0103\3\u0103\5\u0103\u1ac7\n\u0103\3\u0103\5\u0103\u1aca\n"+
		"\u0103\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1ad0\n\u0104\3\u0104\3"+
		"\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104"+
		"\5\u0104\u1adc\n\u0104\5\u0104\u1ade\n\u0104\3\u0104\5\u0104\u1ae1\n\u0104"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105"+
		"\3\u0105\3\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u1afa\n\u0105\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106"+
		"\u1b05\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106"+
		"\u1b0d\n\u0106\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\7\u0107\u1b16\n\u0107\f\u0107\16\u0107\u1b19\13\u0107\7\u0107\u1b1b\n"+
		"\u0107\f\u0107\16\u0107\u1b1e\13\u0107\5\u0107\u1b20\n\u0107\3\u0108\3"+
		"\u0108\3\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u1b28\n\u0108\3\u0109\3"+
		"\u0109\3\u0109\3\u0109\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1b32\n"+
		"\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1b39\n\u010b\3"+
		"\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1b40\n\u010b\5\u010b\u1b42"+
		"\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\5\u010b\u1b4e\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1b59\n\u010b\3\u010b"+
		"\3\u010b\5\u010b\u1b5d\n\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1b62\n"+
		"\u010b\3\u010b\5\u010b\u1b65\n\u010b\5\u010b\u1b67\n\u010b\3\u010b\5\u010b"+
		"\u1b6a\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\5\u010b\u1b76\n\u010b\5\u010b\u1b78\n\u010b\5"+
		"\u010b\u1b7a\n\u010b\3\u010b\5\u010b\u1b7d\n\u010b\3\u010b\3\u010b\3\u010b"+
		"\5\u010b\u1b82\n\u010b\3\u010b\5\u010b\u1b85\n\u010b\3\u010b\3\u010b\3"+
		"\u010b\5\u010b\u1b8a\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3"+
		"\u010b\3\u010b\3\u010b\5\u010b\u1b94\n\u010b\3\u010b\3\u010b\5\u010b\u1b98"+
		"\n\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1b9d\n\u010b\3\u010b\5\u010b"+
		"\u1ba0\n\u010b\5\u010b\u1ba2\n\u010b\3\u010b\5\u010b\u1ba5\n\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\5\u010b\u1bb1\n\u010b\5\u010b\u1bb3\n\u010b\5\u010b\u1bb5\n\u010b\3\u010b"+
		"\5\u010b\u1bb8\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u1bbe\n"+
		"\u010b\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\5\u010d\u1bc8\n\u010d\3\u010e\3\u010e\3\u010f\3\u010f\3\u0110\3\u0110"+
		"\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111"+
		"\3\u0111\3\u0111\3\u0111\5\u0111\u1bdc\n\u0111\3\u0112\3\u0112\3\u0112"+
		"\3\u0112\5\u0112\u1be2\n\u0112\3\u0113\3\u0113\3\u0114\3\u0114\3\u0114"+
		"\3\u0114\3\u0114\3\u0115\3\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0117"+
		"\3\u0117\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118"+
		"\5\u0118\u1bfb\n\u0118\5\u0118\u1bfd\n\u0118\3\u0119\3\u0119\3\u0119\3"+
		"\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011c\3\u011c\3\u011d\3\u011d"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\5\u011f\u1c17\n\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\5\u011f\u1c1d\n\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1c28\n\u011f\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u1c30\n\u0120\3\u0120\5\u0120"+
		"\u1c33\n\u0120\3\u0121\3\u0121\3\u0121\3\u0122\3\u0122\3\u0122\3\u0123"+
		"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u1c41\n\u0123\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u1c49\n\u0124\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1c50\n\u0125\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126\3\u0126"+
		"\3\u0126\5\u0126\u1c67\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1c74\n\u0128"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1c7a\n\u0129\3\u0129\3\u0129"+
		"\3\u0129\7\u0129\u1c7f\n\u0129\f\u0129\16\u0129\u1c82\13\u0129\3\u0129"+
		"\3\u0129\3\u0129\7\u0129\u1c87\n\u0129\f\u0129\16\u0129\u1c8a\13\u0129"+
		"\5\u0129\u1c8c\n\u0129\3\u0129\5\u0129\u1c8f\n\u0129\3\u012a\3\u012a\3"+
		"\u012a\3\u012a\3\u012b\3\u012b\3\u012b\5\u012b\u1c98\n\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1ca2\n"+
		"\u012c\3\u012c\3\u012c\3\u012c\7\u012c\u1ca7\n\u012c\f\u012c\16\u012c"+
		"\u1caa\13\u012c\3\u012c\5\u012c\u1cad\n\u012c\3\u012d\3\u012d\5\u012d"+
		"\u1cb1\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1cb7\n\u012e\3"+
		"\u012e\3\u012e\3\u012e\7\u012e\u1cbc\n\u012e\f\u012e\16\u012e\u1cbf\13"+
		"\u012e\3\u012e\5\u012e\u1cc2\n\u012e\3\u012f\3\u012f\3\u012f\3\u012f\5"+
		"\u012f\u1cc8\n\u012f\3\u012f\3\u012f\3\u012f\7\u012f\u1ccd\n\u012f\f\u012f"+
		"\16\u012f\u1cd0\13\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1cd6"+
		"\n\u012f\3\u012f\5\u012f\u1cd9\n\u012f\3\u0130\3\u0130\3\u0130\3\u0130"+
		"\5\u0130\u1cdf\n\u0130\3\u0130\3\u0130\3\u0130\7\u0130\u1ce4\n\u0130\f"+
		"\u0130\16\u0130\u1ce7\13\u0130\3\u0130\5\u0130\u1cea\n\u0130\3\u0131\3"+
		"\u0131\3\u0131\5\u0131\u1cef\n\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1cf4"+
		"\n\u0131\3\u0131\6\u0131\u1cf7\n\u0131\r\u0131\16\u0131\u1cf8\3\u0131"+
		"\3\u0131\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u1d01\n\u0132\3\u0132"+
		"\3\u0132\5\u0132\u1d05\n\u0132\3\u0133\3\u0133\3\u0133\3\u0133\5\u0133"+
		"\u1d0b\n\u0133\3\u0133\3\u0133\3\u0133\7\u0133\u1d10\n\u0133\f\u0133\16"+
		"\u0133\u1d13\13\u0133\3\u0133\5\u0133\u1d16\n\u0133\3\u0134\3\u0134\3"+
		"\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d1f\n\u0134\3\u0134\3"+
		"\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u1d27\n\u0134\3\u0135\3"+
		"\u0135\3\u0135\3\u0135\5\u0135\u1d2d\n\u0135\3\u0135\3\u0135\3\u0136\3"+
		"\u0136\5\u0136\u1d33\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\3"+
		"\u0137\3\u0137\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138\3\u0138"+
		"\3\u0138\5\u0138\u1d44\n\u0138\3\u0138\3\u0138\5\u0138\u1d48\n\u0138\3"+
		"\u0138\3\u0138\3\u0138\3\u0139\3\u0139\3\u0139\5\u0139\u1d50\n\u0139\3"+
		"\u0139\3\u0139\5\u0139\u1d54\n\u0139\3\u0139\3\u0139\3\u0139\3\u0139\7"+
		"\u0139\u1d5a\n\u0139\f\u0139\16\u0139\u1d5d\13\u0139\3\u0139\5\u0139\u1d60"+
		"\n\u0139\3\u0139\3\u0139\3\u0139\5\u0139\u1d65\n\u0139\3\u0139\3\u0139"+
		"\5\u0139\u1d69\n\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139\3\u0139"+
		"\7\u0139\u1d71\n\u0139\f\u0139\16\u0139\u1d74\13\u0139\3\u0139\3\u0139"+
		"\5\u0139\u1d78\n\u0139\5\u0139\u1d7a\n\u0139\3\u013a\3\u013a\3\u013a\3"+
		"\u013a\3\u013a\5\u013a\u1d81\n\u013a\3\u013b\3\u013b\5\u013b\u1d85\n\u013b"+
		"\3\u013b\3\u013b\5\u013b\u1d89\n\u013b\3\u013b\3\u013b\5\u013b\u1d8d\n"+
		"\u013b\3\u013b\5\u013b\u1d90\n\u013b\3\u013b\3\u013b\5\u013b\u1d94\n\u013b"+
		"\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u1d9a\n\u013b\3\u013b\3\u013b"+
		"\5\u013b\u1d9e\n\u013b\5\u013b\u1da0\n\u013b\3\u013c\3\u013c\3\u013c\3"+
		"\u013c\3\u013c\5\u013c\u1da7\n\u013c\3\u013c\3\u013c\3\u013c\7\u013c\u1dac"+
		"\n\u013c\f\u013c\16\u013c\u1daf\13\u013c\5\u013c\u1db1\n\u013c\3\u013c"+
		"\5\u013c\u1db4\n\u013c\3\u013c\3\u013c\3\u013c\7\u013c\u1db9\n\u013c\f"+
		"\u013c\16\u013c\u1dbc\13\u013c\3\u013c\3\u013c\5\u013c\u1dc0\n\u013c\3"+
		"\u013c\6\u013c\u1dc3\n\u013c\r\u013c\16\u013c\u1dc4\3\u013c\3\u013c\5"+
		"\u013c\u1dc9\n\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1dcf\n\u013c"+
		"\6\u013c\u1dd1\n\u013c\r\u013c\16\u013c\u1dd2\5\u013c\u1dd5\n\u013c\3"+
		"\u013c\3\u013c\3\u013c\5\u013c\u1dda\n\u013c\3\u013c\6\u013c\u1ddd\n\u013c"+
		"\r\u013c\16\u013c\u1dde\6\u013c\u1de1\n\u013c\r\u013c\16\u013c\u1de2\3"+
		"\u013c\3\u013c\3\u013c\5\u013c\u1de8\n\u013c\3\u013c\3\u013c\3\u013c\3"+
		"\u013c\5\u013c\u1dee\n\u013c\6\u013c\u1df0\n\u013c\r\u013c\16\u013c\u1df1"+
		"\6\u013c\u1df4\n\u013c\r\u013c\16\u013c\u1df5\5\u013c\u1df8\n\u013c\3"+
		"\u013c\3\u013c\5\u013c\u1dfc\n\u013c\3\u013c\3\u013c\5\u013c\u1e00\n\u013c"+
		"\3\u013c\3\u013c\5\u013c\u1e04\n\u013c\3\u013c\3\u013c\5\u013c\u1e08\n"+
		"\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1e0e\n\u013c\3\u013c\5"+
		"\u013c\u1e11\n\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1e17\n\u013c"+
		"\3\u013c\3\u013c\5\u013c\u1e1b\n\u013c\3\u013c\3\u013c\5\u013c\u1e1f\n"+
		"\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1e25\n\u013c\3\u013c\3"+
		"\u013c\3\u013c\3\u013c\5\u013c\u1e2b\n\u013c\5\u013c\u1e2d\n\u013c\3\u013c"+
		"\5\u013c\u1e30\n\u013c\3\u013c\3\u013c\5\u013c\u1e34\n\u013c\3\u013c\3"+
		"\u013c\5\u013c\u1e38\n\u013c\3\u013c\3\u013c\5\u013c\u1e3c\n\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\5\u013c\u1e42\n\u013c\3\u013c\5\u013c\u1e45\n"+
		"\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1e4b\n\u013c\3\u013c\3"+
		"\u013c\3\u013c\3\u013c\5\u013c\u1e51\n\u013c\3\u013c\5\u013c\u1e54\n\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1e5a\n\u013c\3\u013c\5\u013c"+
		"\u1e5d\n\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1e63\n\u013c\3"+
		"\u013c\5\u013c\u1e66\n\u013c\3\u013c\3\u013c\5\u013c\u1e6a\n\u013c\3\u013c"+
		"\3\u013c\5\u013c\u1e6e\n\u013c\3\u013c\3\u013c\5\u013c\u1e72\n\u013c\3"+
		"\u013c\3\u013c\3\u013c\5\u013c\u1e77\n\u013c\3\u013c\5\u013c\u1e7a\n\u013c"+
		"\3\u013c\3\u013c\5\u013c\u1e7e\n\u013c\3\u013c\3\u013c\5\u013c\u1e82\n"+
		"\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\5\u013c\u1e93"+
		"\n\u013c\7\u013c\u1e95\n\u013c\f\u013c\16\u013c\u1e98\13\u013c\5\u013c"+
		"\u1e9a\n\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1ea1\n"+
		"\u013d\3\u013d\6\u013d\u1ea4\n\u013d\r\u013d\16\u013d\u1ea5\3\u013d\3"+
		"\u013d\5\u013d\u1eaa\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1eb0"+
		"\n\u013d\6\u013d\u1eb2\n\u013d\r\u013d\16\u013d\u1eb3\5\u013d\u1eb6\n"+
		"\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1ebb\n\u013d\3\u013d\6\u013d\u1ebe"+
		"\n\u013d\r\u013d\16\u013d\u1ebf\6\u013d\u1ec2\n\u013d\r\u013d\16\u013d"+
		"\u1ec3\3\u013d\3\u013d\3\u013d\5\u013d\u1ec9\n\u013d\3\u013d\3\u013d\3"+
		"\u013d\3\u013d\5\u013d\u1ecf\n\u013d\6\u013d\u1ed1\n\u013d\r\u013d\16"+
		"\u013d\u1ed2\6\u013d\u1ed5\n\u013d\r\u013d\16\u013d\u1ed6\5\u013d\u1ed9"+
		"\n\u013d\3\u013d\3\u013d\5\u013d\u1edd\n\u013d\3\u013d\3\u013d\5\u013d"+
		"\u1ee1\n\u013d\3\u013d\3\u013d\5\u013d\u1ee5\n\u013d\3\u013d\3\u013d\5"+
		"\u013d\u1ee9\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1eef\n\u013d"+
		"\3\u013d\5\u013d\u1ef2\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d"+
		"\u1ef8\n\u013d\3\u013d\3\u013d\5\u013d\u1efc\n\u013d\3\u013d\3\u013d\5"+
		"\u013d\u1f00\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f06\n\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f0c\n\u013d\5\u013d\u1f0e\n"+
		"\u013d\3\u013d\5\u013d\u1f11\n\u013d\3\u013d\3\u013d\5\u013d\u1f15\n\u013d"+
		"\3\u013d\3\u013d\5\u013d\u1f19\n\u013d\3\u013d\3\u013d\5\u013d\u1f1d\n"+
		"\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f23\n\u013d\3\u013d\5"+
		"\u013d\u1f26\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f2c\n\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f32\n\u013d\3\u013d\5\u013d"+
		"\u1f35\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f3b\n\u013d\3"+
		"\u013d\5\u013d\u1f3e\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f44"+
		"\n\u013d\3\u013d\5\u013d\u1f47\n\u013d\3\u013d\3\u013d\5\u013d\u1f4b\n"+
		"\u013d\3\u013d\3\u013d\5\u013d\u1f4f\n\u013d\3\u013d\3\u013d\5\u013d\u1f53"+
		"\n\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f58\n\u013d\3\u013d\5\u013d"+
		"\u1f5b\n\u013d\3\u013d\3\u013d\5\u013d\u1f5f\n\u013d\3\u013d\3\u013d\5"+
		"\u013d\u1f63\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f69\n\u013d"+
		"\3\u013d\5\u013d\u1f6c\n\u013d\3\u013d\3\u013d\5\u013d\u1f70\n\u013d\3"+
		"\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\5\u013d\u1f81\n\u013d"+
		"\7\u013d\u1f83\n\u013d\f\u013d\16\u013d\u1f86\13\u013d\5\u013d\u1f88\n"+
		"\u013d\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u1f96\n\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\5\u013e\u1f9c\n\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\5\u013e\u1fa4\n\u013e\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\6\u013e\u1fab\n\u013e\r\u013e\16\u013e\u1fac\3\u013e\5\u013e"+
		"\u1fb0\n\u013e\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u1fd1\n\u0141"+
		"\3\u0142\3\u0142\5\u0142\u1fd5\n\u0142\3\u0142\3\u0142\5\u0142\u1fd9\n"+
		"\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0143\5\u0143\u1fe0\n\u0143\3"+
		"\u0144\3\u0144\3\u0144\3\u0144\3\u0145\3\u0145\3\u0145\5\u0145\u1fe9\n"+
		"\u0145\3\u0146\3\u0146\3\u0146\3\u0146\7\u0146\u1fef\n\u0146\f\u0146\16"+
		"\u0146\u1ff2\13\u0146\5\u0146\u1ff4\n\u0146\3\u0146\5\u0146\u1ff7\n\u0146"+
		"\3\u0147\3\u0147\5\u0147\u1ffb\n\u0147\3\u0147\3\u0147\5\u0147\u1fff\n"+
		"\u0147\3\u0147\5\u0147\u2002\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\7"+
		"\u0147\u2008\n\u0147\f\u0147\16\u0147\u200b\13\u0147\3\u0147\3\u0147\5"+
		"\u0147\u200f\n\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u2014\n\u0147\5\u0147"+
		"\u2016\n\u0147\3\u0148\3\u0148\3\u0148\7\u0148\u201b\n\u0148\f\u0148\16"+
		"\u0148\u201e\13\u0148\3\u0148\3\u0148\3\u0148\7\u0148\u2023\n\u0148\f"+
		"\u0148\16\u0148\u2026\13\u0148\5\u0148\u2028\n\u0148\3\u0149\3\u0149\3"+
		"\u0149\3\u0149\3\u014a\3\u014a\3\u014b\3\u014b\3\u014b\5\u014b\u2033\n"+
		"\u014b\3\u014b\3\u014b\3\u014b\5\u014b\u2038\n\u014b\3\u014c\3\u014c\3"+
		"\u014d\3\u014d\5\u014d\u203e\n\u014d\3\u014d\3\u014d\3\u014d\5\u014d\u2043"+
		"\n\u014d\3\u014d\3\u014d\3\u014d\3\u014d\3\u014d\5\u014d\u204a\n\u014d"+
		"\5\u014d\u204c\n\u014d\3\u014d\3\u014d\5\u014d\u2050\n\u014d\3\u014d\3"+
		"\u014d\3\u014d\3\u014d\7\u014d\u2056\n\u014d\f\u014d\16\u014d\u2059\13"+
		"\u014d\3\u014d\3\u014d\3\u014d\5\u014d\u205e\n\u014d\3\u014d\3\u014d\5"+
		"\u014d\u2062\n\u014d\3\u014d\5\u014d\u2065\n\u014d\3\u014d\3\u014d\3\u014d"+
		"\3\u014d\3\u014d\3\u014d\3\u014d\5\u014d\u206e\n\u014d\3\u014d\5\u014d"+
		"\u2071\n\u014d\3\u014d\3\u014d\3\u014d\3\u014d\5\u014d\u2077\n\u014d\3"+
		"\u014e\3\u014e\3\u014e\5\u014e\u207c\n\u014e\3\u014f\3\u014f\3\u014f\3"+
		"\u014f\3\u014f\5\u014f\u2083\n\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u2088"+
		"\n\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\3\u014f\5\u014f\u2090"+
		"\n\u014f\3\u0150\3\u0150\3\u0150\5\u0150\u2095\n\u0150\3\u0150\3\u0150"+
		"\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150"+
		"\u20a1\n\u0150\5\u0150\u20a3\n\u0150\3\u0151\3\u0151\3\u0151\3\u0151\3"+
		"\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151\u20ae\n\u0151\3\u0152\3"+
		"\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u20b5\n\u0152\3\u0152\3\u0152\3"+
		"\u0152\3\u0152\3\u0152\3\u0152\7\u0152\u20bd\n\u0152\f\u0152\16\u0152"+
		"\u20c0\13\u0152\3\u0153\3\u0153\3\u0153\3\u0153\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154"+
		"\3\u0154\3\u0154\3\u0154\3\u0154\5\u0154\u20d6\n\u0154\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\5\u0155\u20e3\n\u0155\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\5\u0156"+
		"\u20f3\n\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u20f8\n\u0156\3\u0156\3"+
		"\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u20ff\n\u0156\3\u0156\5\u0156\u2102"+
		"\n\u0156\6\u0156\u2104\n\u0156\r\u0156\16\u0156\u2105\5\u0156\u2108\n"+
		"\u0156\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u2119"+
		"\n\u0157\3\u0158\3\u0158\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u2128\n\u0159\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u2130\n\u015a\3\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u2139\n\u015a"+
		"\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u2141\n\u015a"+
		"\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u214a"+
		"\n\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\3\u015b\5\u015b\u2155\n\u015b\3\u015b\3\u015b\5\u015b\u2159\n\u015b\5"+
		"\u015b\u215b\n\u015b\5\u015b\u215d\n\u015b\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\5\u015c\u2163\n\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u2168\n\u015c\3"+
		"\u015c\3\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u216f\n\u015c\3\u015c\3"+
		"\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\5\u015c\u217c\n\u015c\5\u015c\u217e\n\u015c\5\u015c\u2180\n\u015c"+
		"\3\u015c\5\u015c\u2183\n\u015c\3\u015c\5\u015c\u2186\n\u015c\3\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u218d\n\u015d\3\u015d\5\u015d\u2190"+
		"\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u2196\n\u015d\3\u015d"+
		"\3\u015d\3\u015d\5\u015d\u219b\n\u015d\5\u015d\u219d\n\u015d\3\u015d\5"+
		"\u015d\u21a0\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u21a6\n\u015d"+
		"\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u21ae\n\u015d"+
		"\5\u015d\u21b0\n\u015d\3\u015d\5\u015d\u21b3\n\u015d\3\u015d\3\u015d\5"+
		"\u015d\u21b7\n\u015d\3\u015d\5\u015d\u21ba\n\u015d\3\u015d\3\u015d\3\u015d"+
		"\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u21c4\n\u015d\3\u015d"+
		"\5\u015d\u21c7\n\u015d\3\u015d\3\u015d\5\u015d\u21cb\n\u015d\3\u015d\5"+
		"\u015d\u21ce\n\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u21d4\n\u015d"+
		"\3\u015d\5\u015d\u21d7\n\u015d\5\u015d\u21d9\n\u015d\3\u015e\3\u015e\5"+
		"\u015e\u21dd\n\u015e\3\u015f\3\u015f\5\u015f\u21e1\n\u015f\3\u0160\3\u0160"+
		"\3\u0160\5\u0160\u21e6\n\u0160\3\u0161\3\u0161\5\u0161\u21ea\n\u0161\3"+
		"\u0162\3\u0162\3\u0162\5\u0162\u21ef\n\u0162\3\u0163\3\u0163\3\u0163\5"+
		"\u0163\u21f4\n\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3"+
		"\u0164\3\u0164\5\u0164\u21fe\n\u0164\3\u0164\5\u0164\u2201\n\u0164\3\u0164"+
		"\5\u0164\u2204\n\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\5\u0165\u220c\n\u0165\3\u0165\3\u0165\5\u0165\u2210\n\u0165\3\u0165\5"+
		"\u0165\u2213\n\u0165\3\u0166\3\u0166\5\u0166\u2217\n\u0166\3\u0167\3\u0167"+
		"\3\u0167\5\u0167\u221c\n\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0169"+
		"\3\u0169\5\u0169\u2224\n\u0169\3\u0169\3\u0169\3\u0169\5\u0169\u2229\n"+
		"\u0169\3\u016a\3\u016a\3\u016a\3\u016a\5\u016a\u222f\n\u016a\3\u016a\7"+
		"\u016a\u2232\n\u016a\f\u016a\16\u016a\u2235\13\u016a\3\u016a\3\u016a\3"+
		"\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u223d\n\u016b\3\u016b\5\u016b\u2240"+
		"\n\u016b\3\u016b\5\u016b\u2243\n\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\5\u016b\u224e\n\u016b\3\u016c"+
		"\3\u016c\3\u016c\5\u016c\u2253\n\u016c\3\u016c\3\u016c\3\u016c\3\u016d"+
		"\3\u016d\3\u016d\3\u016d\3\u016e\3\u016e\5\u016e\u225e\n\u016e\3\u016e"+
		"\7\u016e\u2261\n\u016e\f\u016e\16\u016e\u2264\13\u016e\3\u016f\3\u016f"+
		"\3\u016f\5\u016f\u2269\n\u016f\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170"+
		"\5\u0170\u2270\n\u0170\5\u0170\u2272\n\u0170\3\u0170\3\u0170\5\u0170\u2276"+
		"\n\u0170\3\u0170\5\u0170\u2279\n\u0170\3\u0170\3\u0170\5\u0170\u227d\n"+
		"\u0170\3\u0170\3\u0170\5\u0170\u2281\n\u0170\3\u0170\3\u0170\3\u0170\3"+
		"\u0170\3\u0170\3\u0170\5\u0170\u2289\n\u0170\3\u0170\3\u0170\3\u0170\5"+
		"\u0170\u228e\n\u0170\5\u0170\u2290\n\u0170\3\u0170\5\u0170\u2293\n\u0170"+
		"\3\u0170\7\u0170\u2296\n\u0170\f\u0170\16\u0170\u2299\13\u0170\3\u0171"+
		"\3\u0171\3\u0171\3\u0171\3\u0171\3\u0171\5\u0171\u22a1\n\u0171\3\u0172"+
		"\3\u0172\5\u0172\u22a5\n\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u22aa\n"+
		"\u0172\3\u0172\5\u0172\u22ad\n\u0172\3\u0172\5\u0172\u22b0\n\u0172\3\u0172"+
		"\3\u0172\3\u0172\3\u0172\5\u0172\u22b6\n\u0172\3\u0172\3\u0172\3\u0172"+
		"\3\u0172\3\u0172\3\u0172\5\u0172\u22be\n\u0172\3\u0172\3\u0172\3\u0172"+
		"\3\u0172\3\u0172\3\u0172\5\u0172\u22c6\n\u0172\3\u0172\5\u0172\u22c9\n"+
		"\u0172\3\u0172\5\u0172\u22cc\n\u0172\3\u0173\3\u0173\5\u0173\u22d0\n\u0173"+
		"\3\u0173\3\u0173\3\u0173\5\u0173\u22d5\n\u0173\3\u0173\5\u0173\u22d8\n"+
		"\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u22de\n\u0173\3\u0173\3"+
		"\u0173\5\u0173\u22e2\n\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u22e8"+
		"\n\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u22f0"+
		"\n\u0173\3\u0173\3\u0173\3\u0173\3\u0173\6\u0173\u22f6\n\u0173\r\u0173"+
		"\16\u0173\u22f7\3\u0173\5\u0173\u22fb\n\u0173\3\u0173\3\u0173\3\u0173"+
		"\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173\3\u0173"+
		"\3\u0173\5\u0173\u230a\n\u0173\3\u0173\5\u0173\u230d\n\u0173\3\u0173\5"+
		"\u0173\u2310\n\u0173\5\u0173\u2312\n\u0173\3\u0174\3\u0174\3\u0174\3\u0174"+
		"\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\5\u0174\u231d\n\u0174\3\u0175"+
		"\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\5\u0175"+
		"\u2328\n\u0175\3\u0176\3\u0176\3\u0176\3\u0176\3\u0176\7\u0176\u232f\n"+
		"\u0176\f\u0176\16\u0176\u2332\13\u0176\3\u0176\3\u0176\3\u0177\3\u0177"+
		"\5\u0177\u2338\n\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\5\u0177"+
		"\u233f\n\u0177\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\5\u0178\u2349\n\u0178\5\u0178\u234b\n\u0178\5\u0178\u234d\n\u0178"+
		"\3\u0178\5\u0178\u2350\n\u0178\3\u0178\5\u0178\u2353\n\u0178\3\u0178\3"+
		"\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\5\u0178"+
		"\u235e\n\u0178\5\u0178\u2360\n\u0178\5\u0178\u2362\n\u0178\3\u0178\5\u0178"+
		"\u2365\n\u0178\3\u0179\7\u0179\u2368\n\u0179\f\u0179\16\u0179\u236b\13"+
		"\u0179\3\u0179\3\u0179\3\u0179\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a"+
		"\5\u017a\u2375\n\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\5\u017b\u237e\n\u017b\3\u017b\5\u017b\u2381\n\u017b\3\u017b\5"+
		"\u017b\u2384\n\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\7\u017b\u238b"+
		"\n\u017b\f\u017b\16\u017b\u238e\13\u017b\5\u017b\u2390\n\u017b\3\u017b"+
		"\5\u017b\u2393\n\u017b\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c"+
		"\u239a\n\u017c\3\u017c\5\u017c\u239d\n\u017c\3\u017c\3\u017c\3\u017c\3"+
		"\u017c\3\u017c\5\u017c\u23a4\n\u017c\3\u017c\3\u017c\3\u017c\3\u017c\5"+
		"\u017c\u23aa\n\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3"+
		"\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c\u23b9\n"+
		"\u017c\3\u017c\5\u017c\u23bc\n\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3"+
		"\u017c\5\u017c\u23c3\n\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\5"+
		"\u017c\u23ca\n\u017c\3\u017d\3\u017d\5\u017d\u23ce\n\u017d\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\5\u017e\u23d8\n\u017e"+
		"\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\5\u017e\u23e6\n\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\7\u017e\u23ed\n\u017e\f\u017e\16\u017e\u23f0\13\u017e"+
		"\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\5\u0180\u23fb\n\u0180\3\u0181\3\u0181\3\u0181\6\u0181\u2400\n\u0181\r"+
		"\u0181\16\u0181\u2401\3\u0181\3\u0181\5\u0181\u2406\n\u0181\3\u0181\3"+
		"\u0181\3\u0181\3\u0181\6\u0181\u240c\n\u0181\r\u0181\16\u0181\u240d\3"+
		"\u0181\3\u0181\5\u0181\u2412\n\u0181\3\u0181\3\u0181\5\u0181\u2416\n\u0181"+
		"\3\u0182\3\u0182\3\u0182\3\u0182\5\u0182\u241c\n\u0182\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u2426\n\u0183"+
		"\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\5\u0184"+
		"\u2430\n\u0184\3\u0185\3\u0185\3\u0186\3\u0186\3\u0186\3\u0186\7\u0186"+
		"\u2438\n\u0186\f\u0186\16\u0186\u243b\13\u0186\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0187\5\u0187\u2442\n\u0187\3\u0187\3\u0187\3\u0187\3\u0187"+
		"\3\u0187\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u244e\n\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u2454\n\u0188\3\u0188\3\u0188"+
		"\5\u0188\u2458\n\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188\3\u0188"+
		"\3\u0188\3\u0188\5\u0188\u2462\n\u0188\3\u0189\3\u0189\5\u0189\u2466\n"+
		"\u0189\3\u0189\3\u0189\5\u0189\u246a\n\u0189\3\u0189\3\u0189\3\u0189\3"+
		"\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u2474\n\u0189\3\u018a\3"+
		"\u018a\3\u018a\7\u018a\u2479\n\u018a\f\u018a\16\u018a\u247c\13\u018a\3"+
		"\u018b\7\u018b\u247f\n\u018b\f\u018b\16\u018b\u2482\13\u018b\3\u018b\3"+
		"\u018b\7\u018b\u2486\n\u018b\f\u018b\16\u018b\u2489\13\u018b\3\u018b\3"+
		"\u018b\3\u018b\3\u018b\5\u018b\u248f\n\u018b\3\u018c\3\u018c\3\u018c\3"+
		"\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c"+
		"\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\3\u018c\7\u018c\u24a4"+
		"\n\u018c\f\u018c\16\u018c\u24a7\13\u018c\3\u018c\3\u018c\3\u018c\3\u018c"+
		"\3\u018c\3\u018c\3\u018c\7\u018c\u24b0\n\u018c\f\u018c\16\u018c\u24b3"+
		"\13\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u24b9\n\u018c\3\u018c"+
		"\3\u018c\3\u018c\3\u018c\7\u018c\u24bf\n\u018c\f\u018c\16\u018c\u24c2"+
		"\13\u018c\3\u018c\3\u018c\3\u018c\3\u018c\5\u018c\u24c8\n\u018c\3\u018c"+
		"\3\u018c\3\u018c\3\u018c\5\u018c\u24ce\n\u018c\3\u018d\3\u018d\3\u018d"+
		"\3\u018d\3\u018d\5\u018d\u24d5\n\u018d\3\u018d\3\u018d\5\u018d\u24d9\n"+
		"\u018d\3\u018d\6\u018d\u24dc\n\u018d\r\u018d\16\u018d\u24dd\5\u018d\u24e0"+
		"\n\u018d\3\u018e\3\u018e\5\u018e\u24e4\n\u018e\3\u018e\3\u018e\5\u018e"+
		"\u24e8\n\u018e\3\u018e\3\u018e\3\u018e\3\u018e\3\u018e\5\u018e\u24ef\n"+
		"\u018e\3\u018f\3\u018f\5\u018f\u24f3\n\u018f\3\u018f\5\u018f\u24f6\n\u018f"+
		"\3\u018f\3\u018f\3\u018f\5\u018f\u24fb\n\u018f\3\u018f\3\u018f\5\u018f"+
		"\u24ff\n\u018f\3\u018f\3\u018f\5\u018f\u2503\n\u018f\3\u018f\3\u018f\3"+
		"\u018f\5\u018f\u2508\n\u018f\3\u018f\3\u018f\3\u018f\7\u018f\u250d\n\u018f"+
		"\f\u018f\16\u018f\u2510\13\u018f\5\u018f\u2512\n\u018f\3\u018f\3\u018f"+
		"\5\u018f\u2516\n\u018f\3\u0190\3\u0190\3\u0190\5\u0190\u251b\n\u0190\3"+
		"\u0190\3\u0190\5\u0190\u251f\n\u0190\3\u0191\3\u0191\3\u0191\3\u0191\3"+
		"\u0191\3\u0191\3\u0191\5\u0191\u2528\n\u0191\3\u0192\3\u0192\3\u0192\3"+
		"\u0192\3\u0192\5\u0192\u252f\n\u0192\3\u0193\3\u0193\3\u0193\3\u0193\3"+
		"\u0193\7\u0193\u2536\n\u0193\f\u0193\16\u0193\u2539\13\u0193\3\u0193\3"+
		"\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\3\u0193\5\u0193"+
		"\u2544\n\u0193\5\u0193\u2546\n\u0193\3\u0194\3\u0194\3\u0194\3\u0194\3"+
		"\u0194\3\u0194\3\u0194\3\u0194\5\u0194\u2550\n\u0194\3\u0194\5\u0194\u2553"+
		"\n\u0194\3\u0194\7\u0194\u2556\n\u0194\f\u0194\16\u0194\u2559\13\u0194"+
		"\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\5\u0194\u2561\n\u0194"+
		"\5\u0194\u2563\n\u0194\5\u0194\u2565\n\u0194\3\u0194\3\u0194\3\u0194\5"+
		"\u0194\u256a\n\u0194\5\u0194\u256c\n\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\7\u0194\u2572\n\u0194\f\u0194\16\u0194\u2575\13\u0194\3\u0194\3\u0194"+
		"\5\u0194\u2579\n\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\5\u0194\u2581\n\u0194\3\u0194\7\u0194\u2584\n\u0194\f\u0194\16\u0194"+
		"\u2587\13\u0194\3\u0194\3\u0194\3\u0194\5\u0194\u258c\n\u0194\5\u0194"+
		"\u258e\n\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\5\u0194\u2598\n\u0194\5\u0194\u259a\n\u0194\3\u0194\3\u0194\5"+
		"\u0194\u259e\n\u0194\3\u0194\3\u0194\5\u0194\u25a2\n\u0194\5\u0194\u25a4"+
		"\n\u0194\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\5\u0195"+
		"\u25ad\n\u0195\5\u0195\u25af\n\u0195\3\u0196\3\u0196\3\u0196\5\u0196\u25b4"+
		"\n\u0196\3\u0197\3\u0197\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\7\u0198"+
		"\u25bd\n\u0198\f\u0198\16\u0198\u25c0\13\u0198\3\u0198\3\u0198\3\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\7\u0199"+
		"\u25df\n\u0199\f\u0199\16\u0199\u25e2\13\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199\3\u0199"+
		"\3\u0199\5\u0199\u25f1\n\u0199\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\5\u019a\u25f8\n\u019a\5\u019a\u25fa\n\u019a\3\u019b\3\u019b\3\u019b\7"+
		"\u019b\u25ff\n\u019b\f\u019b\16\u019b\u2602\13\u019b\3\u019c\3\u019c\3"+
		"\u019c\3\u019c\7\u019c\u2608\n\u019c\f\u019c\16\u019c\u260b\13\u019c\3"+
		"\u019c\3\u019c\3\u019d\3\u019d\3\u019d\5\u019d\u2612\n\u019d\3\u019d\3"+
		"\u019d\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\3\u019e\5\u019e\u261c\n"+
		"\u019e\3\u019e\5\u019e\u261f\n\u019e\3\u019f\3\u019f\3\u019f\3\u019f\3"+
		"\u019f\5\u019f\u2626\n\u019f\3\u019f\3\u019f\3\u019f\3\u019f\3\u019f\5"+
		"\u019f\u262d\n\u019f\3\u019f\5\u019f\u2630\n\u019f\5\u019f\u2632\n\u019f"+
		"\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\3\u01a0\5\u01a0\u263a\n\u01a0"+
		"\5\u01a0\u263c\n\u01a0\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1\3\u01a1"+
		"\5\u01a1\u2644\n\u01a1\3\u01a1\3\u01a1\5\u01a1\u2648\n\u01a1\3\u01a2\3"+
		"\u01a2\3\u01a2\7\u01a2\u264d\n\u01a2\f\u01a2\16\u01a2\u2650\13\u01a2\3"+
		"\u01a3\3\u01a3\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u2657\n\u01a3\3\u01a4\3"+
		"\u01a4\7\u01a4\u265b\n\u01a4\f\u01a4\16\u01a4\u265e\13\u01a4\3\u01a5\3"+
		"\u01a5\5\u01a5\u2662\n\u01a5\3\u01a5\3\u01a5\5\u01a5\u2666\n\u01a5\3\u01a5"+
		"\3\u01a5\5\u01a5\u266a\n\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\5\u01a5\u2671\n\u01a5\5\u01a5\u2673\n\u01a5\3\u01a5\3\u01a5\5\u01a5\u2677"+
		"\n\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u267c\n\u01a5\5\u01a5\u267e\n"+
		"\u01a5\3\u01a5\3\u01a5\5\u01a5\u2682\n\u01a5\3\u01a5\3\u01a5\3\u01a5\5"+
		"\u01a5\u2687\n\u01a5\5\u01a5\u2689\n\u01a5\3\u01a5\3\u01a5\3\u01a5\3\u01a5"+
		"\3\u01a5\5\u01a5\u2690\n\u01a5\5\u01a5\u2692\n\u01a5\3\u01a5\3\u01a5\3"+
		"\u01a5\3\u01a5\3\u01a5\3\u01a5\5\u01a5\u269a\n\u01a5\5\u01a5\u269c\n\u01a5"+
		"\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u26a5"+
		"\n\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\3\u01a6\5\u01a6\u26ad"+
		"\n\u01a6\3\u01a6\5\u01a6\u26b0\n\u01a6\3\u01a7\3\u01a7\3\u01a7\3\u01a7"+
		"\3\u01a7\5\u01a7\u26b7\n\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7\3\u01a7"+
		"\3\u01a7\5\u01a7\u26bf\n\u01a7\3\u01a7\5\u01a7\u26c2\n\u01a7\3\u01a8\3"+
		"\u01a8\3\u01a8\7\u01a8\u26c7\n\u01a8\f\u01a8\16\u01a8\u26ca\13\u01a8\3"+
		"\u01a9\3\u01a9\3\u01a9\5\u01a9\u26cf\n\u01a9\3\u01aa\3\u01aa\3\u01aa\7"+
		"\u01aa\u26d4\n\u01aa\f\u01aa\16\u01aa\u26d7\13\u01aa\3\u01ab\3\u01ab\3"+
		"\u01ab\5\u01ab\u26dc\n\u01ab\3\u01ac\3\u01ac\5\u01ac\u26e0\n\u01ac\3\u01ad"+
		"\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ad\3\u01ae\3\u01ae"+
		"\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01ae\3\u01af"+
		"\3\u01af\3\u01af\3\u01af\3\u01af\5\u01af\u26f9\n\u01af\3\u01b0\5\u01b0"+
		"\u26fc\n\u01b0\3\u01b0\3\u01b0\5\u01b0\u2700\n\u01b0\5\u01b0\u2702\n\u01b0"+
		"\3\u01b0\5\u01b0\u2705\n\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0\3\u01b0"+
		"\3\u01b1\3\u01b1\3\u01b1\3\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b2\3\u01b3"+
		"\3\u01b3\3\u01b3\3\u01b3\3\u01b4\3\u01b4\3\u01b4\3\u01b4\3\u01b5\3\u01b5"+
		"\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b5\3\u01b6\3\u01b6\3\u01b6"+
		"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b7\3\u01b7"+
		"\3\u01b7\7\u01b7\u2731\n\u01b7\f\u01b7\16\u01b7\u2734\13\u01b7\3\u01b8"+
		"\3\u01b8\5\u01b8\u2738\n\u01b8\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9\3\u01b9"+
		"\3\u01b9\3\u01b9\7\u01b9\u274a\n\u01b9\f\u01b9\16\u01b9\u274d\13\u01b9"+
		"\3\u01b9\5\u01b9\u2750\n\u01b9\3\u01b9\3\u01b9\5\u01b9\u2754\n\u01b9\3"+
		"\u01ba\3\u01ba\3\u01ba\3\u01ba\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb"+
		"\3\u01bb\3\u01bb\3\u01bb\3\u01bb\3\u01bb\5\u01bb\u2764\n\u01bb\3\u01bc"+
		"\3\u01bc\3\u01bc\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u276c\n\u01bc\3\u01bc"+
		"\3\u01bc\3\u01bc\3\u01bc\5\u01bc\u2772\n\u01bc\3\u01bd\3\u01bd\3\u01bd"+
		"\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\7\u01bd\u277d\n\u01bd"+
		"\f\u01bd\16\u01bd\u2780\13\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u2785"+
		"\n\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\5\u01bd\u278c\n";
	private static final String _serializedATNSegment1 =
		"\u01bd\3\u01bd\3\u01bd\5\u01bd\u2790\n\u01bd\3\u01bd\3\u01bd\3\u01bd\3"+
		"\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\7\u01bd"+
		"\u279d\n\u01bd\f\u01bd\16\u01bd\u27a0\13\u01bd\3\u01bd\3\u01bd\3\u01bd"+
		"\5\u01bd\u27a5\n\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd"+
		"\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd\3\u01bd"+
		"\3\u01bd\3\u01bd\5\u01bd\u27b8\n\u01bd\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\7\u01be\u27c1\n\u01be\f\u01be\16\u01be\u27c4"+
		"\13\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\5\u01be\u27d0\n\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\7\u01be\u27df\n\u01be\f\u01be\16\u01be\u27e2\13\u01be\3\u01be\3\u01be"+
		"\3\u01be\5\u01be\u27e7\n\u01be\3\u01be\3\u01be\3\u01be\3\u01be\3\u01be"+
		"\5\u01be\u27ee\n\u01be\3\u01be\3\u01be\5\u01be\u27f2\n\u01be\3\u01bf\3"+
		"\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\5\u01bf\u280d\n\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\5\u01bf\u2847\n\u01bf\3\u01bf\3\u01bf\5\u01bf\u284b\n"+
		"\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf\3\u01bf"+
		"\3\u01bf\3\u01bf\5\u01bf\u2884\n\u01bf\5\u01bf\u2886\n\u01bf\3\u01c0\3"+
		"\u01c0\3\u01c0\3\u01c0\5\u01c0\u288c\n\u01c0\3\u01c1\3\u01c1\3\u01c1\3"+
		"\u01c1\3\u01c1\3\u01c1\3\u01c1\3\u01c1\5\u01c1\u2896\n\u01c1\3\u01c1\3"+
		"\u01c1\3\u01c1\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2\3\u01c2"+
		"\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c3\5\u01c3\u28a9"+
		"\n\u01c3\3\u01c3\3\u01c3\3\u01c3\3\u01c4\3\u01c4\3\u01c4\3\u01c4\3\u01c4"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\3\u01c5\5\u01c5\u28b9\n\u01c5"+
		"\3\u01c5\3\u01c5\3\u01c5\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c6\3\u01c7"+
		"\3\u01c7\3\u01c7\3\u01c7\3\u01c7\3\u01c7\5\u01c7\u28c9\n\u01c7\3\u01c7"+
		"\3\u01c7\3\u01c7\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c9\3\u01c9"+
		"\3\u01c9\3\u01c9\3\u01c9\3\u01c9\5\u01c9\u28d9\n\u01c9\3\u01c9\3\u01c9"+
		"\3\u01c9\3\u01c9\3\u01c9\3\u01c9\3\u01ca\3\u01ca\3\u01ca\3\u01ca\3\u01ca"+
		"\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cb\3\u01cc\5\u01cc\u28ec\n\u01cc"+
		"\3\u01cc\3\u01cc\3\u01cd\5\u01cd\u28f1\n\u01cd\3\u01cd\3\u01cd\3\u01ce"+
		"\3\u01ce\5\u01ce\u28f7\n\u01ce\3\u01cf\5\u01cf\u28fa\n\u01cf\3\u01cf\3"+
		"\u01cf\3\u01cf\5\u01cf\u28ff\n\u01cf\3\u01cf\7\u01cf\u2902\n\u01cf\f\u01cf"+
		"\16\u01cf\u2905\13\u01cf\3\u01cf\3\u01cf\3\u01d0\3\u01d0\3\u01d0\3\u01d0"+
		"\5\u01d0\u290d\n\u01d0\3\u01d0\7\u01d0\u2910\n\u01d0\f\u01d0\16\u01d0"+
		"\u2913\13\u01d0\3\u01d0\3\u01d0\3\u01d1\5\u01d1\u2918\n\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\7\u01d1\u291f\n\u01d1\f\u01d1\16\u01d1"+
		"\u2922\13\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\7\u01d1\u2929"+
		"\n\u01d1\f\u01d1\16\u01d1\u292c\13\u01d1\5\u01d1\u292e\n\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\7\u01d1\u293a\n\u01d1\f\u01d1\16\u01d1\u293d\13\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\5\u01d1\u2942\n\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1\3\u01d1"+
		"\3\u01d1\3\u01d1\5\u01d1\u294b\n\u01d1\3\u01d2\3\u01d2\5\u01d2\u294f\n"+
		"\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\7\u01d3\u2955\n\u01d3\f\u01d3\16"+
		"\u01d3\u2958\13\u01d3\3\u01d3\3\u01d3\3\u01d4\3\u01d4\5\u01d4\u295e\n"+
		"\u01d4\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5\3\u01d5"+
		"\3\u01d5\7\u01d5\u2969\n\u01d5\f\u01d5\16\u01d5\u296c\13\u01d5\3\u01d6"+
		"\3\u01d6\3\u01d6\7\u01d6\u2971\n\u01d6\f\u01d6\16\u01d6\u2974\13\u01d6"+
		"\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7\3\u01d7"+
		"\3\u01d7\5\u01d7\u2980\n\u01d7\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\5\u01d8\u2987\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u298d\n"+
		"\u01d8\3\u01d8\3\u01d8\5\u01d8\u2991\n\u01d8\3\u01d8\3\u01d8\3\u01d8\3"+
		"\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8\3\u01d8"+
		"\3\u01d8\3\u01d8\3\u01d8\5\u01d8\u29a2\n\u01d8\3\u01d9\3\u01d9\3\u01d9"+
		"\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\3\u01d9\5\u01d9\u29b1\n\u01d9\5\u01d9\u29b3\n\u01d9\3\u01d9\3\u01d9\3"+
		"\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\5\u01d9\u29c0\n\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9"+
		"\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\5\u01d9"+
		"\u29d0\n\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\3\u01d9\5\u01d9"+
		"\u29d8\n\u01d9\3\u01d9\3\u01d9\5\u01d9\u29dc\n\u01d9\3\u01da\5\u01da\u29df"+
		"\n\u01da\3\u01da\3\u01da\3\u01db\3\u01db\3\u01db\3\u01db\3\u01db\5\u01db"+
		"\u29e8\n\u01db\3\u01db\5\u01db\u29eb\n\u01db\3\u01db\5\u01db\u29ee\n\u01db"+
		"\3\u01db\3\u01db\3\u01dc\3\u01dc\3\u01dc\3\u01dd\3\u01dd\3\u01dd\3\u01dd"+
		"\3\u01dd\3\u01dd\5\u01dd\u29fb\n\u01dd\3\u01de\3\u01de\5\u01de\u29ff\n"+
		"\u01de\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\5\u01df\u2a07\n"+
		"\u01df\3\u01e0\3\u01e0\3\u01e0\3\u01e0\5\u01e0\u2a0d\n\u01e0\3\u01e1\3"+
		"\u01e1\3\u01e1\3\u01e1\7\u01e1\u2a13\n\u01e1\f\u01e1\16\u01e1\u2a16\13"+
		"\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\5\u01e1\u2a1c\n\u01e1\3\u01e1\3"+
		"\u01e1\3\u01e1\3\u01e1\5\u01e1\u2a22\n\u01e1\3\u01e1\3\u01e1\3\u01e1\3"+
		"\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1\3\u01e1"+
		"\3\u01e1\5\u01e1\u2a31\n\u01e1\3\u01e2\3\u01e2\3\u01e2\3\u01e2\3\u01e2"+
		"\3\u01e2\3\u01e2\5\u01e2\u2a3a\n\u01e2\3\u01e2\3\u01e2\3\u01e3\3\u01e3"+
		"\5\u01e3\u2a40\n\u01e3\3\u01e4\3\u01e4\3\u01e4\3\u01e4\5\u01e4\u2a46\n"+
		"\u01e4\3\u01e4\5\u01e4\u2a49\n\u01e4\3\u01e4\3\u01e4\5\u01e4\u2a4d\n\u01e4"+
		"\3\u01e4\3\u01e4\3\u01e4\7\u01e4\u2a52\n\u01e4\f\u01e4\16\u01e4\u2a55"+
		"\13\u01e4\3\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u2a5c\n\u01e5"+
		"\3\u01e5\5\u01e5\u2a5f\n\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5\u01e5"+
		"\u2a65\n\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u2a6b\n\u01e5\5"+
		"\u01e5\u2a6d\n\u01e5\3\u01e5\3\u01e5\3\u01e5\3\u01e5\5\u01e5\u2a73\n\u01e5"+
		"\3\u01e5\5\u01e5\u2a76\n\u01e5\5\u01e5\u2a78\n\u01e5\3\u01e5\3\u01e5\3"+
		"\u01e5\3\u01e5\5\u01e5\u2a7e\n\u01e5\5\u01e5\u2a80\n\u01e5\3\u01e5\3\u01e5"+
		"\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6"+
		"\3\u01e6\5\u01e6\u2a8e\n\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6\3\u01e6"+
		"\5\u01e6\u2a95\n\u01e6\3\u01e6\3\u01e6\3\u01e7\3\u01e7\3\u01e7\3\u01e7"+
		"\3\u01e7\5\u01e7\u2a9e\n\u01e7\3\u01e8\3\u01e8\3\u01e8\3\u01e8\3\u01e8"+
		"\5\u01e8\u2aa5\n\u01e8\3\u01e9\3\u01e9\3\u01e9\3\u01e9\3\u01e9\3\u01e9"+
		"\3\u01e9\3\u01e9\3\u01e9\3\u01e9\5\u01e9\u2ab1\n\u01e9\3\u01e9\3\u01e9"+
		"\3\u01e9\3\u01e9\3\u01e9\5\u01e9\u2ab8\n\u01e9\3\u01e9\3\u01e9\3\u01ea"+
		"\3\u01ea\3\u01ea\5\u01ea\u2abf\n\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea"+
		"\3\u01ea\5\u01ea\u2ac6\n\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\5\u01ea"+
		"\u2acc\n\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\3\u01ea\5\u01ea\u2ad3\n"+
		"\u01ea\3\u01ea\5\u01ea\u2ad6\n\u01ea\3\u01eb\3\u01eb\3\u01eb\5\u01eb\u2adb"+
		"\n\u01eb\3\u01eb\3\u01eb\3\u01ec\3\u01ec\3\u01ec\5\u01ec\u2ae2\n\u01ec"+
		"\3\u01ec\3\u01ec\3\u01ed\5\u01ed\u2ae7\n\u01ed\3\u01ed\3\u01ed\5\u01ed"+
		"\u2aeb\n\u01ed\3\u01ed\3\u01ed\3\u01ed\5\u01ed\u2af0\n\u01ed\3\u01ee\5"+
		"\u01ee\u2af3\n\u01ee\3\u01ee\3\u01ee\5\u01ee\u2af7\n\u01ee\3\u01ee\3\u01ee"+
		"\5\u01ee\u2afb\n\u01ee\3\u01ee\3\u01ee\3\u01ee\5\u01ee\u2b00\n\u01ee\3"+
		"\u01ef\3\u01ef\5\u01ef\u2b04\n\u01ef\3\u01f0\5\u01f0\u2b07\n\u01f0\3\u01f0"+
		"\3\u01f0\5\u01f0\u2b0b\n\u01f0\3\u01f0\3\u01f0\5\u01f0\u2b0f\n\u01f0\3"+
		"\u01f0\3\u01f0\3\u01f0\5\u01f0\u2b14\n\u01f0\3\u01f0\3\u01f0\5\u01f0\u2b18"+
		"\n\u01f0\3\u01f0\3\u01f0\3\u01f0\5\u01f0\u2b1d\n\u01f0\3\u01f0\3\u01f0"+
		"\3\u01f0\5\u01f0\u2b22\n\u01f0\3\u01f1\3\u01f1\5\u01f1\u2b26\n\u01f1\3"+
		"\u01f1\3\u01f1\3\u01f1\5\u01f1\u2b2b\n\u01f1\7\u01f1\u2b2d\n\u01f1\f\u01f1"+
		"\16\u01f1\u2b30\13\u01f1\3\u01f2\3\u01f2\3\u01f2\7\u01f2\u2b35\n\u01f2"+
		"\f\u01f2\16\u01f2\u2b38\13\u01f2\3\u01f3\5\u01f3\u2b3b\n\u01f3\3\u01f3"+
		"\7\u01f3\u2b3e\n\u01f3\f\u01f3\16\u01f3\u2b41\13\u01f3\3\u01f3\3\u01f3"+
		"\3\u01f4\3\u01f4\3\u01f4\7\u01f4\u2b48\n\u01f4\f\u01f4\16\u01f4\u2b4b"+
		"\13\u01f4\3\u01f5\3\u01f5\5\u01f5\u2b4f\n\u01f5\3\u01f6\3\u01f6\3\u01f7"+
		"\3\u01f7\3\u01f8\5\u01f8\u2b56\n\u01f8\3\u01f8\3\u01f8\3\u01f9\3\u01f9"+
		"\3\u01f9\3\u01f9\3\u01f9\5\u01f9\u2b5f\n\u01f9\3\u01f9\3\u01f9\5\u01f9"+
		"\u2b63\n\u01f9\5\u01f9\u2b65\n\u01f9\3\u01fa\3\u01fa\3\u01fa\3\u01fa\3"+
		"\u01fa\5\u01fa\u2b6c\n\u01fa\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fb\3"+
		"\u01fb\3\u01fb\3\u01fb\3\u01fb\3\u01fb\5\u01fb\u2b78\n\u01fb\3\u01fc\3"+
		"\u01fc\3\u01fc\5\u01fc\u2b7d\n\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3"+
		"\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\5\u01fc\u2b88\n\u01fc\3\u01fc\3"+
		"\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\5\u01fc\u2b92\n"+
		"\u01fc\5\u01fc\u2b94\n\u01fc\3\u01fc\3\u01fc\3\u01fc\3\u01fc\5\u01fc\u2b9a"+
		"\n\u01fc\5\u01fc\u2b9c\n\u01fc\3\u01fc\3\u01fc\3\u01fc\5\u01fc\u2ba1\n"+
		"\u01fc\5\u01fc\u2ba3\n\u01fc\3\u01fc\5\u01fc\u2ba6\n\u01fc\3\u01fd\3\u01fd"+
		"\5\u01fd\u2baa\n\u01fd\3\u01fe\3\u01fe\5\u01fe\u2bae\n\u01fe\3\u01ff\3"+
		"\u01ff\3\u01ff\3\u01ff\5\u01ff\u2bb4\n\u01ff\3\u01ff\3\u01ff\3\u01ff\3"+
		"\u01ff\3\u01ff\3\u01ff\3\u01ff\5\u01ff\u2bbd\n\u01ff\3\u01ff\5\u01ff\u2bc0"+
		"\n\u01ff\5\u01ff\u2bc2\n\u01ff\3\u0200\5\u0200\u2bc5\n\u0200\3\u0200\3"+
		"\u0200\3\u0200\3\u0200\5\u0200\u2bcb\n\u0200\3\u0200\3\u0200\5\u0200\u2bcf"+
		"\n\u0200\3\u0200\5\u0200\u2bd2\n\u0200\3\u0201\3\u0201\3\u0201\3\u0201"+
		"\3\u0201\3\u0201\3\u0201\5\u0201\u2bdb\n\u0201\3\u0202\3\u0202\3\u0202"+
		"\3\u0202\3\u0202\3\u0202\3\u0202\5\u0202\u2be4\n\u0202\3\u0203\3\u0203"+
		"\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\3\u0203\5\u0203"+
		"\u2bf0\n\u0203\3\u0203\5\u0203\u2bf3\n\u0203\3\u0204\3\u0204\3\u0204\3"+
		"\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204\3\u0204"+
		"\3\u0204\3\u0204\5\u0204\u2c0c\n\u0204\3\u0204\3\u0204\5\u0204\u2c10\n"+
		"\u0204\3\u0204\5\u0204\u2c13\n\u0204\3\u0205\3\u0205\3\u0205\5\u0205\u2c18"+
		"\n\u0205\3\u0206\3\u0206\3\u0206\5\u0206\u2c1d\n\u0206\3\u0206\3\u0206"+
		"\5\u0206\u2c21\n\u0206\3\u0206\3\u0206\5\u0206\u2c25\n\u0206\3\u0206\3"+
		"\u0206\5\u0206\u2c29\n\u0206\3\u0207\3\u0207\3\u0208\3\u0208\3\u0209\3"+
		"\u0209\3\u0209\3\u0209\5\u0209\u2c33\n\u0209\3\u020a\3\u020a\3\u020b\3"+
		"\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b"+
		"\3\u020b\3\u020b\3\u020b\3\u020b\3\u020b\5\u020b\u2c46\n\u020b\3\u020c"+
		"\3\u020c\3\u020d\3\u020d\5\u020d\u2c4c\n\u020d\3\u020d\2\4^\u02fa\u020e"+
		"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFH"+
		"JLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c"+
		"\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4"+
		"\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc"+
		"\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4"+
		"\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec"+
		"\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104"+
		"\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c"+
		"\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134"+
		"\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c"+
		"\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164"+
		"\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c"+
		"\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194"+
		"\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac"+
		"\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4"+
		"\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc"+
		"\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4"+
		"\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c"+
		"\u020e\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224"+
		"\u0226\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c"+
		"\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254"+
		"\u0256\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c"+
		"\u026e\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284"+
		"\u0286\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c"+
		"\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4"+
		"\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc"+
		"\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4"+
		"\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc"+
		"\u02fe\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314"+
		"\u0316\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c"+
		"\u032e\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344"+
		"\u0346\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c"+
		"\u035e\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374"+
		"\u0376\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c"+
		"\u038e\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4"+
		"\u03a6\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc"+
		"\u03be\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4"+
		"\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec"+
		"\u03ee\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404"+
		"\u0406\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418\2\u0092\3"+
		"\2\u0331\u0332\4\2\u0331\u0331\u0334\u0334\4\2\u011b\u011b\u0240\u0241"+
		"\4\2\u0331\u0332\u0334\u0334\5\2\u01b4\u01b4\u021d\u021d\u02bd\u02bd\5"+
		"\2\u032e\u032e\u0331\u0331\u0334\u0334\5\2\u02a0\u02a0\u02ff\u02ff\u0321"+
		"\u0321\4\2nnpp\3\2\u0334\u0335\3\2\u02f9\u02fd\4\2\u0107\u0107\u01bf\u01bf"+
		"\4\2\u0097\u0097\u01b9\u01b9\5\2++\u0097\u0097\u01b9\u01b9\5\2\u0080\u0080"+
		"\u020e\u020f\u02d2\u02d2\4\2\u0237\u0237\u0271\u0271\4\2\u0186\u0186\u0274"+
		"\u0274\4\2\4\4\u01ea\u01ea\5\2\4\4\u01ab\u01ab\u01e8\u01e8\4\2\5\5##\4"+
		"\2\3\399\4\2\u0135\u0135\u021e\u021e\4\2\u0126\u0126\u012f\u012f\4\2\u0332"+
		"\u0332\u0334\u0334\4\2\u0170\u0170\u0195\u0195\4\2\u026b\u026c\u02d8\u02d8"+
		"\5\2\u02d2\u02d2\u02e2\u02e2\u02e4\u02e4\4\2\u0313\u0313\u0316\u0316\4"+
		"\2\6\6xx\4\2\3\3\u009e\u009e\4\2\u02b9\u02b9\u0326\u0326\3\2\u02eb\u02ec"+
		"\4\2\u0332\u0332\u0334\u0335\4\2\u02cf\u02cf\u0320\u0320\4\2ee\u030d\u030d"+
		"\4\2\u0089\u0089\u0126\u0126\4\2\61\61OO\6\2\60\60ZZ\u0099\u0099\u00b2"+
		"\u00b2\4\2\u0146\u0146\u0277\u0277\4\2ZZ\u00b2\u00b2\4\2\60\60\u00b2\u00b2"+
		"\5\2\u0151\u0151\u0195\u0195\u023c\u023c\4\2\u0251\u0251\u0332\u0332\5"+
		"\2!!\u00a0\u00a0\u013b\u013b\4\2//\u0334\u0334\4\2//\u0332\u0332\4\2\u017f"+
		"\u017f\u0334\u0334\5\2\u0151\u0151\u0170\u0170\u0195\u0195\7\2\u00c7\u00c9"+
		"\u0120\u0120\u0122\u0122\u01e4\u01e6\u0246\u0247\4\2GGKK\5\2\u015d\u015d"+
		"\u0185\u0185\u0196\u0196\5\2\7\7\u0167\u0167\u031b\u031b\4\2\u02d2\u02d2"+
		"\u02df\u02df\5\2\u01cb\u01cb\u01db\u01db\u0256\u0256\3\2\u0082\u0083\5"+
		"\2\60\60ZZ\u00b2\u00b2\4\2GG\u00cb\u00cb\4\2\u01c2\u01c3\u01eb\u01eb\4"+
		"\2||\u0207\u0207\4\2\4\4XX\5\2\30\30ii\u00b0\u00b0\5\2\u0132\u0132\u0209"+
		"\u0209\u025a\u025a\5\2\u00a4\u00a4\u00db\u00db\u0126\u0126\5\2\u0114\u0114"+
		"\u015f\u015f\u019e\u019e\4\2\u0154\u0154\u017f\u017f\5\2\4\4\u0334\u0334"+
		"\u0358\u0359\5\2gg\u02b3\u02b3\u02da\u02da\5\2\u0128\u0128\u02f1\u02f1"+
		"\u0319\u0319\4\2\u0128\u0128\u0297\u0297\5\2\4\4\u01ca\u01ca\u0328\u0328"+
		"\4\2LLnn\5\2\u012d\u012d\u01ba\u01ba\u01bd\u01bd\4\2\u01e8\u01e8\u01ea"+
		"\u01ea\5\2\u01a4\u01a4\u01ff\u01ff\u0222\u0222\5\2\u00d0\u00d0\u0128\u0128"+
		"\u014c\u014c\4\2\u0235\u0235\u02f4\u02f4\4\2\u014c\u014c\u0221\u0221\5"+
		"\2LL\u00ee\u00ee\u0221\u0221\5\2\u00f7\u00f7\u0244\u0244\u02d2\u02d2\4"+
		"\2\u019e\u019e\u0211\u0211\4\2EE\u0141\u0141\5\2\63\63\u031a\u031a\u0322"+
		"\u0322\4\2\u0285\u0285\u02d7\u02d7\4\2\u02b0\u02b0\u02d1\u02d1\4\2\u02d4"+
		"\u02d4\u0309\u0309\4\2\u014d\u014d\u02d0\u02d0\4\2\u00f7\u00f7\u02d6\u02d6"+
		"\4\2\u0289\u0289\u0318\u0318\4\2\u02d3\u02d3\u02f7\u02f7\4\2dd\u02d5\u02d5"+
		"\4\2\u00c7\u00c9\u0247\u0247\4\2\u00b5\u00b5\u0183\u0183\3\2\u01c2\u01c3"+
		"\4\2EE\u0335\u0335\4\2\u0117\u0117\u0132\u0132\4\2\u0139\u0139\u0228\u0228"+
		"\4\2\u00a4\u00a4\u00b8\u00b8\3\2\u00aa\u00ab\6\2\u00ef\u00ef\u01c5\u01c5"+
		"\u0216\u0216\u0334\u0334\4\2\30\30ii\4\2\u0100\u0100\u012a\u012a\4\2\b"+
		"\b\35\35\4\2\u0169\u0169\u0217\u0217\4\2\u014e\u014e\u020b\u020b\6\2\u012b"+
		"\u012b\u0140\u0140\u0175\u0175\u0229\u0229\5\2\u01c0\u01c0\u01e8\u01e8"+
		"\u020c\u020c\4\2\u00c0\u00c0\u01f1\u01f1\6\2\u0240\u0240\u0261\u0261\u02ac"+
		"\u02ac\u02ea\u02ea\n\2\u00d2\u00d4\u00d7\u00d7\u00ff\u00ff\u010c\u010c"+
		"\u01ae\u01ae\u01b8\u01b8\u01e1\u01e1\u035a\u0367\3\2\u034f\u0351\5\2\u0344"+
		"\u0344\u0352\u0353\u0355\u0357\3\2\u0352\u0353\5\2\4\4\7\7\u00a1\u00a1"+
		"\4\2\4\4\64\64\4\2\u0332\u0332\u0336\u0337\4\2\u0204\u0204\u0207\u0207"+
		"\4\2\u0147\u0147\u01aa\u01aa\4\2\u0265\u0265\u0268\u0268\4\2\u00db\u00db"+
		"\u01cb\u01cb\4\2yy\u015b\u015b\5\2ee\u00fe\u00fe\u015b\u015b\5\2ee\u015b"+
		"\u015b\u0184\u0184\4\2kk\u0331\u0332\5\2LLaa\u0091\u0091\6\2ee\u015b\u015b"+
		"\u0184\u0184\u01f2\u01f2\4\2$$zz\4\2  JJ\4\2\u009a\u009a\u009c\u009c\5"+
		"\2\u011e\u011e\u01e3\u01e3\u0205\u0205\t\2\u00e3\u00e3\u0189\u0189\u0199"+
		"\u0199\u022d\u022e\u0234\u0234\u0257\u0257\u0259\u0259\3\2\u0103\u0104"+
		"\4\2\u0148\u0148\u0178\u0178\4\2\u0176\u0176\u0179\u0179\4\2\u010b\u010b"+
		"\u01cc\u01cc\3\2\u01cd\u01ce\4\2\t\t\62\62\4\2\u01e2\u01e2\u0207\u0207"+
		"\5\2LLnn\u01e8\u01e8\3\2\u02ef\u02f0\5\2\u00e7\u00e7\u0258\u0258\u0329"+
		"\u032a\3\2\u0336\u0337\4\2\u0332\u0332\u0336\u0336\7\2uu\177\177\u00c0"+
		"\u0266\u0268\u0306\u0308\u032a\3\2\u033c\u0343\7\2\u0151\u0151\u0170\u0170"+
		"\u0195\u0195\u023c\u023c\u0351\u0351\2\u3367\2\u042a\3\2\2\2\4\u0446\3"+
		"\2\2\2\6\u044c\3\2\2\2\b\u046b\3\2\2\2\n\u0472\3\2\2\2\f\u0511\3\2\2\2"+
		"\16\u0518\3\2\2\2\20\u0526\3\2\2\2\22\u0528\3\2\2\2\24\u0536\3\2\2\2\26"+
		"\u053a\3\2\2\2\30\u0548\3\2\2\2\32\u054a\3\2\2\2\34\u0551\3\2\2\2\36\u055b"+
		"\3\2\2\2 \u0567\3\2\2\2\"\u0569\3\2\2\2$\u056b\3\2\2\2&\u056d\3\2\2\2"+
		"(\u058c\3\2\2\2*\u059d\3\2\2\2,\u05aa\3\2\2\2.\u05d9\3\2\2\2\60\u05db"+
		"\3\2\2\2\62\u05ed\3\2\2\2\64\u05ef\3\2\2\2\66\u060c\3\2\2\28\u0621\3\2"+
		"\2\2:\u062e\3\2\2\2<\u0633\3\2\2\2>\u0637\3\2\2\2@\u063b\3\2\2\2B\u0646"+
		"\3\2\2\2D\u064b\3\2\2\2F\u064d\3\2\2\2H\u0652\3\2\2\2J\u0654\3\2\2\2L"+
		"\u0656\3\2\2\2N\u0659\3\2\2\2P\u065d\3\2\2\2R\u0663\3\2\2\2T\u0665\3\2"+
		"\2\2V\u0668\3\2\2\2X\u066a\3\2\2\2Z\u066d\3\2\2\2\\\u0672\3\2\2\2^\u067d"+
		"\3\2\2\2`\u0686\3\2\2\2b\u068a\3\2\2\2d\u068c\3\2\2\2f\u0692\3\2\2\2h"+
		"\u0694\3\2\2\2j\u0696\3\2\2\2l\u0699\3\2\2\2n\u06a1\3\2\2\2p\u06a3\3\2"+
		"\2\2r\u06a5\3\2\2\2t\u06bb\3\2\2\2v\u06ce\3\2\2\2x\u06d6\3\2\2\2z\u06da"+
		"\3\2\2\2|\u06e2\3\2\2\2~\u06f1\3\2\2\2\u0080\u06f3\3\2\2\2\u0082\u071f"+
		"\3\2\2\2\u0084\u0728\3\2\2\2\u0086\u0735\3\2\2\2\u0088\u0737\3\2\2\2\u008a"+
		"\u0739\3\2\2\2\u008c\u073c\3\2\2\2\u008e\u0740\3\2\2\2\u0090\u074a\3\2"+
		"\2\2\u0092\u0754\3\2\2\2\u0094\u0780\3\2\2\2\u0096\u0797\3\2\2\2\u0098"+
		"\u0799\3\2\2\2\u009a\u079b\3\2\2\2\u009c\u079d\3\2\2\2\u009e\u07a2\3\2"+
		"\2\2\u00a0\u07a5\3\2\2\2\u00a2\u090d\3\2\2\2\u00a4\u090f\3\2\2\2\u00a6"+
		"\u0911\3\2\2\2\u00a8\u0913\3\2\2\2\u00aa\u0949\3\2\2\2\u00ac\u094e\3\2"+
		"\2\2\u00ae\u097a\3\2\2\2\u00b0\u0991\3\2\2\2\u00b2\u09af\3\2\2\2\u00b4"+
		"\u09b3\3\2\2\2\u00b6\u09b9\3\2\2\2\u00b8\u09bf\3\2\2\2\u00ba\u09c3\3\2"+
		"\2\2\u00bc\u09c7\3\2\2\2\u00be\u09cc\3\2\2\2\u00c0\u09da\3\2\2\2\u00c2"+
		"\u09e0\3\2\2\2\u00c4\u09e5\3\2\2\2\u00c6\u09eb\3\2\2\2\u00c8\u09fb\3\2"+
		"\2\2\u00ca\u09ff\3\2\2\2\u00cc\u0a05\3\2\2\2\u00ce\u0a0b\3\2\2\2\u00d0"+
		"\u0a13\3\2\2\2\u00d2\u0a19\3\2\2\2\u00d4\u0a28\3\2\2\2\u00d6\u0a3a\3\2"+
		"\2\2\u00d8\u0a41\3\2\2\2\u00da\u0a46\3\2\2\2\u00dc\u0a51\3\2\2\2\u00de"+
		"\u0a56\3\2\2\2\u00e0\u0a5a\3\2\2\2\u00e2\u0a5e\3\2\2\2\u00e4\u0a63\3\2"+
		"\2\2\u00e6\u0a68\3\2\2\2\u00e8\u0a6d\3\2\2\2\u00ea\u0a7b\3\2\2\2\u00ec"+
		"\u0a81\3\2\2\2\u00ee\u0a86\3\2\2\2\u00f0\u0a8e\3\2\2\2\u00f2\u0a92\3\2"+
		"\2\2\u00f4\u0aa3\3\2\2\2\u00f6\u0aab\3\2\2\2\u00f8\u0ab1\3\2\2\2\u00fa"+
		"\u0abf\3\2\2\2\u00fc\u0ad5\3\2\2\2\u00fe\u0ada\3\2\2\2\u0100\u0ae0\3\2"+
		"\2\2\u0102\u0ae5\3\2\2\2\u0104\u0ae9\3\2\2\2\u0106\u0b05\3\2\2\2\u0108"+
		"\u0b10\3\2\2\2\u010a\u0b19\3\2\2\2\u010c\u0b26\3\2\2\2\u010e\u0b2e\3\2"+
		"\2\2\u0110\u0b33\3\2\2\2\u0112\u0b3e\3\2\2\2\u0114\u0b5c\3\2\2\2\u0116"+
		"\u0b7a\3\2\2\2\u0118\u0b88\3\2\2\2\u011a\u0ba0\3\2\2\2\u011c\u0bb0\3\2"+
		"\2\2\u011e\u0bbd\3\2\2\2\u0120\u0bd0\3\2\2\2\u0122\u0bdd\3\2\2\2\u0124"+
		"\u0be6\3\2\2\2\u0126\u0c04\3\2\2\2\u0128\u0cf7\3\2\2\2\u012a\u0d00\3\2"+
		"\2\2\u012c\u0d3a\3\2\2\2\u012e\u0d6b\3\2\2\2\u0130\u0d6d\3\2\2\2\u0132"+
		"\u0d96\3\2\2\2\u0134\u0dc8\3\2\2\2\u0136\u0e0e\3\2\2\2\u0138\u0e51\3\2"+
		"\2\2\u013a\u0e61\3\2\2\2\u013c\u0e7d\3\2\2\2\u013e\u0e90\3\2\2\2\u0140"+
		"\u0ea5\3\2\2\2\u0142\u0eed\3\2\2\2\u0144\u0f4c\3\2\2\2\u0146\u0f62\3\2"+
		"\2\2\u0148\u0f6e\3\2\2\2\u014a\u0f8a\3\2\2\2\u014c\u0f9f\3\2\2\2\u014e"+
		"\u0fb9\3\2\2\2\u0150\u0fc2\3\2\2\2\u0152\u0fe2\3\2\2\2\u0154\u0fec\3\2"+
		"\2\2\u0156\u0ffc\3\2\2\2\u0158\u1008\3\2\2\2\u015a\u1011\3\2\2\2\u015c"+
		"\u1022\3\2\2\2\u015e\u103a\3\2\2\2\u0160\u10a6\3\2\2\2\u0162\u10c0\3\2"+
		"\2\2\u0164\u10cc\3\2\2\2\u0166\u10d3\3\2\2\2\u0168\u10ff\3\2\2\2\u016a"+
		"\u110a\3\2\2\2\u016c\u111e\3\2\2\2\u016e\u1148\3\2\2\2\u0170\u114f\3\2"+
		"\2\2\u0172\u115d\3\2\2\2\u0174\u116f\3\2\2\2\u0176\u11b5\3\2\2\2\u0178"+
		"\u11e0\3\2\2\2\u017a\u1216\3\2\2\2\u017c\u129f\3\2\2\2\u017e\u132e\3\2"+
		"\2\2\u0180\u134b\3\2\2\2\u0182\u1368\3\2\2\2\u0184\u13d7\3\2\2\2\u0186"+
		"\u13e4\3\2\2\2\u0188\u13ec\3\2\2\2\u018a\u13f4\3\2\2\2\u018c\u140a\3\2"+
		"\2\2\u018e\u1428\3\2\2\2\u0190\u1443\3\2\2\2\u0192\u1457\3\2\2\2\u0194"+
		"\u1487\3\2\2\2\u0196\u14ac\3\2\2\2\u0198\u1578\3\2\2\2\u019a\u1596\3\2"+
		"\2\2\u019c\u1598\3\2\2\2\u019e\u15b8\3\2\2\2\u01a0\u15e7\3\2\2\2\u01a2"+
		"\u161b\3\2\2\2\u01a4\u162b\3\2\2\2\u01a6\u1639\3\2\2\2\u01a8\u1682\3\2"+
		"\2\2\u01aa\u16a1\3\2\2\2\u01ac\u16a3\3\2\2\2\u01ae\u16a7\3\2\2\2\u01b0"+
		"\u16c5\3\2\2\2\u01b2\u16c7\3\2\2\2\u01b4\u16dc\3\2\2\2\u01b6\u172b\3\2"+
		"\2\2\u01b8\u1738\3\2\2\2\u01ba\u173a\3\2\2\2\u01bc\u1747\3\2\2\2\u01be"+
		"\u177f\3\2\2\2\u01c0\u1782\3\2\2\2\u01c2\u17b0\3\2\2\2\u01c4\u17b3\3\2"+
		"\2\2\u01c6\u17d4\3\2\2\2\u01c8\u17d8\3\2\2\2\u01ca\u17e7\3\2\2\2\u01cc"+
		"\u17ea\3\2\2\2\u01ce\u1825\3\2\2\2\u01d0\u183d\3\2\2\2\u01d2\u184d\3\2"+
		"\2\2\u01d4\u184f\3\2\2\2\u01d6\u1880\3\2\2\2\u01d8\u18a3\3\2\2\2\u01da"+
		"\u18c7\3\2\2\2\u01dc\u18f7\3\2\2\2\u01de\u18ff\3\2\2\2\u01e0\u192f\3\2"+
		"\2\2\u01e2\u1931\3\2\2\2\u01e4\u1939\3\2\2\2\u01e6\u195d\3\2\2\2\u01e8"+
		"\u1965\3\2\2\2\u01ea\u1980\3\2\2\2\u01ec\u1998\3\2\2\2\u01ee\u19b8\3\2"+
		"\2\2\u01f0\u19d6\3\2\2\2\u01f2\u19ed\3\2\2\2\u01f4\u19fb\3\2\2\2\u01f6"+
		"\u19fd\3\2\2\2\u01f8\u1a1c\3\2\2\2\u01fa\u1a2a\3\2\2\2\u01fc\u1a53\3\2"+
		"\2\2\u01fe\u1a62\3\2\2\2\u0200\u1a78\3\2\2\2\u0202\u1a96\3\2\2\2\u0204"+
		"\u1a98\3\2\2\2\u0206\u1acb\3\2\2\2\u0208\u1af9\3\2\2\2\u020a\u1b0c\3\2"+
		"\2\2\u020c\u1b0e\3\2\2\2\u020e\u1b27\3\2\2\2\u0210\u1b29\3\2\2\2\u0212"+
		"\u1b31\3\2\2\2\u0214\u1b33\3\2\2\2\u0216\u1bbf\3\2\2\2\u0218\u1bc7\3\2"+
		"\2\2\u021a\u1bc9\3\2\2\2\u021c\u1bcb\3\2\2\2\u021e\u1bcd\3\2\2\2\u0220"+
		"\u1bdb\3\2\2\2\u0222\u1be1\3\2\2\2\u0224\u1be3\3\2\2\2\u0226\u1be5\3\2"+
		"\2\2\u0228\u1bea\3\2\2\2\u022a\u1bec\3\2\2\2\u022c\u1bf0\3\2\2\2\u022e"+
		"\u1bfc\3\2\2\2\u0230\u1bfe\3\2\2\2\u0232\u1c01\3\2\2\2\u0234\u1c04\3\2"+
		"\2\2\u0236\u1c06\3\2\2\2\u0238\u1c08\3\2\2\2\u023a\u1c0a\3\2\2\2\u023c"+
		"\u1c27\3\2\2\2\u023e\u1c29\3\2\2\2\u0240\u1c34\3\2\2\2\u0242\u1c37\3\2"+
		"\2\2\u0244\u1c40\3\2\2\2\u0246\u1c48\3\2\2\2\u0248\u1c4f\3\2\2\2\u024a"+
		"\u1c66\3\2\2\2\u024c\u1c68\3\2\2\2\u024e\u1c73\3\2\2\2\u0250\u1c75\3\2"+
		"\2\2\u0252\u1c90\3\2\2\2\u0254\u1c97\3\2\2\2\u0256\u1c9d\3\2\2\2\u0258"+
		"\u1cb0\3\2\2\2\u025a\u1cb2\3\2\2\2\u025c\u1cc3\3\2\2\2\u025e\u1cda\3\2"+
		"\2\2\u0260\u1ceb\3\2\2\2\u0262\u1cfc\3\2\2\2\u0264\u1d06\3\2\2\2\u0266"+
		"\u1d17\3\2\2\2\u0268\u1d28\3\2\2\2\u026a\u1d32\3\2\2\2\u026c\u1d34\3\2"+
		"\2\2\u026e\u1d3b\3\2\2\2\u0270\u1d79\3\2\2\2\u0272\u1d80\3\2\2\2\u0274"+
		"\u1d9f\3\2\2\2\u0276\u1da1\3\2\2\2\u0278\u1e9b\3\2\2\2\u027a\u1f89\3\2"+
		"\2\2\u027c\u1fb1\3\2\2\2\u027e\u1fbe\3\2\2\2\u0280\u1fcc\3\2\2\2\u0282"+
		"\u1fd4\3\2\2\2\u0284\u1fda\3\2\2\2\u0286\u1fe1\3\2\2\2\u0288\u1fe5\3\2"+
		"\2\2\u028a\u1fea\3\2\2\2\u028c\u2015\3\2\2\2\u028e\u2027\3\2\2\2\u0290"+
		"\u2029\3\2\2\2\u0292\u202d\3\2\2\2\u0294\u2037\3\2\2\2\u0296\u2039\3\2"+
		"\2\2\u0298\u2076\3\2\2\2\u029a\u207b\3\2\2\2\u029c\u207d\3\2\2\2\u029e"+
		"\u20a2\3\2\2\2\u02a0\u20a4\3\2\2\2\u02a2\u20b4\3\2\2\2\u02a4\u20c1\3\2"+
		"\2\2\u02a6\u20d5\3\2\2\2\u02a8\u20e2\3\2\2\2\u02aa\u2107\3\2\2\2\u02ac"+
		"\u2118\3\2\2\2\u02ae\u211a\3\2\2\2\u02b0\u2127\3\2\2\2\u02b2\u2140\3\2"+
		"\2\2\u02b4\u215c\3\2\2\2\u02b6\u2185\3\2\2\2\u02b8\u21d8\3\2\2\2\u02ba"+
		"\u21da\3\2\2\2\u02bc\u21de\3\2\2\2\u02be\u21e2\3\2\2\2\u02c0\u21e7\3\2"+
		"\2\2\u02c2\u21eb\3\2\2\2\u02c4\u21f0\3\2\2\2\u02c6\u21f5\3\2\2\2\u02c8"+
		"\u2205\3\2\2\2\u02ca\u2216\3\2\2\2\u02cc\u2218\3\2\2\2\u02ce\u221d\3\2"+
		"\2\2\u02d0\u2221\3\2\2\2\u02d2\u222a\3\2\2\2\u02d4\u224d\3\2\2\2\u02d6"+
		"\u224f\3\2\2\2\u02d8\u2257\3\2\2\2\u02da\u225b\3\2\2\2\u02dc\u2268\3\2"+
		"\2\2\u02de\u226a\3\2\2\2\u02e0\u229a\3\2\2\2\u02e2\u22a4\3\2\2\2\u02e4"+
		"\u22cf\3\2\2\2\u02e6\u2313\3\2\2\2\u02e8\u231e\3\2\2\2\u02ea\u2329\3\2"+
		"\2\2\u02ec\u2337\3\2\2\2\u02ee\u2340\3\2\2\2\u02f0\u2369\3\2\2\2\u02f2"+
		"\u2374\3\2\2\2\u02f4\u2376\3\2\2\2\u02f6\u23c9\3\2\2\2\u02f8\u23cd\3\2"+
		"\2\2\u02fa\u23d7\3\2\2\2\u02fc\u23f1\3\2\2\2\u02fe\u23fa\3\2\2\2\u0300"+
		"\u2415\3\2\2\2\u0302\u241b\3\2\2\2\u0304\u2425\3\2\2\2\u0306\u242f\3\2"+
		"\2\2\u0308\u2431\3\2\2\2\u030a\u2433\3\2\2\2\u030c\u243c\3\2\2\2\u030e"+
		"\u2461\3\2\2\2\u0310\u2473\3\2\2\2\u0312\u2475\3\2\2\2\u0314\u248e\3\2"+
		"\2\2\u0316\u24cd\3\2\2\2\u0318\u24df\3\2\2\2\u031a\u24e7\3\2\2\2\u031c"+
		"\u24f0\3\2\2\2\u031e\u2517\3\2\2\2\u0320\u2527\3\2\2\2\u0322\u252e\3\2"+
		"\2\2\u0324\u2530\3\2\2\2\u0326\u25a3\3\2\2\2\u0328\u25a5\3\2\2\2\u032a"+
		"\u25b0\3\2\2\2\u032c\u25b5\3\2\2\2\u032e\u25b7\3\2\2\2\u0330\u25f0\3\2"+
		"\2\2\u0332\u25f2\3\2\2\2\u0334\u25fb\3\2\2\2\u0336\u2603\3\2\2\2\u0338"+
		"\u2611\3\2\2\2\u033a\u261b\3\2\2\2\u033c\u2631\3\2\2\2\u033e\u263b\3\2"+
		"\2\2\u0340\u2647\3\2\2\2\u0342\u2649\3\2\2\2\u0344\u2656\3\2\2\2\u0346"+
		"\u2658\3\2\2\2\u0348\u269b\3\2\2\2\u034a\u269d\3\2\2\2\u034c\u26b1\3\2"+
		"\2\2\u034e\u26c3\3\2\2\2\u0350\u26cb\3\2\2\2\u0352\u26d0\3\2\2\2\u0354"+
		"\u26d8\3\2\2\2\u0356\u26df\3\2\2\2\u0358\u26e1\3\2\2\2\u035a\u26e9\3\2"+
		"\2\2\u035c\u26f8\3\2\2\2\u035e\u2701\3\2\2\2\u0360\u270b\3\2\2\2\u0362"+
		"\u270f\3\2\2\2\u0364\u2713\3\2\2\2\u0366\u2717\3\2\2\2\u0368\u271b\3\2"+
		"\2\2\u036a\u2723\3\2\2\2\u036c\u272d\3\2\2\2\u036e\u2735\3\2\2\2\u0370"+
		"\u2753\3\2\2\2\u0372\u2755\3\2\2\2\u0374\u2763\3\2\2\2\u0376\u2771\3\2"+
		"\2\2\u0378\u27b7\3\2\2\2\u037a\u27f1\3\2\2\2\u037c\u2885\3\2\2\2\u037e"+
		"\u288b\3\2\2\2\u0380\u2895\3\2\2\2\u0382\u289a\3\2\2\2\u0384\u28a8\3\2"+
		"\2\2\u0386\u28ad\3\2\2\2\u0388\u28b8\3\2\2\2\u038a\u28bd\3\2\2\2\u038c"+
		"\u28c8\3\2\2\2\u038e\u28cd\3\2\2\2\u0390\u28d8\3\2\2\2\u0392\u28e0\3\2"+
		"\2\2\u0394\u28e5\3\2\2\2\u0396\u28eb\3\2\2\2\u0398\u28f0\3\2\2\2\u039a"+
		"\u28f4\3\2\2\2\u039c\u28f9\3\2\2\2\u039e\u2908\3\2\2\2\u03a0\u2917\3\2"+
		"\2\2\u03a2\u294e\3\2\2\2\u03a4\u2950\3\2\2\2\u03a6\u295d\3\2\2\2\u03a8"+
		"\u295f\3\2\2\2\u03aa\u296d\3\2\2\2\u03ac\u297f\3\2\2\2\u03ae\u29a1\3\2"+
		"\2\2\u03b0\u29db\3\2\2\2\u03b2\u29de\3\2\2\2\u03b4\u29e2\3\2\2\2\u03b6"+
		"\u29f1\3\2\2\2\u03b8\u29fa\3\2\2\2\u03ba\u29fe\3\2\2\2\u03bc\u2a06\3\2"+
		"\2\2\u03be\u2a0c\3\2\2\2\u03c0\u2a30\3\2\2\2\u03c2\u2a32\3\2\2\2\u03c4"+
		"\u2a3f\3\2\2\2\u03c6\u2a41\3\2\2\2\u03c8\u2a56\3\2\2\2\u03ca\u2a94\3\2"+
		"\2\2\u03cc\u2a9d\3\2\2\2\u03ce\u2aa4\3\2\2\2\u03d0\u2ab7\3\2\2\2\u03d2"+
		"\u2ad5\3\2\2\2\u03d4\u2ada\3\2\2\2\u03d6\u2ae1\3\2\2\2\u03d8\u2aef\3\2"+
		"\2\2\u03da\u2aff\3\2\2\2\u03dc\u2b03\3\2\2\2\u03de\u2b21\3\2\2\2\u03e0"+
		"\u2b23\3\2\2\2\u03e2\u2b31\3\2\2\2\u03e4\u2b3f\3\2\2\2\u03e6\u2b44\3\2"+
		"\2\2\u03e8\u2b4e\3\2\2\2\u03ea\u2b50\3\2\2\2\u03ec\u2b52\3\2\2\2\u03ee"+
		"\u2b55\3\2\2\2\u03f0\u2b64\3\2\2\2\u03f2\u2b6b\3\2\2\2\u03f4\u2b6d\3\2"+
		"\2\2\u03f6\u2b79\3\2\2\2\u03f8\u2ba9\3\2\2\2\u03fa\u2bad\3\2\2\2\u03fc"+
		"\u2baf\3\2\2\2\u03fe\u2bc4\3\2\2\2\u0400\u2bd3\3\2\2\2\u0402\u2be3\3\2"+
		"\2\2\u0404\u2be5\3\2\2\2\u0406\u2c12\3\2\2\2\u0408\u2c17\3\2\2\2\u040a"+
		"\u2c28\3\2\2\2\u040c\u2c2a\3\2\2\2\u040e\u2c2c\3\2\2\2\u0410\u2c32\3\2"+
		"\2\2\u0412\u2c34\3\2\2\2\u0414\u2c45\3\2\2\2\u0416\u2c47\3\2\2\2\u0418"+
		"\u2c49\3\2\2\2\u041a\u041c\5\4\3\2\u041b\u041a\3\2\2\2\u041c\u041f\3\2"+
		"\2\2\u041d\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u0420\3\2\2\2\u041f"+
		"\u041d\3\2\2\2\u0420\u042b\7\2\2\3\u0421\u0425\5\u028a\u0146\2\u0422\u0424"+
		"\5\u02ba\u015e\2\u0423\u0422\3\2\2\2\u0424\u0427\3\2\2\2\u0425\u0423\3"+
		"\2\2\2\u0425\u0426\3\2\2\2\u0426\u0428\3\2\2\2\u0427\u0425\3\2\2\2\u0428"+
		"\u0429\7\2\2\3\u0429\u042b\3\2\2\2\u042a\u041d\3\2\2\2\u042a\u0421\3\2"+
		"\2\2\u042b\3\3\2\2\2\u042c\u0447\5\u02ba\u015e\2\u042d\u042f\5\u028a\u0146"+
		"\2\u042e\u042d\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0436\3\2\2\2\u0430\u0437"+
		"\5\u02ba\u015e\2\u0431\u0433\5\b\5\2\u0432\u0431\3\2\2\2\u0433\u0434\3"+
		"\2\2\2\u0434\u0432\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0437\3\2\2\2\u0436"+
		"\u0430\3\2\2\2\u0436\u0432\3\2\2\2\u0437\u043b\3\2\2\2\u0438\u043a\5\u02bc"+
		"\u015f\2\u0439\u0438\3\2\2\2\u043a\u043d\3\2\2\2\u043b\u0439\3\2\2\2\u043b"+
		"\u043c\3\2\2\2\u043c\u0447\3\2\2\2\u043d\u043b\3\2\2\2\u043e\u0442\5\6"+
		"\4\2\u043f\u0441\5\u02bc\u015f\2\u0440\u043f\3\2\2\2\u0441\u0444\3\2\2"+
		"\2\u0442\u0440\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0447\3\2\2\2\u0444\u0442"+
		"\3\2\2\2\u0445\u0447\5\u02bc\u015f\2\u0446\u042c\3\2\2\2\u0446\u042e\3"+
		"\2\2\2\u0446\u043e\3\2\2\2\u0446\u0445\3\2\2\2\u0447\5\3\2\2\2\u0448\u044d"+
		"\5\u01e8\u00f5\2\u0449\u044d\5\u01da\u00ee\2\u044a\u044d\5\u01dc\u00ef"+
		"\2\u044b\u044d\5\u0200\u0101\2\u044c\u0448\3\2\2\2\u044c\u0449\3\2\2\2"+
		"\u044c\u044a\3\2\2\2\u044c\u044b\3\2\2\2\u044d\7\3\2\2\2\u044e\u0450\5"+
		"\n\6\2\u044f\u0451\7\u034d\2\2\u0450\u044f\3\2\2\2\u0450\u0451\3\2\2\2"+
		"\u0451\u046c\3\2\2\2\u0452\u0454\5\20\t\2\u0453\u0455\7\u034d\2\2\u0454"+
		"\u0453\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u046c\3\2\2\2\u0456\u0458\5\62"+
		"\32\2\u0457\u0459\7\u034d\2\2\u0458\u0457\3\2\2\2\u0458\u0459\3\2\2\2"+
		"\u0459\u046c\3\2\2\2\u045a\u045c\5\f\7\2\u045b\u045d\7\u034d\2\2\u045c"+
		"\u045b\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u046c\3\2\2\2\u045e\u0460\5\u02c6"+
		"\u0164\2\u045f\u0461\7\u034d\2\2\u0460\u045f\3\2\2\2\u0460\u0461\3\2\2"+
		"\2\u0461\u046c\3\2\2\2\u0462\u0464\5\u02c8\u0165\2\u0463\u0465\7\u034d"+
		"\2\2\u0464\u0463\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u046c\3\2\2\2\u0466"+
		"\u0468\5\16\b\2\u0467\u0469\7\u034d\2\2\u0468\u0467\3\2\2\2\u0468\u0469"+
		"\3\2\2\2\u0469\u046c\3\2\2\2\u046a\u046c\7\u034d\2\2\u046b\u044e\3\2\2"+
		"\2\u046b\u0452\3\2\2\2\u046b\u0456\3\2\2\2\u046b\u045a\3\2\2\2\u046b\u045e"+
		"\3\2\2\2\u046b\u0462\3\2\2\2\u046b\u0466\3\2\2\2\u046b\u046a\3\2\2\2\u046c"+
		"\t\3\2\2\2\u046d\u0473\5\u01b4\u00db\2\u046e\u0473\5\u01bc\u00df\2\u046f"+
		"\u0473\5\u01c0\u00e1\2\u0470\u0473\5\u01c6\u00e4\2\u0471\u0473\5\u01cc"+
		"\u00e7\2\u0472\u046d\3\2\2\2\u0472\u046e\3\2\2\2\u0472\u046f\3\2\2\2\u0472"+
		"\u0470\3\2\2\2\u0472\u0471\3\2\2\2\u0473\13\3\2\2\2\u0474\u0512\5\64\33"+
		"\2\u0475\u0512\5<\37\2\u0476\u0512\5v<\2\u0477\u0512\5\u0084C\2\u0478"+
		"\u0512\5\u0090I\2\u0479\u0512\5\u0092J\2\u047a\u0512\5\u008eH\2\u047b"+
		"\u0512\5\u009eP\2\u047c\u0512\5\u00acW\2\u047d\u0512\5\u00aeX\2\u047e"+
		"\u0512\5\u011c\u008f\2\u047f\u0512\5\u0120\u0091\2\u0480\u0512\5\u0206"+
		"\u0104\2\u0481\u0512\5\u0162\u00b2\2\u0482\u0512\5\u0214\u010b\2\u0483"+
		"\u0512\5\u0126\u0094\2\u0484\u0512\5\u012e\u0098\2\u0485\u0512\5\u0130"+
		"\u0099\2\u0486\u0512\5\u0134\u009b\2\u0487\u0512\5\u0138\u009d\2\u0488"+
		"\u0512\5\u013c\u009f\2\u0489\u0512\5\u0144\u00a3\2\u048a\u0512\5\u0148"+
		"\u00a5\2\u048b\u0512\5\u0140\u00a1\2\u048c\u0512\5\u0150\u00a9\2\u048d"+
		"\u0512\5\u014c\u00a7\2\u048e\u0512\5\u0154\u00ab\2\u048f\u0512\5\u0156"+
		"\u00ac\2\u0490\u0512\5\u0158\u00ad\2\u0491\u0512\5\u015a\u00ae\2\u0492"+
		"\u0512\5\u0160\u00b1\2\u0493\u0512\5\u0170\u00b9\2\u0494\u0512\5\u016a"+
		"\u00b6\2\u0495\u0512\5\u0176\u00bc\2\u0496\u0512\5\u017a\u00be\2\u0497"+
		"\u0512\5\u017e\u00c0\2\u0498\u0512\5\u0182\u00c2\2\u0499\u0512\5\u0184"+
		"\u00c3\2\u049a\u0512\5\u0188\u00c5\2\u049b\u0512\5\u018a\u00c6\2\u049c"+
		"\u0512\5\u018e\u00c8\2\u049d\u0512\5\u0190\u00c9\2\u049e\u0512\5\u0204"+
		"\u0103\2\u049f\u0512\5\u0196\u00cc\2\u04a0\u0512\5\u019c\u00cf\2\u04a1"+
		"\u0512\5\u019e\u00d0\2\u04a2\u0512\5\66\34\2\u04a3\u0512\5r:\2\u04a4\u0512"+
		"\5\u0080A\2\u04a5\u0512\5\u00b0Y\2\u04a6\u0512\5\u011a\u008e\2\u04a7\u0512"+
		"\5\u011e\u0090\2\u04a8\u0512\5\u0122\u0092\2\u04a9\u0512\5\u01d4\u00eb"+
		"\2\u04aa\u0512\5\u0164\u00b3\2\u04ab\u0512\5\u0124\u0093\2\u04ac\u0512"+
		"\5\u0132\u009a\2\u04ad\u0512\5\u0136\u009c\2\u04ae\u0512\5\u013a\u009e"+
		"\2\u04af\u0512\5\u013e\u00a0\2\u04b0\u0512\5\u01d6\u00ec\2\u04b1\u0512"+
		"\5\u0146\u00a4\2\u04b2\u0512\5\u014a\u00a6\2\u04b3\u0512\5\u0142\u00a2"+
		"\2\u04b4\u0512\5\u0152\u00aa\2\u04b5\u0512\5\u014e\u00a8\2\u04b6\u0512"+
		"\5\u00a8U\2\u04b7\u0512\5\u015c\u00af\2\u04b8\u0512\5\u015e\u00b0\2\u04b9"+
		"\u0512\5\u0166\u00b4\2\u04ba\u0512\5\u0168\u00b5\2\u04bb\u0512\5\u016c"+
		"\u00b7\2\u04bc\u0512\5\u016e\u00b8\2\u04bd\u0512\5\u0172\u00ba\2\u04be"+
		"\u0512\5\u0174\u00bb\2\u04bf\u0512\5\u0178\u00bd\2\u04c0\u0512\5\u017c"+
		"\u00bf\2\u04c1\u0512\5\u0180\u00c1\2\u04c2\u0512\5\u0186\u00c4\2\u04c3"+
		"\u0512\5\u018c\u00c7\2\u04c4\u0512\5\u01f6\u00fc\2\u04c5\u0512\5\u0192"+
		"\u00ca\2\u04c6\u0512\5\u0194\u00cb\2\u04c7\u0512\5\u01fa\u00fe\2\u04c8"+
		"\u0512\5\u0266\u0134\2\u04c9\u0512\5\u0198\u00cd\2\u04ca\u0512\5\u019a"+
		"\u00ce\2\u04cb\u0512\5\u01a0\u00d1\2\u04cc\u0512\5\u01d8\u00ed\2\u04cd"+
		"\u0512\5\u01a2\u00d2\2\u04ce\u0512\58\35\2\u04cf\u0512\5:\36\2\u04d0\u0512"+
		"\5t;\2\u04d1\u0512\5\u0082B\2\u04d2\u0512\5\u009cO\2\u04d3\u0512\5\u00aa"+
		"V\2\u04d4\u0512\5\u00b2Z\2\u04d5\u0512\5\u00b4[\2\u04d6\u0512\5\u00b6"+
		"\\\2\u04d7\u0512\5\u00b8]\2\u04d8\u0512\5\u00ba^\2\u04d9\u0512\5\u00bc"+
		"_\2\u04da\u0512\5\u00be`\2\u04db\u0512\5\u00c0a\2\u04dc\u0512\5\u00c2"+
		"b\2\u04dd\u0512\5\u00c4c\2\u04de\u0512\5\u00eex\2\u04df\u0512\5\u00c6"+
		"d\2\u04e0\u0512\5\u00c8e\2\u04e1\u0512\5\u00d4k\2\u04e2\u0512\5\u00d6"+
		"l\2\u04e3\u0512\5\u00caf\2\u04e4\u0512\5\u00ccg\2\u04e5\u0512\5\u00ce"+
		"h\2\u04e6\u0512\5\u00d0i\2\u04e7\u0512\5\u00d2j\2\u04e8\u0512\5\u00d8"+
		"m\2\u04e9\u0512\5\u00dan\2\u04ea\u0512\5\u00dco\2\u04eb\u0512\5\u025e"+
		"\u0130\2\u04ec\u0512\5\u0250\u0129\2\u04ed\u0512\5\u00dep\2\u04ee\u0512"+
		"\5\u00e0q\2\u04ef\u0512\5\u00e2r\2\u04f0\u0512\5\u00e4s\2\u04f1\u0512"+
		"\5\u00e6t\2\u04f2\u0512\5\u0256\u012c\2\u04f3\u0512\5\u00e8u\2\u04f4\u0512"+
		"\5\u00eav\2\u04f5\u0512\5\u00ecw\2\u04f6\u0512\5\u00f0y\2\u04f7\u0512"+
		"\5\u00f2z\2\u04f8\u0512\5\u00f4{\2\u04f9\u0512\5\u00f6|\2\u04fa\u0512"+
		"\5\u00f8}\2\u04fb\u0512\5\u00fa~\2\u04fc\u0512\5\u00fc\177\2\u04fd\u0512"+
		"\5\u00fe\u0080\2\u04fe\u0512\5\u0100\u0081\2\u04ff\u0512\5\u0102\u0082"+
		"\2\u0500\u0512\5\u0104\u0083\2\u0501\u0512\5\u0260\u0131\2\u0502\u0512"+
		"\5\u0106\u0084\2\u0503\u0512\5\u0108\u0085\2\u0504\u0512\5\u010a\u0086"+
		"\2\u0505\u0512\5\u0262\u0132\2\u0506\u0512\5\u0258\u012d\2\u0507\u0512"+
		"\5\u0268\u0135\2\u0508\u0512\5\u010c\u0087\2\u0509\u0512\5\u0264\u0133"+
		"\2\u050a\u0512\5\u010e\u0088\2\u050b\u0512\5\u0110\u0089\2\u050c\u0512"+
		"\5\u0112\u008a\2\u050d\u0512\5\u0114\u008b\2\u050e\u0512\5\u0116\u008c"+
		"\2\u050f\u0512\5\u0118\u008d\2\u0510\u0512\5\u01f8\u00fd\2\u0511\u0474"+
		"\3\2\2\2\u0511\u0475\3\2\2\2\u0511\u0476\3\2\2\2\u0511\u0477\3\2\2\2\u0511"+
		"\u0478\3\2\2\2\u0511\u0479\3\2\2\2\u0511\u047a\3\2\2\2\u0511\u047b\3\2"+
		"\2\2\u0511\u047c\3\2\2\2\u0511\u047d\3\2\2\2\u0511\u047e\3\2\2\2\u0511"+
		"\u047f\3\2\2\2\u0511\u0480\3\2\2\2\u0511\u0481\3\2\2\2\u0511\u0482\3\2"+
		"\2\2\u0511\u0483\3\2\2\2\u0511\u0484\3\2\2\2\u0511\u0485\3\2\2\2\u0511"+
		"\u0486\3\2\2\2\u0511\u0487\3\2\2\2\u0511\u0488\3\2\2\2\u0511\u0489\3\2"+
		"\2\2\u0511\u048a\3\2\2\2\u0511\u048b\3\2\2\2\u0511\u048c\3\2\2\2\u0511"+
		"\u048d\3\2\2\2\u0511\u048e\3\2\2\2\u0511\u048f\3\2\2\2\u0511\u0490\3\2"+
		"\2\2\u0511\u0491\3\2\2\2\u0511\u0492\3\2\2\2\u0511\u0493\3\2\2\2\u0511"+
		"\u0494\3\2\2\2\u0511\u0495\3\2\2\2\u0511\u0496\3\2\2\2\u0511\u0497\3\2"+
		"\2\2\u0511\u0498\3\2\2\2\u0511\u0499\3\2\2\2\u0511\u049a\3\2\2\2\u0511"+
		"\u049b\3\2\2\2\u0511\u049c\3\2\2\2\u0511\u049d\3\2\2\2\u0511\u049e\3\2"+
		"\2\2\u0511\u049f\3\2\2\2\u0511\u04a0\3\2\2\2\u0511\u04a1\3\2\2\2\u0511"+
		"\u04a2\3\2\2\2\u0511\u04a3\3\2\2\2\u0511\u04a4\3\2\2\2\u0511\u04a5\3\2"+
		"\2\2\u0511\u04a6\3\2\2\2\u0511\u04a7\3\2\2\2\u0511\u04a8\3\2\2\2\u0511"+
		"\u04a9\3\2\2\2\u0511\u04aa\3\2\2\2\u0511\u04ab\3\2\2\2\u0511\u04ac\3\2"+
		"\2\2\u0511\u04ad\3\2\2\2\u0511\u04ae\3\2\2\2\u0511\u04af\3\2\2\2\u0511"+
		"\u04b0\3\2\2\2\u0511\u04b1\3\2\2\2\u0511\u04b2\3\2\2\2\u0511\u04b3\3\2"+
		"\2\2\u0511\u04b4\3\2\2\2\u0511\u04b5\3\2\2\2\u0511\u04b6\3\2\2\2\u0511"+
		"\u04b7\3\2\2\2\u0511\u04b8\3\2\2\2\u0511\u04b9\3\2\2\2\u0511\u04ba\3\2"+
		"\2\2\u0511\u04bb\3\2\2\2\u0511\u04bc\3\2\2\2\u0511\u04bd\3\2\2\2\u0511"+
		"\u04be\3\2\2\2\u0511\u04bf\3\2\2\2\u0511\u04c0\3\2\2\2\u0511\u04c1\3\2"+
		"\2\2\u0511\u04c2\3\2\2\2\u0511\u04c3\3\2\2\2\u0511\u04c4\3\2\2\2\u0511"+
		"\u04c5\3\2\2\2\u0511\u04c6\3\2\2\2\u0511\u04c7\3\2\2\2\u0511\u04c8\3\2"+
		"\2\2\u0511\u04c9\3\2\2\2\u0511\u04ca\3\2\2\2\u0511\u04cb\3\2\2\2\u0511"+
		"\u04cc\3\2\2\2\u0511\u04cd\3\2\2\2\u0511\u04ce\3\2\2\2\u0511\u04cf\3\2"+
		"\2\2\u0511\u04d0\3\2\2\2\u0511\u04d1\3\2\2\2\u0511\u04d2\3\2\2\2\u0511"+
		"\u04d3\3\2\2\2\u0511\u04d4\3\2\2\2\u0511\u04d5\3\2\2\2\u0511\u04d6\3\2"+
		"\2\2\u0511\u04d7\3\2\2\2\u0511\u04d8\3\2\2\2\u0511\u04d9\3\2\2\2\u0511"+
		"\u04da\3\2\2\2\u0511\u04db\3\2\2\2\u0511\u04dc\3\2\2\2\u0511\u04dd\3\2"+
		"\2\2\u0511\u04de\3\2\2\2\u0511\u04df\3\2\2\2\u0511\u04e0\3\2\2\2\u0511"+
		"\u04e1\3\2\2\2\u0511\u04e2\3\2\2\2\u0511\u04e3\3\2\2\2\u0511\u04e4\3\2"+
		"\2\2\u0511\u04e5\3\2\2\2\u0511\u04e6\3\2\2\2\u0511\u04e7\3\2\2\2\u0511"+
		"\u04e8\3\2\2\2\u0511\u04e9\3\2\2\2\u0511\u04ea\3\2\2\2\u0511\u04eb\3\2"+
		"\2\2\u0511\u04ec\3\2\2\2\u0511\u04ed\3\2\2\2\u0511\u04ee\3\2\2\2\u0511"+
		"\u04ef\3\2\2\2\u0511\u04f0\3\2\2\2\u0511\u04f1\3\2\2\2\u0511\u04f2\3\2"+
		"\2\2\u0511\u04f3\3\2\2\2\u0511\u04f4\3\2\2\2\u0511\u04f5\3\2\2\2\u0511"+
		"\u04f6\3\2\2\2\u0511\u04f7\3\2\2\2\u0511\u04f8\3\2\2\2\u0511\u04f9\3\2"+
		"\2\2\u0511\u04fa\3\2\2\2\u0511\u04fb\3\2\2\2\u0511\u04fc\3\2\2\2\u0511"+
		"\u04fd\3\2\2\2\u0511\u04fe\3\2\2\2\u0511\u04ff\3\2\2\2\u0511\u0500\3\2"+
		"\2\2\u0511\u0501\3\2\2\2\u0511\u0502\3\2\2\2\u0511\u0503\3\2\2\2\u0511"+
		"\u0504\3\2\2\2\u0511\u0505\3\2\2\2\u0511\u0506\3\2\2\2\u0511\u0507\3\2"+
		"\2\2\u0511\u0508\3\2\2\2\u0511\u0509\3\2\2\2\u0511\u050a\3\2\2\2\u0511"+
		"\u050b\3\2\2\2\u0511\u050c\3\2\2\2\u0511\u050d\3\2\2\2\u0511\u050e\3\2"+
		"\2\2\u0511\u050f\3\2\2\2\u0511\u0510\3\2\2\2\u0512\r\3\2\2\2\u0513\u0519"+
		"\5\u0276\u013c\2\u0514\u0519\5\u0278\u013d\2\u0515\u0519\5\u027a\u013e"+
		"\2\u0516\u0519\5\u027c\u013f\2\u0517\u0519\5\u027e\u0140\2\u0518\u0513"+
		"\3\2\2\2\u0518\u0514\3\2\2\2\u0518\u0515\3\2\2\2\u0518\u0516\3\2\2\2\u0518"+
		"\u0517\3\2\2\2\u0519\17\3\2\2\2\u051a\u0527\5\22\n\2\u051b\u0527\5\24"+
		"\13\2\u051c\u0527\5\26\f\2\u051d\u0527\5\30\r\2\u051e\u0527\5\34\17\2"+
		"\u051f\u0527\5\32\16\2\u0520\u0527\5\36\20\2\u0521\u0527\5&\24\2\u0522"+
		"\u0527\5(\25\2\u0523\u0527\5*\26\2\u0524\u0527\5,\27\2\u0525\u0527\5."+
		"\30\2\u0526\u051a\3\2\2\2\u0526\u051b\3\2\2\2\u0526\u051c\3\2\2\2\u0526"+
		"\u051d\3\2\2\2\u0526\u051e\3\2\2\2\u0526\u051f\3\2\2\2\u0526\u0520\3\2"+
		"\2\2\u0526\u0521\3\2\2\2\u0526\u0522\3\2\2\2\u0526\u0523\3\2\2\2\u0526"+
		"\u0524\3\2\2\2\u0526\u0525\3\2\2\2\u0527\21\3\2\2\2\u0528\u052a\7\r\2"+
		"\2\u0529\u052b\7\u034d\2\2\u052a\u0529\3\2\2\2\u052a\u052b\3\2\2\2\u052b"+
		"\u052f\3\2\2\2\u052c\u052e\5\b\5\2\u052d\u052c\3\2\2\2\u052e\u0531\3\2"+
		"\2\2\u052f\u052d\3\2\2\2\u052f\u0530\3\2\2\2\u0530\u0532\3\2\2\2\u0531"+
		"\u052f\3\2\2\2\u0532\u0534\7<\2\2\u0533\u0535\7\u034d\2\2\u0534\u0533"+
		"\3\2\2\2\u0534\u0535\3\2\2\2\u0535\23\3\2\2\2\u0536\u0538\7\17\2\2\u0537"+
		"\u0539\7\u034d\2\2\u0538\u0537\3\2\2\2\u0538\u0539\3\2\2\2\u0539\25\3"+
		"\2\2\2\u053a\u053c\7!\2\2\u053b\u053d\7\u034d\2\2\u053c\u053b\3\2\2\2"+
		"\u053c\u053d\3\2\2\2\u053d\27\3\2\2\2\u053e\u053f\7N\2\2\u053f\u0541\5"+
		"\u0410\u0209\2\u0540\u0542\7\u034d\2\2\u0541\u0540\3\2\2\2\u0541\u0542"+
		"\3\2\2\2\u0542\u0549\3\2\2\2\u0543\u0544\5\u0410\u0209\2\u0544\u0546\7"+
		"\u034e\2\2\u0545\u0547\7\u034d\2\2\u0546\u0545\3\2\2\2\u0546\u0547\3\2"+
		"\2\2\u0547\u0549\3\2\2\2\u0548\u053e\3\2\2\2\u0548\u0543\3\2\2\2\u0549"+
		"\31\3\2\2\2\u054a\u054c\7\u008e\2\2\u054b\u054d\5\u02fa\u017e\2\u054c"+
		"\u054b\3\2\2\2\u054c\u054d\3\2\2\2\u054d\u054f\3\2\2\2\u054e\u0550\7\u034d"+
		"\2\2\u054f\u054e\3\2\2\2\u054f\u0550\3\2\2\2\u0550\33\3\2\2\2\u0551\u0552"+
		"\7V\2\2\u0552\u0553\5\u0312\u018a\2\u0553\u0556\5\b\5\2\u0554\u0555\7"+
		";\2\2\u0555\u0557\5\b\5\2\u0556\u0554\3\2\2\2\u0556\u0557\3\2\2\2\u0557"+
		"\u0559\3\2\2\2\u0558\u055a\7\u034d\2\2\u0559\u0558\3\2\2\2\u0559\u055a"+
		"\3\2\2\2\u055a\35\3\2\2\2\u055b\u0562\7\u023e\2\2\u055c\u055d\5 \21\2"+
		"\u055d\u055e\7\u034c\2\2\u055e\u055f\5\"\22\2\u055f\u0560\7\u034c\2\2"+
		"\u0560\u0561\5$\23\2\u0561\u0563\3\2\2\2\u0562\u055c\3\2\2\2\u0562\u0563"+
		"\3\2\2\2\u0563\u0565\3\2\2\2\u0564\u0566\7\u034d\2\2\u0565\u0564\3\2\2"+
		"\2\u0565\u0566\3\2\2\2\u0566\37\3\2\2\2\u0567\u0568\t\2\2\2\u0568!\3\2"+
		"\2\2\u0569\u056a\t\3\2\2\u056a#\3\2\2\2\u056b\u056c\t\2\2\2\u056c%\3\2"+
		"\2\2\u056d\u056e\7\r\2\2\u056e\u0570\7\u0249\2\2\u056f\u0571\7\u034d\2"+
		"\2\u0570\u056f\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0573\3\2\2\2\u0572\u0574"+
		"\5\b\5\2\u0573\u0572\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0573\3\2\2\2\u0575"+
		"\u0576\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u0578\7<\2\2\u0578\u057a\7\u0249"+
		"\2\2\u0579\u057b\7\u034d\2\2\u057a\u0579\3\2\2\2\u057a\u057b\3\2\2\2\u057b"+
		"\u057c\3\2\2\2\u057c\u057d\7\r\2\2\u057d\u057f\7\u00f4\2\2\u057e\u0580"+
		"\7\u034d\2\2\u057f\u057e\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u0584\3\2\2"+
		"\2\u0581\u0583\5\b\5\2\u0582\u0581\3\2\2\2\u0583\u0586\3\2\2\2\u0584\u0582"+
		"\3\2\2\2\u0584\u0585\3\2\2\2\u0585\u0587\3\2\2\2\u0586\u0584\3\2\2\2\u0587"+
		"\u0588\7<\2\2\u0588\u058a\7\u00f4\2\2\u0589\u058b\7\u034d\2\2\u058a\u0589"+
		"\3\2\2\2\u058a\u058b\3\2\2\2\u058b\'\3\2\2\2\u058c\u058e\7\u00b9\2\2\u058d"+
		"\u058f\5\u01c4\u00e3\2\u058e\u058d\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0591"+
		"\3\2\2\2\u0590\u0592\7\u034c\2\2\u0591\u0590\3\2\2\2\u0591\u0592\3\2\2"+
		"\2\u0592\u0595\3\2\2\2\u0593\u0594\t\4\2\2\u0594\u0596\5\u01ca\u00e6\2"+
		"\u0595\u0593\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u0598\3\2\2\2\u0597\u0599"+
		"\5\u02fa\u017e\2\u0598\u0597\3\2\2\2\u0598\u0599\3\2\2\2\u0599\u059b\3"+
		"\2\2\2\u059a\u059c\7\u034d\2\2\u059b\u059a\3\2\2\2\u059b\u059c\3\2\2\2"+
		"\u059c)\3\2\2\2\u059d\u059e\7\u00bc\2\2\u059e\u05a8\5\u0312\u018a\2\u059f"+
		"\u05a9\5\b\5\2\u05a0\u05a2\7\17\2\2\u05a1\u05a3\7\u034d\2\2\u05a2\u05a1"+
		"\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a9\3\2\2\2\u05a4\u05a6\7!\2\2\u05a5"+
		"\u05a7\7\u034d\2\2\u05a6\u05a5\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a9"+
		"\3\2\2\2\u05a8\u059f\3\2\2\2\u05a8\u05a0\3\2\2\2\u05a8\u05a4\3\2\2\2\u05a9"+
		"+\3\2\2\2\u05aa\u05ad\7\u0081\2\2\u05ab\u05ae\5\u02fa\u017e\2\u05ac\u05ae"+
		"\7\u032e\2\2\u05ad\u05ab\3\2\2\2\u05ad\u05ac\3\2\2\2\u05ae\u05b3\3\2\2"+
		"\2\u05af\u05b0\7\u034c\2\2\u05b0\u05b2\7\u0331\2\2\u05b1\u05af\3\2\2\2"+
		"\u05b2\u05b5\3\2\2\2\u05b3\u05b1\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b7"+
		"\3\2\2\2\u05b5\u05b3\3\2\2\2\u05b6\u05b8\7\u034d\2\2\u05b7\u05b6\3\2\2"+
		"\2\u05b7\u05b8\3\2\2\2\u05b8-\3\2\2\2\u05b9\u05ba\7\u0085\2\2\u05ba\u05bb"+
		"\7\u034a\2\2\u05bb\u05bc\t\5\2\2\u05bc\u05bd\7\u034c\2\2\u05bd\u05be\5"+
		"\u02f8\u017d\2\u05be\u05bf\7\u034c\2\2\u05bf\u05c4\5\u02f8\u017d\2\u05c0"+
		"\u05c1\7\u034c\2\2\u05c1\u05c3\5\u02f8\u017d\2\u05c2\u05c0\3\2\2\2\u05c3"+
		"\u05c6\3\2\2\2\u05c4\u05c2\3\2\2\2\u05c4\u05c5\3\2\2\2\u05c5\u05c7\3\2"+
		"\2\2\u05c6\u05c4\3\2\2\2\u05c7\u05ca\7\u034b\2\2\u05c8\u05c9\7\u00bd\2"+
		"\2\u05c9\u05cb\t\6\2\2\u05ca\u05c8\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cd"+
		"\3\2\2\2\u05cc\u05ce\7\u034d\2\2\u05cd\u05cc\3\2\2\2\u05cd\u05ce\3\2\2"+
		"\2\u05ce\u05da\3\2\2\2\u05cf\u05d0\7\u0085\2\2\u05d0\u05d1\7\u0332\2\2"+
		"\u05d1\u05d6\t\7\2\2\u05d2\u05d3\7\u034c\2\2\u05d3\u05d5\t\5\2\2\u05d4"+
		"\u05d2\3\2\2\2\u05d5\u05d8\3\2\2\2\u05d6\u05d4\3\2\2\2\u05d6\u05d7\3\2"+
		"\2\2\u05d7\u05da\3\2\2\2\u05d8\u05d6\3\2\2\2\u05d9\u05b9\3\2\2\2\u05d9"+
		"\u05cf\3\2\2\2\u05da/\3\2\2\2\u05db\u05dc\7\u034d\2\2\u05dc\61\3\2\2\2"+
		"\u05dd\u05ee\5\u0270\u0139\2\u05de\u05ee\5\u0288\u0145\2\u05df\u05ee\5"+
		"\u0274\u013b\2\u05e0\u05ee\5\u01b0\u00d9\2\u05e1\u05ee\5\u01ae\u00d8\2"+
		"\u05e2\u05ee\5\u01a4\u00d3\2\u05e3\u05ee\5\u01a8\u00d5\2\u05e4\u05ee\5"+
		"\u0280\u0141\2\u05e5\u05ee\5\u01b2\u00da\2\u05e6\u05ee\5\u0298\u014d\2"+
		"\u05e7\u05ee\5\u02b6\u015c\2\u05e8\u05ee\5\u02b8\u015d\2\u05e9\u05ee\5"+
		"\u02be\u0160\2\u05ea\u05ee\5\u02c0\u0161\2\u05eb\u05ee\5\u02c2\u0162\2"+
		"\u05ec\u05ee\5\u02c4\u0163\2\u05ed\u05dd\3\2\2\2\u05ed\u05de\3\2\2\2\u05ed"+
		"\u05df\3\2\2\2\u05ed\u05e0\3\2\2\2\u05ed\u05e1\3\2\2\2\u05ed\u05e2\3\2"+
		"\2\2\u05ed\u05e3\3\2\2\2\u05ed\u05e4\3\2\2\2\u05ed\u05e5\3\2\2\2\u05ed"+
		"\u05e6\3\2\2\2\u05ed\u05e7\3\2\2\2\u05ed\u05e8\3\2\2\2\u05ed\u05e9\3\2"+
		"\2\2\u05ed\u05ea\3\2\2\2\u05ed\u05eb\3\2\2\2\u05ed\u05ec\3\2\2\2\u05ee"+
		"\63\3\2\2\2\u05ef\u05f0\7\5\2\2\u05f0\u05f1\7\u026f\2\2\u05f1\u05f2\7"+
		"\u02f8\2\2\u05f2\u05f3\5\u0410\u0209\2\u05f3\u05fa\7\u00bd\2\2\u05f4\u05f6"+
		"\7\u034c\2\2\u05f5\u05f4\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u05f7\3\2\2"+
		"\2\u05f7\u05f8\7\u01a5\2\2\u05f8\u05f9\7\u0338\2\2\u05f9\u05fb\5\u0410"+
		"\u0209\2\u05fa\u05f5\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u0602\3\2\2\2\u05fc"+
		"\u05fe\7\u034c\2\2\u05fd\u05fc\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe\u05ff"+
		"\3\2\2\2\u05ff\u0600\7\u02e0\2\2\u0600\u0601\7\u0338\2\2\u0601\u0603\7"+
		"\u0334\2\2\u0602\u05fd\3\2\2\2\u0602\u0603\3\2\2\2\u0603\u060a\3\2\2\2"+
		"\u0604\u0606\7\u034c\2\2\u0605\u0604\3\2\2\2\u0605\u0606\3\2\2\2\u0606"+
		"\u0607\3\2\2\2\u0607\u0608\7\u0293\2\2\u0608\u0609\7\u0338\2\2\u0609\u060b"+
		"\5\u0410\u0209\2\u060a\u0605\3\2\2\2\u060a\u060b\3\2\2\2\u060b\65\3\2"+
		"\2\2\u060c\u060d\7#\2\2\u060d\u060e\7\u026f\2\2\u060e\u060f\7\u02f8\2"+
		"\2\u060f\u0610\5\u0410\u0209\2\u0610\u0617\7\u00bd\2\2\u0611\u0613\7\u034c"+
		"\2\2\u0612\u0611\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0614\3\2\2\2\u0614"+
		"\u0615\7\u02e0\2\2\u0615\u0616\7\u0338\2\2\u0616\u0618\7\u0334\2\2\u0617"+
		"\u0612\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u061f\3\2\2\2\u0619\u061b\7\u034c"+
		"\2\2\u061a\u0619\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061c\3\2\2\2\u061c"+
		"\u061d\7\u0293\2\2\u061d\u061e\7\u0338\2\2\u061e\u0620\5\u0410\u0209\2"+
		"\u061f\u061a\3\2\2\2\u061f\u0620\3\2\2\2\u0620\67\3\2\2\2\u0621\u0622"+
		"\79\2\2\u0622\u0625\7\u00cc\2\2\u0623\u0624\7V\2\2\u0624\u0626\7A\2\2"+
		"\u0625\u0623\3\2\2\2\u0625\u0626\3\2\2\2\u0626\u062a\3\2\2\2\u0627\u0628"+
		"\5\u0410\u0209\2\u0628\u0629\7\u0345\2\2\u0629\u062b\3\2\2\2\u062a\u0627"+
		"\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062c\3\2\2\2\u062c\u062d\5\u0410\u0209"+
		"\2\u062d9\3\2\2\2\u062e\u062f\79\2\2\u062f\u0630\7\u026f\2\2\u0630\u0631"+
		"\7\u02f8\2\2\u0631\u0632\5\u0410\u0209\2\u0632;\3\2\2\2\u0633\u0634\5"+
		"> \2\u0634\u0635\5\u0410\u0209\2\u0635\u0636\5@!\2\u0636=\3\2\2\2\u0637"+
		"\u0638\7\5\2\2\u0638\u0639\7\u00d8\2\2\u0639?\3\2\2\2\u063a\u063c\5B\""+
		"\2\u063b\u063a\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u063e\3\2\2\2\u063d\u063f"+
		"\5X-\2\u063e\u063d\3\2\2\2\u063e\u063f\3\2\2\2\u063f\u0641\3\2\2\2\u0640"+
		"\u0642\5F$\2\u0641\u0640\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0644\3\2\2"+
		"\2\u0643\u0645\5L\'\2\u0644\u0643\3\2\2\2\u0644\u0645\3\2\2\2\u0645A\3"+
		"\2\2\2\u0646\u0649\5D#\2\u0647\u064a\5\\/\2\u0648\u064a\5T+\2\u0649\u0647"+
		"\3\2\2\2\u0649\u0648\3\2\2\2\u064aC\3\2\2\2\u064b\u064c\7K\2\2\u064cE"+
		"\3\2\2\2\u064d\u064e\5J&\2\u064e\u064f\5H%\2\u064fG\3\2\2\2\u0650\u0653"+
		"\7\4\2\2\u0651\u0653\5n8\2\u0652\u0650\3\2\2\2\u0652\u0651\3\2\2\2\u0653"+
		"I\3\2\2\2\u0654\u0655\79\2\2\u0655K\3\2\2\2\u0656\u0657\5N(\2\u0657\u0658"+
		"\5P)\2\u0658M\3\2\2\2\u0659\u065a\7\3\2\2\u065a\u065b\7E\2\2\u065b\u065c"+
		"\7K\2\2\u065cO\3\2\2\2\u065d\u0661\5R*\2\u065e\u065f\5V,\2\u065f\u0660"+
		"\5\u0410\u0209\2\u0660\u0662\3\2\2\2\u0661\u065e\3\2\2\2\u0661\u0662\3"+
		"\2\2\2\u0662Q\3\2\2\2\u0663\u0664\7\u0334\2\2\u0664S\3\2\2\2\u0665\u0666"+
		"\5V,\2\u0666\u0667\5\u0410\u0209\2\u0667U\3\2\2\2\u0668\u0669\7\b\2\2"+
		"\u0669W\3\2\2\2\u066a\u066b\5Z.\2\u066b\u066c\5^\60\2\u066cY\3\2\2\2\u066d"+
		"\u066e\7\u00bd\2\2\u066e[\3\2\2\2\u066f\u0673\5`\61\2\u0670\u0673\5j\66"+
		"\2\u0671\u0673\7\u0334\2\2\u0672\u066f\3\2\2\2\u0672\u0670\3\2\2\2\u0672"+
		"\u0671\3\2\2\2\u0673]\3\2\2\2\u0674\u0675\b\60\1\2\u0675\u0676\7\u02e1"+
		"\2\2\u0676\u0677\7\u0338\2\2\u0677\u067e\t\b\2\2\u0678\u0679\7\u0325\2"+
		"\2\u0679\u067a\7\u0338\2\2\u067a\u067e\t\t\2\2\u067b\u067c\7\u031f\2\2"+
		"\u067c\u067e\7\u010e\2\2\u067d\u0674\3\2\2\2\u067d\u0678\3\2\2\2\u067d"+
		"\u067b\3\2\2\2\u067e\u0683\3\2\2\2\u067f\u0680\f\3\2\2\u0680\u0682\7\u034c"+
		"\2\2\u0681\u067f\3\2\2\2\u0682\u0685\3\2\2\2\u0683\u0681\3\2\2\2\u0683"+
		"\u0684\3\2\2\2\u0684_\3\2\2\2\u0685\u0683\3\2\2\2\u0686\u0687\5d\63\2"+
		"\u0687\u0688\5b\62\2\u0688\u0689\5f\64\2\u0689a\3\2\2\2\u068a\u068b\5"+
		"\u0410\u0209\2\u068bc\3\2\2\2\u068c\u068d\7\67\2\2\u068de\3\2\2\2\u068e"+
		"\u068f\5h\65\2\u068f\u0690\5f\64\2\u0690\u0693\3\2\2\2\u0691\u0693\5\u0410"+
		"\u0209\2\u0692\u068e\3\2\2\2\u0692\u0691\3\2\2\2\u0693g\3\2\2\2\u0694"+
		"\u0695\7\13\2\2\u0695i\3\2\2\2\u0696\u0697\5l\67\2\u0697\u0698\5f\64\2"+
		"\u0698k\3\2\2\2\u0699\u069a\7\u0129\2\2\u069am\3\2\2\2\u069b\u069c\5p"+
		"9\2\u069c\u069d\5j\66\2\u069d\u069e\7\u032f\2\2\u069e\u069f\7\u034c\2"+
		"\2\u069f\u06a2\3\2\2\2\u06a0\u06a2\5j\66\2\u06a1\u069b\3\2\2\2\u06a1\u06a0"+
		"\3\2\2\2\u06a2o\3\2\2\2\u06a3\u06a4\7\u032f\2\2\u06a4q\3\2\2\2\u06a5\u06a6"+
		"\7#\2\2\u06a6\u06a7\7\u00d8\2\2\u06a7\u06aa\5\u0410\u0209\2\u06a8\u06a9"+
		"\7\n\2\2\u06a9\u06ab\5\u0410\u0209\2\u06aa\u06a8\3\2\2\2\u06aa\u06ab\3"+
		"\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06b1\7K\2\2\u06ad\u06af\7\u034c\2\2"+
		"\u06ae\u06ad\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b2"+
		"\t\n\2\2\u06b1\u06ae\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b3"+
		"\u06b4\3\2\2\2\u06b4\u06b9\3\2\2\2\u06b5\u06b6\7\u00bd\2\2\u06b6\u06b7"+
		"\7\u02e1\2\2\u06b7\u06b8\7\u0338\2\2\u06b8\u06ba\t\b\2\2\u06b9\u06b5\3"+
		"\2\2\2\u06b9\u06ba\3\2\2\2\u06bas\3\2\2\2\u06bb\u06bc\79\2\2\u06bc\u06bf"+
		"\7\u00d8\2\2\u06bd\u06be\7V\2\2\u06be\u06c0\7A\2\2\u06bf\u06bd\3\2\2\2"+
		"\u06bf\u06c0\3\2\2\2\u06c0\u06c5\3\2\2\2\u06c1\u06c3\7\u034c\2\2\u06c2"+
		"\u06c1\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4\u06c6\5\u0410"+
		"\u0209\2\u06c5\u06c2\3\2\2\2\u06c6\u06c7\3\2\2\2\u06c7\u06c5\3\2\2\2\u06c7"+
		"\u06c8\3\2\2\2\u06c8\u06cc\3\2\2\2\u06c9\u06ca\7\u00bd\2\2\u06ca\u06cb"+
		"\7\u01ab\2\2\u06cb\u06cd\7\u011f\2\2\u06cc\u06c9\3\2\2\2\u06cc\u06cd\3"+
		"\2\2\2\u06cdu\3\2\2\2\u06ce\u06cf\5x=\2\u06cf\u06d4\5\u0410\u0209\2\u06d0"+
		"\u06d5\5z>\2\u06d1\u06d2\7\u01f4\2\2\u06d2\u06d3\7\u01d7\2\2\u06d3\u06d5"+
		"\7_\2\2\u06d4\u06d0\3\2\2\2\u06d4\u06d1\3\2\2\2\u06d5w\3\2\2\2\u06d6\u06d7"+
		"\7\5\2\2\u06d7\u06d8\7\u0270\2\2\u06d8\u06d9\7_\2\2\u06d9y\3\2\2\2\u06da"+
		"\u06db\5|?\2\u06db\u06de\5~@\2\u06dc\u06dd\7\u034c\2\2\u06dd\u06df\5~"+
		"@\2\u06de\u06dc\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u06e0\3\2\2\2\u06e0"+
		"\u06e1\7\u034b\2\2\u06e1{\3\2\2\2\u06e2\u06e3\7\u00bd\2\2\u06e3\u06e4"+
		"\7\u01d7\2\2\u06e4\u06e5\7_\2\2\u06e5\u06e6\7\u034a\2\2\u06e6}\3\2\2\2"+
		"\u06e7\u06e8\7\u0117\2\2\u06e8\u06e9\7\22\2\2\u06e9\u06ea\7\u02e0\2\2"+
		"\u06ea\u06eb\7\u0338\2\2\u06eb\u06f2\7\u0334\2\2\u06ec\u06ed\7\u0132\2"+
		"\2\u06ed\u06ee\7\22\2\2\u06ee\u06ef\7\u02e0\2\2\u06ef\u06f0\7\u0338\2"+
		"\2\u06f0\u06f2\7\u0334\2\2\u06f1\u06e7\3\2\2\2\u06f1\u06ec\3\2\2\2\u06f2"+
		"\177\3\2\2\2\u06f3\u06f4\7#\2\2\u06f4\u06f5\7\u0270\2\2\u06f5\u06f6\7"+
		"_\2\2\u06f6\u06f9\5\u0410\u0209\2\u06f7\u06f8\7\n\2\2\u06f8\u06fa\5\u0410"+
		"\u0209\2\u06f9\u06f7\3\2\2\2\u06f9\u06fa\3\2\2\2\u06fa\u0708\3\2\2\2\u06fb"+
		"\u0706\7K\2\2\u06fc\u06fd\7E\2\2\u06fd\u06fe\7\u0338\2\2\u06fe\u0707\7"+
		"\u0334\2\2\u06ff\u0700\7\u029d\2\2\u0700\u0701\7\u0338\2\2\u0701\u0707"+
		"\7\u0334\2\2\u0702\u0703\7\u00d8\2\2\u0703\u0707\5\u0410\u0209\2\u0704"+
		"\u0705\7\u01dc\2\2\u0705\u0707\5\u0410\u0209\2\u0706\u06fc\3\2\2\2\u0706"+
		"\u06ff\3\2\2\2\u0706\u0702\3\2\2\2\u0706\u0704\3\2\2\2\u0707\u0709\3\2"+
		"\2\2\u0708\u06fb\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u0716\3\2\2\2\u070a"+
		"\u0714\7\u00bd\2\2\u070b\u070c\7\u00cd\2\2\u070c\u070d\7\u0338\2\2\u070d"+
		"\u0715\t\13\2\2\u070e\u070f\7\u01dd\2\2\u070f\u0710\7\u0338\2\2\u0710"+
		"\u0715\7\u0334\2\2\u0711\u0712\7\u0108\2\2\u0712\u0713\7\u0338\2\2\u0713"+
		"\u0715\t\f\2\2\u0714\u070b\3\2\2\2\u0714\u070e\3\2\2\2\u0714\u0711\3\2"+
		"\2\2\u0715\u0717\3\2\2\2\u0716\u070a\3\2\2\2\u0716\u0717\3\2\2\2\u0717"+
		"\u071d\3\2\2\2\u0718\u0719\7\u0132\2\2\u0719\u071a\7\22\2\2\u071a\u071b"+
		"\7\u02e0\2\2\u071b\u071c\7\u0338\2\2\u071c\u071e\7\u0334\2\2\u071d\u0718"+
		"\3\2\2\2\u071d\u071e\3\2\2\2\u071e\u0081\3\2\2\2\u071f\u0720\79\2\2\u0720"+
		"\u0721\7\u0270\2\2\u0721\u0722\7_\2\2\u0722\u0726\5\u0410\u0209\2\u0723"+
		"\u0724\7\u01f4\2\2\u0724\u0725\7\u01dc\2\2\u0725\u0727\7_\2\2\u0726\u0723"+
		"\3\2\2\2\u0726\u0727\3\2\2\2\u0727\u0083\3\2\2\2\u0728\u072c\5\u008cG"+
		"\2\u0729\u072a\5\u0094K\2\u072a\u072b\5\u008aF\2\u072b\u072d\3\2\2\2\u072c"+
		"\u0729\3\2\2\2\u072c\u072d\3\2\2\2\u072d\u072e\3\2\2\2\u072e\u072f\5\u03ca"+
		"\u01e6\2\u072f\u0730\5\u0088E\2\u0730\u0731\5\u0086D\2\u0731\u0085\3\2"+
		"\2\2\u0732\u0736\5\u0410\u0209\2\u0733\u0734\7\u0097\2\2\u0734\u0736\7"+
		"\u01c5\2\2\u0735\u0732\3\2\2\2\u0735\u0733\3\2\2\2\u0736\u0087\3\2\2\2"+
		"\u0737\u0738\7\u00a8\2\2\u0738\u0089\3\2\2\2\u0739\u073a\7\u034e\2\2\u073a"+
		"\u073b\7\u034e\2\2\u073b\u008b\3\2\2\2\u073c\u073d\7\5\2\2\u073d\u073e"+
		"\7\n\2\2\u073e\u073f\7p\2\2\u073f\u008d\3\2\2\2\u0740\u0744\5\u008cG\2"+
		"\u0741\u0742\5\u0096L\2\u0742\u0743\5\u008aF\2\u0743\u0745\3\2\2\2\u0744"+
		"\u0741\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0746\3\2\2\2\u0746\u0747\5\u03ca"+
		"\u01e6\2\u0747\u0748\5\u0088E\2\u0748\u0749\5\u0086D\2\u0749\u008f\3\2"+
		"\2\2\u074a\u074e\5\u008cG\2\u074b\u074c\5\u0098M\2\u074c\u074d\5\u008a"+
		"F\2\u074d\u074f\3\2\2\2\u074e\u074b\3\2\2\2\u074e\u074f\3\2\2\2\u074f"+
		"\u0750\3\2\2\2\u0750\u0751\5\u03cc\u01e7\2\u0751\u0752\5\u0088E\2\u0752"+
		"\u0753\5\u0086D\2\u0753\u0091\3\2\2\2\u0754\u0758\5\u008cG\2\u0755\u0756"+
		"\5\u009aN\2\u0756\u0757\5\u008aF\2\u0757\u0759\3\2\2\2\u0758\u0755\3\2"+
		"\2\2\u0758\u0759\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075b\5\u03ce\u01e8"+
		"\2\u075b\u075c\5\u0088E\2\u075c\u075d\5\u0086D\2\u075d\u0093\3\2\2\2\u075e"+
		"\u0781\7\u01b9\2\2\u075f\u0781\7\u00d8\2\2\u0760\u0761\7\u0270\2\2\u0761"+
		"\u0781\7_\2\2\u0762\u0763\7\u00e2\2\2\u0763\u0781\7P\2\2\u0764\u0781\7"+
		"\u027e\2\2\u0765\u0781\7\u028a\2\2\u0766\u0781\7\u024c\2\2\u0767\u0781"+
		"\7+\2\2\u0768\u0781\7\u0298\2\2\u0769\u076a\7\u0150\2\2\u076a\u0781\7"+
		"\u00f3\2\2\u076b\u076c\7\u0150\2\2\u076c\u0781\7\u022f\2\2\u076d\u076e"+
		"\7\u0198\2\2\u076e\u0781\7\u024c\2\2\u076f\u0770\7\u01f2\2\2\u0770\u0771"+
		"\7\u0303\2\2\u0771\u0781\7\u00ea\2\2\u0772\u0781\7\u02f8\2\2\u0773\u0781"+
		"\7\u0203\2\2\u0774\u0781\7\u0097\2\2\u0775\u0776\7\u020d\2\2\u0776\u0777"+
		"\7\u01db\2\2\u0777\u0781\7\u017b\2\2\u0778\u0779\7\u0302\2\2\u0779\u0781"+
		"\7\u02f8\2\2\u077a\u0781\7\u0303\2\2\u077b\u077c\7\u0236\2\2\u077c\u0781"+
		"\7_\2\2\u077d\u077e\7\u0261\2\2\u077e\u077f\7\u0097\2\2\u077f\u0781\7"+
		"\u00fa\2\2\u0780\u075e\3\2\2\2\u0780\u075f\3\2\2\2\u0780\u0760\3\2\2\2"+
		"\u0780\u0762\3\2\2\2\u0780\u0764\3\2\2\2\u0780\u0765\3\2\2\2\u0780\u0766"+
		"\3\2\2\2\u0780\u0767\3\2\2\2\u0780\u0768\3\2\2\2\u0780\u0769\3\2\2\2\u0780"+
		"\u076b\3\2\2\2\u0780\u076d\3\2\2\2\u0780\u076f\3\2\2\2\u0780\u0772\3\2"+
		"\2\2\u0780\u0773\3\2\2\2\u0780\u0774\3\2\2\2\u0780\u0775\3\2\2\2\u0780"+
		"\u0778\3\2\2\2\u0780\u077a\3\2\2\2\u0780\u077b\3\2\2\2\u0780\u077d\3\2"+
		"\2\2\u0781\u0095\3\2\2\2\u0782\u0798\7\u01b9\2\2\u0783\u0798\7\u00d8\2"+
		"\2\u0784\u0785\7\u0270\2\2\u0785\u0798\7_\2\2\u0786\u0798\7\u027e\2\2"+
		"\u0787\u0798\7\u024c\2\2\u0788\u0798\7+\2\2\u0789\u078a\7\u0150\2\2\u078a"+
		"\u0798\7\u00f3\2\2\u078b\u078c\7\u0150\2\2\u078c\u0798\7\u022f\2\2\u078d"+
		"\u0798\7\u02f8\2\2\u078e\u0798\7\u0097\2\2\u078f\u0790\7\u020d\2\2\u0790"+
		"\u0791\7\u01db\2\2\u0791\u0798\7\u017b\2\2\u0792\u0793\7\u0236\2\2\u0793"+
		"\u0798\7_\2\2\u0794\u0795\7\u0261\2\2\u0795\u0796\7\u0097\2\2\u0796\u0798"+
		"\7\u00fa\2\2\u0797\u0782\3\2\2\2\u0797\u0783\3\2\2\2\u0797\u0784\3\2\2"+
		"\2\u0797\u0786\3\2\2\2\u0797\u0787\3\2\2\2\u0797\u0788\3\2\2\2\u0797\u0789"+
		"\3\2\2\2\u0797\u078b\3\2\2\2\u0797\u078d\3\2\2\2\u0797\u078e\3\2\2\2\u0797"+
		"\u078f\3\2\2\2\u0797\u0792\3\2\2\2\u0797\u0794\3\2\2\2\u0798\u0097\3\2"+
		"\2\2\u0799\u079a\t\r\2\2\u079a\u0099\3\2\2\2\u079b\u079c\t\16\2\2\u079c"+
		"\u009b\3\2\2\2\u079d\u079e\79\2\2\u079e\u079f\7\u00e2\2\2\u079f\u07a0"+
		"\7P\2\2\u07a0\u07a1\5\u0410\u0209\2\u07a1\u009d\3\2\2\2\u07a2\u07a3\5"+
		"\u00a0Q\2\u07a3\u07a4\5\u00a2R\2\u07a4\u009f\3\2\2\2\u07a5\u07a6\7\5\2"+
		"\2\u07a6\u07a7\7\u00e2\2\2\u07a7\u07a8\7P\2\2\u07a8\u07a9\5\u0410\u0209"+
		"\2\u07a9\u00a1\3\2\2\2\u07aa\u07ab\7\u009e\2\2\u07ab\u07bb\7\u034a\2\2"+
		"\u07ac\u07ad\7\u0273\2\2\u07ad\u07ae\7\u0338\2\2\u07ae\u07bc\t\17\2\2"+
		"\u07af\u07b0\7\u013e\2\2\u07b0\u07b1\7\u0338\2\2\u07b1\u07bc\7\u0332\2"+
		"\2\u07b2\u07b3\7\u015c\2\2\u07b3\u07b4\7\u0338\2\2\u07b4\u07bc\7\u0332"+
		"\2\2\u07b5\u07b6\7\u0116\2\2\u07b6\u07b7\7\u0338\2\2\u07b7\u07bc\t\t\2"+
		"\2\u07b8\u07b9\7\u01fb\2\2\u07b9\u07ba\7\u0338\2\2\u07ba\u07bc\7\u0332"+
		"\2\2\u07bb\u07ac\3\2\2\2\u07bb\u07af\3\2\2\2\u07bb\u07b2\3\2\2\2\u07bb"+
		"\u07b5\3\2\2\2\u07bb\u07b8\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u090e\7\u034b"+
		"\2\2\u07be\u07bf\7\3\2\2\u07bf\u07c0\7+\2\2\u07c0\u090e\5\u0410\u0209"+
		"\2\u07c1\u07c2\7\u01f4\2\2\u07c2\u07c3\7+\2\2\u07c3\u090e\5\u0410\u0209"+
		"\2\u07c4\u07c5\7\3\2\2\u07c5\u07c6\7\u01f7\2\2\u07c6\u07c7\7p\2\2\u07c7"+
		"\u07c8\7\u0334\2\2\u07c8\u07c9\7\u00bd\2\2\u07c9\u07cd\7\u034a\2\2\u07ca"+
		"\u07cb\7\u0133\2\2\u07cb\u07cc\7\u0338\2\2\u07cc\u07ce\7\u0334\2\2\u07cd"+
		"\u07ca\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d5\3\2\2\2\u07cf\u07d1\7\u034c"+
		"\2\2\u07d0\u07cf\3\2\2\2\u07d0\u07d1\3\2\2\2\u07d1\u07d2\3\2\2\2\u07d2"+
		"\u07d3\7\u0275\2\2\u07d3\u07d4\7\u0338\2\2\u07d4\u07d6\t\20\2\2\u07d5"+
		"\u07d0\3\2\2\2\u07d5\u07d6\3\2\2\2\u07d6\u07dd\3\2\2\2\u07d7\u07d9\7\u034c"+
		"\2\2\u07d8\u07d7\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07da\3\2\2\2\u07da"+
		"\u07db\7\u013c\2\2\u07db\u07dc\7\u0338\2\2\u07dc\u07de\t\21\2\2\u07dd"+
		"\u07d8\3\2\2\2\u07dd\u07de\3\2\2\2\u07de\u07e5\3\2\2\2\u07df\u07e1\7\u034c"+
		"\2\2\u07e0\u07df\3\2\2\2\u07e0\u07e1\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2"+
		"\u07e3\7\u0215\2\2\u07e3\u07e4\7\u0338\2\2\u07e4\u07e6\t\21\2\2\u07e5"+
		"\u07e0\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07ed\3\2\2\2\u07e7\u07e9\7\u034c"+
		"\2\2\u07e8\u07e7\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea"+
		"\u07eb\7\u00e4\2\2\u07eb\u07ec\7\u0338\2\2\u07ec\u07ee\7\u0332\2\2\u07ed"+
		"\u07e8\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07f8\3\2\2\2\u07ef\u07f1\7\u034c"+
		"\2\2\u07f0\u07ef\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2"+
		"\u07f3\7\u01d3\2\2\u07f3\u07f4\7\u034a\2\2\u07f4\u07f5\7\u026a\2\2\u07f5"+
		"\u07f6\7\u0338\2\2\u07f6\u07f7\t\22\2\2\u07f7\u07f9\7\u034b\2\2\u07f8"+
		"\u07f0\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u0803\3\2\2\2\u07fa\u07fc\7\u034c"+
		"\2\2\u07fb\u07fa\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd"+
		"\u07fe\7\u0210\2\2\u07fe\u07ff\7\u034a\2\2\u07ff\u0800\7\u026a\2\2\u0800"+
		"\u0801\7\u0338\2\2\u0801\u0802\7\u01e8\2\2\u0802\u0804\7\u034b\2\2\u0803"+
		"\u07fb\3\2\2\2\u0803\u0804\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u090e\7\u034b"+
		"\2\2\u0806\u0807\7\u0210\2\2\u0807\u0810\7\u034a\2\2\u0808\u0809\7\u026a"+
		"\2\2\u0809\u080a\7\u0338\2\2\u080a\u0811\t\23\2\2\u080b\u080c\7\u01e9"+
		"\2\2\u080c\u080d\7\u0338\2\2\u080d\u080e\7\u034a\2\2\u080e\u080f\7\u0334"+
		"\2\2\u080f\u0811\7\u034b\2\2\u0810\u0808\3\2\2\2\u0810\u080b\3\2\2\2\u0811"+
		"\u090e\3\2\2\2\u0812\u0813\7\u01d3\2\2\u0813\u082a\7\u034a\2\2\u0814\u0815"+
		"\7\u026a\2\2\u0815\u0816\7\u0338\2\2\u0816\u082b\t\23\2\2\u0817\u0818"+
		"\7\u01e9\2\2\u0818\u0819\7\u0338\2\2\u0819\u0824\7\u034a\2\2\u081a\u081c"+
		"\7\u034c\2\2\u081b\u081a\3\2\2\2\u081b\u081c\3\2\2\2\u081c\u081d\3\2\2"+
		"\2\u081d\u081f\7\u0334\2\2\u081e\u081b\3\2\2\2\u081f\u0822\3\2\2\2\u0820"+
		"\u081e\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0825\3\2\2\2\u0822\u0820\3\2"+
		"\2\2\u0823\u0825\7\u02d2\2\2\u0824\u0820\3\2\2\2\u0824\u0823\3\2\2\2\u0825"+
		"\u0826\3\2\2\2\u0826\u082b\7\u034b\2\2\u0827\u0828\7\u021c\2\2\u0828\u0829"+
		"\7\u0338\2\2\u0829\u082b\7\u0332\2\2\u082a\u0814\3\2\2\2\u082a\u0817\3"+
		"\2\2\2\u082a\u0827\3\2\2\2\u082b\u090e\3\2\2\2\u082c\u082d\7\u01a2\2\2"+
		"\u082d\u082e\7\u01f7\2\2\u082e\u082f\7p\2\2\u082f\u0869\7\u0334\2\2\u0830"+
		"\u0831\7\u00bd\2\2\u0831\u0841\7\u034a\2\2\u0832\u0833\7\u0133\2\2\u0833"+
		"\u0834\7\u0338\2\2\u0834\u0842\7\u0334\2\2\u0835\u0836\7\u0275\2\2\u0836"+
		"\u0837\7\u0338\2\2\u0837\u0842\t\20\2\2\u0838\u0839\7\u013c\2\2\u0839"+
		"\u083a\7\u0338\2\2\u083a\u0842\t\21\2\2\u083b\u083c\7\u0215\2\2\u083c"+
		"\u083d\7\u0338\2\2\u083d\u0842\t\21\2\2\u083e\u083f\7\u00e4\2\2\u083f"+
		"\u0840\7\u0338\2\2\u0840\u0842\7\u0332\2\2\u0841\u0832\3\2\2\2\u0841\u0835"+
		"\3\2\2\2\u0841\u0838\3\2\2\2\u0841\u083b\3\2\2\2\u0841\u083e\3\2\2\2\u0842"+
		"\u086a\3\2\2\2\u0843\u0844\7\u0210\2\2\u0844\u084d\7\u034a\2\2\u0845\u0846"+
		"\7\u026a\2\2\u0846\u0847\7\u0338\2\2\u0847\u084e\t\23\2\2\u0848\u0849"+
		"\7\u01e9\2\2\u0849\u084a\7\u0338\2\2\u084a\u084b\7\u034a\2\2\u084b\u084c"+
		"\7\u0334\2\2\u084c\u084e\7\u034b\2\2\u084d\u0845\3\2\2\2\u084d\u0848\3"+
		"\2\2\2\u084e\u086a\3\2\2\2\u084f\u0850\7\u01d3\2\2\u0850\u0867\7\u034a"+
		"\2\2\u0851\u0852\7\u026a\2\2\u0852\u0853\7\u0338\2\2\u0853\u0868\t\23"+
		"\2\2\u0854\u0855\7\u01e9\2\2\u0855\u0856\7\u0338\2\2\u0856\u0861\7\u034a"+
		"\2\2\u0857\u0859\7\u034c\2\2\u0858\u0857\3\2\2\2\u0858\u0859\3\2\2\2\u0859"+
		"\u085a\3\2\2\2\u085a\u085c\7\u0334\2\2\u085b\u0858\3\2\2\2\u085c\u085f"+
		"\3\2\2\2\u085d\u085b\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u0862\3\2\2\2\u085f"+
		"\u085d\3\2\2\2\u0860\u0862\7\u02d2\2\2\u0861\u085d\3\2\2\2\u0861\u0860"+
		"\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0868\7\u034b\2\2\u0864\u0865\7\u021c"+
		"\2\2\u0865\u0866\7\u0338\2\2\u0866\u0868\7\u0332\2\2\u0867\u0851\3\2\2"+
		"\2\u0867\u0854\3\2\2\2\u0867\u0864\3\2\2\2\u0868\u086a\3\2\2\2\u0869\u0830"+
		"\3\2\2\2\u0869\u0843\3\2\2\2\u0869\u084f\3\2\2\2\u086a\u086b\3\2\2\2\u086b"+
		"\u090e\7\u034b\2\2\u086c\u086d\7\u01f4\2\2\u086d\u086e\7\u01f7\2\2\u086e"+
		"\u086f\7p\2\2\u086f\u090e\7\u0334\2\2\u0870\u090e\7^\2\2\u0871\u0872\7"+
		"^\2\2\u0872\u0873\7\u00e2\2\2\u0873\u0874\7P\2\2\u0874\u088b\7p\2\2\u0875"+
		"\u0877\7\u034c\2\2\u0876\u0875\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0878"+
		"\3\2\2\2\u0878\u0879\7\u0334\2\2\u0879\u087a\7\u00bd\2\2\u087a\u087b\7"+
		"\u034a\2\2\u087b\u087c\7\u017d\2\2\u087c\u087d\7\u0338\2\2\u087d\u087e"+
		"\7\u0334\2\2\u087e\u087f\7\u034c\2\2\u087f\u0880\7\u0275\2\2\u0880\u0881"+
		"\7\u0338\2\2\u0881\u0882\t\20\2\2\u0882\u0883\7\u034c\2\2\u0883\u0884"+
		"\7\u013c\2\2\u0884\u0885\7\u0338\2\2\u0885\u0886\7\u0186\2\2\u0886\u0887"+
		"\7\u034c\2\2\u0887\u0888\7\u0215\2\2\u0888\u0889\7\u0338\2\2\u0889\u088a"+
		"\t\21\2\2\u088a\u088c\7\u034b\2\2\u088b\u0876\3\2\2\2\u088c\u088d\3\2"+
		"\2\2\u088d\u088b\3\2\2\2\u088d\u088e\3\2\2\2\u088e\u090e\3\2\2\2\u088f"+
		"\u0890\7\u01a2\2\2\u0890\u0891\7\u00e2\2\2\u0891\u0892\7P\2\2\u0892\u08b5"+
		"\7p\2\2\u0893\u0895\7\u034c\2\2\u0894\u0893\3\2\2\2\u0894\u0895\3\2\2"+
		"\2\u0895\u0896\3\2\2\2\u0896\u0897\7\u0334\2\2\u0897\u0898\7\u00bd\2\2"+
		"\u0898\u0899\7\u034a\2\2\u0899\u089a\7\u017d\2\2\u089a\u089b\7\u0338\2"+
		"\2\u089b\u08a2\7\u0334\2\2\u089c\u089e\7\u034c\2\2\u089d\u089c\3\2\2\2"+
		"\u089d\u089e\3\2\2\2\u089e\u089f\3\2\2\2\u089f\u08a0\7\u0275\2\2\u08a0"+
		"\u08a1\7\u0338\2\2\u08a1\u08a3\t\20\2\2\u08a2\u089d\3\2\2\2\u08a2\u08a3"+
		"\3\2\2\2\u08a3\u08aa\3\2\2\2\u08a4\u08a6\7\u034c\2\2\u08a5\u08a4\3\2\2"+
		"\2\u08a5\u08a6\3\2\2\2\u08a6\u08a7\3\2\2\2\u08a7\u08a8\7\u013c\2\2\u08a8"+
		"\u08a9\7\u0338\2\2\u08a9\u08ab\7\u0186\2\2\u08aa\u08a5\3\2\2\2\u08aa\u08ab"+
		"\3\2\2\2\u08ab\u08b2\3\2\2\2\u08ac\u08ae\7\u034c\2\2\u08ad\u08ac\3\2\2"+
		"\2\u08ad\u08ae\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b0\7\u0215\2\2\u08b0"+
		"\u08b1\7\u0338\2\2\u08b1\u08b3\t\21\2\2\u08b2\u08ad\3\2\2\2\u08b2\u08b3"+
		"\3\2\2\2\u08b3\u08b4\3\2\2\2\u08b4\u08b6\7\u034b\2\2\u08b5\u0894\3\2\2"+
		"\2\u08b6\u08b7\3\2\2\2\u08b7\u08b5\3\2\2\2\u08b7\u08b8\3\2\2\2\u08b8\u090e"+
		"\3\2\2\2\u08b9\u08ba\7O\2\2\u08ba\u08bb\7#\2\2\u08bb\u08bc\7\7\2\2\u08bc"+
		"\u090e\7+\2\2\u08bd\u08be\7\61\2\2\u08be\u08bf\7#\2\2\u08bf\u08c0\7\7"+
		"\2\2\u08c0\u090e\7+\2\2\u08c1\u090e\7\u02a1\2\2\u08c2\u090e\7\u014b\2"+
		"\2\u08c3\u08c4\7\3\2\2\u08c4\u08c5\7\u017c\2\2\u08c5\u08c6\7\u0334\2\2"+
		"\u08c6\u08ea\7\u034a\2\2\u08c7\u08c8\7\u00bd\2\2\u08c8\u08c9\7\u0123\2"+
		"\2\u08c9\u08ca\7p\2\2\u08ca\u08cb\7\u034a\2\2\u08cb\u08cc\5\u00a4S\2\u08cc"+
		"\u08cd\5\u00a4S\2\u08cd\u08ce\7\u034b\2\2\u08ce\u08eb\3\2\2\2\u08cf\u08d0"+
		"\7\u00bd\2\2\u08d0\u08d1\7\u016c\2\2\u08d1\u08df\7\u034a\2\2\u08d2\u08d4"+
		"\7\u034c\2\2\u08d3\u08d2\3\2\2\2\u08d3\u08d4\3\2\2\2\u08d4\u08d5\3\2\2"+
		"\2\u08d5\u08db\7\u034a\2\2\u08d6\u08d7\5\u00a4S\2\u08d7\u08d8\7\u034c"+
		"\2\2\u08d8\u08d9\5\u00a4S\2\u08d9\u08dc\3\2\2\2\u08da\u08dc\5\u00a6T\2"+
		"\u08db\u08d6\3\2\2\2\u08db\u08da\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd\u08de"+
		"\7\u034b\2\2\u08de\u08e0\3\2\2\2\u08df\u08d3\3\2\2\2\u08e0\u08e1\3\2\2"+
		"\2\u08e1\u08df\3\2\2\2\u08e1\u08e2\3\2\2\2\u08e2\u08e3\3\2\2\2\u08e3\u08e8"+
		"\7\u034b\2\2\u08e4\u08e5\7\u034c\2\2\u08e5\u08e6\7\u01d1\2\2\u08e6\u08e7"+
		"\7\u0338\2\2\u08e7\u08e9\7\u0332\2\2\u08e8\u08e4\3\2\2\2\u08e8\u08e9\3"+
		"\2\2\2\u08e9\u08eb\3\2\2\2\u08ea\u08c7\3\2\2\2\u08ea\u08cf\3\2\2\2\u08eb"+
		"\u08ec\3\2\2\2\u08ec\u08ed\7\u034b\2\2\u08ed\u090e\3\2\2\2\u08ee\u08ef"+
		"\7\u01a2\2\2\u08ef\u08fe\7\u017c\2\2\u08f0\u08f1\7\3\2\2\u08f1\u08f2\7"+
		"\u016c\2\2\u08f2\u08f7\7\u034a\2\2\u08f3\u08f4\5\u00a4S\2\u08f4\u08f5"+
		"\5\u00a4S\2\u08f5\u08f8\3\2\2\2\u08f6\u08f8\5\u00a6T\2\u08f7\u08f3\3\2"+
		"\2\2\u08f7\u08f6\3\2\2\2\u08f8\u08f9\3\2\2\2\u08f9\u08fa\7\u034b\2\2\u08fa"+
		"\u08ff\3\2\2\2\u08fb\u08fc\7\u01d1\2\2\u08fc\u08fd\7\u0338\2\2\u08fd\u08ff"+
		"\7\u0332\2\2\u08fe\u08f0\3\2\2\2\u08fe\u08fb\3\2\2\2\u08ff\u090e\3\2\2"+
		"\2\u0900\u0901\7\u02f3\2\2\u0901\u0902\7\u017c\2\2\u0902\u090e\7\u0334"+
		"\2\2\u0903\u0904\7\u01f4\2\2\u0904\u0905\7\u017c\2\2\u0905\u090e\7\u0334"+
		"\2\2\u0906\u090e\7\u01ba\2\2\u0907\u0908\7\u00bd\2\2\u0908\u0909\7\u034a"+
		"\2\2\u0909\u090a\7\u0296\2\2\u090a\u090b\7\u0338\2\2\u090b\u090c\7\u02e3"+
		"\2\2\u090c\u090e\7\u034b\2\2\u090d\u07aa\3\2\2\2\u090d\u07be\3\2\2\2\u090d"+
		"\u07c1\3\2\2\2\u090d\u07c4\3\2\2\2\u090d\u0806\3\2\2\2\u090d\u0812\3\2"+
		"\2\2\u090d\u082c\3\2\2\2\u090d\u086c\3\2\2\2\u090d\u0870\3\2\2\2\u090d"+
		"\u0871\3\2\2\2\u090d\u088f\3\2\2\2\u090d\u08b9\3\2\2\2\u090d\u08bd\3\2"+
		"\2\2\u090d\u08c1\3\2\2\2\u090d\u08c2\3\2\2\2\u090d\u08c3\3\2\2\2\u090d"+
		"\u08ee\3\2\2\2\u090d\u0900\3\2\2\2\u090d\u0903\3\2\2\2\u090d\u0906\3\2"+
		"\2\2\u090d\u0907\3\2\2\2\u090e\u00a3\3\2\2\2\u090f\u0910\7\u0334\2\2\u0910"+
		"\u00a5\3\2\2\2\u0911\u0912\7\u0334\2\2\u0912\u00a7\3\2\2\2\u0913\u0914"+
		"\t\24\2\2\u0914\u0915\7\u00ec\2\2\u0915\u0916\7\u01d5\2\2\u0916\u0917"+
		"\5\u0410\u0209\2\u0917\u0918\7G\2\2\u0918\u0919\7\u028c\2\2\u0919\u091a"+
		"\7\u009e\2\2\u091a\u0924\7\u034a\2\2\u091b\u091c\7\u028b\2\2\u091c\u091f"+
		"\7\u0338\2\2\u091d\u0920\5\u0410\u0209\2\u091e\u0920\7\7\2\2\u091f\u091d"+
		"\3\2\2\2\u091f\u091e\3\2\2\2\u0920\u0922\3\2\2\2\u0921\u0923\7\u034c\2"+
		"\2\u0922\u0921\3\2\2\2\u0922\u0923\3\2\2\2\u0923\u0925\3\2\2\2\u0924\u091b"+
		"\3\2\2\2\u0924\u0925\3\2\2\2\u0925\u0932\3\2\2\2\u0926\u0927\7\u02bc\2"+
		"\2\u0927\u092d\7\u0338\2\2\u0928\u092a\78\2\2\u0929\u0928\3\2\2\2\u0929"+
		"\u092a\3\2\2\2\u092a\u092b\3\2\2\2\u092b\u092e\5\u0410\u0209\2\u092c\u092e"+
		"\7\7\2\2\u092d\u0929\3\2\2\2\u092d\u092c\3\2\2\2\u092e\u0930\3\2\2\2\u092f"+
		"\u0931\7\u034c\2\2\u0930\u092f\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u0933"+
		"\3\2\2\2\u0932\u0926\3\2\2\2\u0932\u0933\3\2\2\2\u0933\u093d\3\2\2\2\u0934"+
		"\u0935\7\u01f3\2\2\u0935\u0938\7\u0338\2\2\u0936\u0939\7\u0334\2\2\u0937"+
		"\u0939\7\7\2\2\u0938\u0936\3\2\2\2\u0938\u0937\3\2\2\2\u0939\u093b\3\2"+
		"\2\2\u093a\u093c\7\u034c\2\2\u093b\u093a\3\2\2\2\u093b\u093c\3\2\2\2\u093c"+
		"\u093e\3\2\2\2\u093d\u0934\3\2\2\2\u093d\u093e\3\2\2\2\u093e\u0945\3\2"+
		"\2\2\u093f\u0940\7\u01d6\2\2\u0940\u0943\7\u0338\2\2\u0941\u0944\7\u0332"+
		"\2\2\u0942\u0944\7/\2\2\u0943\u0941\3\2\2\2\u0943\u0942\3\2\2\2\u0944"+
		"\u0946\3\2\2\2\u0945\u093f\3\2\2\2\u0945\u0946\3\2\2\2\u0946\u0947\3\2"+
		"\2\2\u0947\u0948\7\u034b\2\2\u0948\u00a9\3\2\2\2\u0949\u094a\79\2\2\u094a"+
		"\u094b\7\u00ec\2\2\u094b\u094c\7\u01d5\2\2\u094c\u094d\5\u0410\u0209\2"+
		"\u094d\u00ab\3\2\2\2\u094e\u094f\7\5\2\2\u094f\u0950\7\u027e\2\2\u0950"+
		"\u0978\5\u0410\u0209\2\u0951\u0952\7\u01f4\2\2\u0952\u0979\7\u01d8\2\2"+
		"\u0953\u0954\7\u00bd\2\2\u0954\u0955\7\u01d7\2\2\u0955\u0956\7_\2\2\u0956"+
		"\u096d\7\u034a\2\2\u0957\u0958\7E\2\2\u0958\u0959\7\u0338\2\2\u0959\u095b"+
		"\7\u0334\2\2\u095a\u095c\7\u034c\2\2\u095b\u095a\3\2\2\2\u095b\u095c\3"+
		"\2\2\2\u095c\u096e\3\2\2\2\u095d\u095e\7\u0117\2\2\u095e\u095f\7\22\2"+
		"\2\u095f\u0960\7\u02e0\2\2\u0960\u0961\7\u0338\2\2\u0961\u0963\7\u0334"+
		"\2\2\u0962\u0964\7\u034c\2\2\u0963\u0962\3\2\2\2\u0963\u0964\3\2\2\2\u0964"+
		"\u096e\3\2\2\2\u0965\u0966\7\u0132\2\2\u0966\u0967\7\22\2\2\u0967\u0968"+
		"\7\u02e0\2\2\u0968\u0969\7\u0338\2\2\u0969\u096b\7\u0334\2\2\u096a\u096c"+
		"\7\u034c\2\2\u096b\u096a\3\2\2\2\u096b\u096c\3\2\2\2\u096c\u096e\3\2\2"+
		"\2\u096d\u0957\3\2\2\2\u096d\u095d\3\2\2\2\u096d\u0965\3\2\2\2\u096e\u096f"+
		"\3\2\2\2\u096f\u096d\3\2\2\2\u096f\u0970\3\2\2\2\u0970\u0971\3\2\2\2\u0971"+
		"\u0979\7\u034b\2\2\u0972\u0973\7\u00bd\2\2\u0973\u0974\7\u00c5\2\2\u0974"+
		"\u0975\7G\2\2\u0975\u0976\7\u00e5\2\2\u0976\u0977\7\u0338\2\2\u0977\u0979"+
		"\t\t\2\2\u0978\u0951\3\2\2\2\u0978\u0953\3\2\2\2\u0978\u0972\3\2\2\2\u0979"+
		"\u00ad\3\2\2\2\u097a\u097b\7\5\2\2\u097b\u097c\7\33\2\2\u097c\u097d\7"+
		"\u0132\2\2\u097d\u097e\7_\2\2\u097e\u097f\5\u0410\u0209\2\u097f\u0980"+
		"\t\25\2\2\u0980\u0981\7\u0256\2\2\u0981\u0982\7\u034a\2\2\u0982\u0983"+
		"\7\u00fb\2\2\u0983\u0984\7\u0338\2\2\u0984\u098d\5\u0410\u0209\2\u0985"+
		"\u0986\7\u034c\2\2\u0986\u0987\7\u00cd\2\2\u0987\u0988\7\u0338\2\2\u0988"+
		"\u0989\7\u0334\2\2\u0989\u098a\7\u034c\2\2\u098a\u098b\7\u0131\2\2\u098b"+
		"\u098c\7\u0338\2\2\u098c\u098e\7\u0335\2\2\u098d\u0985\3\2\2\2\u098d\u098e"+
		"\3\2\2\2\u098e\u098f\3\2\2\2\u098f\u0990\7\u034b\2\2\u0990\u00af\3\2\2"+
		"\2\u0991\u0992\7#\2\2\u0992\u0993\7\33\2\2\u0993\u0994\7\u0132\2\2\u0994"+
		"\u0995\7_\2\2\u0995\u0996\5\u0410\u0209\2\u0996\u0997\7\u00bd\2\2\u0997"+
		"\u09ab\7\u00b6\2\2\u0998\u099a\7\u034a\2\2\u0999\u099b\7\u034c\2\2\u099a"+
		"\u0999\3\2\2\2\u099a\u099b\3\2\2\2\u099b\u099c\3\2\2\2\u099c\u099d\7\u00fb"+
		"\2\2\u099d\u099e\7\u0338\2\2\u099e\u099f\5\u0410\u0209\2\u099f\u09a0\7"+
		"\u034c\2\2\u09a0\u09a1\7\u00cd\2\2\u09a1\u09a2\7\u0338\2\2\u09a2\u09a3"+
		"\7\u0334\2\2\u09a3\u09a4\7\u034c\2\2\u09a4\u09a5\7\u0131\2\2\u09a5\u09a6"+
		"\7\u0338\2\2\u09a6\u09a7\7\u0335\2\2\u09a7\u09a9\7\u034b\2\2\u09a8\u09aa"+
		"\7\u034c\2\2\u09a9\u09a8\3\2\2\2\u09a9\u09aa\3\2\2\2\u09aa\u09ac\3\2\2"+
		"\2\u09ab\u0998\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09ab\3\2\2\2\u09ad\u09ae"+
		"\3\2\2\2\u09ae\u00b1\3\2\2\2\u09af\u09b0\79\2\2\u09b0\u09b1\7\u027e\2"+
		"\2\u09b1\u09b2\5\u0410\u0209\2\u09b2\u00b3\3\2\2\2\u09b3\u09b4\79\2\2"+
		"\u09b4\u09b5\7\33\2\2\u09b5\u09b6\7\u0132\2\2\u09b6\u09b7\7_\2\2\u09b7"+
		"\u09b8\5\u0410\u0209\2\u09b8\u00b5\3\2\2\2\u09b9\u09ba\79\2\2\u09ba\u09bb"+
		"\7\33\2\2\u09bb\u09bc\7\u02bf\2\2\u09bc\u09bd\7_\2\2\u09bd\u09be\5\u0410"+
		"\u0209\2\u09be\u00b7\3\2\2\2\u09bf\u09c0\79\2\2\u09c0\u09c1\7\u028a\2"+
		"\2\u09c1\u09c2\5\u0410\u0209\2\u09c2\u00b9\3\2\2\2\u09c3\u09c4\79\2\2"+
		"\u09c4\u09c5\7\u0109\2\2\u09c5\u09c6\5\u0410\u0209\2\u09c6\u00bb\3\2\2"+
		"\2\u09c7\u09c8\79\2\2\u09c8\u09c9\7\u010a\2\2\u09c9\u09ca\7\u01dc\2\2"+
		"\u09ca\u09cb\5\u0410\u0209\2\u09cb\u00bd\3\2\2\2\u09cc\u09cd\79\2\2\u09cd"+
		"\u09d0\7+\2\2\u09ce\u09cf\7V\2\2\u09cf\u09d1\7A\2\2\u09d0\u09ce\3\2\2"+
		"\2\u09d0\u09d1\3\2\2\2\u09d1\u09d6\3\2\2\2\u09d2\u09d4\7\u034c\2\2\u09d3"+
		"\u09d2\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u09d5\3\2\2\2\u09d5\u09d7\5\u0410"+
		"\u0209\2\u09d6\u09d3\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09d6\3\2\2\2\u09d8"+
		"\u09d9\3\2\2\2\u09d9\u00bf\3\2\2\2\u09da\u09db\79\2\2\u09db\u09dc\7+\2"+
		"\2\u09dc\u09dd\7\u00d9\2\2\u09dd\u09de\7\u030c\2\2\u09de\u09df\5\u0410"+
		"\u0209\2\u09df\u00c1\3\2\2\2\u09e0\u09e1\79\2\2\u09e1\u09e2\7+\2\2\u09e2"+
		"\u09e3\7\u0132\2\2\u09e3\u09e4\7_\2\2\u09e4\u00c3\3\2\2\2\u09e5\u09e6"+
		"\79\2\2\u09e6\u09e7\7+\2\2\u09e7\u09e8\7\u020a\2\2\u09e8\u09e9\7\u0109"+
		"\2\2\u09e9\u09ea\5\u0410\u0209\2\u09ea\u00c5\3\2\2\2\u09eb\u09ec\79\2"+
		"\2\u09ec\u09ef\7/\2\2\u09ed\u09ee\7V\2\2\u09ee\u09f0\7A\2\2\u09ef\u09ed"+
		"\3\2\2\2\u09ef\u09f0\3\2\2\2\u09f0\u09f2\3\2\2\2\u09f1\u09f3\7\u034c\2"+
		"\2\u09f2\u09f1\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3\u09f7\3\2\2\2\u09f4\u09f5"+
		"\5\u0410\u0209\2\u09f5\u09f6\7\u0345\2\2\u09f6\u09f8\3\2\2\2\u09f7\u09f4"+
		"\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09f9\3\2\2\2\u09f9\u09fa\5\u0410\u0209"+
		"\2\u09fa\u00c7\3\2\2\2\u09fb\u09fc\79\2\2\u09fc\u09fd\7\u0298\2\2\u09fd"+
		"\u09fe\5\u0410\u0209\2\u09fe\u00c9\3\2\2\2\u09ff\u0a00\79\2\2\u0a00\u0a01"+
		"\7C\2\2\u0a01\u0a02\7\u010e\2\2\u0a02\u0a03\7\u030b\2\2\u0a03\u0a04\5"+
		"\u0410\u0209\2\u0a04\u00cb\3\2\2\2\u0a05\u0a06\79\2\2\u0a06\u0a07\7C\2"+
		"\2\u0a07\u0a08\7E\2\2\u0a08\u0a09\7\u014d\2\2\u0a09\u0a0a\5\u0410\u0209"+
		"\2\u0a0a\u00cd\3\2\2\2\u0a0b\u0a0c\79\2\2\u0a0c\u0a0d\7C\2\2\u0a0d\u0a0e"+
		"\7\u02b7\2\2\u0a0e\u0a11\5\u0410\u0209\2\u0a0f\u0a10\7\n\2\2\u0a10\u0a12"+
		"\5\u0410\u0209\2\u0a11\u0a0f\3\2\2\2\u0a11\u0a12\3\2\2\2\u0a12\u00cf\3"+
		"\2\2\2\u0a13\u0a14\79\2\2\u0a14\u0a15\7C\2\2\u0a15\u0a16\7\u01fd\2\2\u0a16"+
		"\u0a17\7\u01d0\2\2\u0a17\u0a18\5\u0410\u0209\2\u0a18\u00d1\3\2\2\2\u0a19"+
		"\u0a1a\79\2\2\u0a1a\u0a1b\7C\2\2\u0a1b\u0a1f\7\u00a4\2\2\u0a1c\u0a1d\5"+
		"\u0410\u0209\2\u0a1d\u0a1e\7\u0345\2\2\u0a1e\u0a20\3\2\2\2\u0a1f\u0a1c"+
		"\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0a24\3\2\2\2\u0a21\u0a22\5\u0410\u0209"+
		"\2\u0a22\u0a23\7\u0345\2\2\u0a23\u0a25\3\2\2\2\u0a24\u0a21\3\2\2\2\u0a24"+
		"\u0a25\3\2\2\2\u0a25\u0a26\3\2\2\2\u0a26\u0a27\5\u0410\u0209\2\u0a27\u00d3"+
		"\3\2\2\2\u0a28\u0a29\79\2\2\u0a29\u0a2a\7\u029a\2\2\u0a2a\u0a2f\7\u02d9"+
		"\2\2\u0a2b\u0a2d\7\u034c\2\2\u0a2c\u0a2b\3\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d"+
		"\u0a2e\3\2\2\2\u0a2e\u0a30\5\u0410\u0209\2\u0a2f\u0a2c\3\2\2\2\u0a30\u0a31"+
		"\3\2\2\2\u0a31\u0a2f\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33"+
		"\u0a38\7p\2\2\u0a34\u0a39\7\u0302\2\2\u0a35\u0a39\7+\2\2\u0a36\u0a37\7"+
		"\u01df\2\2\u0a37\u0a39\5\u0410\u0209\2\u0a38\u0a34\3\2\2\2\u0a38\u0a35"+
		"\3\2\2\2\u0a38\u0a36\3\2\2\2\u0a39\u00d5\3\2\2\2\u0a3a\u0a3b\79\2\2\u0a3b"+
		"\u0a3c\7\u029a\2\2\u0a3c\u0a3d\7\u0306\2\2\u0a3d\u0a3e\5\u0410\u0209\2"+
		"\u0a3e\u0a3f\7p\2\2\u0a3f\u0a40\7\u0302\2\2\u0a40\u00d7\3\2\2\2\u0a41"+
		"\u0a42\79\2\2\u0a42\u0a43\7\u0150\2\2\u0a43\u0a44\7\u00f3\2\2\u0a44\u0a45"+
		"\5\u0410\u0209\2\u0a45\u00d9\3\2\2\2\u0a46\u0a47\79\2\2\u0a47\u0a48\7"+
		"\u0150\2\2\u0a48\u0a49\7X\2\2\u0a49\u0a4d\7p\2\2\u0a4a\u0a4b\5\u0410\u0209"+
		"\2\u0a4b\u0a4c\7\u0345\2\2\u0a4c\u0a4e\3\2\2\2\u0a4d\u0a4a\3\2\2\2\u0a4d"+
		"\u0a4e\3\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a50\5\u0410\u0209\2\u0a50\u00db"+
		"\3\2\2\2\u0a51\u0a52\79\2\2\u0a52\u0a53\7\u0150\2\2\u0a53\u0a54\7\u022f"+
		"\2\2\u0a54\u0a55\5\u0410\u0209\2\u0a55\u00dd\3\2\2\2\u0a56\u0a57\79\2"+
		"\2\u0a57\u0a58\7\u0183\2\2\u0a58\u0a59\5\u0410\u0209\2\u0a59\u00df\3\2"+
		"\2\2\u0a5a\u0a5b\79\2\2\u0a5b\u0a5c\7\u02bf\2\2\u0a5c\u0a5d\7_\2\2\u0a5d"+
		"\u00e1\3\2\2\2\u0a5e\u0a5f\79\2\2\u0a5f\u0a60\7\u0198\2\2\u0a60\u0a61"+
		"\7\u024c\2\2\u0a61\u0a62\5\u0410\u0209\2\u0a62\u00e3\3\2\2\2\u0a63\u0a64"+
		"\79\2\2\u0a64\u0a65\7\u01c8\2\2\u0a65\u0a66\7M\2\2\u0a66\u0a67\5\u0410"+
		"\u0209\2\u0a67\u00e5\3\2\2\2\u0a68\u0a69\79\2\2\u0a69\u0a6a\7\u01c8\2"+
		"\2\u0a6a\u0a6b\7\u0301\2\2\u0a6b\u0a6c\5\u0410\u0209\2\u0a6c\u00e7\3\2"+
		"\2\2\u0a6d\u0a6e\79\2\2\u0a6e\u0a72\7\u01df\2\2\u0a6f\u0a70\5\u0410\u0209"+
		"\2\u0a70\u0a71\7\u0345\2\2\u0a71\u0a73\3\2\2\2\u0a72\u0a6f\3\2\2\2\u0a72"+
		"\u0a73\3\2\2\2\u0a73\u0a77\3\2\2\2\u0a74\u0a75\5\u0410\u0209\2\u0a75\u0a76"+
		"\7\u0345\2\2\u0a76\u0a78\3\2\2\2\u0a77\u0a74\3\2\2\2\u0a77\u0a78\3\2\2"+
		"\2\u0a78\u0a79\3\2\2\2\u0a79\u0a7a\5\u0410\u0209\2\u0a7a\u00e9\3\2\2\2"+
		"\u0a7b\u0a7c\79\2\2\u0a7c\u0a7d\7\u01f2\2\2\u0a7d\u0a7e\7\u0303\2\2\u0a7e"+
		"\u0a7f\7\u00ea\2\2\u0a7f\u0a80\5\u0410\u0209\2\u0a80\u00eb\3\2\2\2\u0a81"+
		"\u0a82\79\2\2\u0a82\u0a83\7\u01fd\2\2\u0a83\u0a84\7\u01d0\2\2\u0a84\u0a85"+
		"\5\u0410\u0209\2\u0a85\u00ed\3\2\2\2\u0a86\u0a87\79\2\2\u0a87\u0a8a\7"+
		"\u02f8\2\2\u0a88\u0a89\7V\2\2\u0a89\u0a8b\7A\2\2\u0a8a\u0a88\3\2\2\2\u0a8a"+
		"\u0a8b\3\2\2\2\u0a8b\u0a8c\3\2\2\2\u0a8c\u0a8d\5\u0410\u0209\2\u0a8d\u00ef"+
		"\3\2\2\2\u0a8e\u0a8f\79\2\2\u0a8f\u0a90\7\u0203\2\2\u0a90\u0a91\5\u0410"+
		"\u0209\2\u0a91\u00f1\3\2\2\2\u0a92\u0a93\79\2\2\u0a93\u0a96\7\u0095\2"+
		"\2\u0a94\u0a95\7V\2\2\u0a95\u0a97\7A\2\2\u0a96\u0a94\3\2\2\2\u0a96\u0a97"+
		"\3\2\2\2\u0a97\u0aa1\3\2\2\2\u0a98\u0a9a\7\u034c\2\2\u0a99\u0a98\3\2\2"+
		"\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0a9e\3\2\2\2\u0a9b\u0a9c\5\u0410\u0209\2"+
		"\u0a9c\u0a9d\7\u0345\2\2\u0a9d\u0a9f\3\2\2\2\u0a9e\u0a9b\3\2\2\2\u0a9e"+
		"\u0a9f\3\2\2\2\u0a9f\u0aa0\3\2\2\2\u0aa0\u0aa2\5\u0410\u0209\2\u0aa1\u0a99"+
		"\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u00f3\3\2\2\2\u0aa3\u0aa4\79\2\2\u0aa4"+
		"\u0aa7\7\u0097\2\2\u0aa5\u0aa6\7V\2\2\u0aa6\u0aa8\7A\2\2\u0aa7\u0aa5\3"+
		"\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9\u0aaa\5\u0410\u0209"+
		"\2\u0aaa\u00f5\3\2\2\2\u0aab\u0aac\79\2\2\u0aac\u0aad\7\u020d\2\2\u0aad"+
		"\u0aae\7\u01db\2\2\u0aae\u0aaf\7\u017b\2\2\u0aaf\u0ab0\5\u0410\u0209\2"+
		"\u0ab0\u00f7\3\2\2\2\u0ab1\u0ab2\79\2\2\u0ab2\u0ab3\7\u0213\2\2\u0ab3"+
		"\u0ab6\7\u02e7\2\2\u0ab4\u0ab5\7V\2\2\u0ab5\u0ab7\7A\2\2\u0ab6\u0ab4\3"+
		"\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7\u0abb\3\2\2\2\u0ab8\u0ab9\5\u0410\u0209"+
		"\2\u0ab9\u0aba\7\u0345\2\2\u0aba\u0abc\3\2\2\2\u0abb\u0ab8\3\2\2\2\u0abb"+
		"\u0abc\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abe\5\u0410\u0209\2\u0abe\u00f9"+
		"\3\2\2\2\u0abf\u0ac0\79\2\2\u0ac0\u0ac3\7\u021a\2\2\u0ac1\u0ac2\7V\2\2"+
		"\u0ac2\u0ac4\7A\2\2\u0ac3\u0ac1\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0ad3"+
		"\3\2\2\2\u0ac5\u0ac7\7\u034c\2\2\u0ac6\u0ac5\3\2\2\2\u0ac6\u0ac7\3\2\2"+
		"\2\u0ac7\u0acb\3\2\2\2\u0ac8\u0ac9\5\u0410\u0209\2\u0ac9\u0aca\7\u0345"+
		"\2\2\u0aca\u0acc\3\2\2\2\u0acb\u0ac8\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc"+
		"\u0ad0\3\2\2\2\u0acd\u0ace\5\u0410\u0209\2\u0ace\u0acf\7\u0345\2\2\u0acf"+
		"\u0ad1\3\2\2\2\u0ad0\u0acd\3\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u0ad2\3\2"+
		"\2\2\u0ad2\u0ad4\5\u0410\u0209\2\u0ad3\u0ac6\3\2\2\2\u0ad3\u0ad4\3\2\2"+
		"\2\u0ad4\u00fb\3\2\2\2\u0ad5\u0ad6\79\2\2\u0ad6\u0ad7\7\u0302\2\2\u0ad7"+
		"\u0ad8\7\u00d9\2\2\u0ad8\u0ad9\5\u0410\u0209\2\u0ad9\u00fd\3\2\2\2\u0ada"+
		"\u0adb\79\2\2\u0adb\u0adc\7\u0302\2\2\u0adc\u0add\7\u00d9\2\2\u0add\u0ade"+
		"\7\u030c\2\2\u0ade\u0adf\5\u0410\u0209\2\u0adf\u00ff\3\2\2\2\u0ae0\u0ae1"+
		"\79\2\2\u0ae1\u0ae2\7\u0302\2\2\u0ae2\u0ae3\7\u02f8\2\2\u0ae3\u0ae4\5"+
		"\u0410\u0209\2\u0ae4\u0101\3\2\2\2\u0ae5\u0ae6\79\2\2\u0ae6\u0ae7\7\u0303"+
		"\2\2\u0ae7\u0ae8\5\u0410\u0209\2\u0ae8\u0103\3\2\2\2\u0ae9\u0aeb\79\2"+
		"\2\u0aea\u0aec\7\u0105\2\2\u0aeb\u0aea\3\2\2\2\u0aeb\u0aec\3\2\2\2\u0aec"+
		"\u0aed\3\2\2\2\u0aed\u0aee\7\u0220\2\2\u0aee\u0af2\7K\2\2\u0aef\u0af0"+
		"\5\u0410\u0209\2\u0af0\u0af1\7\u0345\2\2\u0af1\u0af3\3\2\2\2\u0af2\u0aef"+
		"\3\2\2\2\u0af2\u0af3\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4\u0af5\5\u0410\u0209"+
		"\2\u0af5\u0b01\7\22\2\2\u0af6\u0af8\7\u034c\2\2\u0af7\u0af6\3\2\2\2\u0af7"+
		"\u0af8\3\2\2\2\u0af8\u0af9\3\2\2\2\u0af9\u0afa\7\u027e\2\2\u0afa\u0b02"+
		"\5\u0410\u0209\2\u0afb\u0afd\7\u034c\2\2\u0afc\u0afb\3\2\2\2\u0afc\u0afd"+
		"\3\2\2\2\u0afd\u0afe\3\2\2\2\u0afe\u0aff\7\u0270\2\2\u0aff\u0b00\7_\2"+
		"\2\u0b00\u0b02\5\u0410\u0209\2\u0b01\u0af7\3\2\2\2\u0b01\u0afc\3\2\2\2"+
		"\u0b02\u0b03\3\2\2\2\u0b03\u0b01\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0105"+
		"\3\2\2\2\u0b05\u0b06\79\2\2\u0b06\u0b0a\7\u00a2\2\2\u0b07\u0b08\5\u0410"+
		"\u0209\2\u0b08\u0b09\7\u0345\2\2\u0b09\u0b0b\3\2\2\2\u0b0a\u0b07\3\2\2"+
		"\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b0d\5\u0410\u0209\2"+
		"\u0b0d\u0b0e\7\u0345\2\2\u0b0e\u0b0f\5\u0410\u0209\2\u0b0f\u0107\3\2\2"+
		"\2\u0b10\u0b11\79\2\2\u0b11\u0b12\7\u0236\2\2\u0b12\u0b13\7_\2\2\u0b13"+
		"\u0b17\5\u0410\u0209\2\u0b14\u0b15\7\u01f4\2\2\u0b15\u0b16\7\u01dc\2\2"+
		"\u0b16\u0b18\7_\2\2\u0b17\u0b14\3\2\2\2\u0b17\u0b18\3\2\2\2\u0b18\u0109"+
		"\3\2\2\2\u0b19\u0b1a\79\2\2\u0b1a\u0b1d\7\u0238\2\2\u0b1b\u0b1c\7V\2\2"+
		"\u0b1c\u0b1e\7A\2\2\u0b1d\u0b1b\3\2\2\2\u0b1d\u0b1e\3\2\2\2\u0b1e\u0b22"+
		"\3\2\2\2\u0b1f\u0b20\5\u0410\u0209\2\u0b20\u0b21\7\u0345\2\2\u0b21\u0b23"+
		"\3\2\2\2\u0b22\u0b1f\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23\u0b24\3\2\2\2\u0b24"+
		"\u0b25\5\u0410\u0209\2\u0b25\u010b\3\2\2\2\u0b26\u0b27\79\2\2\u0b27\u0b2a"+
		"\7\u00b5\2\2\u0b28\u0b29\7V\2\2\u0b29\u0b2b\7A\2\2\u0b2a\u0b28\3\2\2\2"+
		"\u0b2a\u0b2b\3\2\2\2\u0b2b\u0b2c\3\2\2\2\u0b2c\u0b2d\5\u0410\u0209\2\u0b2d"+
		"\u010d\3\2\2\2\u0b2e\u0b2f\79\2\2\u0b2f\u0b30\7\u0260\2\2\u0b30\u0b31"+
		"\7P\2\2\u0b31\u0b32\5\u0410\u0209\2\u0b32\u010f\3\2\2\2\u0b33\u0b34\7"+
		"9\2\2\u0b34\u0b35\7\u0261\2\2\u0b35\u0b36\7\u0097\2\2\u0b36\u0b3a\7\u00fa"+
		"\2\2\u0b37\u0b38\5\u0410\u0209\2\u0b38\u0b39\7\u0345\2\2\u0b39\u0b3b\3"+
		"\2\2\2\u0b3a\u0b37\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b3c\3\2\2\2\u0b3c"+
		"\u0b3d\5\u0410\u0209\2\u0b3d\u0111\3\2\2\2\u0b3e\u0b3f\7\u0126\2\2\u0b3f"+
		"\u0b4e\7\u00ac\2\2\u0b40\u0b42\7\u034c\2\2\u0b41\u0b40\3\2\2\2\u0b41\u0b42"+
		"\3\2\2\2\u0b42\u0b46\3\2\2\2\u0b43\u0b44\5\u0410\u0209\2\u0b44\u0b45\7"+
		"\u0345\2\2\u0b45\u0b47\3\2\2\2\u0b46\u0b43\3\2\2\2\u0b46\u0b47\3\2\2\2"+
		"\u0b47\u0b48\3\2\2\2\u0b48\u0b4a\5\u0410\u0209\2\u0b49\u0b41\3\2\2\2\u0b4a"+
		"\u0b4b\3\2\2\2\u0b4b\u0b49\3\2\2\2\u0b4b\u0b4c\3\2\2\2\u0b4c\u0b4f\3\2"+
		"\2\2\u0b4d\u0b4f\7\4\2\2\u0b4e\u0b49\3\2\2\2\u0b4e\u0b4d\3\2\2\2\u0b4f"+
		"\u0b50\3\2\2\2\u0b50\u0b5a\7p\2\2\u0b51\u0b52\5\u0410\u0209\2\u0b52\u0b53"+
		"\7\u0345\2\2\u0b53\u0b55\3\2\2\2\u0b54\u0b51\3\2\2\2\u0b54\u0b55\3\2\2"+
		"\2\u0b55\u0b56\3\2\2\2\u0b56\u0b5b\5\u0410\u0209\2\u0b57\u0b5b\7+\2\2"+
		"\u0b58\u0b59\7\4\2\2\u0b59\u0b5b\7\u0302\2\2\u0b5a\u0b54\3\2\2\2\u0b5a"+
		"\u0b57\3\2\2\2\u0b5a\u0b58\3\2\2\2\u0b5b\u0113\3\2\2\2\u0b5c\u0b5d\7\u012f"+
		"\2\2\u0b5d\u0b6c\7\u00ac\2\2\u0b5e\u0b60\7\u034c\2\2\u0b5f\u0b5e\3\2\2"+
		"\2\u0b5f\u0b60\3\2\2\2\u0b60\u0b64\3\2\2\2\u0b61\u0b62\5\u0410\u0209\2"+
		"\u0b62\u0b63\7\u0345\2\2\u0b63\u0b65\3\2\2\2\u0b64\u0b61\3\2\2\2\u0b64"+
		"\u0b65\3\2\2\2\u0b65\u0b66\3\2\2\2\u0b66\u0b68\5\u0410\u0209\2\u0b67\u0b5f"+
		"\3\2\2\2\u0b68\u0b69\3\2\2\2\u0b69\u0b67\3\2\2\2\u0b69\u0b6a\3\2\2\2\u0b6a"+
		"\u0b6d\3\2\2\2\u0b6b\u0b6d\7\4\2\2\u0b6c\u0b67\3\2\2\2\u0b6c\u0b6b\3\2"+
		"\2\2\u0b6d\u0b6e\3\2\2\2\u0b6e\u0b78\7p\2\2\u0b6f\u0b70\5\u0410\u0209"+
		"\2\u0b70\u0b71\7\u0345\2\2\u0b71\u0b73\3\2\2\2\u0b72\u0b6f\3\2\2\2\u0b72"+
		"\u0b73\3\2\2\2\u0b73\u0b74\3\2\2\2\u0b74\u0b79\5\u0410\u0209\2\u0b75\u0b79"+
		"\7+\2\2\u0b76\u0b77\7\4\2\2\u0b77\u0b79\7\u0302\2\2\u0b78\u0b72\3\2\2"+
		"\2\u0b78\u0b75\3\2\2\2\u0b78\u0b76\3\2\2\2\u0b79\u0115\3\2\2\2\u0b7a\u0b7b"+
		"\7\u0181\2\2\u0b7b\u0b7c\7\u00a4\2\2\u0b7c\u0b7d\5\u03d2\u01ea\2\u0b7d"+
		"\u0b7e\7W\2\2\u0b7e\u0b7f\t\26\2\2\u0b7f\u0b83\7\u01a1\2\2\u0b80\u0b81"+
		"\7\u025c\2\2\u0b81\u0b84\7\u0332\2\2\u0b82\u0b84\7\u01b4\2\2\u0b83\u0b80"+
		"\3\2\2\2\u0b83\u0b82\3\2\2\2\u0b83\u0b84\3\2\2\2\u0b84\u0b86\3\2\2\2\u0b85"+
		"\u0b87\7\u034d\2\2\u0b86\u0b85\3\2\2\2\u0b86\u0b87\3\2\2\2\u0b87\u0117"+
		"\3\2\2\2\u0b88\u0b89\7\u00ad\2\2\u0b89\u0b8a\7\u00a4\2\2\u0b8a\u0b9e\5"+
		"\u03d2\u01ea\2\u0b8b\u0b8c\7\u00bd\2\2\u0b8c\u0b8d\7\u034a\2\2\u0b8d\u0b8e"+
		"\7\u01c9\2\2\u0b8e\u0b98\7\u034a\2\2\u0b8f\u0b91\7\u034c\2\2\u0b90\u0b8f"+
		"\3\2\2\2\u0b90\u0b91\3\2\2\2\u0b91\u0b96\3\2\2\2\u0b92\u0b97\7\u0332\2"+
		"\2\u0b93\u0b94\7\u0332\2\2\u0b94\u0b95\7\u00a8\2\2\u0b95\u0b97\7\u0332"+
		"\2\2\u0b96\u0b92\3\2\2\2\u0b96\u0b93\3\2\2\2\u0b97\u0b99\3\2\2\2\u0b98"+
		"\u0b90\3\2\2\2\u0b99\u0b9a\3\2\2\2\u0b9a\u0b98\3\2\2\2\u0b9a\u0b9b\3\2"+
		"\2\2\u0b9b\u0b9c\3\2\2\2\u0b9c\u0b9d\7\u034b\2\2\u0b9d\u0b9f\7\u034b\2"+
		"\2\u0b9e\u0b8b\3\2\2\2\u0b9e\u0b9f\3\2\2\2\u0b9f\u0119\3\2\2\2\u0ba0\u0ba1"+
		"\7#\2\2\u0ba1\u0ba2\7\33\2\2\u0ba2\u0ba3\7\u02bf\2\2\u0ba3\u0ba4\7_\2"+
		"\2\u0ba4\u0ba5\5\u0410\u0209\2\u0ba5\u0ba6\7\u00bd\2\2\u0ba6\u0ba7\7\u034a"+
		"\2\2\u0ba7\u0ba8\7\u02b5\2\2\u0ba8\u0ba9\7\u0338";
	private static final String _serializedATNSegment2 =
		"\2\2\u0ba9\u0baa\7\u0334\2\2\u0baa\u0bab\7\u034c\2\2\u0bab\u0bac\7\u02b4"+
		"\2\2\u0bac\u0bad\7\u0338\2\2\u0bad\u0bae\7\u0334\2\2\u0bae\u0baf\7\u034b"+
		"\2\2\u0baf\u011b\3\2\2\2\u0bb0\u0bb1\7\5\2\2\u0bb1\u0bb2\7\u0109\2\2\u0bb2"+
		"\u0bb3\5\u0410\u0209\2\u0bb3\u0bb4\7\u00bd\2\2\u0bb4\u0bb5\7S\2\2\u0bb5"+
		"\u0bb6\7\u0338\2\2\u0bb6\u0bbb\7\u0334\2\2\u0bb7\u0bb8\7\u034c\2\2\u0bb8"+
		"\u0bb9\7\u0212\2\2\u0bb9\u0bba\7\u0338\2\2\u0bba\u0bbc\7\u0334\2\2\u0bbb"+
		"\u0bb7\3\2\2\2\u0bbb\u0bbc\3\2\2\2\u0bbc\u011d\3\2\2\2\u0bbd\u0bbe\7#"+
		"\2\2\u0bbe\u0bbf\7\u0109\2\2\u0bbf\u0bc0\5\u0410\u0209\2\u0bc0\u0bc1\7"+
		"\u00bd\2\2\u0bc1\u0bc2\7S\2\2\u0bc2\u0bc3\7\u0338\2\2\u0bc3\u0bc8\7\u0334"+
		"\2\2\u0bc4\u0bc5\7\u034c\2\2\u0bc5\u0bc6\7\u0212\2\2\u0bc6\u0bc7\7\u0338"+
		"\2\2\u0bc7\u0bc9\7\u0334\2\2\u0bc8\u0bc4\3\2\2\2\u0bc8\u0bc9\3\2\2\2\u0bc9"+
		"\u0bce\3\2\2\2\u0bca\u0bcb\7G\2\2\u0bcb\u0bcc\7\u010a\2\2\u0bcc\u0bcd"+
		"\7\u01dc\2\2\u0bcd\u0bcf\5\u0410\u0209\2\u0bce\u0bca\3\2\2\2\u0bce\u0bcf"+
		"\3\2\2\2\u0bcf\u011f\3\2\2\2\u0bd0\u0bd1\7\5\2\2\u0bd1\u0bd2\7\u010a\2"+
		"\2\u0bd2\u0bd3\7\u01dc\2\2\u0bd3\u0bd8\5\u0410\u0209\2\u0bd4\u0bd5\7K"+
		"\2\2\u0bd5\u0bd6\7E\2\2\u0bd6\u0bd7\7\u0338\2\2\u0bd7\u0bd9\7\u0334\2"+
		"\2\u0bd8\u0bd4\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0bdb\3\2\2\2\u0bda\u0bdc"+
		"\t\27\2\2\u0bdb\u0bda\3\2\2\2\u0bdb\u0bdc\3\2\2\2\u0bdc\u0121\3\2\2\2"+
		"\u0bdd\u0bde\7#\2\2\u0bde\u0bdf\7\u010a\2\2\u0bdf\u0be0\7\u01dc\2\2\u0be0"+
		"\u0be1\5\u0410\u0209\2\u0be1\u0be2\7K\2\2\u0be2\u0be3\7E\2\2\u0be3\u0be4"+
		"\7\u0338\2\2\u0be4\u0be5\7\u0334\2\2\u0be5\u0123\3\2\2\2\u0be6\u0be7\7"+
		"#\2\2\u0be7\u0be8\7\u029a\2\2\u0be8\u0be9\7\u02d9\2\2\u0be9\u0bea\5\u0410"+
		"\u0209\2\u0bea\u0bef\7p\2\2\u0beb\u0bf0\7\u0302\2\2\u0bec\u0bf0\7+\2\2"+
		"\u0bed\u0bee\7\u01df\2\2\u0bee\u0bf0\5\u0410\u0209\2\u0bef\u0beb\3\2\2"+
		"\2\u0bef\u0bec\3\2\2\2\u0bef\u0bed\3\2\2\2\u0bf0\u0bf3\3\2\2\2\u0bf1\u0bf2"+
		"\7\u00bd\2\2\u0bf2\u0bf4\7\u02a3\2\2\u0bf3\u0bf1\3\2\2\2\u0bf3\u0bf4\3"+
		"\2\2\2\u0bf4\u0bf5\3\2\2\2\u0bf5\u0bfa\7G\2\2\u0bf6\u0bf8\7\u034c\2\2"+
		"\u0bf7\u0bf6\3\2\2\2\u0bf7\u0bf8\3\2\2\2\u0bf8\u0bf9\3\2\2\2\u0bf9\u0bfb"+
		"\5\u0410\u0209\2\u0bfa\u0bf7\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bfa\3"+
		"\2\2\2\u0bfc\u0bfd\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0bff\7\u00a8\2\2"+
		"\u0bff\u0c00\7\u0303\2\2\u0c00\u0c01\7\u0334\2\2\u0c01\u0c02\7\u034c\2"+
		"\2\u0c02\u0c03\7\u0334\2\2\u0c03\u0125\3\2\2\2\u0c04\u0c05\t\24\2\2\u0c05"+
		"\u0c06\7\u029a\2\2\u0c06\u0c07\7\u0306\2\2\u0c07\u0c08\5\u0410\u0209\2"+
		"\u0c08\u0c09\7p\2\2\u0c09\u0c4d\7\u0302\2\2\u0c0a\u0c0c\7\u034c\2\2\u0c0b"+
		"\u0c0a\3\2\2\2\u0c0b\u0c0c\3\2\2\2\u0c0c\u0c0d\3\2\2\2\u0c0d\u0c0e\7\3"+
		"\2\2\u0c0e\u0c12\7\u029a\2\2\u0c0f\u0c10\5\u0410\u0209\2\u0c10\u0c11\7"+
		"\u0345\2\2\u0c11\u0c13\3\2\2\2\u0c12\u0c0f\3\2\2\2\u0c12\u0c13\3\2\2\2"+
		"\u0c13\u0c14\3\2\2\2\u0c14\u0c15\5\u0410\u0209\2\u0c15\u0c16\7\u0345\2"+
		"\2\u0c16\u0c17\5\u0410\u0209\2\u0c17\u0c48\3\2\2\2\u0c18\u0c26\7\u034a"+
		"\2\2\u0c19\u0c23\7\u009e\2\2\u0c1a\u0c1c\7\u034c\2\2\u0c1b\u0c1a\3\2\2"+
		"\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c1d\3\2\2\2\u0c1d\u0c1e\5\u0410\u0209\2"+
		"\u0c1e\u0c1f\7\u0338\2\2\u0c1f\u0c20\t\30\2\2\u0c20\u0c22\3\2\2\2\u0c21"+
		"\u0c1b\3\2\2\2\u0c22\u0c25\3\2\2\2\u0c23\u0c21\3\2\2\2\u0c23\u0c24\3\2"+
		"\2\2\u0c24\u0c27\3\2\2\2\u0c25\u0c23\3\2\2\2\u0c26\u0c19\3\2\2\2\u0c26"+
		"\u0c27\3\2\2\2\u0c27\u0c3c\3\2\2\2\u0c28\u0c29\7\u00c3\2\2\u0c29\u0c36"+
		"\7\u034a\2\2\u0c2a\u0c2c\7\u034c\2\2\u0c2b\u0c2a\3\2\2\2\u0c2b\u0c2c\3"+
		"\2\2\2\u0c2c\u0c30\3\2\2\2\u0c2d\u0c2e\5\u0410\u0209\2\u0c2e\u0c2f\7\u0345"+
		"\2\2\u0c2f\u0c31\3\2\2\2\u0c30\u0c2d\3\2\2\2\u0c30\u0c31\3\2\2\2\u0c31"+
		"\u0c32\3\2\2\2\u0c32\u0c33\5\u0410\u0209\2\u0c33\u0c34\7\u0345\2\2\u0c34"+
		"\u0c35\5\u0410\u0209\2\u0c35\u0c37\3\2\2\2\u0c36\u0c2b\3\2\2\2\u0c37\u0c38"+
		"\3\2\2\2\u0c38\u0c36\3\2\2\2\u0c38\u0c39\3\2\2\2\u0c39\u0c3a\3\2\2\2\u0c3a"+
		"\u0c3b\7\u034b\2\2\u0c3b\u0c3d\3\2\2\2\u0c3c\u0c28\3\2\2\2\u0c3d\u0c3e"+
		"\3\2\2\2\u0c3e\u0c3c\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f\u0c42\3\2\2\2\u0c40"+
		"\u0c41\7\u00bb\2\2\u0c41\u0c43\5\u0128\u0095\2\u0c42\u0c40\3\2\2\2\u0c42"+
		"\u0c43\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0c45\7\u034b\2\2\u0c45\u0c47"+
		"\3\2\2\2\u0c46\u0c18\3\2\2\2\u0c47\u0c4a\3\2\2\2\u0c48\u0c46\3\2\2\2\u0c48"+
		"\u0c49\3\2\2\2\u0c49\u0c4c\3\2\2\2\u0c4a\u0c48\3\2\2\2\u0c4b\u0c0b\3\2"+
		"\2\2\u0c4c\u0c4f\3\2\2\2\u0c4d\u0c4b\3\2\2\2\u0c4d\u0c4e\3\2\2\2\u0c4e"+
		"\u0c60\3\2\2\2\u0c4f\u0c4d\3\2\2\2\u0c50\u0c52\7\u034c\2\2\u0c51\u0c50"+
		"\3\2\2\2\u0c51\u0c52\3\2\2\2\u0c52\u0c53\3\2\2\2\u0c53\u0c54\79\2\2\u0c54"+
		"\u0c58\7\u029a\2\2\u0c55\u0c56\5\u0410\u0209\2\u0c56\u0c57\7\u0345\2\2"+
		"\u0c57\u0c59\3\2\2\2\u0c58\u0c55\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c5a"+
		"\3\2\2\2\u0c5a\u0c5b\5\u0410\u0209\2\u0c5b\u0c5c\7\u0345\2\2\u0c5c\u0c5d"+
		"\5\u0410\u0209\2\u0c5d\u0c5f\3\2\2\2\u0c5e\u0c51\3\2\2\2\u0c5f\u0c62\3"+
		"\2\2\2\u0c60\u0c5e\3\2\2\2\u0c60\u0c61\3\2\2\2\u0c61\u0c8c\3\2\2\2\u0c62"+
		"\u0c60\3\2\2\2\u0c63\u0c64\7\3\2\2\u0c64\u0c68\7\u031b\2\2\u0c65\u0c66"+
		"\5\u0410\u0209\2\u0c66\u0c67\7\u0345\2\2\u0c67\u0c69\3\2\2\2\u0c68\u0c65"+
		"\3\2\2\2\u0c68\u0c69\3\2\2\2\u0c69\u0c6a\3\2\2\2\u0c6a\u0c6b\5\u0410\u0209"+
		"\2\u0c6b\u0c6c\7\u0345\2\2\u0c6c\u0c6d\5\u0410\u0209\2\u0c6d\u0c87\3\2"+
		"\2\2\u0c6e\u0c6f\7\u034a\2\2\u0c6f\u0c7f\7\u009e\2\2\u0c70\u0c72\7\u034c"+
		"\2\2\u0c71\u0c70\3\2\2\2\u0c71\u0c72\3\2\2\2\u0c72\u0c73\3\2\2\2\u0c73"+
		"\u0c74\5\u0410\u0209\2\u0c74\u0c7d\7\u0338\2\2\u0c75\u0c77\7\u034a\2\2"+
		"\u0c76\u0c75\3\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0c78\3\2\2\2\u0c78\u0c7a"+
		"\7\u0332\2\2\u0c79\u0c7b\7\u034b\2\2\u0c7a\u0c79\3\2\2\2\u0c7a\u0c7b\3"+
		"\2\2\2\u0c7b\u0c7e\3\2\2\2\u0c7c\u0c7e\7\u0334\2\2\u0c7d\u0c76\3\2\2\2"+
		"\u0c7d\u0c7c\3\2\2\2\u0c7e\u0c80\3\2\2\2\u0c7f\u0c71\3\2\2\2\u0c80\u0c81"+
		"\3\2\2\2\u0c81\u0c7f\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83"+
		"\u0c84\7\u034b\2\2\u0c84\u0c86\3\2\2\2\u0c85\u0c6e\3\2\2\2\u0c86\u0c89"+
		"\3\2\2\2\u0c87\u0c85\3\2\2\2\u0c87\u0c88\3\2\2\2\u0c88\u0c8b\3\2\2\2\u0c89"+
		"\u0c87\3\2\2\2\u0c8a\u0c63\3\2\2\2\u0c8b\u0c8e\3\2\2\2\u0c8c\u0c8a\3\2"+
		"\2\2\u0c8c\u0c8d\3\2\2\2\u0c8d\u0c9c\3\2\2\2\u0c8e\u0c8c\3\2\2\2\u0c8f"+
		"\u0c90\79\2\2\u0c90\u0c94\7\u031b\2\2\u0c91\u0c92\5\u0410\u0209\2\u0c92"+
		"\u0c93\7\u0345\2\2\u0c93\u0c95\3\2\2\2\u0c94\u0c91\3\2\2\2\u0c94\u0c95"+
		"\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96\u0c97\5\u0410\u0209\2\u0c97\u0c98\7"+
		"\u0345\2\2\u0c98\u0c99\5\u0410\u0209\2\u0c99\u0c9b\3\2\2\2\u0c9a\u0c8f"+
		"\3\2\2\2\u0c9b\u0c9e\3\2\2\2\u0c9c\u0c9a\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d"+
		"\u0ce0\3\2\2\2\u0c9e\u0c9c\3\2\2\2\u0c9f\u0ca0\7\u00bd\2\2\u0ca0\u0ca8"+
		"\7\u034a\2\2\u0ca1\u0ca3\7\u034c\2\2\u0ca2\u0ca1\3\2\2\2\u0ca2\u0ca3\3"+
		"\2\2\2\u0ca3\u0ca4\3\2\2\2\u0ca4\u0ca5\7\u02c0\2\2\u0ca5\u0ca6\7\u0338"+
		"\2\2\u0ca6\u0ca7\7\u0332\2\2\u0ca7\u0ca9\t\31\2\2\u0ca8\u0ca2\3\2\2\2"+
		"\u0ca8\u0ca9\3\2\2\2\u0ca9\u0cb0\3\2\2\2\u0caa\u0cac\7\u034c\2\2\u0cab"+
		"\u0caa\3\2\2\2\u0cab\u0cac\3\2\2\2\u0cac\u0cad\3\2\2\2\u0cad\u0cae\7\u029c"+
		"\2\2\u0cae\u0caf\7\u0338\2\2\u0caf\u0cb1\t\32\2\2\u0cb0\u0cab\3\2\2\2"+
		"\u0cb0\u0cb1\3\2\2\2\u0cb1\u0cbc\3\2\2\2\u0cb2\u0cb4\7\u034c\2\2\u0cb3"+
		"\u0cb2\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb5\3\2\2\2\u0cb5\u0cb6\7\u02c3"+
		"\2\2\u0cb6\u0cba\7\u0338\2\2\u0cb7\u0cb8\7\u0332\2\2\u0cb8\u0cbb\7\u0211"+
		"\2\2\u0cb9\u0cbb\7\u02af\2\2\u0cba\u0cb7\3\2\2\2\u0cba\u0cb9\3\2\2\2\u0cbb"+
		"\u0cbd\3\2\2\2\u0cbc\u0cb3\3\2\2\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u0cc5\3\2"+
		"\2\2\u0cbe\u0cc0\7\u034c\2\2\u0cbf\u0cbe\3\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0"+
		"\u0cc1\3\2\2\2\u0cc1\u0cc2\7\u02c4\2\2\u0cc2\u0cc3\7\u0338\2\2\u0cc3\u0cc4"+
		"\7\u0332\2\2\u0cc4\u0cc6\t\31\2\2\u0cc5\u0cbf\3\2\2\2\u0cc5\u0cc6\3\2"+
		"\2\2\u0cc6\u0ccd\3\2\2\2\u0cc7\u0cc9\7\u034c\2\2\u0cc8\u0cc7\3\2\2\2\u0cc8"+
		"\u0cc9\3\2\2\2\u0cc9\u0cca\3\2\2\2\u0cca\u0ccb\7\u02ca\2\2\u0ccb\u0ccc"+
		"\7\u0338\2\2\u0ccc\u0cce\t\33\2\2\u0ccd\u0cc8\3\2\2\2\u0ccd\u0cce\3\2"+
		"\2\2\u0cce\u0cd5\3\2\2\2\u0ccf\u0cd1\7\u034c\2\2\u0cd0\u0ccf\3\2\2\2\u0cd0"+
		"\u0cd1\3\2\2\2\u0cd1\u0cd2\3\2\2\2\u0cd2\u0cd3\7\u031d\2\2\u0cd3\u0cd4"+
		"\7\u0338\2\2\u0cd4\u0cd6\t\t\2\2\u0cd5\u0cd0\3\2\2\2\u0cd5\u0cd6\3\2\2"+
		"\2\u0cd6\u0cdd\3\2\2\2\u0cd7\u0cd9\7\u034c\2\2\u0cd8\u0cd7\3\2\2\2\u0cd8"+
		"\u0cd9\3\2\2\2\u0cd9\u0cda\3\2\2\2\u0cda\u0cdb\7\u0315\2\2\u0cdb\u0cdc"+
		"\7\u0338\2\2\u0cdc\u0cde\t\t\2\2\u0cdd\u0cd8\3\2\2\2\u0cdd\u0cde\3\2\2"+
		"\2\u0cde\u0cdf\3\2\2\2\u0cdf\u0ce1\7\u034b\2\2\u0ce0\u0c9f\3\2\2\2\u0ce0"+
		"\u0ce1\3\2\2\2\u0ce1\u0ce5\3\2\2\2\u0ce2\u0ce3\7\u0311\2\2\u0ce3\u0ce4"+
		"\7\u0338\2\2\u0ce4\u0ce6\t\34\2\2\u0ce5\u0ce2\3\2\2\2\u0ce5\u0ce6\3\2"+
		"\2\2\u0ce6\u0127\3\2\2\2\u0ce7\u0ce9\7\u034c\2\2\u0ce8\u0ce7\3\2\2\2\u0ce8"+
		"\u0ce9\3\2\2\2\u0ce9\u0ceb\3\2\2\2\u0cea\u0cec\t\35\2\2\u0ceb\u0cea\3"+
		"\2\2\2\u0ceb\u0cec\3\2\2\2\u0cec\u0cee\3\2\2\2\u0ced\u0cef\7j\2\2\u0cee"+
		"\u0ced\3\2\2\2\u0cee\u0cef\3\2\2\2\u0cef\u0cf5\3\2\2\2\u0cf0\u0cf6\5\u012a"+
		"\u0096\2\u0cf1\u0cf2\7\u034a\2\2\u0cf2\u0cf3\5\u0128\u0095\2\u0cf3\u0cf4"+
		"\7\u034b\2\2\u0cf4\u0cf6\3\2\2\2\u0cf5\u0cf0\3\2\2\2\u0cf5\u0cf1\3\2\2"+
		"\2\u0cf6\u0cf8\3\2\2\2\u0cf7\u0ce8\3\2\2\2\u0cf8\u0cf9\3\2\2\2\u0cf9\u0cf7"+
		"\3\2\2\2\u0cf9\u0cfa\3\2\2\2\u0cfa\u0129\3\2\2\2\u0cfb\u0d01\5\u012c\u0097"+
		"\2\u0cfc\u0cfd\7\u034a\2\2\u0cfd\u0cfe\5\u0128\u0095\2\u0cfe\u0cff\7\u034b"+
		"\2\2\u0cff\u0d01\3\2\2\2\u0d00\u0cfb\3\2\2\2\u0d00\u0cfc\3\2\2\2\u0d01"+
		"\u012b\3\2\2\2\u0d02\u0d1f\5\u0410\u0209\2\u0d03\u0d0e\5\u0410\u0209\2"+
		"\u0d04\u0d05\5\u0410\u0209\2\u0d05\u0d06\7\u0345\2\2\u0d06\u0d08\3\2\2"+
		"\2\u0d07\u0d04\3\2\2\2\u0d07\u0d08\3\2\2\2\u0d08\u0d09\3\2\2\2\u0d09\u0d0a"+
		"\5\u0410\u0209\2\u0d0a\u0d0b\7\u0345\2\2\u0d0b\u0d0c\5\u0410\u0209\2\u0d0c"+
		"\u0d0e\3\2\2\2\u0d0d\u0d03\3\2\2\2\u0d0d\u0d07\3\2\2\2\u0d0e\u0d1a\3\2"+
		"\2\2\u0d0f\u0d1b\7\u0338\2\2\u0d10\u0d11\7\u033a\2\2\u0d11\u0d1b\7\u0339"+
		"\2\2\u0d12\u0d13\7\u033b\2\2\u0d13\u0d1b\7\u0338\2\2\u0d14\u0d1b\7\u0339"+
		"\2\2\u0d15\u0d16\7\u0339\2\2\u0d16\u0d1b\7\u0338\2\2\u0d17\u0d1b\7\u033a"+
		"\2\2\u0d18\u0d19\7\u033a\2\2\u0d19\u0d1b\7\u0338\2\2\u0d1a\u0d0f\3\2\2"+
		"\2\u0d1a\u0d10\3\2\2\2\u0d1a\u0d12\3\2\2\2\u0d1a\u0d14\3\2\2\2\u0d1a\u0d15"+
		"\3\2\2\2\u0d1a\u0d17\3\2\2\2\u0d1a\u0d18\3\2\2\2\u0d1b\u0d1c\3\2\2\2\u0d1c"+
		"\u0d1d\t\30\2\2\u0d1d\u0d1f\3\2\2\2\u0d1e\u0d02\3\2\2\2\u0d1e\u0d0d\3"+
		"\2\2\2\u0d1f\u0d3b\3\2\2\2\u0d20\u0d21\5\u0410\u0209\2\u0d21\u0d22\7\u0345"+
		"\2\2\u0d22\u0d24\3\2\2\2\u0d23\u0d20\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24"+
		"\u0d25\3\2\2\2\u0d25\u0d26\5\u0410\u0209\2\u0d26\u0d27\7\u0345\2\2\u0d27"+
		"\u0d28\5\u0410\u0209\2\u0d28\u0d36\7\u034a\2\2\u0d29\u0d37\5\u0410\u0209"+
		"\2\u0d2a\u0d2b\5\u0410\u0209\2\u0d2b\u0d2c\7\u0345\2\2\u0d2c\u0d2e\3\2"+
		"\2\2\u0d2d\u0d2a\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f"+
		"\u0d30\5\u0410\u0209\2\u0d30\u0d31\7\u0345\2\2\u0d31\u0d32\5\u0410\u0209"+
		"\2\u0d32\u0d33\3\2\2\2\u0d33\u0d34\7\u034c\2\2\u0d34\u0d35\t\30\2\2\u0d35"+
		"\u0d37\3\2\2\2\u0d36\u0d29\3\2\2\2\u0d36\u0d2d\3\2\2\2\u0d37\u0d38\3\2"+
		"\2\2\u0d38\u0d39\7\u034b\2\2\u0d39\u0d3b\3\2\2\2\u0d3a\u0d1e\3\2\2\2\u0d3a"+
		"\u0d23\3\2\2\2\u0d3b\u012d\3\2\2\2\u0d3c\u0d3d\7\5\2\2\u0d3d\u0d3e\7C"+
		"\2\2\u0d3e\u0d3f\7\u010e\2\2\u0d3f\u0d40\7\u030b\2\2\u0d40\u0d41\5\u0410"+
		"\u0209\2\u0d41\u0d51\7\u009e\2\2\u0d42\u0d43\7\u0180\2\2\u0d43\u0d44\7"+
		"\u0338\2\2\u0d44\u0d46\7\u0334\2\2\u0d45\u0d47\7\u034c\2\2\u0d46\u0d45"+
		"\3\2\2\2\u0d46\u0d47\3\2\2\2\u0d47\u0d52\3\2\2\2\u0d48\u0d49\7\u01fe\2"+
		"\2\u0d49\u0d4a\7\u0338\2\2\u0d4a\u0d4c\7\u0334\2\2\u0d4b\u0d4d\7\u034c"+
		"\2\2\u0d4c\u0d4b\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d\u0d52\3\2\2\2\u0d4e"+
		"\u0d4f\7\u0109\2\2\u0d4f\u0d50\7\u0338\2\2\u0d50\u0d52\5\u0410\u0209\2"+
		"\u0d51\u0d42\3\2\2\2\u0d51\u0d48\3\2\2\2\u0d51\u0d4e\3\2\2\2\u0d52\u0d53"+
		"\3\2\2\2\u0d53\u0d51\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0d6c\3\2\2\2\u0d55"+
		"\u0d56\7\5\2\2\u0d56\u0d57\7C\2\2\u0d57\u0d58\7\u010e\2\2\u0d58\u0d59"+
		"\7\u030b\2\2\u0d59\u0d5a\5\u0410\u0209\2\u0d5a\u0d5b\7\u00bd\2\2\u0d5b"+
		"\u0d5c\7\u034a\2\2\u0d5c\u0d5d\7\u024c\2\2\u0d5d\u0d5e\7\u0338\2\2\u0d5e"+
		"\u0d5f\7\u00eb\2\2\u0d5f\u0d60\7\u034c\2\2\u0d60\u0d61\7\u0180\2\2\u0d61"+
		"\u0d62\7\u0338\2\2\u0d62\u0d67\7\u0334\2\2\u0d63\u0d64\7\u034c\2\2\u0d64"+
		"\u0d65\7\u0109\2\2\u0d65\u0d66\7\u0338\2\2\u0d66\u0d68\5\u0410\u0209\2"+
		"\u0d67\u0d63\3\2\2\2\u0d67\u0d68\3\2\2\2\u0d68\u0d69\3\2\2\2\u0d69\u0d6a"+
		"\7\u034b\2\2\u0d6a\u0d6c\3\2\2\2\u0d6b\u0d3c\3\2\2\2\u0d6b\u0d55\3\2\2"+
		"\2\u0d6c\u012f\3\2\2\2\u0d6d\u0d6e\7\5\2\2\u0d6e\u0d6f\7C\2\2\u0d6f\u0d70"+
		"\7\u02b7\2\2\u0d70\u0d73\5\u0410\u0209\2\u0d71\u0d72\7\n\2\2\u0d72\u0d74"+
		"\5\u0410\u0209\2\u0d73\u0d71\3\2\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d75\3"+
		"\2\2\2\u0d75\u0d76\t\36\2\2\u0d76\u0d77\7\u034a\2\2\u0d77\u0d78\7\u0100"+
		"\2\2\u0d78\u0d7c\7\u0338\2\2\u0d79\u0d7d\7\u0334\2\2\u0d7a\u0d7d\7\u0335"+
		"\2\2\u0d7b\u0d7d\7\u02d2\2\2\u0d7c\u0d79\3\2\2\2\u0d7c\u0d7a\3\2\2\2\u0d7c"+
		"\u0d7b\3\2\2\2\u0d7d\u0d7e\3\2\2\2\u0d7e\u0d7f\7\u034c\2\2\u0d7f\u0d80"+
		"\7\u02e6\2\2\u0d80\u0d82\7\u0338\2\2\u0d81\u0d83\t\37\2\2\u0d82\u0d81"+
		"\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d84\3\2\2\2\u0d84\u0d85\7\u034b\2"+
		"\2\u0d85\u0d86\3\2\2\2\u0d86\u0d90\7\u00bd\2\2\u0d87\u0d89\7\u034c\2\2"+
		"\u0d88\u0d87\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89\u0d8a\3\2\2\2\u0d8a\u0d8b"+
		"\7\u02b6\2\2\u0d8b\u0d8c\7\u0338\2\2\u0d8c\u0d91\t \2\2\u0d8d\u0d8e\7"+
		"\u0290\2\2\u0d8e\u0d8f\7\u0338\2\2\u0d8f\u0d91\5\u0410\u0209\2\u0d90\u0d88"+
		"\3\2\2\2\u0d90\u0d8d\3\2\2\2\u0d91\u0d92\3\2\2\2\u0d92\u0d90\3\2\2\2\u0d92"+
		"\u0d93\3\2\2\2\u0d93\u0d94\3\2\2\2\u0d94\u0d95\7\u034b\2\2\u0d95\u0131"+
		"\3\2\2\2\u0d96\u0d97\7#\2\2\u0d97\u0d98\7C\2\2\u0d98\u0d99\7\u02b7\2\2"+
		"\u0d99\u0d9c\5\u0410\u0209\2\u0d9a\u0d9b\7\n\2\2\u0d9b\u0d9d\5\u0410\u0209"+
		"\2\u0d9c\u0d9a\3\2\2\2\u0d9c\u0d9d\3\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u0da0"+
		"\7K\2\2\u0d9f\u0da1\7\u034c\2\2\u0da0\u0d9f\3\2\2\2\u0da0\u0da1\3\2\2"+
		"\2\u0da1\u0da3\3\2\2\2\u0da2\u0da4\7\u034a\2\2\u0da3\u0da2\3\2\2\2\u0da3"+
		"\u0da4\3\2\2\2\u0da4\u0da7\3\2\2\2\u0da5\u0da6\7\u0100\2\2\u0da6\u0da8"+
		"\7\u0338\2\2\u0da7\u0da5\3\2\2\2\u0da7\u0da8\3\2\2\2\u0da8\u0dac\3\2\2"+
		"\2\u0da9\u0dad\7\u0334\2\2\u0daa\u0dad\7\u0335\2\2\u0dab\u0dad\7\u02d2"+
		"\2\2\u0dac\u0da9\3\2\2\2\u0dac\u0daa\3\2\2\2\u0dac\u0dab\3\2\2\2\u0dad"+
		"\u0db5\3\2\2\2\u0dae\u0daf\7\u034c\2\2\u0daf\u0db0\7\u02e6\2\2\u0db0\u0db2"+
		"\7\u0338\2\2\u0db1\u0db3\t\37\2\2\u0db2\u0db1\3\2\2\2\u0db2\u0db3\3\2"+
		"\2\2\u0db3\u0db4\3\2\2\2\u0db4\u0db6\7\u034b\2\2\u0db5\u0dae\3\2\2\2\u0db5"+
		"\u0db6\3\2\2\2\u0db6\u0dc6\3\2\2\2\u0db7\u0dc1\7\u00bd\2\2\u0db8\u0dba"+
		"\7\u034c\2\2\u0db9\u0db8\3\2\2\2\u0db9\u0dba\3\2\2\2\u0dba\u0dbb\3\2\2"+
		"\2\u0dbb\u0dbc\7\u02b6\2\2\u0dbc\u0dbd\7\u0338\2\2\u0dbd\u0dc2\t \2\2"+
		"\u0dbe\u0dbf\7\u0290\2\2\u0dbf\u0dc0\7\u0338\2\2\u0dc0\u0dc2\5\u0410\u0209"+
		"\2\u0dc1\u0db9\3\2\2\2\u0dc1\u0dbe\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u0dc1"+
		"\3\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4\u0dc5\3\2\2\2\u0dc5\u0dc7\7\u034b\2"+
		"\2\u0dc6\u0db7\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7\u0133\3\2\2\2\u0dc8\u0dc9"+
		"\7\5\2\2\u0dc9\u0dca\7C\2\2\u0dca\u0dcb\7\u01fd\2\2\u0dcb\u0dce\7\u01d0"+
		"\2\2\u0dcc\u0dcf\5\u0410\u0209\2\u0dcd\u0dcf\7\u0118\2\2\u0dce\u0dcc\3"+
		"\2\2\2\u0dce\u0dcd\3\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0\u0dd1\7\u00bd\2\2"+
		"\u0dd1\u0dd2\7\u034a\2\2\u0dd2\u0dd3\7\u018a\2\2\u0dd3\u0dd4\7\u0338\2"+
		"\2\u0dd4\u0dfa\7\u0332\2\2\u0dd5\u0dd7\7\u034c\2\2\u0dd6\u0dd5\3\2\2\2"+
		"\u0dd6\u0dd7\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0dd9\7\u00ca\2\2\u0dd9"+
		"\u0dda\7\u0106\2\2\u0dda\u0de8\7\u0338\2\2\u0ddb\u0de9\7\u00db\2\2\u0ddc"+
		"\u0dde\7\u034c\2\2\u0ddd\u0ddc\3\2\2\2\u0ddd\u0dde\3\2\2\2\u0dde\u0ddf"+
		"\3\2\2\2\u0ddf\u0de0\7\u0332\2\2\u0de0\u0de1\7\u00a8\2\2\u0de1\u0de5\7"+
		"\u0332\2\2\u0de2\u0de3\7\u034c\2\2\u0de3\u0de5\7\u0332\2\2\u0de4\u0ddd"+
		"\3\2\2\2\u0de4\u0de2\3\2\2\2\u0de5\u0de6\3\2\2\2\u0de6\u0de4\3\2\2\2\u0de6"+
		"\u0de7\3\2\2\2\u0de7\u0de9\3\2\2\2\u0de8\u0ddb\3\2\2\2\u0de8\u0de4\3\2"+
		"\2\2\u0de9\u0dfb\3\2\2\2\u0dea\u0deb\7\u01b6\2\2\u0deb\u0df6\7\u0338\2"+
		"\2\u0dec\u0dee\7\u034c\2\2\u0ded\u0dec\3\2\2\2\u0ded\u0dee\3\2\2\2\u0dee"+
		"\u0def\3\2\2\2\u0def\u0df0\7\u0332\2\2\u0df0\u0df1\7\u00a8\2\2\u0df1\u0df7"+
		"\7\u0332\2\2\u0df2\u0df4\7\u034c\2\2\u0df3\u0df2\3\2\2\2\u0df3\u0df4\3"+
		"\2\2\2\u0df4\u0df5\3\2\2\2\u0df5\u0df7\7\u0332\2\2\u0df6\u0ded\3\2\2\2"+
		"\u0df6\u0df3\3\2\2\2\u0df7\u0df8\3\2\2\2\u0df8\u0df6\3\2\2\2\u0df8\u0df9"+
		"\3\2\2\2\u0df9\u0dfb\3\2\2\2\u0dfa\u0dd6\3\2\2\2\u0dfa\u0dea\3\2\2\2\u0dfb"+
		"\u0e02\3\2\2\2\u0dfc\u0dfe\7\u034c\2\2\u0dfd\u0dfc\3\2\2\2\u0dfd\u0dfe"+
		"\3\2\2\2\u0dfe\u0dff\3\2\2\2\u0dff\u0e00\7\u018e\2\2\u0e00\u0e01\7\u0338"+
		"\2\2\u0e01\u0e03\7\u0332\2\2\u0e02\u0dfd\3\2\2\2\u0e02\u0e03\3\2\2\2\u0e03"+
		"\u0e0a\3\2\2\2\u0e04\u0e06\7\u034c\2\2\u0e05\u0e04\3\2\2\2\u0e05\u0e06"+
		"\3\2\2\2\u0e06\u0e07\3\2\2\2\u0e07\u0e08\7\u018f\2\2\u0e08\u0e09\7\u0338"+
		"\2\2\u0e09\u0e0b\7\u0332\2\2\u0e0a\u0e05\3\2\2\2\u0e0a\u0e0b\3\2\2\2\u0e0b"+
		"\u0e0c\3\2\2\2\u0e0c\u0e0d\7\u034b\2\2\u0e0d\u0135\3\2\2\2\u0e0e\u0e0f"+
		"\7#\2\2\u0e0f\u0e10\7C\2\2\u0e10\u0e11\7\u01fd\2\2\u0e11\u0e12\7\u01d0"+
		"\2\2\u0e12\u0e13\5\u0410\u0209\2\u0e13\u0e14\7\u00bd\2\2\u0e14\u0e15\7"+
		"\u034a\2\2\u0e15\u0e16\7\u018a\2\2\u0e16\u0e17\7\u0338\2\2\u0e17\u0e3d"+
		"\7\u0332\2\2\u0e18\u0e1a\7\u034c\2\2\u0e19\u0e18\3\2\2\2\u0e19\u0e1a\3"+
		"\2\2\2\u0e1a\u0e1b\3\2\2\2\u0e1b\u0e1c\7\u00ca\2\2\u0e1c\u0e1d\7\u0106"+
		"\2\2\u0e1d\u0e2b\7\u0338\2\2\u0e1e\u0e2c\7\u00db\2\2\u0e1f\u0e21\7\u034c"+
		"\2\2\u0e20\u0e1f\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u0e22\3\2\2\2\u0e22"+
		"\u0e23\7\u0332\2\2\u0e23\u0e24\7\u00a8\2\2\u0e24\u0e28\7\u0332\2\2\u0e25"+
		"\u0e26\7\u034c\2\2\u0e26\u0e28\7\u0332\2\2\u0e27\u0e20\3\2\2\2\u0e27\u0e25"+
		"\3\2\2\2\u0e28\u0e29\3\2\2\2\u0e29\u0e27\3\2\2\2\u0e29\u0e2a\3\2\2\2\u0e2a"+
		"\u0e2c\3\2\2\2\u0e2b\u0e1e\3\2\2\2\u0e2b\u0e27\3\2\2\2\u0e2c\u0e3e\3\2"+
		"\2\2\u0e2d\u0e2e\7\u01b6\2\2\u0e2e\u0e39\7\u0338\2\2\u0e2f\u0e31\7\u034c"+
		"\2\2\u0e30\u0e2f\3\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32"+
		"\u0e33\7\u0332\2\2\u0e33\u0e34\7\u00a8\2\2\u0e34\u0e3a\7\u0332\2\2\u0e35"+
		"\u0e37\7\u034c\2\2\u0e36\u0e35\3\2\2\2\u0e36\u0e37\3\2\2\2\u0e37\u0e38"+
		"\3\2\2\2\u0e38\u0e3a\7\u0332\2\2\u0e39\u0e30\3\2\2\2\u0e39\u0e36\3\2\2"+
		"\2\u0e3a\u0e3b\3\2\2\2\u0e3b\u0e39\3\2\2\2\u0e3b\u0e3c\3\2\2\2\u0e3c\u0e3e"+
		"\3\2\2\2\u0e3d\u0e19\3\2\2\2\u0e3d\u0e2d\3\2\2\2\u0e3e\u0e45\3\2\2\2\u0e3f"+
		"\u0e41\7\u034c\2\2\u0e40\u0e3f\3\2\2\2\u0e40\u0e41\3\2\2\2\u0e41\u0e42"+
		"\3\2\2\2\u0e42\u0e43\7\u018e\2\2\u0e43\u0e44\7\u0338\2\2\u0e44\u0e46\7"+
		"\u0332\2\2\u0e45\u0e40\3\2\2\2\u0e45\u0e46\3\2\2\2\u0e46\u0e4d\3\2\2\2"+
		"\u0e47\u0e49\7\u034c\2\2\u0e48\u0e47\3\2\2\2\u0e48\u0e49\3\2\2\2\u0e49"+
		"\u0e4a\3\2\2\2\u0e4a\u0e4b\7\u018f\2\2\u0e4b\u0e4c\7\u0338\2\2\u0e4c\u0e4e"+
		"\7\u0332\2\2\u0e4d\u0e48\3\2\2\2\u0e4d\u0e4e\3\2\2\2\u0e4e\u0e4f\3\2\2"+
		"\2\u0e4f\u0e50\7\u034b\2\2\u0e50\u0137\3\2\2\2\u0e51\u0e52\7\5\2\2\u0e52"+
		"\u0e53\7\u0150\2\2\u0e53\u0e54\7\u00f3\2\2\u0e54\u0e5f\5\u0410\u0209\2"+
		"\u0e55\u0e5a\7\u01ec\2\2\u0e56\u0e57\7\u00bd\2\2\u0e57\u0e58\7\u00c2\2"+
		"\2\u0e58\u0e59\7\u0338\2\2\u0e59\u0e5b\t\t\2\2\u0e5a\u0e56\3\2\2\2\u0e5a"+
		"\u0e5b\3\2\2\2\u0e5b\u0e60\3\2\2\2\u0e5c\u0e60\7\u01f5\2\2\u0e5d\u0e5e"+
		"\7\b\2\2\u0e5e\u0e60\7/\2\2\u0e5f\u0e55\3\2\2\2\u0e5f\u0e5c\3\2\2\2\u0e5f"+
		"\u0e5d\3\2\2\2\u0e60\u0139\3\2\2\2\u0e61\u0e62\7#\2\2\u0e62\u0e63\7\u0150"+
		"\2\2\u0e63\u0e64\7\u00f3\2\2\u0e64\u0e68\5\u0410\u0209\2\u0e65\u0e66\7"+
		"p\2\2\u0e66\u0e67\7\u0141\2\2\u0e67\u0e69\5\u0410\u0209\2\u0e68\u0e65"+
		"\3\2\2\2\u0e68\u0e69\3\2\2\2\u0e69\u0e6d\3\2\2\2\u0e6a\u0e6b\7W\2\2\u0e6b"+
		"\u0e6c\7\u01cb\2\2\u0e6c\u0e6e\7\u0334\2\2\u0e6d\u0e6a\3\2\2\2\u0e6d\u0e6e"+
		"\3\2\2\2\u0e6e\u0e73\3\2\2\2\u0e6f\u0e70\7\u00bd\2\2\u0e70\u0e71\7\u00c2"+
		"\2\2\u0e71\u0e72\7\u0338\2\2\u0e72\u0e74\t\t\2\2\u0e73\u0e6f\3\2\2\2\u0e73"+
		"\u0e74\3\2\2\2\u0e74\u0e77\3\2\2\2\u0e75\u0e76\7\b\2\2\u0e76\u0e78\7/"+
		"\2\2\u0e77\u0e75\3\2\2\2\u0e77\u0e78\3\2\2\2\u0e78\u0e7b\3\2\2\2\u0e79"+
		"\u0e7a\7\n\2\2\u0e7a\u0e7c\5\u0410\u0209\2\u0e7b\u0e79\3\2\2\2\u0e7b\u0e7c"+
		"\3\2\2\2\u0e7c\u013b\3\2\2\2\u0e7d\u0e7e\7\5\2\2\u0e7e\u0e7f\7\u0150\2"+
		"\2\u0e7f\u0e80\7\u022f\2\2\u0e80\u0e8e\5\u0410\u0209\2\u0e81\u0e82\7\3"+
		"\2\2\u0e82\u0e83\7\u0334\2\2\u0e83\u0e84\7\u02b6\2\2\u0e84\u0e8f\t!\2"+
		"\2\u0e85\u0e8c\79\2\2\u0e86\u0e87\7\u0334\2\2\u0e87\u0e88\7\u02b6\2\2"+
		"\u0e88\u0e8d\t!\2\2\u0e89\u0e8a\7\4\2\2\u0e8a\u0e8d\t!\2\2\u0e8b\u0e8d"+
		"\7\4\2\2\u0e8c\u0e86\3\2\2\2\u0e8c\u0e89\3\2\2\2\u0e8c\u0e8b\3\2\2\2\u0e8d"+
		"\u0e8f\3\2\2\2\u0e8e\u0e81\3\2\2\2\u0e8e\u0e85\3\2\2\2\u0e8f\u013d\3\2"+
		"\2\2\u0e90\u0e91\7#\2\2\u0e91\u0e92\7\u0150\2\2\u0e92\u0e93\7\u022f\2"+
		"\2\u0e93\u0e9f\5\u0410\u0209\2\u0e94\u0e9d\7K\2\2\u0e95\u0e96\5\u0410"+
		"\u0209\2\u0e96\u0e97\7\u0345\2\2\u0e97\u0e99\3\2\2\2\u0e98\u0e95\3\2\2"+
		"\2\u0e98\u0e99\3\2\2\2\u0e99\u0e9a\3\2\2\2\u0e9a\u0e9e\5\u0410\u0209\2"+
		"\u0e9b\u0e9c\7\u0239\2\2\u0e9c\u0e9e\7\u022f\2\2\u0e9d\u0e98\3\2\2\2\u0e9d"+
		"\u0e9b\3\2\2\2\u0e9e\u0ea0\3\2\2\2\u0e9f\u0e94\3\2\2\2\u0e9f\u0ea0\3\2"+
		"\2\2\u0ea0\u0ea3\3\2\2\2\u0ea1\u0ea2\7\n\2\2\u0ea2\u0ea4\5\u0410\u0209"+
		"\2\u0ea3\u0ea1\3\2\2\2\u0ea3\u0ea4\3\2\2\2\u0ea4\u013f\3\2\2\2\u0ea5\u0ea6"+
		"\7\5\2\2\u0ea6\u0ea7\7\u0183\2\2\u0ea7\u0eeb\5\u0410\u0209\2\u0ea8\u0eaa"+
		"\t\27\2\2\u0ea9\u0ea8\3\2\2\2\u0ea9\u0eaa\3\2\2\2\u0eaa\u0eec\3\2\2\2"+
		"\u0eab\u0eb9\7\u00bd\2\2\u0eac\u0ead\7\u02e0\2\2\u0ead\u0eb1\7\u0338\2"+
		"\2\u0eae\u0eb2\7\u0334\2\2\u0eaf\u0eb0\7\u0335\2\2\u0eb0\u0eb2\7\u02a9"+
		"\2\2\u0eb1\u0eae\3\2\2\2\u0eb1\u0eaf\3\2\2\2\u0eb2\u0eb6\3\2\2\2\u0eb3"+
		"\u0eb5\t\"\2\2\u0eb4\u0eb3\3\2\2\2\u0eb5\u0eb8\3\2\2\2\u0eb6\u0eb4\3\2"+
		"\2\2\u0eb6\u0eb7\3\2\2\2\u0eb7\u0eba\3\2\2\2\u0eb8\u0eb6\3\2\2\2\u0eb9"+
		"\u0eac\3\2\2\2\u0eb9\u0eba\3\2\2\2\u0eba\u0ec4\3\2\2\2\u0ebb\u0ebc\7\u02db"+
		"\2\2\u0ebc\u0ebd\7\u0338\2\2\u0ebd\u0ec1\7\u0334\2\2\u0ebe\u0ec0\t\"\2"+
		"\2\u0ebf\u0ebe\3\2\2\2\u0ec0\u0ec3\3\2\2\2\u0ec1\u0ebf\3\2\2\2\u0ec1\u0ec2"+
		"\3\2\2\2\u0ec2\u0ec5\3\2\2\2\u0ec3\u0ec1\3\2\2\2\u0ec4\u0ebb\3\2\2\2\u0ec4"+
		"\u0ec5\3\2\2\2\u0ec5\u0ec9\3\2\2\2\u0ec6\u0ec7\7\u0292\2\2\u0ec7\u0ec8"+
		"\7\u0338\2\2\u0ec8\u0eca\5\u0410\u0209\2\u0ec9\u0ec6\3\2\2\2\u0ec9\u0eca"+
		"\3\2\2\2\u0eca\u0ece\3\2\2\2\u0ecb\u0ecc\7\u011a\2\2\u0ecc\u0ecd\7\u0338"+
		"\2\2\u0ecd\u0ecf\5\u0410\u0209\2\u0ece\u0ecb\3\2\2\2\u0ece\u0ecf\3\2\2"+
		"\2\u0ecf\u0ed3\3\2\2\2\u0ed0\u0ed1\7\u01a5\2\2\u0ed1\u0ed2\7\u0338\2\2"+
		"\u0ed2\u0ed4\5\u0410\u0209\2\u0ed3\u0ed0\3\2\2\2\u0ed3\u0ed4\3\2\2\2\u0ed4"+
		"\u0ed8\3\2\2\2\u0ed5\u0ed6\7\u0281\2\2\u0ed6\u0ed7\7\u0338\2\2\u0ed7\u0ed9"+
		"\t\t\2\2\u0ed8\u0ed5\3\2\2\2\u0ed8\u0ed9\3\2\2\2\u0ed9\u0edd\3\2\2\2\u0eda"+
		"\u0edb\7\u0282\2\2\u0edb\u0edc\7\u0338\2\2\u0edc\u0ede\t\t\2\2\u0edd\u0eda"+
		"\3\2\2\2\u0edd\u0ede\3\2\2\2\u0ede\u0ee2\3\2\2\2\u0edf\u0ee0\7\u0109\2"+
		"\2\u0ee0\u0ee1\7\u0338\2\2\u0ee1\u0ee3\5\u0410\u0209\2\u0ee2\u0edf\3\2"+
		"\2\2\u0ee2\u0ee3\3\2\2\2\u0ee3\u0ee6\3\2\2\2\u0ee4\u0ee5\7\u01ab\2\2\u0ee5"+
		"\u0ee7\7\u0109\2\2\u0ee6\u0ee4\3\2\2\2\u0ee6\u0ee7\3\2\2\2\u0ee7\u0eec"+
		"\3\2\2\2\u0ee8\u0ee9\t\25\2\2\u0ee9\u0eea\7\u0109\2\2\u0eea\u0eec\5\u0410"+
		"\u0209\2\u0eeb\u0ea9\3\2\2\2\u0eeb\u0eab\3\2\2\2\u0eeb\u0ee8\3\2\2\2\u0eec"+
		"\u0141\3\2\2\2\u0eed\u0eee\7#\2\2\u0eee\u0eef\7\u0183\2\2\u0eef\u0f4a"+
		"\5\u0410\u0209\2\u0ef0\u0efe\7\u00bd\2\2\u0ef1\u0ef2\7\u02e0\2\2\u0ef2"+
		"\u0ef6\7\u0338\2\2\u0ef3\u0ef7\7\u0334\2\2\u0ef4\u0ef5\7\u0335\2\2\u0ef5"+
		"\u0ef7\7\u02a9\2\2\u0ef6\u0ef3\3\2\2\2\u0ef6\u0ef4\3\2\2\2\u0ef7\u0efb"+
		"\3\2\2\2\u0ef8\u0efa\t\"\2\2\u0ef9\u0ef8\3\2\2\2\u0efa\u0efd\3\2\2\2\u0efb"+
		"\u0ef9\3\2\2\2\u0efb\u0efc\3\2\2\2\u0efc\u0eff\3\2\2\2\u0efd\u0efb\3\2"+
		"\2\2\u0efe\u0ef1\3\2\2\2\u0efe\u0eff\3\2\2\2\u0eff\u0f06\3\2\2\2\u0f00"+
		"\u0f02\7\u034c\2\2\u0f01\u0f00\3\2\2\2\u0f01\u0f02\3\2\2\2\u0f02\u0f03"+
		"\3\2\2\2\u0f03\u0f04\7\u0308\2\2\u0f04\u0f05\7\u0338\2\2\u0f05\u0f07\7"+
		"\u0335\2\2\u0f06\u0f01\3\2\2\2\u0f06\u0f07\3\2\2\2\u0f07\u0f0e\3\2\2\2"+
		"\u0f08\u0f0a\7\u034c\2\2\u0f09\u0f08\3\2\2\2\u0f09\u0f0a\3\2\2\2\u0f0a"+
		"\u0f0b\3\2\2\2\u0f0b\u0f0c\7\u0292\2\2\u0f0c\u0f0d\7\u0338\2\2\u0f0d\u0f0f"+
		"\5\u0410\u0209\2\u0f0e\u0f09\3\2\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f\u0f16\3"+
		"\2\2\2\u0f10\u0f12\7\u034c\2\2\u0f11\u0f10\3\2\2\2\u0f11\u0f12\3\2\2\2"+
		"\u0f12\u0f13\3\2\2\2\u0f13\u0f14\7\u011a\2\2\u0f14\u0f15\7\u0338\2\2\u0f15"+
		"\u0f17\5\u0410\u0209\2\u0f16\u0f11\3\2\2\2\u0f16\u0f17\3\2\2\2\u0f17\u0f1e"+
		"\3\2\2\2\u0f18\u0f1a\7\u034c\2\2\u0f19\u0f18\3\2\2\2\u0f19\u0f1a\3\2\2"+
		"\2\u0f1a\u0f1b\3\2\2\2\u0f1b\u0f1c\7\u0282\2\2\u0f1c\u0f1d\7\u0338\2\2"+
		"\u0f1d\u0f1f\t\t\2\2\u0f1e\u0f19\3\2\2\2\u0f1e\u0f1f\3\2\2\2\u0f1f\u0f26"+
		"\3\2\2\2\u0f20\u0f22\7\u034c\2\2\u0f21\u0f20\3\2\2\2\u0f21\u0f22\3\2\2"+
		"\2\u0f22\u0f23\3\2\2\2\u0f23\u0f24\7\u0281\2\2\u0f24\u0f25\7\u0338\2\2"+
		"\u0f25\u0f27\t\t\2\2\u0f26\u0f21\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27\u0f2e"+
		"\3\2\2\2\u0f28\u0f2a\7\u034c\2\2\u0f29\u0f28\3\2\2\2\u0f29\u0f2a\3\2\2"+
		"\2\u0f2a\u0f2b\3\2\2\2\u0f2b\u0f2c\7\u0109\2\2\u0f2c\u0f2d\7\u0338\2\2"+
		"\u0f2d\u0f2f\5\u0410\u0209\2\u0f2e\u0f29\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f"+
		"\u0f4b\3\2\2\2\u0f30\u0f48\7K\2\2\u0f31\u0f32\7\u0326\2\2\u0f32\u0f39"+
		"\7\u00bd\2\2\u0f33\u0f35\7\u034c\2\2\u0f34\u0f33\3\2\2\2\u0f34\u0f35\3"+
		"\2\2\2\u0f35\u0f36\3\2\2\2\u0f36\u0f37\7\u0292\2\2\u0f37\u0f38\7\u0338"+
		"\2\2\u0f38\u0f3a\5\u0410\u0209\2\u0f39\u0f34\3\2\2\2\u0f39\u0f3a\3\2\2"+
		"\2\u0f3a\u0f41\3\2\2\2\u0f3b\u0f3d\7\u034c\2\2\u0f3c\u0f3b\3\2\2\2\u0f3c"+
		"\u0f3d\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e\u0f3f\7\u011a\2\2\u0f3f\u0f40"+
		"\7\u0338\2\2\u0f40\u0f42\7\u0334\2\2\u0f41\u0f3c\3\2\2\2\u0f41\u0f42\3"+
		"\2\2\2\u0f42\u0f49\3\2\2\2\u0f43\u0f44\7\u027e\2\2\u0f44\u0f49\5\u0410"+
		"\u0209\2\u0f45\u0f46\7\u0270\2\2\u0f46\u0f47\7_\2\2\u0f47\u0f49\5\u0410"+
		"\u0209\2\u0f48\u0f31\3\2\2\2\u0f48\u0f43\3\2\2\2\u0f48\u0f45\3\2\2\2\u0f49"+
		"\u0f4b\3\2\2\2\u0f4a\u0ef0\3\2\2\2\u0f4a\u0f30\3\2\2\2\u0f4b\u0143\3\2"+
		"\2\2\u0f4c\u0f4d\7\5\2\2\u0f4d\u0f4e\7\u0183\2\2\u0f4e\u0f60\5\u0410\u0209"+
		"\2\u0f4f\u0f51\t\27\2\2\u0f50\u0f4f\3\2\2\2\u0f50\u0f51\3\2\2\2\u0f51"+
		"\u0f61\3\2\2\2\u0f52\u0f5e\7\u00bd\2\2\u0f53\u0f54\7\u02e0\2\2\u0f54\u0f55"+
		"\7\u0338\2\2\u0f55\u0f59\7\u0334\2\2\u0f56\u0f57\7\u02db\2\2\u0f57\u0f58"+
		"\7\u0338\2\2\u0f58\u0f5a\7\u0334\2\2\u0f59\u0f56\3\2\2\2\u0f59\u0f5a\3"+
		"\2\2\2\u0f5a\u0f5f\3\2\2\2\u0f5b\u0f5c\7\u01a5\2\2\u0f5c\u0f5d\7\u0338"+
		"\2\2\u0f5d\u0f5f\5\u0410\u0209\2\u0f5e\u0f53\3\2\2\2\u0f5e\u0f5b\3\2\2"+
		"\2\u0f5f\u0f61\3\2\2\2\u0f60\u0f50\3\2\2\2\u0f60\u0f52\3\2\2\2\u0f61\u0145"+
		"\3\2\2\2\u0f62\u0f63\7#\2\2\u0f63\u0f64\7\u0183\2\2\u0f64\u0f65\5\u0410"+
		"\u0209\2\u0f65\u0f66\7\u00bd\2\2\u0f66\u0f67\7\u02e0\2\2\u0f67\u0f68\7"+
		"\u0338\2\2\u0f68\u0f6c\7\u0334\2\2\u0f69\u0f6a\7\u0308\2\2\u0f6a\u0f6b"+
		"\7\u0338\2\2\u0f6b\u0f6d\7\u0335\2\2\u0f6c\u0f69\3\2\2\2\u0f6c\u0f6d\3"+
		"\2\2\2\u0f6d\u0147\3\2\2\2\u0f6e\u0f6f\7\5\2\2\u0f6f\u0f70\7\u0183\2\2"+
		"\u0f70\u0f88\5\u0410\u0209\2\u0f71\u0f73\t\27\2\2\u0f72\u0f71\3\2\2\2"+
		"\u0f72\u0f73\3\2\2\2\u0f73\u0f89\3\2\2\2\u0f74\u0f86\7\u00bd\2\2\u0f75"+
		"\u0f76\7\u02e0\2\2\u0f76\u0f77\7\u0338\2\2\u0f77\u0f81\7\u0334\2\2\u0f78"+
		"\u0f79\7\u02db\2\2\u0f79\u0f7a\7\u0338\2\2\u0f7a\u0f7e\7\u0334\2\2\u0f7b"+
		"\u0f7d\t\"\2\2\u0f7c\u0f7b\3\2\2\2\u0f7d\u0f80\3\2\2\2\u0f7e\u0f7c\3\2"+
		"\2\2\u0f7e\u0f7f\3\2\2\2\u0f7f\u0f82\3\2\2\2\u0f80\u0f7e\3\2\2\2\u0f81"+
		"\u0f78\3\2\2\2\u0f81\u0f82\3\2\2\2\u0f82\u0f87\3\2\2\2\u0f83\u0f84\7\u01a5"+
		"\2\2\u0f84\u0f85\7\u0338\2\2\u0f85\u0f87\5\u0410\u0209\2\u0f86\u0f75\3"+
		"\2\2\2\u0f86\u0f83\3\2\2\2\u0f87\u0f89\3\2\2\2\u0f88\u0f72\3\2\2\2\u0f88"+
		"\u0f74\3\2\2\2\u0f89\u0149\3\2\2\2\u0f8a\u0f8b\7#\2\2\u0f8b\u0f8c\7\u0183"+
		"\2\2\u0f8c\u0f9d\5\u0410\u0209\2\u0f8d\u0f8e\7\u00bd\2\2\u0f8e\u0f8f\7"+
		"\u02e0\2\2\u0f8f\u0f90\7\u0338\2\2\u0f90\u0f92\7\u0334\2\2\u0f91\u0f93"+
		"\7\u02cf\2\2\u0f92\u0f91\3\2\2\2\u0f92\u0f93\3\2\2\2\u0f93\u0f99\3\2\2"+
		"\2\u0f94\u0f95\7\u0281\2\2\u0f95\u0f97\7\u0338\2\2\u0f96\u0f98\t\t\2\2"+
		"\u0f97\u0f96\3\2\2\2\u0f97\u0f98\3\2\2\2\u0f98\u0f9a\3\2\2\2\u0f99\u0f94"+
		"\3\2\2\2\u0f99\u0f9a\3\2\2\2\u0f9a\u0f9e\3\2\2\2\u0f9b\u0f9c\7K\2\2\u0f9c"+
		"\u0f9e\7\u0326\2\2\u0f9d\u0f8d\3\2\2\2\u0f9d\u0f9b\3\2\2\2\u0f9e\u014b"+
		"\3\2\2\2\u0f9f\u0fa0\7\5\2\2\u0fa0\u0fa1\7\u02bf\2\2\u0fa1\u0fb7\7_\2"+
		"\2\u0fa2\u0fa4\7\u014a\2\2\u0fa3\u0fa2\3\2\2\2\u0fa3\u0fa4\3\2\2\2\u0fa4"+
		"\u0fa5\3\2\2\2\u0fa5\u0fa6\7\u02ee\2\2\u0fa6\u0fa7\7\u00bd\2\2\u0fa7\u0fa8"+
		"\7\u0132\2\2\u0fa8\u0fa9\7\22\2\2\u0fa9\u0faa\7\u02e0\2\2\u0faa\u0fab"+
		"\7\u0338\2\2\u0fab\u0fb8\7\u0334\2\2\u0fac\u0fad\t\25\2\2\u0fad\u0fae"+
		"\7\u0132\2\2\u0fae\u0fb5\7\22\2\2\u0faf\u0fb0\7\u0303\2\2\u0fb0\u0fb1"+
		"\7\u02bf\2\2\u0fb1\u0fb6\7_\2\2\u0fb2\u0fb3\7\u02e0\2\2\u0fb3\u0fb4\7"+
		"\u0338\2\2\u0fb4\u0fb6\7\u0334\2\2\u0fb5\u0faf\3\2\2\2\u0fb5\u0fb2\3\2"+
		"\2\2\u0fb6\u0fb8\3\2\2\2\u0fb7\u0fa3\3\2\2\2\u0fb7\u0fac\3\2\2\2\u0fb8"+
		"\u014d\3\2\2\2\u0fb9\u0fba\7#\2\2\u0fba\u0fbb\7\u02bf\2\2\u0fbb\u0fbc"+
		"\7_\2\2\u0fbc\u0fbd\7\u0132\2\2\u0fbd\u0fbe\7\22\2\2\u0fbe\u0fbf\7\u02e0"+
		"\2\2\u0fbf\u0fc0\7\u0338\2\2\u0fc0\u0fc1\7\u0334\2\2\u0fc1\u014f\3\2\2"+
		"\2\u0fc2\u0fc3\7\5\2\2\u0fc3\u0fc4\7\u02bf\2\2\u0fc4\u0fe0\7_\2\2\u0fc5"+
		"\u0fc7\7\u014a\2\2\u0fc6\u0fc5\3\2\2\2\u0fc6\u0fc7\3\2\2\2\u0fc7\u0fc8"+
		"\3\2\2\2\u0fc8\u0fc9\7\u02ee\2\2\u0fc9\u0fca\7\u00bd\2\2\u0fca\u0fcb\7"+
		"\u0132\2\2\u0fcb\u0fcc\7\22\2\2\u0fcc\u0fcd\7\u02e0\2\2\u0fcd\u0fce\7"+
		"\u0338\2\2\u0fce\u0fe1\7\u0334\2\2\u0fcf\u0fd0\7\3\2\2\u0fd0\u0fd1\7\u0132"+
		"\2\2\u0fd1\u0fd8\7\22\2\2\u0fd2\u0fd3\7\u0303\2\2\u0fd3\u0fd4\7\u02bf"+
		"\2\2\u0fd4\u0fd9\7_\2\2\u0fd5\u0fd6\7\u02e0\2\2\u0fd6\u0fd7\7\u0338\2"+
		"\2\u0fd7\u0fd9\7\u0334\2\2\u0fd8\u0fd2\3\2\2\2\u0fd8\u0fd5\3\2\2\2\u0fd9"+
		"\u0fe1\3\2\2\2\u0fda\u0fdb\79\2\2\u0fdb\u0fdc\7\u0132\2\2\u0fdc\u0fdd"+
		"\7\22\2\2\u0fdd\u0fde\7\u02e0\2\2\u0fde\u0fdf\7\u0338\2\2\u0fdf\u0fe1"+
		"\7\u0334\2\2\u0fe0\u0fc6\3\2\2\2\u0fe0\u0fcf\3\2\2\2\u0fe0\u0fda\3\2\2"+
		"\2\u0fe1\u0151\3\2\2\2\u0fe2\u0fe3\7#\2\2\u0fe3\u0fe4\7\u02bf\2\2\u0fe4"+
		"\u0fea\7_\2\2\u0fe5\u0fe6\7\u0132\2\2\u0fe6\u0fe7\7\22\2\2\u0fe7\u0fe8"+
		"\7\u02e0\2\2\u0fe8\u0fe9\7\u0338\2\2\u0fe9\u0feb\7\u0334\2\2\u0fea\u0fe5"+
		"\3\2\2\2\u0fea\u0feb\3\2\2\2\u0feb\u0153\3\2\2\2\u0fec\u0fed\7\5\2\2\u0fed"+
		"\u0fee\7\u0198\2\2\u0fee\u0fef\7\u024c\2\2\u0fef\u0ff0\5\u0410\u0209\2"+
		"\u0ff0\u0ff1\7\u0255\2\2\u0ff1\u0ffa\7\u0338\2\2\u0ff2\u0ffb\7\u02d2\2"+
		"\2\u0ff3\u0ffb\7\u012e\2\2\u0ff4\u0ffb\7\u025d\2\2\u0ff5\u0ff6\7\u0254"+
		"\2\2\u0ff6\u0ff7\7\u00bd\2\2\u0ff7\u0ff8\7\u0097\2\2\u0ff8\u0ff9\7\u00fa"+
		"\2\2\u0ff9\u0ffb\5\u0410\u0209\2\u0ffa\u0ff2\3\2\2\2\u0ffa\u0ff3\3\2\2"+
		"\2\u0ffa\u0ff4\3\2\2\2\u0ffa\u0ff5\3\2\2\2\u0ffb\u0155\3\2\2\2\u0ffc\u0ffd"+
		"\7\5\2\2\u0ffd\u0ffe\7\u01c8\2\2\u0ffe\u0fff\7M\2\2\u0fff\u1000\5\u0410"+
		"\u0209\2\u1000\u1001\7\u034a\2\2\u1001\u1002\7\u034b\2\2\u1002\u1003\t"+
		"#\2\2\u1003\u1004\7\u01e2\2\2\u1004\u1005\7\u034a\2\2\u1005\u1006\7\u0332"+
		"\2\2\u1006\u1007\7\u034b\2\2\u1007\u0157\3\2\2\2\u1008\u1009\7\5\2\2\u1009"+
		"\u100a\7\u01c8\2\2\u100a\u100b\7\u0301\2\2\u100b\u100c\5\u0410\u0209\2"+
		"\u100c\u100d\7\u01aa\2\2\u100d\u100f\7\u0323\2\2\u100e\u1010\5\u0410\u0209"+
		"\2\u100f\u100e\3\2\2\2\u100f\u1010\3\2\2\2\u1010\u0159\3\2\2\2\u1011\u1012"+
		"\7\5\2\2\u1012\u1013\7\u01f2\2\2\u1013\u1014\7\u0303\2\2\u1014\u1015\7"+
		"\u00ea\2\2\u1015\u1016\5\u0410\u0209\2\u1016\u101a\7\u00bd\2\2\u1017\u1018"+
		"\7\u00b5\2\2\u1018\u1019\7\u0338\2\2\u1019\u101b\5\u0410\u0209\2\u101a"+
		"\u1017\3\2\2\2\u101a\u101b\3\2\2\2\u101b\u1020\3\2\2\2\u101c\u101d\7\u034c"+
		"\2\2\u101d\u101e\7\u026d\2\2\u101e\u101f\7\u0338\2\2\u101f\u1021\t\t\2"+
		"\2\u1020\u101c\3\2\2\2\u1020\u1021\3\2\2\2\u1021\u015b\3\2\2\2\u1022\u1023"+
		"\7#\2\2\u1023\u1024\7\u01f2\2\2\u1024\u1025\7\u0303\2\2\u1025\u1026\7"+
		"\u00ea\2\2\u1026\u1029\5\u0410\u0209\2\u1027\u1028\7\n\2\2\u1028\u102a"+
		"\5\u0410\u0209\2\u1029\u1027\3\2\2\2\u1029\u102a\3\2\2\2\u102a\u102b\3"+
		"\2\2\2\u102b\u102c\7\u00a8\2\2\u102c\u102d\7\u0303\2\2\u102d\u102e\7\u0334"+
		"\2\2\u102e\u1032\7\u00bd\2\2\u102f\u1030\7\u00b5\2\2\u1030\u1031\7\u0338"+
		"\2\2\u1031\u1033\5\u0410\u0209\2\u1032\u102f\3\2\2\2\u1032\u1033\3\2\2"+
		"\2\u1033\u1038\3\2\2\2\u1034\u1035\7\u034c\2\2\u1035\u1036\7\u026d\2\2"+
		"\u1036\u1037\7\u0338\2\2\u1037\u1039\t\t\2\2\u1038\u1034\3\2\2\2\u1038"+
		"\u1039\3\2\2\2\u1039\u015d\3\2\2\2\u103a\u103b\7#\2\2\u103b\u103c\7\u01fd"+
		"\2\2\u103c\u103d\7\u01d0\2\2\u103d\u10a4\5\u0410\u0209\2\u103e\u103f\7"+
		"\u00bd\2\2\u103f\u1046\7\u034a\2\2\u1040\u1042\7\u034c\2\2\u1041\u1040"+
		"\3\2\2\2\u1041\u1042\3\2\2\2\u1042\u1043\3\2\2\2\u1043\u1044\7\u019b\2"+
		"\2\u1044\u1045\7\u0338\2\2\u1045\u1047\7\u0332\2\2\u1046\u1041\3\2\2\2"+
		"\u1046\u1047\3\2\2\2\u1047\u104e\3\2\2\2\u1048\u104a\7\u034c\2\2\u1049"+
		"\u1048\3\2\2\2\u1049\u104a\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u104c\7\u018a"+
		"\2\2\u104c\u104d\7\u0338\2\2\u104d\u104f\7\u0332\2\2\u104e\u1049\3\2\2"+
		"\2\u104e\u104f\3\2\2\2\u104f\u1056\3\2\2\2\u1050\u1052\7\u034c\2\2\u1051"+
		"\u1050\3\2\2\2\u1051\u1052\3\2\2\2\u1052\u1053\3\2\2\2\u1053\u1054\7\u00f0"+
		"\2\2\u1054\u1055\7\u0338\2\2\u1055\u1057\7\u0332\2\2\u1056\u1051\3\2\2"+
		"\2\u1056\u1057\3\2\2\2\u1057\u1081\3\2\2\2\u1058\u105a\7\u034c\2\2\u1059"+
		"\u1058\3\2\2\2\u1059\u105a\3\2\2\2\u105a\u105b\3\2\2\2\u105b\u105c\7\u00ca"+
		"\2\2\u105c\u105d\7\u0300\2\2\u105d\u107f\7\u0338\2\2\u105e\u1080\7\u00db"+
		"\2\2\u105f\u1069\7\u034a\2\2\u1060\u1062\7\u034c\2\2\u1061\u1060\3\2\2"+
		"\2\u1061\u1062\3\2\2\2\u1062\u1067\3\2\2\2\u1063\u1068\7\u0332\2\2\u1064"+
		"\u1065\7\u0332\2\2\u1065\u1066\7\u00a8\2\2\u1066\u1068\7\u0332\2\2\u1067"+
		"\u1063\3\2\2\2\u1067\u1064\3\2\2\2\u1068\u106a\3\2\2\2\u1069\u1061\3\2"+
		"\2\2\u106a\u106b\3\2\2\2\u106b\u1069\3\2\2\2\u106b\u106c\3\2\2\2\u106c"+
		"\u106d\3\2\2\2\u106d\u1080\7\u034b\2\2\u106e\u106f\7\u01b6\2\2\u106f\u1070"+
		"\7\u0338\2\2\u1070\u107a\7\u034a\2\2\u1071\u1073\7\u034c\2\2\u1072\u1071"+
		"\3\2\2\2\u1072\u1073\3\2\2\2\u1073\u1078\3\2\2\2\u1074\u1079\7\u0332\2"+
		"\2\u1075\u1076\7\u0332\2\2\u1076\u1077\7\u00a8\2\2\u1077\u1079\7\u0332"+
		"\2\2\u1078\u1074\3\2\2\2\u1078\u1075\3\2\2\2\u1079\u107b\3\2\2\2\u107a"+
		"\u1072\3\2\2\2\u107b\u107c\3\2\2\2\u107c\u107a\3\2\2\2\u107c\u107d\3\2"+
		"\2\2\u107d\u107e\3\2\2\2\u107e\u1080\7\u034b\2\2\u107f\u105e\3\2\2\2\u107f"+
		"\u105f\3\2\2\2\u107f\u106e\3\2\2\2\u1080\u1082\3\2\2\2\u1081\u1059\3\2"+
		"\2\2\u1081\u1082\3\2\2\2\u1082\u1089\3\2\2\2\u1083\u1085\7\u034c\2\2\u1084"+
		"\u1083\3\2\2\2\u1084\u1085\3\2\2\2\u1085\u1086\3\2\2\2\u1086\u1087\7\u019d"+
		"\2\2\u1087\u1088\7\u0338\2\2\u1088\u108a\7\u0332\2\2\u1089\u1084\3\2\2"+
		"\2\u1089\u108a\3\2\2\2\u108a\u1091\3\2\2\2\u108b\u108d\7\u034c\2\2\u108c"+
		"\u108b\3\2\2\2\u108c\u108d\3\2\2\2\u108d\u108e\3\2\2\2\u108e\u108f\7\u018e"+
		"\2\2\u108f\u1090\7\u0338\2\2\u1090\u1092\7\u0332\2\2\u1091\u108c\3\2\2"+
		"\2\u1091\u1092\3\2\2\2\u1092\u1099\3\2\2\2\u1093\u1095\7\u034c\2\2\u1094"+
		"\u1093\3\2\2\2\u1094\u1095\3\2\2\2\u1095\u1096\3\2\2\2\u1096\u1097\7\u019c"+
		"\2\2\u1097\u1098\7\u0338\2\2\u1098\u109a\7\u0332\2\2\u1099\u1094\3\2\2"+
		"\2\u1099\u109a\3\2\2\2\u109a\u10a1\3\2\2\2\u109b\u109d\7\u034c\2\2\u109c"+
		"\u109b\3\2\2\2\u109c\u109d\3\2\2\2\u109d\u109e\3\2\2\2\u109e\u109f\7\u018d"+
		"\2\2\u109f\u10a0\7\u0338\2\2\u10a0\u10a2\7\u0332\2\2\u10a1\u109c\3\2\2"+
		"\2\u10a1\u10a2\3\2\2\2\u10a2\u10a3\3\2\2\2\u10a3\u10a5\7\u034b\2\2\u10a4"+
		"\u103e\3\2\2\2\u10a4\u10a5\3\2\2\2\u10a5\u015f\3\2\2\2\u10a6\u10a7\7\5"+
		"\2\2\u10a7\u10a8\7\u01fd\2\2\u10a8\u10be\7\u02a8\2\2\u10a9\u10bf\t$\2"+
		"\2\u10aa\u10ab\7\u00bd\2\2\u10ab\u10ac\7\u034a\2\2\u10ac\u10ad\7\u0283"+
		"\2\2\u10ad\u10b3\7\u0338\2\2\u10ae\u10af\5\u0410\u0209\2\u10af\u10b0\7"+
		"\u0345\2\2\u10b0\u10b1\5\u0410\u0209\2\u10b1\u10b4\3\2\2\2\u10b2\u10b4"+
		"\7k\2\2\u10b3\u10ae\3\2\2\2\u10b3\u10b2\3\2\2\2\u10b4\u10b5\3\2\2\2\u10b5"+
		"\u10bf\7\u034b\2\2\u10b6\u10b7\7\u02f2\2\2\u10b7\u10bf\7\u00a2\2\2\u10b8"+
		"\u10b9\7\u00bd\2\2\u10b9\u10ba\7\u034a\2\2\u10ba\u10bb\7\u02c6\2\2\u10bb"+
		"\u10bc\7\u0338\2\2\u10bc\u10bd\7\u0332\2\2\u10bd\u10bf\7\u034b\2\2\u10be"+
		"\u10a9\3\2\2\2\u10be\u10aa\3\2\2\2\u10be\u10b6\3\2\2\2\u10be\u10b8\3\2"+
		"\2\2\u10bf\u0161\3\2\2\2\u10c0\u10c1\7\5\2\2\u10c1\u10c2\7\u02f8\2\2\u10c2"+
		"\u10ca\5\u0410\u0209\2\u10c3\u10c4\t\25\2\2\u10c4\u10c5\7\u02c9\2\2\u10c5"+
		"\u10cb\5\u0410\u0209\2\u10c6\u10c7\7\u00bd\2\2\u10c7\u10c8\7\u01a5\2\2"+
		"\u10c8\u10c9\7\u0338\2\2\u10c9\u10cb\5\u0410\u0209\2\u10ca\u10c3\3\2\2"+
		"\2\u10ca\u10c6\3\2\2\2\u10cb\u0163\3\2\2\2\u10cc\u10cd\7#\2\2\u10cd\u10ce"+
		"\7\u02f8\2\2\u10ce\u10d1\5\u0410\u0209\2\u10cf\u10d0\7\n\2\2\u10d0\u10d2"+
		"\5\u0410\u0209\2\u10d1\u10cf\3\2\2\2\u10d1\u10d2\3\2\2\2\u10d2\u0165\3"+
		"\2\2\2\u10d3\u10d4\7#\2\2\u10d4\u10d5\7\u0203\2\2\u10d5\u10d8\5\u0410"+
		"\u0209\2\u10d6\u10d7\7\n\2\2\u10d7\u10d9\5\u0410\u0209\2\u10d8\u10d6\3"+
		"\2\2\2\u10d8\u10d9\3\2\2\2\u10d9\u10da\3\2\2\2\u10da\u10e1\7\u00bd\2\2"+
		"\u10db\u10dd\7\u034c\2\2\u10dc\u10db\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd"+
		"\u10de\3\2\2\2\u10de\u10df\7\u0305\2\2\u10df\u10e0\7\u0338\2\2\u10e0\u10e2"+
		"\7\u0334\2\2\u10e1\u10dc\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e9\3\2\2"+
		"\2\u10e3\u10e5\7\u034c\2\2\u10e4\u10e3\3\2\2\2\u10e4\u10e5\3\2\2\2\u10e5"+
		"\u10e6\3\2\2\2\u10e6\u10e7\7\u00ed\2\2\u10e7\u10e8\7\u0338\2\2\u10e8\u10ea"+
		"\7\u0334\2\2\u10e9\u10e4\3\2\2\2\u10e9\u10ea\3\2\2\2\u10ea\u10f1\3\2\2"+
		"\2\u10eb\u10ed\7\u034c\2\2\u10ec\u10eb\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed"+
		"\u10ee\3\2\2\2\u10ee\u10ef\7\u02b8\2\2\u10ef\u10f0\7\u0338\2\2\u10f0\u10f2"+
		"\7\u0332\2\2\u10f1\u10ec\3\2\2\2\u10f1\u10f2\3\2\2\2\u10f2\u10f4\3\2\2"+
		"\2\u10f3\u10f5\7\u034c\2\2\u10f4\u10f3\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5"+
		"\u10f6\3\2\2\2\u10f6\u10f7\7\u00c6\2\2\u10f7\u10f8\7\u0338\2\2\u10f8\u10fd"+
		"\7\u0334\2\2\u10f9\u10fa\7\u034c\2\2\u10fa\u10fb\7\u019f\2\2\u10fb\u10fc"+
		"\7\u0338\2\2\u10fc\u10fe\7\u0334\2\2\u10fd\u10f9\3\2\2\2\u10fd\u10fe\3"+
		"\2\2\2\u10fe\u0167\3\2\2\2\u10ff\u1100\7#\2\2\u1100\u1104\7\u0095\2\2"+
		"\u1101\u1102\5\u0410\u0209\2\u1102\u1103\7\u0345\2\2\u1103\u1105\3\2\2"+
		"\2\u1104\u1101\3\2\2\2\u1104\u1105\3\2\2\2\u1105\u1106\3\2\2\2\u1106\u1107"+
		"\5\u0410\u0209\2\u1107\u1108\7\b\2\2\u1108\u1109\5\u0312\u018a\2\u1109"+
		"\u0169\3\2\2\2\u110a\u110b\7\5\2\2\u110b\u110c\7\u0097\2\2\u110c\u110d"+
		"\5\u0410\u0209\2\u110d\u1117\7\u031e\2\2\u110e\u1114\7\u01b9\2\2\u110f"+
		"\u1114\7\u024c\2\2\u1110\u1111\7\u0261\2\2\u1111\u1112\7\u0097\2\2\u1112"+
		"\u1114\7\u00fa\2\2\u1113\u110e\3\2\2\2\u1113\u110f\3\2\2\2\u1113\u1110"+
		"\3\2\2\2\u1114\u1115\3\2\2\2\u1115\u1116\7\u034e\2\2\u1116\u1118\7\u034e"+
		"\2\2\u1117\u1113\3\2\2\2\u1117\u1118\3\2\2\2\u1118\u1119\3\2\2\2\u1119"+
		"\u111c\5\u0410\u0209\2\u111a\u111b\7\u0345\2\2\u111b\u111d\5\u0410\u0209"+
		"\2\u111c\u111a\3\2\2\2\u111c\u111d\3\2\2\2\u111d\u016b\3\2\2\2\u111e\u111f"+
		"\7#\2\2\u111f\u1127\7\u0097\2\2\u1120\u1128\5\u0410\u0209\2\u1121\u1122"+
		"\7\n\2\2\u1122\u1128\5\u0410\u0209\2\u1123\u1124\5\u0410\u0209\2\u1124"+
		"\u1125\7\n\2\2\u1125\u1126\5\u0410\u0209\2\u1126\u1128\3\2\2\2\u1127\u1120"+
		"\3\2\2\2\u1127\u1121\3\2\2\2\u1127\u1123\3\2\2\2\u1128\u1145\3\2\2\2\u1129"+
		"\u1144\5\u01fa\u00fe\2\u112a\u1144\5\u0200\u0101\2\u112b\u112c\t%\2\2"+
		"\u112c\u112d\t&\2\2\u112d\u1131\7p\2\2\u112e\u112f\7\u0097\2\2\u112f\u1130"+
		"\7\u034e\2\2\u1130\u1132\7\u034e\2\2\u1131\u112e\3\2\2\2\u1131\u1132\3"+
		"\2\2\2\u1132\u1133\3\2\2\2\u1133\u1134\5\u0410\u0209\2\u1134\u1135\7\u00a8"+
		"\2\2\u1135\u1136\5\u0410\u0209\2\u1136\u1144\3\2\2\2\u1137\u1138\7\u0090"+
		"\2\2\u1138\u1139\t&\2\2\u1139\u113d\7p\2\2\u113a\u113b\7\u0097\2\2\u113b"+
		"\u113c\7\u034e\2\2\u113c\u113e\7\u034e\2\2\u113d\u113a\3\2\2\2\u113d\u113e"+
		"\3\2\2\2\u113e\u113f\3\2\2\2\u113f\u1140\5\u0410\u0209\2\u1140\u1141\7"+
		"K\2\2\u1141\u1142\5\u0410\u0209\2\u1142\u1144\3\2\2\2\u1143\u1129\3\2"+
		"\2\2\u1143\u112a\3\2\2\2\u1143\u112b\3\2\2\2\u1143\u1137\3\2\2\2\u1144"+
		"\u1147\3\2\2\2\u1145\u1143\3\2\2\2\u1145\u1146\3\2\2\2\u1146\u016d\3\2"+
		"\2\2\u1147\u1145\3\2\2\2\u1148\u1149\7#\2\2\u1149\u114a\7\u0097\2\2\u114a"+
		"\u114d\5\u0410\u0209\2\u114b\u114c\7\n\2\2\u114c\u114e\5\u0410\u0209\2"+
		"\u114d\u114b\3\2\2\2\u114d\u114e\3\2\2\2\u114e\u016f\3\2\2\2\u114f\u1150"+
		"\7\5\2\2\u1150\u1151\7\u0097\2\2\u1151\u1152\5\u0410\u0209\2\u1152\u1156"+
		"\7\u031e\2\2\u1153\u1154\7\u01b9\2\2\u1154\u1155\7\u034e\2\2\u1155\u1157"+
		"\7\u034e\2\2\u1156\u1153\3\2\2\2\u1156\u1157\3\2\2\2\u1157\u1158\3\2\2"+
		"\2\u1158\u115b\5\u0410\u0209\2\u1159\u115a\7\u0345\2\2\u115a\u115c\7\u0333"+
		"\2\2\u115b\u1159\3\2\2\2\u115b\u115c\3\2\2\2\u115c\u0171\3\2\2\2\u115d"+
		"\u115e\7#\2\2\u115e\u115f\7\u020d\2\2\u115f\u1160\7\u01db\2\2\u1160\u1161"+
		"\7\u017b\2\2\u1161\u1169\5\u0410\u0209\2\u1162\u1166\7K\2\2\u1163\u1164"+
		"\5\u0410\u0209\2\u1164\u1165\7\u0345\2\2\u1165\u1167\3\2\2\2\u1166\u1163"+
		"\3\2\2\2\u1166\u1167\3\2\2\2\u1167\u1168\3\2\2\2\u1168\u116a\5\u0410\u0209"+
		"\2\u1169\u1162\3\2\2\2\u1169\u116a\3\2\2\2\u116a\u116d\3\2\2\2\u116b\u116c"+
		"\7\n\2\2\u116c\u116e\5\u0410\u0209\2\u116d\u116b\3\2\2\2\u116d\u116e\3"+
		"\2\2\2\u116e\u0173\3\2\2\2\u116f\u1170\7#\2\2\u1170\u1171\7\u0213\2\2"+
		"\u1171\u1175\7\u02e7\2\2\u1172\u1173\5\u0410\u0209\2\u1173\u1174\7\u0345"+
		"\2\2\u1174\u1176\3\2\2\2\u1175\u1172\3\2\2\2\u1175\u1176\3\2\2\2\u1176"+
		"\u1177\3\2\2\2\u1177\u11a0\5\u0410\u0209\2\u1178\u117a\7\u034c\2\2\u1179"+
		"\u1178\3\2\2\2\u1179\u117a\3\2\2\2\u117a\u117b\3\2\2\2\u117b\u117d\7\3"+
		"\2\2\u117c\u117e\t\'\2\2\u117d\u117c\3\2\2\2\u117d\u117e\3\2\2\2\u117e"+
		"\u117f\3\2\2\2\u117f\u1180\7\u02e8\2\2\u1180\u1181\5\u0410\u0209\2\u1181"+
		"\u1182\7\u0345\2\2\u1182\u1183\5\u0410\u0209\2\u1183\u1188\7\u034a\2\2"+
		"\u1184\u1186\7\u034c\2\2\u1185\u1184\3\2\2\2\u1185\u1186\3\2\2\2\u1186"+
		"\u1187\3\2\2\2\u1187\u1189\5\u0410\u0209\2\u1188\u1185\3\2\2\2\u1189\u118a"+
		"\3\2\2\2\u118a\u1188\3\2\2\2\u118a\u118b\3\2\2\2\u118b\u118c\3\2\2\2\u118c"+
		"\u118d\7\u034b\2\2\u118d\u118e\7p\2\2\u118e\u118f\5\u0410\u0209\2\u118f"+
		"\u1190\7\u0345\2\2\u1190\u119d\5\u0410\u0209\2\u1191\u1193\7\u034c\2\2"+
		"\u1192\u1191\3\2\2\2\u1192\u1193\3\2\2\2\u1193\u1194\3\2\2\2\u1194\u1195"+
		"\7\u00cb\2\2\u1195\u119c\t(\2\2\u1196\u1198\7\u034c\2\2\u1197\u1196\3"+
		"\2\2\2\u1197\u1198\3\2\2\2\u1198\u1199\3\2\2\2\u1199\u119a\7\u0276\2\2"+
		"\u119a\u119c\t)\2\2\u119b\u1192\3\2\2\2\u119b\u1197\3\2\2\2\u119c\u119f"+
		"\3\2\2\2\u119d\u119b\3\2\2\2\u119d\u119e\3\2\2\2\u119e\u11a1\3\2\2\2\u119f"+
		"\u119d\3\2\2\2\u11a0\u1179\3\2\2\2\u11a1\u11a2\3\2\2\2\u11a2\u11a0\3\2"+
		"\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11ae\3\2\2\2\u11a4\u11a5\7\u00bd\2\2\u11a5"+
		"\u11a6\7\u034a\2\2\u11a6\u11a7\7\u0311\2\2\u11a7\u11a8\7\u0338\2\2\u11a8"+
		"\u11ab\t\t\2\2\u11a9\u11aa\7\u0209\2\2\u11aa\u11ac\t\t\2\2\u11ab\u11a9"+
		"\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac\u11ad\3\2\2\2\u11ad\u11af\7\u034b\2"+
		"\2\u11ae\u11a4\3\2\2\2\u11ae\u11af\3\2\2\2\u11af\u11b3\3\2\2\2\u11b0\u11b1"+
		"\7j\2\2\u11b1\u11b2\7G\2\2\u11b2\u11b4\7\u008b\2\2\u11b3\u11b0\3\2\2\2"+
		"\u11b3\u11b4\3\2\2\2\u11b4\u0175\3\2\2\2\u11b5\u11b6\7\5\2\2\u11b6\u11ba"+
		"\7\u021a\2\2\u11b7\u11b8\5\u0410\u0209\2\u11b8\u11b9\7\u0345\2\2\u11b9"+
		"\u11bb\3\2\2\2\u11ba\u11b7\3\2\2\2\u11ba\u11bb\3\2\2\2\u11bb\u11bc\3\2"+
		"\2\2\u11bc\u11c2\5\u0410\u0209\2\u11bd\u11c0\7\u02f3\2\2\u11be\u11bf\7"+
		"\u00bd\2\2\u11bf\u11c1\7\u0332\2\2\u11c0\u11be\3\2\2\2\u11c0\u11c1\3\2"+
		"\2\2\u11c1\u11c3\3\2\2\2\u11c2\u11bd\3\2\2\2\u11c2\u11c3\3\2\2\2\u11c3"+
		"\u11c7\3\2\2\2\u11c4\u11c5\7\u02ae\2\2\u11c5\u11c6\7\22\2\2\u11c6\u11c8"+
		"\7\u0332\2\2\u11c7\u11c4\3\2\2\2\u11c7\u11c8\3\2\2\2\u11c8\u11cd\3\2\2"+
		"\2\u11c9\u11ca\7\u02cd\2\2\u11ca\u11ce\7\u0332\2\2\u11cb\u11cc\7\u01ab"+
		"\2\2\u11cc\u11ce\7\u02cd\2\2\u11cd\u11c9\3\2\2\2\u11cd\u11cb\3\2\2\2\u11cd"+
		"\u11ce\3\2\2\2\u11ce\u11d3\3\2\2\2\u11cf\u11d0\7\u02c2\2\2\u11d0\u11d4"+
		"\7\u0332\2\2\u11d1\u11d2\7\u01ab\2\2\u11d2\u11d4\7\u02c2\2\2\u11d3\u11cf"+
		"\3\2\2\2\u11d3\u11d1\3\2\2\2\u11d3\u11d4\3\2\2\2\u11d4\u11d8\3\2\2\2\u11d5"+
		"\u11d9\7\u028e\2\2\u11d6\u11d7\7\u01ab\2\2\u11d7\u11d9\7\u028e\2\2\u11d8"+
		"\u11d5\3\2\2\2\u11d8\u11d6\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11de\3\2"+
		"\2\2\u11da\u11db\7\u027c\2\2\u11db\u11df\7\u0332\2\2\u11dc\u11dd\7\u01ab"+
		"\2\2\u11dd\u11df\7\u027c\2\2\u11de\u11da\3\2\2\2\u11de\u11dc\3\2\2\2\u11de"+
		"\u11df\3\2\2\2\u11df\u0177\3\2\2\2\u11e0\u11e1\7#\2\2\u11e1\u11e5\7\u021a"+
		"\2\2\u11e2\u11e3\5\u0410\u0209\2\u11e3\u11e4\7\u0345\2\2\u11e4\u11e6\3"+
		"\2\2\2\u11e5\u11e2\3\2\2\2\u11e5\u11e6\3\2\2\2\u11e6\u11e7\3\2\2\2\u11e7"+
		"\u11ea\5\u0410\u0209\2\u11e8\u11e9\7\b\2\2\u11e9\u11eb\5\u0406\u0204\2"+
		"\u11ea\u11e8\3\2\2\2\u11ea\u11eb\3\2\2\2\u11eb\u11ef\3\2\2\2\u11ec\u11ed"+
		"\7\u0313\2\2\u11ed\u11ee\7\u00bd\2\2\u11ee\u11f0\7\u0332\2\2\u11ef\u11ec"+
		"\3\2\2\2\u11ef\u11f0\3\2\2\2\u11f0\u11f7\3\2\2\2\u11f1\u11f2\7\u02ae\2"+
		"\2\u11f2\u11f4\7\22\2\2\u11f3\u11f5\7\u0353\2\2\u11f4\u11f3\3\2\2\2\u11f4"+
		"\u11f5\3\2\2\2\u11f5\u11f6\3\2\2\2\u11f6\u11f8\7\u0332\2\2\u11f7\u11f1"+
		"\3\2\2\2\u11f7\u11f8\3\2\2\2\u11f8\u11ff\3\2\2\2\u11f9\u11fb\7\u02cd\2"+
		"\2\u11fa\u11fc\7\u0332\2\2\u11fb\u11fa\3\2\2\2\u11fb\u11fc\3\2\2\2\u11fc"+
		"\u1200\3\2\2\2\u11fd\u11fe\7\u01ab\2\2\u11fe\u1200\7\u02cd\2\2\u11ff\u11f9"+
		"\3\2\2\2\u11ff\u11fd\3\2\2\2\u11ff\u1200\3\2\2\2\u1200\u1207\3\2\2\2\u1201"+
		"\u1203\7\u02c2\2\2\u1202\u1204\7\u0332\2\2\u1203\u1202\3\2\2\2\u1203\u1204"+
		"\3\2\2\2\u1204\u1208\3\2\2\2\u1205\u1206\7\u01ab\2\2\u1206\u1208\7\u02c2"+
		"\2\2\u1207\u1201\3\2\2\2\u1207\u1205\3\2\2\2\u1207\u1208\3\2\2\2\u1208"+
		"\u120c\3\2\2\2\u1209\u120d\7\u028e\2\2\u120a\u120b\7\u01ab\2\2\u120b\u120d"+
		"\7\u028e\2\2\u120c\u1209\3\2\2\2\u120c\u120a\3\2\2\2\u120c\u120d\3\2\2"+
		"\2\u120d\u1214\3\2\2\2\u120e\u1210\7\u027c\2\2\u120f\u1211\7\u0332\2\2"+
		"\u1210\u120f\3\2\2\2\u1210\u1211\3\2\2\2\u1211\u1215\3\2\2\2\u1212\u1213"+
		"\7\u01ab\2\2\u1213\u1215\7\u027c\2\2\u1214\u120e\3\2\2\2\u1214\u1212\3"+
		"\2\2\2\u1214\u1215\3\2\2\2\u1215\u0179\3\2\2\2\u1216\u1217\7\5\2\2\u1217"+
		"\u1218\7\u0302\2\2\u1218\u1219\7\u00d9\2\2\u1219\u129d\5\u0410\u0209\2"+
		"\u121a\u1247\7\u00a8\2\2\u121b\u121c\7E\2\2\u121c\u1241\7\u034a\2\2\u121d"+
		"\u121f\7\u034c\2\2\u121e\u121d\3\2\2\2\u121e\u121f\3\2\2\2\u121f\u1220"+
		"\3\2\2\2\u1220\u1221\7\u0144\2\2\u1221\u1222\7\u0338\2\2\u1222\u1240\7"+
		"\u0334\2\2\u1223\u1225\7\u034c\2\2\u1224\u1223\3\2\2\2\u1224\u1225\3\2"+
		"\2\2\u1225\u1226\3\2\2\2\u1226\u1227\7\u0194\2\2\u1227\u122b\7\u0338\2"+
		"\2\u1228\u1229\7\u0332\2\2\u1229\u122c\t*\2\2\u122a\u122c\7\u0251\2\2"+
		"\u122b\u1228\3\2\2\2\u122b\u122a\3\2\2\2\u122c\u1240\3\2\2\2\u122d\u122f"+
		"\7\u034c\2\2\u122e\u122d\3\2\2\2\u122e\u122f\3\2\2\2\u122f\u1230\3\2\2"+
		"\2\u1230\u1231\7\u0191\2\2\u1231\u1232\7\u0338\2\2\u1232\u1240\t+\2\2"+
		"\u1233\u1235\7\u034c\2\2\u1234\u1233\3\2\2\2\u1234\u1235\3\2\2\2\u1235"+
		"\u1236\3\2\2\2\u1236\u1237\7\u018c\2\2\u1237\u1238\7\u0338\2\2\u1238\u1240"+
		"\7\u0332\2\2\u1239\u123b\7\u034c\2\2\u123a\u1239\3\2\2\2\u123a\u123b\3"+
		"\2\2\2\u123b\u123c\3\2\2\2\u123c\u123d\7\u01fc\2\2\u123d\u123e\7\u0338"+
		"\2\2\u123e\u1240\t\t\2\2\u123f\u121e\3\2\2\2\u123f\u1224\3\2\2\2\u123f"+
		"\u122e\3\2\2\2\u123f\u1234\3\2\2\2\u123f\u123a\3\2\2\2\u1240\u1243\3\2"+
		"\2\2\u1241\u123f\3\2\2\2\u1241\u1242\3\2\2\2\u1242\u1244\3\2\2\2\u1243"+
		"\u1241\3\2\2\2\u1244\u1248\7\u034b\2\2\u1245\u1248\7\u00d5\2\2\u1246\u1248"+
		"\7\u0214\2\2\u1247\u121b\3\2\2\2\u1247\u1245\3\2\2\2\u1247\u1246\3\2\2"+
		"\2\u1248\u124a\3\2\2\2\u1249\u121a\3\2\2\2\u1249\u124a\3\2\2\2\u124a\u1265"+
		"\3\2\2\2\u124b\u124c\7\u00bd\2\2\u124c\u1261\7\u034a\2\2\u124d\u124f\7"+
		"\u034c\2\2\u124e\u124d\3\2\2\2\u124e\u124f\3\2\2\2\u124f\u1250\3\2\2\2"+
		"\u1250\u1251\7\u01e0\2\2\u1251\u1252\7\u0338\2\2\u1252\u1260\7\u0332\2"+
		"\2\u1253\u1255\7\u034c\2\2\u1254\u1253\3\2\2\2\u1254\u1255\3\2\2\2\u1255"+
		"\u1256\3\2\2\2\u1256\u1257\7\u02dc\2\2\u1257\u1258\7\u0338\2\2\u1258\u1260"+
		"\t,\2\2\u1259\u125b\7\u034c\2\2\u125a\u1259\3\2\2\2\u125a\u125b\3\2\2"+
		"\2\u125b\u125c\3\2\2\2\u125c\u125d\7\u0311\2\2\u125d\u125e\7\u0338\2\2"+
		"\u125e\u1260\t\t\2\2\u125f\u124e\3\2\2\2\u125f\u1254\3\2\2\2\u125f\u125a"+
		"\3\2\2\2\u1260\u1263\3\2\2\2\u1261\u125f\3\2\2\2\u1261\u1262\3\2\2\2\u1262"+
		"\u1264\3\2\2\2\u1263\u1261\3\2\2\2\u1264\u1266\7\u034b\2\2\u1265\u124b"+
		"\3\2\2\2\u1265\u1266\3\2\2\2\u1266\u1295\3\2\2\2\u1267\u1293\7\u00bb\2"+
		"\2\u1268\u126a\7\u034c\2\2\u1269\u1268\3\2\2\2\u1269\u126a\3\2\2\2\u126a"+
		"\u126c\3\2\2\2\u126b\u126d\7j\2\2\u126c\u126b\3\2\2\2\u126c\u126d\3\2"+
		"\2\2\u126d\u126e\3\2\2\2\u126e\u127a\5\u0410\u0209\2\u126f\u127b\7\u0338"+
		"\2\2\u1270\u1271\7\u033a\2\2\u1271\u127b\7\u0339\2\2\u1272\u1273\7\u033b"+
		"\2\2\u1273\u127b\7\u0338\2\2\u1274\u127b\7\u0339\2\2\u1275\u1276\7\u0339"+
		"\2\2\u1276\u127b\7\u0338\2\2\u1277\u127b\7\u033a\2\2\u1278\u1279\7\u033a"+
		"\2\2\u1279\u127b\7\u0338\2\2\u127a\u126f\3\2\2\2\u127a\u1270\3\2\2\2\u127a"+
		"\u1272\3\2\2\2\u127a\u1274\3\2\2\2\u127a\u1275\3\2\2\2\u127a\u1277\3\2"+
		"\2\2\u127a\u1278\3\2\2\2\u127b\u127c\3\2\2\2\u127c\u127d\t\30\2\2\u127d"+
		"\u1294\3\2\2\2\u127e\u1280\7\u034c\2\2\u127f\u127e\3\2\2\2\u127f\u1280"+
		"\3\2\2\2\u1280\u1281\3\2\2\2\u1281\u1283\t\35\2\2\u1282\u1284\7j\2\2\u1283"+
		"\u1282\3\2\2\2\u1283\u1284\3\2\2\2\u1284\u1290\3\2\2\2\u1285\u1291\7\u0338"+
		"\2\2\u1286\u1287\7\u033a\2\2\u1287\u1291\7\u0339\2\2\u1288\u1289\7\u033b"+
		"\2\2\u1289\u1291\7\u0338\2\2\u128a\u1291\7\u0339\2\2\u128b\u128c\7\u0339"+
		"\2\2\u128c\u1291\7\u0338\2\2\u128d\u1291\7\u033a\2\2\u128e\u128f\7\u033a"+
		"\2\2\u128f\u1291\7\u0338\2\2\u1290\u1285\3\2\2\2\u1290\u1286\3\2\2\2\u1290"+
		"\u1288\3\2\2\2\u1290\u128a\3\2\2\2\u1290\u128b\3\2\2\2\u1290\u128d\3\2"+
		"\2\2\u1290\u128e\3\2\2\2\u1291\u1292\3\2\2\2\u1292\u1294\t\30\2\2\u1293"+
		"\u1269\3\2\2\2\u1293\u127f\3\2\2\2\u1294\u1296\3\2\2\2\u1295\u1267\3\2"+
		"\2\2\u1295\u1296\3\2\2\2\u1296\u129e\3\2\2\2\u1297\u1298\7\u01f4\2\2\u1298"+
		"\u129e\7\u00bb\2\2\u1299\u129a\7\u01a2\2\2\u129a\u129b\7\u01a5\2\2\u129b"+
		"\u129c\7\u0338\2\2\u129c\u129e\5\u0410\u0209\2\u129d\u1249\3\2\2\2\u129d"+
		"\u1297\3\2\2\2\u129d\u1299\3\2\2\2\u129e\u017b\3\2\2\2\u129f\u12a0\7#"+
		"\2\2\u12a0\u12a1\7\u0302\2\2\u12a1\u12a2\7\u00d9\2\2\u12a2\u132c\5\u0410"+
		"\u0209\2\u12a3\u12d0\7\u00a8\2\2\u12a4\u12a5\7E\2\2\u12a5\u12ca\7\u034a"+
		"\2\2\u12a6\u12a8\7\u034c\2\2\u12a7\u12a6\3\2\2\2\u12a7\u12a8\3\2\2\2\u12a8"+
		"\u12a9\3\2\2\2\u12a9\u12aa\7\u0144\2\2\u12aa\u12ab\7\u0338\2\2\u12ab\u12c9"+
		"\7\u0334\2\2\u12ac\u12ae\7\u034c\2\2\u12ad\u12ac\3\2\2\2\u12ad\u12ae\3"+
		"\2\2\2\u12ae\u12af\3\2\2\2\u12af\u12b0\7\u0194\2\2\u12b0\u12b4\7\u0338"+
		"\2\2\u12b1\u12b2\7\u0332\2\2\u12b2\u12b5\t*\2\2\u12b3\u12b5\7\u0251\2"+
		"\2\u12b4\u12b1\3\2\2\2\u12b4\u12b3\3\2\2\2\u12b5\u12c9\3\2\2\2\u12b6\u12b8"+
		"\7\u034c\2\2\u12b7\u12b6\3\2\2\2\u12b7\u12b8\3\2\2\2\u12b8\u12b9\3\2\2"+
		"\2\u12b9\u12ba\7\u0191\2\2\u12ba\u12bb\7\u0338\2\2\u12bb\u12c9\t+\2\2"+
		"\u12bc\u12be\7\u034c\2\2\u12bd\u12bc\3\2\2\2\u12bd\u12be\3\2\2\2\u12be"+
		"\u12bf\3\2\2\2\u12bf\u12c0\7\u018c\2\2\u12c0\u12c1\7\u0338\2\2\u12c1\u12c9"+
		"\7\u0332\2\2\u12c2\u12c4\7\u034c\2\2\u12c3\u12c2\3\2\2\2\u12c3\u12c4\3"+
		"\2\2\2\u12c4\u12c5\3\2\2\2\u12c5\u12c6\7\u01fc\2\2\u12c6\u12c7\7\u0338"+
		"\2\2\u12c7\u12c9\t\t\2\2\u12c8\u12a7\3\2\2\2\u12c8\u12ad\3\2\2\2\u12c8"+
		"\u12b7\3\2\2\2\u12c8\u12bd\3\2\2\2\u12c8\u12c3\3\2\2\2\u12c9\u12cc\3\2"+
		"\2\2\u12ca\u12c8\3\2\2\2\u12ca\u12cb\3\2\2\2\u12cb\u12cd\3\2\2\2\u12cc"+
		"\u12ca\3\2\2\2\u12cd\u12d1\7\u034b\2\2\u12ce\u12d1\7\u00d5\2\2\u12cf\u12d1"+
		"\7\u0214\2\2\u12d0\u12a4\3\2\2\2\u12d0\u12ce\3\2\2\2\u12d0\u12cf\3\2\2"+
		"\2\u12d1\u12d3\3\2\2\2\u12d2\u12a3\3\2\2\2\u12d2\u12d3\3\2\2\2\u12d3\u12f4"+
		"\3\2\2\2\u12d4\u12d5\7\u00bd\2\2\u12d5\u12f0\7\u034a\2\2\u12d6\u12d8\7"+
		"\u034c\2\2\u12d7\u12d6\3\2\2\2\u12d7\u12d8\3\2\2\2\u12d8\u12d9\3\2\2\2"+
		"\u12d9\u12da\7\u01e0\2\2\u12da\u12db\7\u0338\2\2\u12db\u12ef\7\u0332\2"+
		"\2\u12dc\u12de\7\u034c\2\2\u12dd\u12dc\3\2\2\2\u12dd\u12de\3\2\2\2\u12de"+
		"\u12df\3\2\2\2\u12df\u12e0\7\u02dc\2\2\u12e0\u12e1\7\u0338\2\2\u12e1\u12ef"+
		"\t,\2\2\u12e2\u12e4\7\u034c\2\2\u12e3\u12e2\3\2\2\2\u12e3\u12e4\3\2\2"+
		"\2\u12e4\u12e5\3\2\2\2\u12e5\u12e6\7\u0311\2\2\u12e6\u12e7\7\u0338\2\2"+
		"\u12e7\u12ef\t\t\2\2\u12e8\u12ea\7\u034c\2\2\u12e9\u12e8\3\2\2\2\u12e9"+
		"\u12ea\3\2\2\2\u12ea\u12eb\3\2\2\2\u12eb\u12ec\7\u00da\2\2\u12ec\u12ed"+
		"\7\u0338\2\2\u12ed\u12ef\5\u0410\u0209\2\u12ee\u12d7\3\2\2\2\u12ee\u12dd"+
		"\3\2\2\2\u12ee\u12e3\3\2\2\2\u12ee\u12e9\3\2\2\2\u12ef\u12f2\3\2\2\2\u12f0"+
		"\u12ee\3\2\2\2\u12f0\u12f1\3\2\2\2\u12f1\u12f3\3\2\2\2\u12f2\u12f0\3\2"+
		"\2\2\u12f3\u12f5\7\u034b\2\2\u12f4\u12d4\3\2\2\2\u12f4\u12f5\3\2\2\2\u12f5"+
		"\u1324\3\2\2\2\u12f6\u1322\7\u00bb\2\2\u12f7\u12f9\7\u034c\2\2\u12f8\u12f7"+
		"\3\2\2\2\u12f8\u12f9\3\2\2\2\u12f9\u12fb\3\2\2\2\u12fa\u12fc\7j\2\2\u12fb"+
		"\u12fa\3\2\2\2\u12fb\u12fc\3\2\2\2\u12fc\u12fd\3\2\2\2\u12fd\u1309\5\u0410"+
		"\u0209\2\u12fe\u130a\7\u0338\2\2\u12ff\u1300\7\u033a\2\2\u1300\u130a\7"+
		"\u0339\2\2\u1301\u1302\7\u033b\2\2\u1302\u130a\7\u0338\2\2\u1303\u130a"+
		"\7\u0339\2\2\u1304\u1305\7\u0339\2\2\u1305\u130a\7\u0338\2\2\u1306\u130a"+
		"\7\u033a\2\2\u1307\u1308\7\u033a\2\2\u1308\u130a\7\u0338\2\2\u1309\u12fe"+
		"\3\2\2\2\u1309\u12ff\3\2\2\2\u1309\u1301\3\2\2\2\u1309\u1303\3\2\2\2\u1309"+
		"\u1304\3\2\2\2\u1309\u1306\3\2\2\2\u1309\u1307\3\2\2\2\u130a\u130b\3\2"+
		"\2\2\u130b\u130c\t\30\2\2\u130c\u1323\3\2\2\2\u130d\u130f\7\u034c\2\2"+
		"\u130e\u130d\3\2\2\2\u130e\u130f\3\2\2\2\u130f\u1310\3\2\2\2\u1310\u1312"+
		"\t\35\2\2\u1311\u1313\7j\2\2\u1312\u1311\3\2\2\2\u1312\u1313\3\2\2\2\u1313"+
		"\u131f\3\2\2\2\u1314\u1320\7\u0338\2\2\u1315\u1316\7\u033a\2\2\u1316\u1320"+
		"\7\u0339\2\2\u1317\u1318\7\u033b\2\2\u1318\u1320\7\u0338\2\2\u1319\u1320"+
		"\7\u0339\2\2\u131a\u131b\7\u0339\2\2\u131b\u1320\7\u0338\2\2\u131c\u1320"+
		"\7\u033a\2\2\u131d\u131e\7\u033a\2\2\u131e\u1320\7\u0338\2\2\u131f\u1314"+
		"\3\2\2\2\u131f\u1315\3\2\2\2\u131f\u1317\3\2\2\2\u131f\u1319\3\2\2\2\u131f"+
		"\u131a\3\2\2\2\u131f\u131c\3\2\2\2\u131f\u131d\3\2\2\2\u1320\u1321\3\2"+
		"\2\2\u1321\u1323\t\30\2\2\u1322\u12f8\3\2\2\2\u1322\u130e\3\2\2\2\u1323"+
		"\u1325\3\2\2\2\u1324\u12f6\3\2\2\2\u1324\u1325\3\2\2\2\u1325\u132d\3\2"+
		"\2\2\u1326\u1327\7\u01f4\2\2\u1327\u132d\7\u00bb\2\2\u1328\u1329\7\u01a2"+
		"\2\2\u1329\u132a\7\u01a5\2\2\u132a\u132b\7\u0338\2\2\u132b\u132d\5\u0410"+
		"\u0209\2\u132c\u12d2\3\2\2\2\u132c\u1326\3\2\2\2\u132c\u1328\3\2\2\2\u132d"+
		"\u017d\3\2\2\2\u132e\u132f\7\5\2\2\u132f\u1330\7\u0302\2\2\u1330\u1331"+
		"\7\u00d9\2\2\u1331\u1332\7\u030c\2\2\u1332\u1337\5\u0410\u0209\2\u1333"+
		"\u1334\7G\2\2\u1334\u1335\7\u0302\2\2\u1335\u1336\7\u00d9\2\2\u1336\u1338"+
		"\5\u0410\u0209\2\u1337\u1333\3\2\2\2\u1337\u1338\3\2\2\2\u1338\u1340\3"+
		"\2\2\2\u1339\u133a\t\25\2\2\u133a\u133b\7\u034a\2\2\u133b\u133c\5\u0410"+
		"\u0209\2\u133c\u133d\7\u034b\2\2\u133d\u133f\3\2\2\2\u133e\u1339\3\2\2"+
		"\2\u133f\u1342\3\2\2\2\u1340\u133e\3\2\2\2\u1340\u1341\3\2\2\2\u1341\u1349"+
		"\3\2\2\2\u1342\u1340\3\2\2\2\u1343\u1344\7\u00bd\2\2\u1344\u1345\7\u034a"+
		"\2\2\u1345\u1346\7\u0311\2\2\u1346\u1347\7\u0338\2\2\u1347\u1348\t\t\2"+
		"\2\u1348\u134a\7\u034b\2\2\u1349\u1343\3\2\2\2\u1349\u134a\3\2\2\2\u134a"+
		"\u017f\3\2\2\2\u134b\u134c\7#\2\2\u134c\u134d\7\u0302\2\2\u134d\u134e"+
		"\7\u00d9\2\2\u134e\u134f\7\u030c\2\2\u134f\u1354\5\u0410\u0209\2\u1350"+
		"\u1351\7G\2\2\u1351\u1352\7\u0302\2\2\u1352\u1353\7\u00d9\2\2\u1353\u1355"+
		"\5\u0410\u0209\2\u1354\u1350\3\2\2\2\u1354\u1355\3\2\2\2\u1355\u135d\3"+
		"\2\2\2\u1356\u1357\7\3\2\2\u1357\u1358\7\u034a\2\2\u1358\u1359\5\u0410"+
		"\u0209\2\u1359\u135a\7\u034b\2\2\u135a\u135c\3\2\2\2\u135b\u1356\3\2\2"+
		"\2\u135c\u135f\3\2\2\2\u135d\u135b\3\2\2\2\u135d\u135e\3\2\2\2\u135e\u1366"+
		"\3\2\2\2\u135f\u135d\3\2\2\2\u1360\u1361\7\u00bd\2\2\u1361\u1362\7\u034a"+
		"\2\2\u1362\u1363\7\u0311\2\2\u1363\u1364\7\u0338\2\2\u1364\u1365\t\t\2"+
		"\2\u1365\u1367\7\u034b\2\2\u1366\u1360\3\2\2\2\u1366\u1367\3\2\2\2\u1367"+
		"\u0181\3\2\2\2\u1368\u1369\7\5\2\2\u1369\u136a\7\u0302\2\2\u136a\u136b"+
		"\7\u0286\2\2\u136b\u13d5\7\u009e\2\2\u136c\u136d\7\u02e9\2\2\u136d\u1391"+
		"\7\u00ca\2\2\u136e\u136f\7\u0106\2\2\u136f\u137f\7\u0338\2\2\u1370\u1380"+
		"\7\u00db\2\2\u1371\u1373\7\u034c\2\2\u1372\u1371\3\2\2\2\u1372\u1373\3"+
		"\2\2\2\u1373\u1374\3\2\2\2\u1374\u137c\7\u0332\2\2\u1375\u1377\7\u034c"+
		"\2\2\u1376\u1375\3\2\2\2\u1376\u1377\3\2\2\2\u1377\u1378\3\2\2\2\u1378"+
		"\u1379\7\u0332\2\2\u1379\u137a\7\u00a8\2\2\u137a\u137c\7\u0332\2\2\u137b"+
		"\u1372\3\2\2\2\u137b\u1376\3\2\2\2\u137c\u137d\3\2\2\2\u137d\u137b\3\2"+
		"\2\2\u137d\u137e\3\2\2\2\u137e\u1380\3\2\2\2\u137f\u1370\3\2\2\2\u137f"+
		"\u137b\3\2\2\2\u1380\u1392\3\2\2\2\u1381\u1382\7\u01b6\2\2\u1382\u138d"+
		"\7\u0338\2\2\u1383\u1385\7\u034c\2\2\u1384\u1383\3\2\2\2\u1384\u1385\3"+
		"\2\2\2\u1385\u1386\3\2\2\2\u1386\u138e\7\u0332\2\2\u1387\u1389\7\u034c"+
		"\2\2\u1388\u1387\3\2\2\2\u1388\u1389\3\2\2\2\u1389\u138a\3\2\2\2\u138a"+
		"\u138b\7\u0332\2\2\u138b\u138c\7\u00a8\2\2\u138c\u138e\7\u0332\2\2\u138d"+
		"\u1384\3\2\2\2\u138d\u1388\3\2\2\2\u138e\u138f\3\2\2\2\u138f\u138d\3\2"+
		"\2\2\u138f\u1390\3\2\2\2\u1390\u1392\3\2\2\2\u1391\u136e\3\2\2\2\u1391"+
		"\u1381\3\2\2\2\u1392\u13d6\3\2\2\2\u1393\u1394\7\u0294\2\2\u1394\u13a4"+
		"\7\u02bd\2\2\u1395\u13a5\7p\2\2\u1396\u13a5\7n\2\2\u1397\u1398\7\u01cb"+
		"\2\2\u1398\u1399\7\u0338\2\2\u1399\u13a5\t-\2\2\u139a\u139b\7\u02c5\2"+
		"\2\u139b\u139f\7\u0338\2\2\u139c\u139d\7\u0332\2\2\u139d\u13a0\7\u0195"+
		"\2\2\u139e\u13a0\7/\2\2\u139f\u139c\3\2\2\2\u139f\u139e\3\2\2\2\u13a0"+
		"\u13a5\3\2\2\2\u13a1\u13a2\7\u018c\2\2\u13a2\u13a3\7\u0338\2\2\u13a3\u13a5"+
		"\t.\2\2\u13a4\u1395\3\2\2\2\u13a4\u1396\3\2\2\2\u13a4\u1397\3\2\2\2\u13a4"+
		"\u139a\3\2\2\2\u13a4\u13a1\3\2\2\2\u13a5\u13d6\3\2\2\2\u13a6\u13a7\7\u02a1"+
		"\2\2\u13a7\u13a8\7\u0284\2\2\u13a8\u13ba\7\u01db\2\2\u13a9\u13aa\7\u0324"+
		"\2\2\u13aa\u13ab\7\u0338\2\2\u13ab\u13bb\t-\2\2\u13ac\u13ad\7\u030e\2"+
		"\2\u13ad\u13ae\7\u0338\2\2\u13ae\u13bb\t-\2\2\u13af\u13b0\7\u030f\2\2"+
		"\u13b0\u13b1\7\u0338\2\2\u13b1\u13bb\t-\2\2\u13b2\u13b3\7\u0310\2\2\u13b3"+
		"\u13bb\t-\2\2\u13b4\u13b5\7\u02a2\2\2\u13b5\u13b6\7\u0338\2\2\u13b6\u13bb"+
		"\t-\2\2\u13b7\u13b8\7\u02aa\2\2\u13b8\u13b9\7\u0338\2\2\u13b9\u13bb\t"+
		".\2\2\u13ba\u13a9\3\2\2\2\u13ba\u13ac\3\2\2\2\u13ba\u13af\3\2\2\2\u13ba"+
		"\u13b2\3\2\2\2\u13ba\u13b4\3\2\2\2\u13ba\u13b7\3\2\2\2\u13bb\u13d6\3\2"+
		"\2\2\u13bc\u13bd\7\u015a\2\2\u13bd\u13be\7\u0284\2\2\u13be\u13bf\7\u0288"+
		"\2\2\u13bf\u13c0\7\u0338\2\2\u13c0\u13d6\t/\2\2\u13c1\u13c2\7\u027a\2"+
		"\2\u13c2\u13c3\7\u01d0\2\2\u13c3\u13d0\7\u029f\2\2\u13c4\u13c5\7p\2\2"+
		"\u13c5\u13c6\7\u034a\2\2\u13c6\u13c7\7\u0143\2\2\u13c7\u13c8\7\u0338\2"+
		"\2\u13c8\u13c9\7\u0334\2\2\u13c9\u13ca\7\u034c\2\2\u13ca\u13cb\7\u0223"+
		"\2\2\u13cb\u13cc\7\u0338\2\2\u13cc\u13cd\7\u0332\2\2\u13cd\u13ce\t\60"+
		"\2\2\u13ce\u13d1\7\u034b\2\2\u13cf\u13d1\7n\2\2\u13d0\u13c4\3\2\2\2\u13d0"+
		"\u13cf\3\2\2\2\u13d1\u13d6\3\2\2\2\u13d2\u13d3\7\u009e\2\2\u13d3\u13d4"+
		"\7\u030a\2\2\u13d4\u13d6\t\t\2\2\u13d5\u136c\3\2\2\2\u13d5\u1393\3\2\2"+
		"\2\u13d5\u13a6\3\2\2\2\u13d5\u13bc\3\2\2\2\u13d5\u13c1\3\2\2\2\u13d5\u13d2"+
		"\3\2\2\2\u13d6\u0183\3\2\2\2\u13d7\u13d8\7\5\2\2\u13d8\u13d9\7\u0302\2"+
		"\2\u13d9\u13da\7\u02f8\2\2\u13da\u13e2\5\u0410\u0209\2\u13db\u13dc\t\25"+
		"\2\2\u13dc\u13dd\7\u02c9\2\2\u13dd\u13e3\5\u0410\u0209\2\u13de\u13df\7"+
		"\u00bd\2\2\u13df\u13e0\7\u01a5\2\2\u13e0\u13e1\7\u0338\2\2\u13e1\u13e3"+
		"\5\u0410\u0209\2\u13e2\u13db\3\2\2\2\u13e2\u13de\3\2\2\2\u13e3\u0185\3"+
		"\2\2\2\u13e4\u13e5\7#\2\2\u13e5\u13e6\7\u0302\2\2\u13e6\u13e7\7\u02f8"+
		"\2\2\u13e7\u13ea\5\u0410\u0209\2\u13e8\u13e9\7\n\2\2\u13e9\u13eb\5\u0410"+
		"\u0209\2\u13ea\u13e8\3\2\2\2\u13ea\u13eb\3\2\2\2\u13eb\u0187\3\2\2\2\u13ec"+
		"\u13ed\7\5\2\2\u13ed\u13ee\7\u0302\2\2\u13ee\u13ef\7\u02f8\2\2\u13ef\u13f0"+
		"\5\u0410\u0209\2\u13f0\u13f1\t\25\2\2\u13f1\u13f2\7\u02c9\2\2\u13f2\u13f3"+
		"\5\u0410\u0209\2\u13f3\u0189\3\2\2\2\u13f4\u13f5\7\5\2\2\u13f5\u13f6\7"+
		"\u0303\2\2\u13f6\u13fe\5\u0410\u0209\2\u13f7\u13f8\7p\2\2\u13f8\u13f9"+
		"\7\u01df\2\2\u13f9\u13fa\5\u0410\u0209\2\u13fa\u13fb\7\u0345\2\2\u13fb"+
		"\u13fc\3\2\2\2\u13fc\u13fd\5\u0410\u0209\2\u13fd\u13ff\3\2\2\2\u13fe\u13f7"+
		"\3\2\2\2\u13fe\u13ff\3\2\2\2\u13ff\u1407\3\2\2\2\u1400\u1402\7\u034c\2"+
		"\2\u1401\u1400\3\2\2\2\u1401\u1402\3\2\2\2\u1402\u1403\3\2\2\2\u1403\u1404"+
		"\t\25\2\2\u1404\u1406\5\u0410\u0209\2\u1405\u1401\3\2\2\2\u1406\u1409"+
		"\3\2\2\2\u1407\u1405\3\2\2\2\u1407\u1408\3\2\2\2\u1408\u018b\3\2\2\2\u1409"+
		"\u1407\3\2\2\2\u140a\u140b\7#\2\2\u140b\u140c\7\u0303\2\2\u140c\u140f"+
		"\5\u0410\u0209\2\u140d\u140e\7\n\2\2\u140e\u1410\5\u0410\u0209\2\u140f"+
		"\u140d\3\2\2\2\u140f\u1410\3\2\2\2\u1410\u1411\3\2\2\2\u1411\u1412\7p"+
		"\2\2\u1412\u1416\7\u01df\2\2\u1413\u1414\5\u0410\u0209\2\u1414\u1415\7"+
		"\u0345\2\2\u1415\u1417\3\2\2\2\u1416\u1413\3\2\2\2\u1416\u1417\3\2\2\2"+
		"\u1417\u1418\3\2\2\2\u1418\u1426\5\u0410\u0209\2\u1419\u1421\7\u034a\2"+
		"\2\u141a\u141c\7\u034c\2\2\u141b\u141a\3\2\2\2\u141b\u141c\3\2\2\2\u141c"+
		"\u141f\3\2\2\2\u141d\u1420\5\u0410\u0209\2\u141e\u1420\7/\2\2\u141f\u141d"+
		"\3\2\2\2\u141f\u141e\3\2\2\2\u1420\u1422\3\2\2\2\u1421\u141b\3\2\2\2\u1422"+
		"\u1423\3\2\2\2\u1423\u1421\3\2\2\2\u1423\u1424\3\2\2\2\u1424\u1425\3\2"+
		"\2\2\u1425\u1427\7\u034b\2\2\u1426\u1419\3\2\2\2\u1426\u1427\3\2\2\2\u1427"+
		"\u018d\3\2\2\2\u1428\u1429\7\5\2\2\u1429\u142a\7\u0303\2\2\u142a\u142b"+
		"\7\u02bf\2\2\u142b\u1441\7_\2\2\u142c\u142e\7\u014a\2\2\u142d\u142c\3"+
		"\2\2\2\u142d\u142e\3\2\2\2\u142e\u142f\3\2\2\2\u142f\u1442\7\u02ee\2\2"+
		"\u1430\u143f\7\u00bd\2\2\u1431\u1432\7\u01bc\2\2\u1432\u1433\7\u0338\2"+
		"\2\u1433\u1434\7\u0334\2\2\u1434\u1435\7\u034c\2\2\u1435\u1436\7\u02db"+
		"\2\2\u1436\u1437\7\u0338\2\2\u1437\u1440\7\u0334\2\2\u1438\u1439\7\u01a7"+
		"\2\2\u1439\u143a\7\u0338\2\2\u143a\u143b\7\u0334\2\2\u143b\u143c\7\u034c"+
		"\2\2\u143c\u143d\7\u01a9\2\2\u143d\u143e\7\u0338\2\2\u143e\u1440\7\u0334"+
		"\2\2\u143f\u1431\3\2\2\2\u143f\u1438\3\2\2\2\u143f\u1440\3\2\2\2\u1440"+
		"\u1442\3\2\2\2\u1441\u142d\3\2\2\2\u1441\u1430\3\2\2\2\u1442\u018f\3\2"+
		"\2\2\u1443\u1444\7\5\2\2\u1444\u1445\7\u0236\2\2\u1445\u1446\7_\2\2\u1446"+
		"\u1447\5\u0410\u0209\2\u1447\u1448\t\25\2\2\u1448\u1449\7\u0132\2\2\u1449"+
		"\u1455\7\22\2\2\u144a\u144b\7\u027e\2\2\u144b\u1456\5\u0410\u0209\2\u144c"+
		"\u144d\7\u02e0\2\2\u144d\u144e\7\u0338\2\2\u144e\u1456\7\u0334\2\2\u144f"+
		"\u1450\7\u0236\2\2\u1450\u1451\7_\2\2\u1451\u1456\5\u0410\u0209\2\u1452"+
		"\u1453\7\u0270\2\2\u1453\u1454\7_\2\2\u1454\u1456\5\u0410\u0209\2\u1455"+
		"\u144a\3\2\2\2\u1455\u144c\3\2\2\2\u1455\u144f\3\2\2\2\u1455\u1452\3\2"+
		"\2\2\u1456\u0191\3\2\2\2\u1457\u1458\7\5\2\2\u1458\u1459\7\u0236\2\2\u1459"+
		"\u145a\7_\2\2\u145a\u145d\5\u0410\u0209\2\u145b\u145c\7\n\2\2\u145c\u145e"+
		"\5\u0410\u0209\2\u145d\u145b\3\2\2\2\u145d\u145e\3\2\2\2\u145e\u1462\3"+
		"\2\2\2\u145f\u1460\7K\2\2\u1460\u1461\7\u01dc\2\2\u1461\u1463\5\u0410"+
		"\u0209\2\u1462\u145f\3\2\2\2\u1462\u1463\3\2\2\2\u1463\u1464\3\2\2\2\u1464"+
		"\u1485\7\u00bd\2\2\u1465\u1466\7\u0173\2\2\u1466\u1467\7\u0338\2\2\u1467"+
		"\u1475\7\u0334\2\2\u1468\u1469\7\u00cd\2\2\u1469\u146a\7\u0338\2\2\u146a"+
		"\u1475\t\61\2\2\u146b\u146c\7\u0160\2\2\u146c\u146d\7\u0338\2\2\u146d"+
		"\u1475\7\u0334\2\2\u146e\u146f\7\u01dd\2\2\u146f\u1470\7\u0338\2\2\u1470"+
		"\u1475\7\u0334\2\2\u1471\u1472\7\u0108\2\2\u1472\u1473\7\u0338\2\2\u1473"+
		"\u1475\t\f\2\2\u1474\u1465\3\2\2\2\u1474\u1468\3\2\2\2\u1474\u146b\3\2"+
		"\2\2\u1474\u146e\3\2\2\2\u1474\u1471\3\2\2\2\u1475\u1486\3\2\2\2\u1476"+
		"\u1477\7\u0132\2\2\u1477\u1483\7\22\2\2\u1478\u1479\7\u027e\2\2\u1479"+
		"\u1484\5\u0410\u0209\2\u147a\u147b\7\u02e0\2\2\u147b\u147c\7\u0338\2\2"+
		"\u147c\u1484\7\u0334\2\2\u147d\u147e\7\u0236\2\2\u147e\u147f\7_\2\2\u147f"+
		"\u1484\5\u0410\u0209\2\u1480\u1481\7\u0270\2\2\u1481\u1482\7_\2\2\u1482"+
		"\u1484\5\u0410\u0209\2\u1483\u1478\3\2\2\2\u1483\u147a\3\2\2\2\u1483\u147d"+
		"\3\2\2\2\u1483\u1480\3\2\2\2\u1484\u1486\3\2\2\2\u1485\u1474\3\2\2\2\u1485"+
		"\u1476\3\2\2\2\u1486\u0193\3\2\2\2\u1487\u1488\7#\2\2\u1488\u148c\7\u0238"+
		"\2\2\u1489\u148a\5\u0410\u0209\2\u148a\u148b\7\u0345\2\2\u148b\u148d\3"+
		"\2\2\2\u148c\u1489\3\2\2\2\u148c\u148d\3\2\2\2\u148d\u148e\3\2\2\2\u148e"+
		"\u148f\5\u0410\u0209\2\u148f\u14aa\7G\2\2\u1490\u1491\5\u0410\u0209\2"+
		"\u1491\u1492\7\u0345\2\2\u1492\u1494\3\2\2\2\u1493\u1490\3\2\2\2\u1493"+
		"\u1494\3\2\2\2\u1494\u1498\3\2\2\2\u1495\u1496\5\u0410\u0209\2\u1496\u1497"+
		"\7\u0345\2\2\u1497\u1499\3\2\2\2\u1498\u1495\3\2\2\2\u1498\u1499\3\2\2"+
		"\2\u1499\u149d\3\2\2\2\u149a\u149b\5\u0410\u0209\2\u149b\u149c\7\u0345"+
		"\2\2\u149c\u149e\3\2\2\2\u149d\u149a\3\2\2\2\u149d\u149e\3\2\2\2\u149e"+
		"\u149f\3\2\2\2\u149f\u14ab\5\u0410\u0209\2\u14a0\u14a1\5\u0410\u0209\2"+
		"\u14a1\u14a2\7\u0345\2\2\u14a2\u14a4\3\2\2\2\u14a3\u14a0\3\2\2\2\u14a3"+
		"\u14a4\3\2\2\2\u14a4\u14a8\3\2\2\2\u14a5\u14a6\5\u0410\u0209\2\u14a6\u14a7"+
		"\7\u0345\2\2\u14a7\u14a9\3\2\2\2\u14a8\u14a5\3\2\2\2\u14a8\u14a9\3\2\2"+
		"\2\u14a9\u14ab\3\2\2\2\u14aa\u1493\3\2\2\2\u14aa\u14a3\3\2\2\2\u14ab\u0195"+
		"\3\2\2\2\u14ac\u14ad\7\5\2\2\u14ad\u14ae\7\u00b5\2\2\u14ae\u14af\5\u0410"+
		"\u0209\2\u14af\u14e2\7\u00bd\2\2\u14b0\u14b2\7\u034c\2\2\u14b1\u14b0\3"+
		"\2\2\2\u14b1\u14b2\3\2\2\2\u14b2\u14b3\3\2\2\2\u14b3\u14b4\7\u01a5\2\2"+
		"\u14b4\u14b5\7\u0338\2\2\u14b5\u14e3\5\u0410\u0209\2\u14b6\u14b8\7\u034c"+
		"\2\2\u14b7\u14b6\3\2\2\2\u14b7\u14b8\3\2\2\2\u14b8\u14b9\3\2\2\2\u14b9"+
		"\u14ba\7\u0293\2\2\u14ba\u14bd\7\u0338\2\2\u14bb\u14be\5\u0410\u0209\2"+
		"\u14bc\u14be\7k\2\2\u14bd\u14bb\3\2\2\2\u14bd\u14bc\3\2\2\2\u14be\u14e3"+
		"\3\2\2\2\u14bf\u14c1\7\u034c\2\2\u14c0\u14bf\3\2\2\2\u14c0\u14c1\3\2\2"+
		"\2\u14c1\u14c2\3\2\2\2\u14c2\u14c3\7\u0183\2\2\u14c3\u14c4\7\u0338\2\2"+
		"\u14c4\u14e3\5\u0410\u0209\2\u14c5\u14c7\7\u034c\2\2\u14c6\u14c5\3\2\2"+
		"\2\u14c6\u14c7\3\2\2\2\u14c7\u14c8\3\2\2\2\u14c8\u14c9\7\u02e0\2\2\u14c9"+
		"\u14ca\7\u0338\2\2\u14ca\u14ce\7\u0334\2\2\u14cb\u14cc\7\u02db\2\2\u14cc"+
		"\u14cd\7\u0338\2\2\u14cd\u14cf\7\u0334\2\2\u14ce\u14cb\3\2\2\2\u14cf\u14d0"+
		"\3\2\2\2\u14d0\u14ce\3\2\2\2\u14d0\u14d1\3\2\2\2\u14d1\u14e3\3\2\2\2\u14d2"+
		"\u14d4\7\u034c\2\2\u14d3\u14d2\3\2\2\2\u14d3\u14d4\3\2\2\2\u14d4\u14d5"+
		"\3\2\2\2\u14d5\u14d6\7\u011a\2\2\u14d6\u14da\7\u0338\2\2\u14d7\u14db\7"+
		"\u02d2\2\2\u14d8\u14db\7\u0332\2\2\u14d9\u14db\5\u0410\u0209\2\u14da\u14d7"+
		"\3\2\2\2\u14da\u14d8\3\2\2\2\u14da\u14d9\3\2\2\2\u14db\u14e3\3\2\2\2\u14dc"+
		"\u14de\7\u034c\2\2\u14dd\u14dc\3\2\2\2\u14dd\u14de\3\2\2\2\u14de\u14df"+
		"\3\2\2\2\u14df\u14e0\7\u00ce\2\2\u14e0\u14e1\7\u0338\2\2\u14e1\u14e3\t"+
		"\t\2\2\u14e2\u14b1\3\2\2\2\u14e2\u14b7\3\2\2\2\u14e2\u14c0\3\2\2\2\u14e2"+
		"\u14c6\3\2\2\2\u14e2\u14d3\3\2\2\2\u14e2\u14dd\3\2\2\2\u14e3\u14e4\3\2"+
		"\2\2\u14e4\u14e2\3\2\2\2\u14e4\u14e5\3\2\2\2\u14e5\u0197\3\2\2\2\u14e6"+
		"\u14e7\7#\2\2\u14e7\u14e8\7\u00b5\2\2\u14e8\u14ec\5\u0410\u0209\2\u14e9"+
		"\u14ea\t\62\2\2\u14ea\u14eb\7\u0183\2\2\u14eb\u14ed\5\u0410\u0209\2\u14ec"+
		"\u14e9\3\2\2\2\u14ec\u14ed\3\2\2\2\u14ed\u1500\3\2\2\2\u14ee\u14fd\7\u00bd"+
		"\2\2\u14ef\u14f1\7\u034c\2\2\u14f0\u14ef\3\2\2\2\u14f0\u14f1\3\2\2\2\u14f1"+
		"\u14f2\3\2\2\2\u14f2\u14f3\7\u0293\2\2\u14f3\u14f4\7\u0338\2\2\u14f4\u14fc"+
		"\5\u0410\u0209\2\u14f5\u14f7\7\u034c\2\2\u14f6\u14f5\3\2\2\2\u14f6\u14f7"+
		"\3\2\2\2\u14f7\u14f8\3\2\2\2\u14f8\u14f9\7\u00ce\2\2\u14f9\u14fa\7\u0338"+
		"\2\2\u14fa\u14fc\t\t\2\2\u14fb\u14f0\3\2\2\2\u14fb\u14f6\3\2\2\2\u14fc"+
		"\u14ff\3\2\2\2\u14fd\u14fb\3\2\2\2\u14fd\u14fe\3\2\2\2\u14fe\u1501\3\2"+
		"\2\2\u14ff\u14fd\3\2\2\2\u1500\u14ee\3\2\2\2\u1500\u1501\3\2\2\2\u1501"+
		"\u1579\3\2\2\2\u1502\u1503\7#\2\2\u1503\u1554\7\u00b5\2\2\u1504\u1527"+
		"\5\u0410\u0209\2\u1505\u1524\7\u00bd\2\2\u1506\u1508\7\u034c\2\2\u1507"+
		"\u1506\3\2\2\2\u1507\u1508\3\2\2\2\u1508\u1509\3\2\2\2\u1509\u150a\7\u0293"+
		"\2\2\u150a\u150b\7\u0338\2\2\u150b\u1523\5\u0410\u0209\2\u150c\u150e\7"+
		"\u034c\2\2\u150d\u150c\3\2\2\2\u150d\u150e\3\2\2\2\u150e\u150f\3\2\2\2"+
		"\u150f\u1510\7\u011a\2\2\u1510\u1514\7\u0338\2\2\u1511\u1515\7\u02d2\2"+
		"\2\u1512\u1515\7\u0332\2\2\u1513\u1515\5\u0410\u0209\2\u1514\u1511\3\2"+
		"\2\2\u1514\u1512\3\2\2\2\u1514\u1513\3\2\2\2\u1515\u1523\3\2\2\2\u1516"+
		"\u1518\7\u034c\2\2\u1517\u1516\3\2\2\2\u1517\u1518\3\2\2\2\u1518\u1519"+
		"\3\2\2\2\u1519\u151a\7\u0308\2\2\u151a\u151b\7\u0338\2\2\u151b\u1523\7"+
		"\u0335\2\2\u151c\u151e\7\u034c\2\2\u151d\u151c\3\2\2\2\u151d\u151e\3\2"+
		"\2\2\u151e\u151f\3\2\2\2\u151f\u1520\7\u00ce\2\2\u1520\u1521\7\u0338\2"+
		"\2\u1521\u1523\t\t\2\2\u1522\u1507\3\2\2\2\u1522\u150d\3\2\2\2\u1522\u1517"+
		"\3\2\2\2\u1522\u151d\3\2\2\2\u1523\u1526\3\2\2\2\u1524\u1522\3\2\2\2\u1524"+
		"\u1525\3\2\2\2\u1525\u1528\3\2\2\2\u1526\u1524\3\2\2\2\u1527\u1505\3\2"+
		"\2\2\u1527\u1528\3\2\2\2\u1528\u1555\3\2\2\2\u1529\u152a\5\u0410\u0209"+
		"\2\u152a\u152b\7\u00bd\2\2\u152b\u152c\7\u02e0\2\2\u152c\u152d\7\u0338"+
		"\2\2\u152d\u154c\7\u0334\2\2\u152e\u1530\7\u034c\2\2\u152f\u152e\3\2\2"+
		"\2\u152f\u1530\3\2\2\2\u1530\u1531\3\2\2\2\u1531\u1532\7\u0293\2\2\u1532"+
		"\u1533\7\u0338\2\2\u1533\u154b\5\u0410\u0209\2\u1534\u1536\7\u034c\2\2"+
		"\u1535\u1534\3\2\2\2\u1535\u1536\3\2\2\2\u1536\u1537\3\2\2\2\u1537\u1538"+
		"\7\u011a\2\2\u1538\u153c\7\u0338\2\2\u1539\u153d\7\u02d2\2\2\u153a\u153d"+
		"\7\u0332\2\2\u153b\u153d\5\u0410\u0209\2\u153c\u1539\3\2\2\2\u153c\u153a"+
		"\3\2\2\2\u153c\u153b\3\2\2\2\u153d\u154b\3\2\2\2\u153e\u1540\7\u034c\2"+
		"\2\u153f\u153e\3\2\2\2\u153f\u1540\3\2\2\2\u1540\u1541\3\2\2\2\u1541\u1542"+
		"\7\u0308\2\2\u1542\u1543\7\u0338\2\2\u1543\u154b\7\u0335\2\2\u1544\u1546"+
		"\7\u034c\2\2\u1545\u1544\3\2\2\2\u1545\u1546\3\2\2\2\u1546\u1547\3\2\2"+
		"\2\u1547\u1548\7\u00ce\2\2\u1548\u1549\7\u0338\2\2\u1549\u154b\t\t\2\2"+
		"\u154a\u152f\3\2\2\2\u154a\u1535\3\2\2\2\u154a\u153f\3\2\2\2\u154a\u1545"+
		"\3\2\2\2\u154b\u154e\3\2\2\2\u154c\u154a\3\2\2\2\u154c\u154d\3\2\2\2\u154d"+
		"\u1555\3\2\2\2\u154e\u154c\3\2\2\2\u154f\u1550\5\u0410\u0209\2\u1550\u1551"+
		"\7K\2\2\u1551\u1552\7C\2\2\u1552\u1553\7\u01dc\2\2\u1553\u1555\3\2\2\2"+
		"\u1554\u1504\3\2\2\2\u1554\u1529\3\2\2\2\u1554\u154f\3\2\2\2\u1555\u1579"+
		"\3\2\2\2\u1556\u1557\7#\2\2\u1557\u1558\7\u00b5\2\2\u1558\u1573\5\u0410"+
		"\u0209\2\u1559\u155a\7\u0327\2\2\u155a\u1569\7\u0183\2\2\u155b\u155d\7"+
		"\u034c\2\2\u155c\u155b\3\2\2\2\u155c\u155d\3\2\2\2\u155d\u155e\3\2\2\2"+
		"\u155e\u155f\7\u0293\2\2\u155f\u1560\7\u0338\2\2\u1560\u1568\5\u0410\u0209"+
		"\2\u1561\u1563\7\u034c\2\2\u1562\u1561\3\2\2\2\u1562\u1563\3\2\2\2\u1563"+
		"\u1564\3\2\2\2\u1564\u1565\7\u00ce\2\2\u1565\u1566\7\u0338\2\2\u1566\u1568"+
		"\t\t\2\2\u1567\u155c\3\2\2\2\u1567\u1562\3\2\2\2\u1568\u156b\3\2\2\2\u1569"+
		"\u1567\3\2\2\2\u1569\u156a\3\2\2\2\u156a\u1574\3\2\2\2\u156b\u1569\3\2"+
		"\2\2\u156c\u156d\t\62\2\2\u156d\u156e\7\u027e\2\2\u156e\u1574\5\u0410"+
		"\u0209\2\u156f\u1570\t\62\2\2\u1570\u1571\7\u0270\2\2\u1571\u1572\7_\2"+
		"\2\u1572\u1574\5\u0410\u0209\2\u1573\u1559\3\2\2\2\u1573\u156c\3\2\2\2"+
		"\u1573\u156f\3\2\2\2\u1574\u1579\3\2\2\2\u1575\u1576\7#\2\2\u1576\u1577"+
		"\7\u00b5\2\2\u1577\u1579\5\u0410\u0209\2\u1578\u14e6\3\2\2\2\u1578\u1502"+
		"\3\2\2\2\u1578\u1556\3\2\2\2\u1578\u1575\3\2\2\2\u1579\u0199\3\2\2\2\u157a"+
		"\u157b\7#\2\2\u157b\u157c\7\u00b5\2\2\u157c\u1582\5\u0410\u0209\2\u157d"+
		"\u157e\t\62\2\2\u157e\u157f\7\u0183\2\2\u157f\u1583\5\u0410\u0209\2\u1580"+
		"\u1581\7\u0327\2\2\u1581\u1583\7\u0183\2\2\u1582\u157d\3\2\2\2\u1582\u1580"+
		"\3\2\2\2\u1582\u1583\3\2\2\2\u1583\u1588\3\2\2\2\u1584\u1585\7\u00bd\2"+
		"\2\u1585\u1586\7\u0293\2\2\u1586\u1587\7\u0338\2\2\u1587\u1589\5\u0410"+
		"\u0209\2\u1588\u1584\3\2\2\2\u1588\u1589\3\2\2\2\u1589\u1597\3\2\2\2\u158a"+
		"\u158b\7#\2\2\u158b\u158c\7\u00b5\2\2\u158c\u158d\5\u0410\u0209\2\u158d"+
		"\u158e\7K\2\2\u158e\u158f\7C\2\2\u158f\u1594\7\u01dc\2\2\u1590\u1591\7"+
		"\u00bd\2\2\u1591\u1592\7\u0293\2\2\u1592\u1593\7\u0338\2\2\u1593\u1595"+
		"\5\u0410\u0209\2\u1594\u1590\3\2\2\2\u1594\u1595\3\2\2\2\u1595\u1597\3"+
		"\2\2\2\u1596\u157a\3\2\2\2\u1596\u158a\3\2\2\2\u1597\u019b\3\2\2\2\u1598"+
		"\u1599\7\5\2\2\u1599\u159a\7\u00b5\2\2\u159a\u159b\5\u0410\u0209\2\u159b"+
		"\u15b4\7\u00bd\2\2\u159c\u159e\7\u034c\2\2\u159d\u159c\3\2\2\2\u159d\u159e"+
		"\3\2\2\2\u159e\u159f\3\2\2\2\u159f\u15a0\7\u01a5\2\2\u15a0\u15a1\7\u0338"+
		"\2\2\u15a1\u15b5\5\u0410\u0209\2\u15a2\u15a4\7\u034c\2\2\u15a3\u15a2\3"+
		"\2\2\2\u15a3\u15a4\3\2\2\2\u15a4\u15a5\3\2\2\2\u15a5\u15a6\7\u0293\2\2"+
		"\u15a6\u15a7\7\u0338\2\2\u15a7\u15b5\5\u0410\u0209\2\u15a8\u15aa\7\u034c"+
		"\2\2\u15a9\u15a8\3\2\2\2\u15a9\u15aa\3\2\2\2\u15aa\u15ab\3\2\2\2\u15ab"+
		"\u15ac\7\u0183\2\2\u15ac\u15ad\7\u0338\2\2\u15ad\u15b5\5\u0410\u0209\2"+
		"\u15ae\u15b0\7\u034c\2\2\u15af\u15ae\3\2\2\2\u15af\u15b0\3\2\2\2\u15b0"+
		"\u15b1\3\2\2\2\u15b1\u15b2\7\u00ce\2\2\u15b2\u15b3\7\u0338\2\2\u15b3\u15b5"+
		"\t\t\2\2\u15b4\u159d\3\2\2\2\u15b4\u15a3\3\2\2\2\u15b4\u15a9\3\2\2\2\u15b4"+
		"\u15af\3\2\2\2\u15b5\u15b6\3\2\2\2\u15b6\u15b4\3\2\2\2\u15b6\u15b7\3\2"+
		"\2\2\u15b7\u019d\3\2\2\2\u15b8\u15b9\7\5\2\2\u15b9\u15ba\7\u0260\2\2\u15ba"+
		"\u15bd\7P\2\2\u15bb\u15be\5\u0410\u0209\2\u15bc\u15be\7\u0118\2\2\u15bd"+
		"\u15bb\3\2\2\2\u15bd\u15bc\3\2\2\2\u15be\u15de\3\2\2\2\u15bf\u15c0\7\u00bd"+
		"\2\2\u15c0\u15d9\7\u034a\2\2\u15c1\u15c2\7\u0164\2\2\u15c2\u15c3\7\u0338"+
		"\2\2\u15c3\u15da\t\63\2\2\u15c4\u15c6\7\u034c\2\2\u15c5\u15c4\3\2\2\2"+
		"\u15c5\u15c6\3\2\2\2\u15c6\u15c7\3\2\2\2\u15c7\u15c8\7\u01f9\2\2\u15c8"+
		"\u15c9\7\u0338\2\2\u15c9\u15da\7\u0332\2\2\u15ca\u15cc\7\u034c\2\2\u15cb"+
		"\u15ca\3\2\2\2\u15cb\u15cc\3\2\2\2\u15cc\u15cd\3\2\2\2\u15cd\u15ce\7\u01f8"+
		"\2\2\u15ce\u15cf\7\u0338\2\2\u15cf\u15da\7\u0332\2\2\u15d0\u15d1\7\u01fa"+
		"\2\2\u15d1\u15d2\7\u0338\2\2\u15d2\u15da\7\u0332\2\2\u15d3\u15d4\7\u018b"+
		"\2\2\u15d4\u15d5\7\u0338\2\2\u15d5\u15da\7\u0332\2\2\u15d6\u15d7\7\u0157"+
		"\2\2\u15d7\u15d8\7\u0338\2\2\u15d8\u15da\7\u0332\2\2\u15d9\u15c1\3\2\2"+
		"\2\u15d9\u15c5\3\2\2\2\u15d9\u15cb\3\2\2\2\u15d9\u15d0\3\2\2\2\u15d9\u15d3"+
		"\3\2\2\2\u15d9\u15d6\3\2\2\2\u15da\u15db\3\2\2\2\u15db\u15d9\3\2\2\2\u15db"+
		"\u15dc\3\2\2\2\u15dc\u15dd\3\2\2\2\u15dd\u15df\7\u034b\2\2\u15de\u15bf"+
		"\3\2\2\2\u15de\u15df\3\2\2\2\u15df\u15e5\3\2\2\2\u15e0\u15e3\7\u0253\2"+
		"\2\u15e1\u15e4\5\u0410\u0209\2\u15e2\u15e4\7\u0118\2\2\u15e3\u15e1\3\2"+
		"\2\2\u15e3\u15e2\3\2\2\2\u15e4\u15e6\3\2\2\2\u15e5\u15e0\3\2\2\2\u15e5"+
		"\u15e6\3\2\2\2\u15e6\u019f\3\2\2\2\u15e7\u15e8\7#\2\2\u15e8\u15e9\7\u0260"+
		"\2\2\u15e9\u15ea\7P\2\2\u15ea\u160a\5\u0410\u0209\2\u15eb\u15ec\7\u00bd"+
		"\2\2\u15ec\u1605\7\u034a\2\2\u15ed\u15ee\7\u0164\2\2\u15ee\u15ef\7\u0338"+
		"\2\2\u15ef\u1606\t\63\2\2\u15f0\u15f2\7\u034c\2\2\u15f1\u15f0\3\2\2\2"+
		"\u15f1\u15f2\3\2\2\2\u15f2\u15f3\3\2\2\2\u15f3\u15f4\7\u01f9\2\2\u15f4"+
		"\u15f5\7\u0338\2\2\u15f5\u1606\7\u0332\2\2\u15f6\u15f8\7\u034c\2\2\u15f7"+
		"\u15f6\3\2\2\2\u15f7\u15f8\3\2\2\2\u15f8\u15f9\3\2\2\2\u15f9\u15fa\7\u01f8"+
		"\2\2\u15fa\u15fb\7\u0338\2\2\u15fb\u1606\7\u0332\2\2\u15fc\u15fd\7\u01fa"+
		"\2\2\u15fd\u15fe\7\u0338\2\2\u15fe\u1606\7\u0332\2\2\u15ff\u1600\7\u018b"+
		"\2\2\u1600\u1601\7\u0338\2\2\u1601\u1606\7\u0332\2\2\u1602\u1603\7\u0157"+
		"\2\2\u1603\u1604\7\u0338\2\2\u1604\u1606\7\u0332\2\2\u1605\u15ed\3\2\2"+
		"\2\u1605\u15f1\3\2\2\2\u1605\u15f7\3\2\2\2\u1605\u15fc\3\2\2\2\u1605\u15ff"+
		"\3\2\2\2\u1605\u1602\3\2\2\2\u1606\u1607\3\2\2\2\u1607\u1605\3\2\2\2\u1607"+
		"\u1608\3\2\2\2\u1608\u1609\3\2\2\2\u1609\u160b\7\u034b\2\2\u160a\u15eb"+
		"\3\2\2\2\u160a\u160b\3\2\2\2\u160b\u1619\3\2\2\2\u160c\u160f\7\u0253\2"+
		"\2\u160d\u1610\5\u0410\u0209\2\u160e\u1610\7\u0118\2\2\u160f\u160d\3\2"+
		"\2\2\u160f\u160e\3\2\2\2\u160f\u1610\3\2\2\2\u1610\u1617\3\2\2\2\u1611"+
		"\u1613\7\u034c\2\2\u1612\u1611\3\2\2\2\u1612\u1613\3\2\2\2\u1613\u1614"+
		"\3\2\2\2\u1614\u1615\7C\2\2\u1615\u1618\5\u0410\u0209\2\u1616\u1618\7"+
		"\u0118\2\2\u1617\u1612\3\2\2\2\u1617\u1616\3\2\2\2\u1617\u1618\3\2\2\2"+
		"\u1618\u161a\3\2\2\2\u1619\u160c\3\2\2\2\u1619\u161a\3\2\2\2\u161a\u01a1"+
		"\3\2\2\2\u161b\u161c\7#\2\2\u161c\u161d\7\u0261\2\2\u161d\u161e\7\u0097"+
		"\2\2\u161e\u1622\7\u00fa\2\2\u161f\u1620\5\u0410\u0209\2\u1620\u1621\7"+
		"\u0345\2\2\u1621\u1623\3\2\2\2\u1622\u161f\3\2\2\2\u1622\u1623\3\2\2\2"+
		"\u1623\u1624\3\2\2\2\u1624\u1625\5\u0410\u0209\2\u1625\u1629\7\b\2\2\u1626"+
		"\u162a\7\u0334\2\2\u1627\u162a\5\u0410\u0209\2\u1628\u162a\7\u0331\2\2"+
		"\u1629\u1626\3\2\2\2\u1629\u1627\3\2\2\2\u1629\u1628\3\2\2\2\u162a\u01a3"+
		"\3\2\2\2\u162b\u162c\7#\2\2\u162c\u162f\7\u01df\2\2\u162d\u1630\5\u03d0"+
		"\u01e9\2\u162e\u1630\5\u0410\u0209\2\u162f\u162d\3\2\2\2\u162f\u162e\3"+
		"\2\2\2\u1630\u1632\3\2\2\2\u1631\u1633\5\u01a6\u00d4\2\u1632\u1631\3\2"+
		"\2\2\u1632\u1633\3\2\2\2\u1633\u1637\3\2\2\2\u1634\u1635\7p\2\2\u1635"+
		"\u1638\5\u0410\u0209\2\u1636\u1638\7/\2\2\u1637\u1634\3\2\2\2\u1637\u1636"+
		"\3\2\2\2\u1637\u1638\3\2\2\2\u1638\u01a5\3\2\2\2\u1639\u1640\7\u00bd\2"+
		"\2\u163a\u163b\7\u022b\2\2\u163b\u163c\7\u0338\2\2\u163c\u163e\t\t\2\2"+
		"\u163d\u163f\7\u034c\2\2\u163e\u163d\3\2\2\2\u163e\u163f\3\2\2\2\u163f"+
		"\u1641\3\2\2\2\u1640\u163a\3\2\2\2\u1640\u1641\3\2\2\2\u1641\u1648\3\2"+
		"\2\2\u1642\u1643\7\u0200\2\2\u1643\u1644\7\u0338\2\2\u1644\u1646\t\t\2"+
		"\2\u1645\u1647\7\u034c\2\2\u1646\u1645\3\2\2\2\u1646\u1647\3\2\2\2\u1647"+
		"\u1649\3\2\2\2\u1648\u1642\3\2\2\2\u1648\u1649\3\2\2\2\u1649\u1677\3\2"+
		"\2\2\u164a\u164b\7\u00c4\2\2\u164b\u1671\7\u034a\2\2\u164c\u164d\7\u022b"+
		"\2\2\u164d\u164e\7\u0338\2\2\u164e\u1650\t\t\2\2\u164f\u1651\7\u034c\2"+
		"\2\u1650\u164f\3\2\2\2\u1650\u1651\3\2\2\2\u1651\u1653\3\2\2\2\u1652\u164c"+
		"\3\2\2\2\u1652\u1653\3\2\2\2\u1653\u165a\3\2\2\2\u1654\u1655\7\u01da\2"+
		"\2\u1655\u1656\7\u0338\2\2\u1656\u1658\5\u03d8\u01ed\2\u1657\u1659\7\u034c"+
		"\2\2\u1658\u1657\3\2\2\2\u1658\u1659\3\2\2\2\u1659\u165b\3\2\2\2\u165a"+
		"\u1654\3\2\2\2\u165a\u165b\3\2\2\2\u165b\u1662\3\2\2\2\u165c\u165d\7\u0190"+
		"\2\2\u165d\u165e\7\u0338\2\2\u165e\u1660\7\u0332\2\2\u165f\u1661\7\u034c"+
		"\2\2\u1660\u165f\3\2\2\2\u1660\u1661\3\2\2\2\u1661\u1663\3\2\2\2\u1662"+
		"\u165c\3\2\2\2\u1662\u1663\3\2\2\2\u1663\u166e\3\2\2\2\u1664\u1665\7@"+
		"\2\2\u1665\u1669\7\b\2\2\u1666\u166a\7\u0216\2\2\u1667\u166a\7\u0334\2"+
		"\2\u1668\u166a\7\u01c5\2\2\u1669\u1666\3\2\2\2\u1669\u1667\3\2\2\2\u1669"+
		"\u1668\3\2\2\2\u166a\u166c\3\2\2\2\u166b\u166d\7\u034c\2\2\u166c\u166b"+
		"\3\2\2\2\u166c\u166d\3\2\2\2\u166d\u166f\3\2\2\2\u166e\u1664\3\2\2\2\u166e"+
		"\u166f\3\2\2\2\u166f\u1672\3\2\2\2\u1670\u1672\79\2\2\u1671\u1652\3\2"+
		"\2\2\u1671\u1670\3\2\2\2\u1672\u1673\3\2\2\2\u1673\u1675\7\u034b\2\2\u1674"+
		"\u1676\7\u034c\2\2\u1675\u1674\3\2\2\2\u1675\u1676\3\2\2\2\u1676\u1678"+
		"\3\2\2\2\u1677\u164a\3\2\2\2\u1677\u1678\3\2\2\2\u1678\u1680\3\2\2\2\u1679"+
		"\u167a\7\u01cf\2\2\u167a\u167b\7\u034a\2\2\u167b\u167c\7\u022b\2\2\u167c"+
		"\u167d\7\u0338\2\2\u167d\u167e\t\t\2\2\u167e\u167f\3\2\2\2\u167f\u1681"+
		"\7\u034b\2\2\u1680\u1679\3\2\2\2\u1680\u1681\3\2\2\2\u1681\u01a7\3\2\2"+
		"\2\u1682\u1683\7\5\2\2\u1683\u1686\7\u01df\2\2\u1684\u1687\5\u03d0\u01e9"+
		"\2\u1685\u1687\5\u0410\u0209\2\u1686\u1684\3\2\2\2\u1686\u1685\3\2\2\2"+
		"\u1687\u168a\3\2\2\2\u1688\u168b\5\u01a6\u00d4\2\u1689\u168b\5\u01aa\u00d6"+
		"\2\u168a\u1688\3\2\2\2\u168a\u1689\3\2\2\2\u168b\u01a9\3\2\2\2\u168c\u1692"+
		"\7\u01ec\2\2\u168d\u168e\7\u00bd\2\2\u168e\u168f\7\u034a\2\2\u168f\u1690"+
		"\5\u01ac\u00d7\2\u1690\u1691\7\u034b\2\2\u1691\u1693\3\2\2\2\u1692\u168d"+
		"\3\2\2\2\u1692\u1693\3\2\2\2\u1693\u16a2\3\2\2\2\u1694\u1699\7\u01f5\2"+
		"\2\u1695\u1696\7\u00bd\2\2\u1696\u1697\7\u017e\2\2\u1697\u1698\7\u0338"+
		"\2\2\u1698\u169a\t\t\2\2\u1699\u1695\3\2\2\2\u1699\u169a\3\2\2\2\u169a"+
		"\u16a2\3\2\2\2\u169b\u169c\7\u01a3\2\2\u169c\u169f\7\u00a8\2\2\u169d\u16a0"+
		"\5\u0410\u0209\2\u169e\u16a0\7/\2\2\u169f\u169d\3\2\2\2\u169f\u169e\3"+
		"\2\2\2\u16a0\u16a2\3\2\2\2\u16a1\u168c\3\2\2\2\u16a1\u1694\3\2\2\2\u16a1"+
		"\u169b\3\2\2\2\u16a2\u01ab\3\2\2\2\u16a3\u16a4\7\u0192\2\2\u16a4\u16a5"+
		"\7\u0338\2\2\u16a5\u16a6\7\u0332\2\2\u16a6\u01ad\3\2\2\2\u16a7\u16a8\7"+
		"#\2\2\u16a8\u16a9\7\u028a\2\2\u16a9\u16ac\5\u03f8\u01fd\2\u16aa\u16ab"+
		"\7\n\2\2\u16ab\u16ad\5\u0410\u0209\2\u16ac\u16aa\3\2\2\2\u16ac\u16ad\3"+
		"\2\2\2\u16ad\u16ae\3\2\2\2\u16ae\u16b9\7\u034a\2\2\u16af\u16b2\5\u0410"+
		"\u0209\2\u16b0\u16b2\7/\2\2\u16b1\u16af\3\2\2\2\u16b1\u16b0\3\2\2\2\u16b2"+
		"\u16b3\3\2\2\2\u16b3\u16b4\7\u0219\2\2\u16b4\u16b5\7\22\2\2\u16b5\u16b7"+
		"\t\64\2\2\u16b6\u16b8\7\u034c\2\2\u16b7\u16b6\3\2\2\2\u16b7\u16b8\3\2"+
		"\2\2\u16b8\u16ba\3\2\2\2\u16b9\u16b1\3\2\2\2\u16ba\u16bb\3\2\2\2\u16bb"+
		"\u16b9\3\2\2\2\u16bb\u16bc\3\2\2\2\u16bc\u16bd\3\2\2\2\u16bd\u16be\7\u034b"+
		"\2\2\u16be\u01af\3\2\2\2\u16bf\u16c6\5\u03f4\u01fb\2\u16c0\u16c6\5\u03f6"+
		"\u01fc\2\u16c1\u16c6\5\u03fc\u01ff\2\u16c2\u16c6\5\u0400\u0201\2\u16c3"+
		"\u16c6\5\u0404\u0203\2\u16c4\u16c6\5\u03fe\u0200\2\u16c5\u16bf\3\2\2\2"+
		"\u16c5\u16c0\3\2\2\2\u16c5\u16c1\3\2\2\2\u16c5\u16c2\3\2\2\2\u16c5\u16c3"+
		"\3\2\2\2\u16c5\u16c4\3\2\2\2\u16c6\u01b1\3\2\2\2\u16c7\u16c8\7#\2\2\u16c8"+
		"\u16c9\7\u0198\2\2\u16c9\u16ca\7\u024c\2\2\u16ca\u16cd\5\u0410\u0209\2"+
		"\u16cb\u16cc\7\n\2\2\u16cc\u16ce\5\u0410\u0209\2\u16cd\u16cb\3\2\2\2\u16cd"+
		"\u16ce\3\2\2\2\u16ce\u16cf\3\2\2\2\u16cf\u16d0\7\u0255\2\2\u16d0\u16d9"+
		"\7\u0338\2\2\u16d1\u16da\7\u02d2\2\2\u16d2\u16da\7\u012e\2\2\u16d3\u16da"+
		"\7\u025d\2\2\u16d4\u16d5\7\u0254\2\2\u16d5\u16d6\7\u00bd\2\2\u16d6\u16d7"+
		"\7\u0097\2\2\u16d7\u16d8\7\u00fa\2\2\u16d8\u16da\5\u0410\u0209\2\u16d9"+
		"\u16d1\3\2\2\2\u16d9\u16d2\3\2\2\2\u16d9\u16d3\3\2\2\2\u16d9\u16d4\3\2"+
		"\2\2\u16da\u01b3\3\2\2\2\u16db\u16dd\5\u030a\u0186\2\u16dc\u16db\3\2\2"+
		"\2\u16dc\u16dd\3\2\2\2\u16dd\u16de\3\2\2\2\u16de\u16e6\7e\2\2\u16df\u16e0"+
		"\7\u00a9\2\2\u16e0\u16e1\7\u034a\2\2\u16e1\u16e2\5\u02fa\u017e\2\u16e2"+
		"\u16e4\7\u034b\2\2\u16e3\u16e5\7|\2\2\u16e4\u16e3\3\2\2\2\u16e4\u16e5"+
		"\3\2\2\2\u16e5\u16e7\3\2\2\2\u16e6\u16df\3\2\2\2\u16e6\u16e7\3\2\2\2\u16e7"+
		"\u16e9\3\2\2\2\u16e8\u16ea\7\\\2\2\u16e9\u16e8\3\2\2\2\u16e9\u16ea\3\2"+
		"\2\2\u16ea\u16eb\3\2\2\2\u16eb\u16ed\5\u03dc\u01ef\2\u16ec\u16ee\5\u039e"+
		"\u01d0\2\u16ed\u16ec\3\2\2\2\u16ed\u16ee\3\2\2\2\u16ee\u16f0\3\2\2\2\u16ef"+
		"\u16f1\5\u0398\u01cd\2\u16f0\u16ef\3\2\2\2\u16f0\u16f1\3\2\2\2\u16f1\u16f2"+
		"\3\2\2\2\u16f2\u16f3\7\u0253\2\2\u16f3\u16f4\5\u0342\u01a2\2\u16f4\u16f5"+
		"\7p\2\2\u16f5\u16f7\5\u0312\u018a\2\u16f6\u16f8\5\u01b6\u00dc\2\u16f7"+
		"\u16f6\3\2\2\2\u16f8\u16f9\3\2\2\2\u16f9\u16f7\3\2\2\2\u16f9\u16fa\3\2"+
		"\2\2\u16fa\u16fc\3\2\2\2\u16fb\u16fd\5\u01ce\u00e8\2\u16fc\u16fb\3\2\2"+
		"\2\u16fc\u16fd\3\2\2\2\u16fd\u16ff\3\2\2\2\u16fe\u1700\5\u032e\u0198\2"+
		"\u16ff\u16fe\3\2\2\2\u16ff\u1700\3\2\2\2\u1700\u1701\3\2\2\2\u1701\u1702"+
		"\7\u034d\2\2\u1702\u01b5\3\2\2\2\u1703\u1704\7\u00ba\2\2\u1704\u1707\7"+
		"\u02be\2\2\u1705\u1706\7\6\2\2\u1706\u1708\5\u0312\u018a\2\u1707\u1705"+
		"\3\2\2\2\u1707\u1708\3\2\2\2\u1708\u1709\3\2\2\2\u1709\u170a\7\u00a7\2"+
		"\2\u170a\u170c\5\u01b8\u00dd\2\u170b\u1703\3\2\2\2\u170c\u170d\3\2\2\2"+
		"\u170d\u170b\3\2\2\2\u170d\u170e\3\2\2\2\u170e\u172c\3\2\2\2\u170f\u1710"+
		"\7\u00ba\2\2\u1710\u1711\7j\2\2\u1711\u1714\7\u02be\2\2\u1712\u1713\7"+
		"\22\2\2\u1713\u1715\7\u031b\2\2\u1714\u1712\3\2\2\2\u1714\u1715\3\2\2"+
		"\2\u1715\u1718\3\2\2\2\u1716\u1717\7\6\2\2\u1717\u1719\5\u0312\u018a\2"+
		"\u1718\u1716\3\2\2\2\u1718\u1719\3\2\2\2\u1719\u171a\3\2\2\2\u171a\u171b"+
		"\7\u00a7\2\2\u171b\u172c\5\u01ba\u00de\2\u171c\u171d\7\u00ba\2\2\u171d"+
		"\u171e\7j\2\2\u171e\u171f\7\u02be\2\2\u171f\u1720\7\22\2\2\u1720\u1723"+
		"\7\u030b\2\2\u1721\u1722\7\6\2\2\u1722\u1724\5\u0312\u018a\2\u1723\u1721"+
		"\3\2\2\2\u1723\u1724\3\2\2\2\u1724\u1725\3\2\2\2\u1725\u1726\7\u00a7\2"+
		"\2\u1726\u1728\5\u01b8\u00dd\2\u1727\u171c\3\2\2\2\u1728\u1729\3\2\2\2"+
		"\u1729\u1727\3\2\2\2\u1729\u172a\3\2\2\2\u172a\u172c\3\2\2\2\u172b\u170b"+
		"\3\2\2\2\u172b\u170f\3\2\2\2\u172b\u1727\3\2\2\2\u172c\u01b7\3\2\2\2\u172d"+
		"\u172e\7\u00b2\2\2\u172e\u172f\7\u009e\2\2\u172f\u1734\5\u0310\u0189\2"+
		"\u1730\u1731\7\u034c\2\2\u1731\u1733\5\u0310\u0189\2\u1732\u1730\3\2\2"+
		"\2\u1733\u1736\3\2\2\2\u1734\u1732\3\2\2\2\u1734\u1735\3\2\2\2\u1735\u1739"+
		"\3\2\2\2\u1736\u1734\3\2\2\2\u1737\u1739\7\60\2\2\u1738\u172d\3\2\2\2"+
		"\u1738\u1737\3\2\2\2\u1739\u01b9\3\2\2\2\u173a\u173f\7Z\2\2\u173b\u173c"+
		"\7\u034a\2\2\u173c\u173d\5\u03e6\u01f4\2\u173d\u173e\7\u034b\2\2\u173e"+
		"\u1740\3\2\2\2\u173f\u173b\3\2\2\2\u173f\u1740\3\2\2\2\u1740\u1744\3\2"+
		"\2\2\u1741\u1745\5\u03a8\u01d5\2\u1742\u1743\7/\2\2\u1743\u1745\7\u00b6"+
		"\2\2\u1744\u1741\3\2\2\2\u1744\u1742\3\2\2\2\u1745\u01bb\3\2\2\2\u1746"+
		"\u1748\5\u030a\u0186\2\u1747\u1746\3\2\2\2\u1747\u1748\3\2\2\2\u1748\u1749"+
		"\3\2\2\2\u1749\u1753\7\60\2\2\u174a\u174b\7\u00a9\2\2\u174b\u174c\7\u034a"+
		"\2\2\u174c\u174d\5\u02fa\u017e\2\u174d\u174f\7\u034b\2\2\u174e\u1750\7"+
		"|\2\2\u174f\u174e\3\2\2\2\u174f\u1750\3\2\2\2\u1750\u1754\3\2\2\2\u1751"+
		"\u1752\7\u00a9\2\2\u1752\u1754\7\u0332\2\2\u1753\u174a\3\2\2\2\u1753\u1751"+
		"\3\2\2\2\u1753\u1754\3\2\2\2\u1754\u1756\3\2\2\2\u1755\u1757\7K\2\2\u1756"+
		"\u1755\3\2\2\2\u1756\u1757\3\2\2\2\u1757\u1758\3\2\2\2\u1758\u175a\5\u01be"+
		"\u00e0\2\u1759\u175b\5\u039e\u01d0\2\u175a\u1759\3\2\2\2\u175a\u175b\3"+
		"\2\2\2\u175b\u175d\3\2\2\2\u175c\u175e\5\u01ce\u00e8\2\u175d\u175c\3\2"+
		"\2\2\u175d\u175e\3\2\2\2\u175e\u1761\3\2\2\2\u175f\u1760\7K\2\2\u1760"+
		"\u1762\5\u0342\u01a2\2\u1761\u175f\3\2\2\2\u1761\u1762\3\2\2\2\u1762\u1770"+
		"\3\2\2\2\u1763\u176e\7\u00bb\2\2\u1764\u176f\5\u0312\u018a\2\u1765\u1766"+
		"\7%\2\2\u1766\u176c\7m\2\2\u1767\u1769\7\u0154\2\2\u1768\u1767\3\2\2\2"+
		"\u1768\u1769\3\2\2\2\u1769\u176a\3\2\2\2\u176a\u176d\5\u03e8\u01f5\2\u176b"+
		"\u176d\7\u0331\2\2\u176c\u1768\3";
	private static final String _serializedATNSegment3 =
		"\2\2\2\u176c\u176b\3\2\2\2\u176d\u176f\3\2\2\2\u176e\u1764\3\2\2\2\u176e"+
		"\u1765\3\2\2\2\u176f\u1771\3\2\2\2\u1770\u1763\3\2\2\2\u1770\u1771\3\2"+
		"\2\2\u1771\u1773\3\2\2\2\u1772\u1774\5\u0326\u0194\2\u1773\u1772\3\2\2"+
		"\2\u1773\u1774\3\2\2\2\u1774\u1776\3\2\2\2\u1775\u1777\5\u032e\u0198\2"+
		"\u1776\u1775\3\2\2\2\u1776\u1777\3\2\2\2\u1777\u1779\3\2\2\2\u1778\u177a"+
		"\7\u034d\2\2\u1779\u1778\3\2\2\2\u1779\u177a\3\2\2\2\u177a\u01bd\3\2\2"+
		"\2\u177b\u1780\5\u03dc\u01ef\2\u177c\u1780\5\u039a\u01ce\2\u177d\u1780"+
		"\5\u026a\u0136\2\u177e\u1780\7\u0331\2\2\u177f\u177b\3\2\2\2\u177f\u177c"+
		"\3\2\2\2\u177f\u177d\3\2\2\2\u177f\u177e\3\2\2\2\u1780\u01bf\3\2\2\2\u1781"+
		"\u1783\5\u030a\u0186\2\u1782\u1781\3\2\2\2\u1782\u1783\3\2\2\2\u1783\u1784"+
		"\3\2\2\2\u1784\u178c\7Z\2\2\u1785\u1786\7\u00a9\2\2\u1786\u1787\7\u034a"+
		"\2\2\u1787\u1788\5\u02fa\u017e\2\u1788\u178a\7\u034b\2\2\u1789\u178b\7"+
		"|\2\2\u178a\u1789\3\2\2\2\u178a\u178b\3\2\2\2\u178b\u178d\3\2\2\2\u178c"+
		"\u1785\3\2\2\2\u178c\u178d\3\2\2\2\u178d\u178f\3\2\2\2\u178e\u1790\7\\"+
		"\2\2\u178f\u178e\3\2\2\2\u178f\u1790\3\2\2\2\u1790\u1793\3\2\2\2\u1791"+
		"\u1794\5\u03dc\u01ef\2\u1792\u1794\5\u026a\u0136\2\u1793\u1791\3\2\2\2"+
		"\u1793\u1792\3\2\2\2\u1794\u1796\3\2\2\2\u1795\u1797\5\u039e\u01d0\2\u1796"+
		"\u1795\3\2\2\2\u1796\u1797\3\2\2\2\u1797\u179c\3\2\2\2\u1798\u1799\7\u034a"+
		"\2\2\u1799\u179a\5\u03e2\u01f2\2\u179a\u179b\7\u034b\2\2\u179b\u179d\3"+
		"\2\2\2\u179c\u1798\3\2\2\2\u179c\u179d\3\2\2\2\u179d\u179f\3\2\2\2\u179e"+
		"\u17a0\5\u01ce\u00e8\2\u179f\u179e\3\2\2\2\u179f\u17a0\3\2\2\2\u17a0\u17a1"+
		"\3\2\2\2\u17a1\u17a3\5\u01c2\u00e2\2\u17a2\u17a4\5\u0326\u0194\2\u17a3"+
		"\u17a2\3\2\2\2\u17a3\u17a4\3\2\2\2\u17a4\u17a6\3\2\2\2\u17a5\u17a7\5\u032e"+
		"\u0198\2\u17a6\u17a5\3\2\2\2\u17a6\u17a7\3\2\2\2\u17a7\u17a9\3\2\2\2\u17a8"+
		"\u17aa\7\u034d\2\2\u17a9\u17a8\3\2\2\2\u17a9\u17aa\3\2\2\2\u17aa\u01c1"+
		"\3\2\2\2\u17ab\u17b1\5\u03a8\u01d5\2\u17ac\u17b1\5\u0374\u01bb\2\u17ad"+
		"\u17b1\5\u0288\u0145\2\u17ae\u17af\7/\2\2\u17af\u17b1\7\u00b6\2\2\u17b0"+
		"\u17ab\3\2\2\2\u17b0\u17ac\3\2\2\2\u17b0\u17ad\3\2\2\2\u17b0\u17ae\3\2"+
		"\2\2\u17b1\u01c3\3\2\2\2\u17b2\u17b4\7\u034a\2\2\u17b3\u17b2\3\2\2\2\u17b3"+
		"\u17b4\3\2\2\2\u17b4\u17b5\3\2\2\2\u17b5\u17ba\7\u01ed\2\2\u17b6\u17bb"+
		"\7\4\2\2\u17b7\u17bb\7\64\2\2\u17b8\u17bb\5\u031e\u0190\2\u17b9\u17bb"+
		"\7\u034f\2\2\u17ba\u17b6\3\2\2\2\u17ba\u17b7\3\2\2\2\u17ba\u17b8\3\2\2"+
		"\2\u17ba\u17b9\3\2\2\2\u17bb\u17c4\3\2\2\2\u17bc\u17bd\7\u0331\2\2\u17bd"+
		"\u17be\7\u0338\2\2\u17be\u17c0\5\u02fa\u017e\2\u17bf\u17c1\7\u034c\2\2"+
		"\u17c0\u17bf\3\2\2\2\u17c0\u17c1\3\2\2\2\u17c1\u17c3\3\2\2\2\u17c2\u17bc"+
		"\3\2\2\2\u17c3\u17c6\3\2\2\2\u17c4\u17c2\3\2\2\2\u17c4\u17c5\3\2\2\2\u17c5"+
		"\u17c7\3\2\2\2\u17c6\u17c4\3\2\2\2\u17c7\u17c8\7K\2\2\u17c8\u17ce\5\u03d0"+
		"\u01e9\2\u17c9\u17ca\7\\\2\2\u17ca\u17cb\5\u0410\u0209\2\u17cb\u17cc\7"+
		"\u00bb\2\2\u17cc\u17cd\5\u0312\u018a\2\u17cd\u17cf\3\2\2\2\u17ce\u17c9"+
		"\3\2\2\2\u17ce\u17cf\3\2\2\2\u17cf\u17d1\3\2\2\2\u17d0\u17d2\7\u034b\2"+
		"\2\u17d1\u17d0\3\2\2\2\u17d1\u17d2\3\2\2\2\u17d2\u01c5\3\2\2\2\u17d3\u17d5"+
		"\5\u030a\u0186\2\u17d4\u17d3\3\2\2\2\u17d4\u17d5\3\2\2\2\u17d5\u17d6\3"+
		"\2\2\2\u17d6\u17d7\5\u01c8\u00e5\2\u17d7\u01c7\3\2\2\2\u17d8\u17da\5\u0318"+
		"\u018d\2\u17d9\u17db\5\u0324\u0193\2\u17da\u17d9\3\2\2\2\u17da\u17db\3"+
		"\2\2\2\u17db\u17dd\3\2\2\2\u17dc\u17de\5\u0326\u0194\2\u17dd\u17dc\3\2"+
		"\2\2\u17dd\u17de\3\2\2\2\u17de\u17e0\3\2\2\2\u17df\u17e1\5\u032e\u0198"+
		"\2\u17e0\u17df\3\2\2\2\u17e0\u17e1\3\2\2\2\u17e1\u17e3\3\2\2\2\u17e2\u17e4"+
		"\7\u034d\2\2\u17e3\u17e2\3\2\2\2\u17e3\u17e4\3\2\2\2\u17e4\u01c9\3\2\2"+
		"\2\u17e5\u17e8\7\u0331\2\2\u17e6\u17e8\5\u040a\u0206\2\u17e7\u17e5\3\2"+
		"\2\2\u17e7\u17e6\3\2\2\2\u17e8\u01cb\3\2\2\2\u17e9\u17eb\5\u030a\u0186"+
		"\2\u17ea\u17e9\3\2\2\2\u17ea\u17eb\3\2\2\2\u17eb\u17ec\3\2\2\2\u17ec\u17f4"+
		"\7\u00b2\2\2\u17ed\u17ee\7\u00a9\2\2\u17ee\u17ef\7\u034a\2\2\u17ef\u17f0"+
		"\5\u02fa\u017e\2\u17f0\u17f2\7\u034b\2\2\u17f1\u17f3\7|\2\2\u17f2\u17f1"+
		"\3\2\2\2\u17f2\u17f3\3\2\2\2\u17f3\u17f5\3\2\2\2\u17f4\u17ed\3\2\2\2\u17f4"+
		"\u17f5\3\2\2\2\u17f5\u17f8\3\2\2\2\u17f6\u17f9\5\u03dc\u01ef\2\u17f7\u17f9"+
		"\5\u026a\u0136\2\u17f8\u17f6\3\2\2\2\u17f8\u17f7\3\2\2\2\u17f9\u17fb\3"+
		"\2\2\2\u17fa\u17fc\5\u039c\u01cf\2\u17fb\u17fa\3\2\2\2\u17fb\u17fc\3\2"+
		"\2\2\u17fc\u17fd\3\2\2\2\u17fd\u17fe\7\u009e\2\2\u17fe\u1803\5\u030e\u0188"+
		"\2\u17ff\u1800\7\u034c\2\2\u1800\u1802\5\u030e\u0188\2\u1801\u17ff\3\2"+
		"\2\2\u1802\u1805\3\2\2\2\u1803\u1801\3\2\2\2\u1803\u1804\3\2\2\2\u1804"+
		"\u1807\3\2\2\2\u1805\u1803\3\2\2\2\u1806\u1808\5\u01ce\u00e8\2\u1807\u1806"+
		"\3\2\2\2\u1807\u1808\3\2\2\2\u1808\u180b\3\2\2\2\u1809\u180a\7K\2\2\u180a"+
		"\u180c\5\u0342\u01a2\2\u180b\u1809\3\2\2\2\u180b\u180c\3\2\2\2\u180c\u181a"+
		"\3\2\2\2\u180d\u1818\7\u00bb\2\2\u180e\u1819\5\u0312\u018a\2\u180f\u1810"+
		"\7%\2\2\u1810\u1816\7m\2\2\u1811\u1813\7\u0154\2\2\u1812\u1811\3\2\2\2"+
		"\u1812\u1813\3\2\2\2\u1813\u1814\3\2\2\2\u1814\u1817\5\u03e8\u01f5\2\u1815"+
		"\u1817\7\u0331\2\2\u1816\u1812\3\2\2\2\u1816\u1815\3\2\2\2\u1817\u1819"+
		"\3\2\2\2\u1818\u180e\3\2\2\2\u1818\u180f\3\2\2\2\u1819\u181b\3\2\2\2\u181a"+
		"\u180d\3\2\2\2\u181a\u181b\3\2\2\2\u181b\u181d\3\2\2\2\u181c\u181e\5\u0326"+
		"\u0194\2\u181d\u181c\3\2\2\2\u181d\u181e\3\2\2\2\u181e\u1820\3\2\2\2\u181f"+
		"\u1821\5\u032e\u0198\2\u1820\u181f\3\2\2\2\u1820\u1821\3\2\2\2\u1821\u1823"+
		"\3\2\2\2\u1822\u1824\7\u034d\2\2\u1823\u1822\3\2\2\2\u1823\u1824\3\2\2"+
		"\2\u1824\u01cd\3\2\2\2\u1825\u1826\7\u01c3\2\2\u1826\u182b\5\u01d0\u00e9"+
		"\2\u1827\u1828\7\u034c\2\2\u1828\u182a\5\u01d0\u00e9\2\u1829\u1827\3\2"+
		"\2\2\u182a\u182d\3\2\2\2\u182b\u1829\3\2\2\2\u182b\u182c\3\2\2\2\u182c"+
		"\u1839\3\2\2\2\u182d\u182b\3\2\2\2\u182e\u1831\7\\\2\2\u182f\u1832\7\u0331"+
		"\2\2\u1830\u1832\5\u03d2\u01ea\2\u1831\u182f\3\2\2\2\u1831\u1830\3\2\2"+
		"\2\u1832\u1837\3\2\2\2\u1833\u1834\7\u034a\2\2\u1834\u1835\5\u03e6\u01f4"+
		"\2\u1835\u1836\7\u034b\2\2\u1836\u1838\3\2\2\2\u1837\u1833\3\2\2\2\u1837"+
		"\u1838\3\2\2\2\u1838\u183a\3\2\2\2\u1839\u182e\3\2\2\2\u1839\u183a\3\2"+
		"\2\2\u183a\u01cf\3\2\2\2\u183b\u183e\5\u01d2\u00ea\2\u183c\u183e\5\u02fa"+
		"\u017e\2\u183d\u183b\3\2\2\2\u183d\u183c\3\2\2\2\u183e\u1840\3\2\2\2\u183f"+
		"\u1841\5\u0396\u01cc\2\u1840\u183f\3\2\2\2\u1840\u1841\3\2\2\2\u1841\u01d1"+
		"\3\2\2\2\u1842\u1846\7\u011d\2\2\u1843\u1846\7\u016a\2\2\u1844\u1846\5"+
		"\u03d2\u01ea\2\u1845\u1842\3\2\2\2\u1845\u1843\3\2\2\2\u1845\u1844\3\2"+
		"\2\2\u1846\u1847\3\2\2\2\u1847\u184a\7\u0345\2\2\u1848\u184b\7\u034f\2"+
		"\2\u1849\u184b\5\u0410\u0209\2\u184a\u1848\3\2\2\2\u184a\u1849\3\2\2\2"+
		"\u184b\u184e\3\2\2\2\u184c\u184e\7\u0267\2\2\u184d\u1845\3\2\2\2\u184d"+
		"\u184c\3\2\2\2\u184e\u01d3\3\2\2\2\u184f\u1850\7#\2\2\u1850\u1851\7+\2"+
		"\2\u1851\u1855\5\u0410\u0209\2\u1852\u1853\7\u0287\2\2\u1853\u1854\7\u0338"+
		"\2\2\u1854\u1856\t\65\2\2\u1855\u1852\3\2\2\2\u1855\u1856\3\2\2\2\u1856"+
		"\u1863\3\2\2\2\u1857\u1859\7p\2\2\u1858\u185a\7\u0080\2\2\u1859\u1858"+
		"\3\2\2\2\u1859\u185a\3\2\2\2\u185a\u185b\3\2\2\2\u185b\u1860\5\u03c4\u01e3"+
		"\2\u185c\u185d\7\u034c\2\2\u185d\u185f\5\u03c4\u01e3\2\u185e\u185c\3\2"+
		"\2\2\u185f\u1862\3\2\2\2\u1860\u185e\3\2\2\2\u1860\u1861\3\2\2\2\u1861"+
		"\u1864\3\2\2\2\u1862\u1860\3\2\2\2\u1863\u1857\3\2\2\2\u1863\u1864\3\2"+
		"\2\2\u1864\u186f\3\2\2\2\u1865\u1866\7\u02bd\2\2\u1866\u1867\7p\2\2\u1867"+
		"\u186c\5\u03c4\u01e3\2\u1868\u1869\7\u034c\2\2\u1869\u186b\5\u03c4\u01e3"+
		"\2\u186a\u1868\3\2\2\2\u186b\u186e\3\2\2\2\u186c\u186a\3\2\2\2\u186c\u186d"+
		"\3\2\2\2\u186d\u1870\3\2\2\2\u186e\u186c\3\2\2\2\u186f\u1865\3\2\2\2\u186f"+
		"\u1870\3\2\2\2\u1870\u1873\3\2\2\2\u1871\u1872\7\32\2\2\u1872\u1874\5"+
		"\u0410\u0209\2\u1873\u1871\3\2\2\2\u1873\u1874\3\2\2\2\u1874\u187e\3\2"+
		"\2\2\u1875\u1876\7\u00bd\2\2\u1876\u187b\5\u03c0\u01e1\2\u1877\u1878\7"+
		"\u034c\2\2\u1878\u187a\5\u03c0\u01e1\2\u1879\u1877\3\2\2\2\u187a\u187d"+
		"\3\2\2\2\u187b\u1879\3\2\2\2\u187b\u187c\3\2\2\2\u187c\u187f\3\2\2\2\u187d"+
		"\u187b\3\2\2\2\u187e\u1875\3\2\2\2\u187e\u187f\3\2\2\2\u187f\u01d5\3\2"+
		"\2\2\u1880\u1882\7#\2\2\u1881\u1883\7\u00b0\2\2\u1882\u1881\3\2\2\2\u1882"+
		"\u1883\3\2\2\2\u1883\u1885\3\2\2\2\u1884\u1886\5\u03ec\u01f7\2\u1885\u1884"+
		"\3\2\2\2\u1885\u1886\3\2\2\2\u1886\u1887\3\2\2\2\u1887\u1888\7X\2\2\u1888"+
		"\u1889\5\u0410\u0209\2\u1889\u188a\7p\2\2\u188a\u188b\5\u03d2\u01ea\2"+
		"\u188b\u188c\7\u034a\2\2\u188c\u188d\5\u03e0\u01f1\2\u188d\u1893\7\u034b"+
		"\2\2\u188e\u188f\7\u02ad\2\2\u188f\u1890\7\u034a\2\2\u1890\u1891\5\u03e6"+
		"\u01f4\2\u1891\u1892\7\u034b\2\2\u1892\u1894\3\2\2\2\u1893\u188e\3\2\2"+
		"\2\u1893\u1894\3\2\2\2\u1894\u1897\3\2\2\2\u1895\u1896\7\u00bb\2\2\u1896"+
		"\u1898\5\u0312\u018a\2\u1897\u1895\3\2\2\2\u1897\u1898\3\2\2\2\u1898\u189a"+
		"\3\2\2\2\u1899\u189b\5\u02ea\u0176\2\u189a\u1899\3\2\2\2\u189a\u189b\3"+
		"\2\2\2\u189b\u189e\3\2\2\2\u189c\u189d\7p\2\2\u189d\u189f\5\u0410\u0209"+
		"\2\u189e\u189c\3\2\2\2\u189e\u189f\3\2\2\2\u189f\u18a1\3\2\2\2\u18a0\u18a2"+
		"\7\u034d\2\2\u18a1\u18a0\3\2\2\2\u18a1\u18a2\3\2\2\2\u18a2\u01d7\3\2\2"+
		"\2\u18a3\u18a5\7#\2\2\u18a4\u18a6\7\u0080\2\2\u18a5\u18a4\3\2\2\2\u18a5"+
		"\u18a6\3\2\2\2\u18a6\u18a7\3\2\2\2\u18a7\u18a8\7\u0261\2\2\u18a8\u18a9"+
		"\7X\2\2\u18a9\u18aa\5\u0410\u0209\2\u18aa\u18ab\7p\2\2\u18ab\u18ac\5\u03d2"+
		"\u01ea\2\u18ac\u18ad\7\u034a\2\2\u18ad\u18ae\5\u0410\u0209\2\u18ae\u18b9"+
		"\7\u034b\2\2\u18af\u18b0\7\u0253\2\2\u18b0\u18b1\7\u0261\2\2\u18b1\u18b2"+
		"\7X\2\2\u18b2\u18b7\5\u0410\u0209\2\u18b3\u18b5\7G\2\2\u18b4\u18b6\t\66"+
		"\2\2\u18b5\u18b4\3\2\2\2\u18b5\u18b6\3\2\2\2\u18b6\u18b8\3\2\2\2\u18b7"+
		"\u18b3\3\2\2\2\u18b7\u18b8\3\2\2\2\u18b8\u18ba\3\2\2\2\u18b9\u18af\3\2"+
		"\2\2\u18b9\u18ba\3\2\2\2\u18ba\u18bc\3\2\2\2\u18bb\u18bd\5\u02ea\u0176"+
		"\2\u18bc\u18bb\3\2\2\2\u18bc\u18bd\3\2\2\2\u18bd\u18bf\3\2\2\2\u18be\u18c0"+
		"\7\u034d\2\2\u18bf\u18be\3\2\2\2\u18bf\u18c0\3\2\2\2\u18c0\u01d9\3\2\2"+
		"\2\u18c1\u18c4\7#\2\2\u18c2\u18c3\7x\2\2\u18c3\u18c5\7\5\2\2\u18c4\u18c2"+
		"\3\2\2\2\u18c4\u18c5\3\2\2\2\u18c5\u18c8\3\2\2\2\u18c6\u18c8\7\5\2\2\u18c7"+
		"\u18c1\3\2\2\2\u18c7\u18c6\3\2\2\2\u18c8\u18c9\3\2\2\2\u18c9\u18ca\t\67"+
		"\2\2\u18ca\u18cd\5\u03d6\u01ec\2\u18cb\u18cc\7\u034d\2\2\u18cc\u18ce\7"+
		"\u0332\2\2\u18cd\u18cb\3\2\2\2\u18cd\u18ce\3\2\2\2\u18ce\u18dd\3\2\2\2"+
		"\u18cf\u18d1\7\u034a\2\2\u18d0\u18cf\3\2\2\2\u18d0\u18d1\3\2\2\2\u18d1"+
		"\u18d2\3\2\2\2\u18d2\u18d7\5\u01f0\u00f9\2\u18d3\u18d4\7\u034c\2\2\u18d4"+
		"\u18d6\5\u01f0\u00f9\2\u18d5\u18d3\3\2\2\2\u18d6\u18d9\3\2\2\2\u18d7\u18d5"+
		"\3\2\2\2\u18d7\u18d8\3\2\2\2\u18d8\u18db\3\2\2\2\u18d9\u18d7\3\2\2\2\u18da"+
		"\u18dc\7\u034b\2\2\u18db\u18da\3\2\2\2\u18db\u18dc\3\2\2\2\u18dc\u18de"+
		"\3\2\2\2\u18dd\u18d0\3\2\2\2\u18dd\u18de\3\2\2\2\u18de\u18e8\3\2\2\2\u18df"+
		"\u18e0\7\u00bd\2\2\u18e0\u18e5\5\u01f2\u00fa\2\u18e1\u18e2\7\u034c\2\2"+
		"\u18e2\u18e4\5\u01f2\u00fa\2\u18e3\u18e1\3\2\2\2\u18e4\u18e7\3\2\2\2\u18e5"+
		"\u18e3\3\2\2\2\u18e5\u18e6\3\2\2\2\u18e6\u18e9\3\2\2\2\u18e7\u18e5\3\2"+
		"\2\2\u18e8\u18df\3\2\2\2\u18e8\u18e9\3\2\2\2\u18e9\u18ec\3\2\2\2\u18ea"+
		"\u18eb\7G\2\2\u18eb\u18ed\7\u008b\2\2\u18ec\u18ea\3\2\2\2\u18ec\u18ed"+
		"\3\2\2\2\u18ed\u18ee\3\2\2\2\u18ee\u18f2\7\b\2\2\u18ef\u18f1\5\b\5\2\u18f0"+
		"\u18ef\3\2\2\2\u18f1\u18f4\3\2\2\2\u18f2\u18f0\3\2\2\2\u18f2\u18f3\3\2"+
		"\2\2\u18f3\u01db\3\2\2\2\u18f4\u18f2\3\2\2\2\u18f5\u18f8\5\u01de\u00f0"+
		"\2\u18f6\u18f8\5\u01e4\u00f3\2\u18f7\u18f5\3\2\2\2\u18f7\u18f6\3\2\2\2"+
		"\u18f8\u01dd\3\2\2\2\u18f9\u18fc\7#\2\2\u18fa\u18fb\7x\2\2\u18fb\u18fd"+
		"\7\5\2\2\u18fc\u18fa\3\2\2\2\u18fc\u18fd\3\2\2\2\u18fd\u1900\3\2\2\2\u18fe"+
		"\u1900\7\5\2\2\u18ff\u18f9\3\2\2\2\u18ff\u18fe\3\2\2\2\u1900\u1901\3\2"+
		"\2\2\u1901\u1902\7\u00ac\2\2\u1902\u1903\5\u03d4\u01eb\2\u1903\u1904\7"+
		"p\2\2\u1904\u190e\5\u03d2\u01ea\2\u1905\u1906\7\u00bd\2\2\u1906\u190b"+
		"\5\u01e0\u00f1\2\u1907\u1908\7\u034c\2\2\u1908\u190a\5\u01e0\u00f1\2\u1909"+
		"\u1907\3\2\2\2\u190a\u190d\3\2\2\2\u190b\u1909\3\2\2\2\u190b\u190c\3\2"+
		"\2\2\u190c\u190f\3\2\2\2\u190d\u190b\3\2\2\2\u190e\u1905\3\2\2\2\u190e"+
		"\u190f\3\2\2\2\u190f\u1914\3\2\2\2\u1910\u1915\7G\2\2\u1911\u1915\7\u00cb"+
		"\2\2\u1912\u1913\7\u02b1\2\2\u1913\u1915\7m\2\2\u1914\u1910\3\2\2\2\u1914"+
		"\u1911\3\2\2\2\u1914\u1912\3\2\2\2\u1915\u1916\3\2\2\2\u1916\u191b\5\u01e2"+
		"\u00f2\2\u1917\u1918\7\u034c\2\2\u1918\u191a\5\u01e2\u00f2\2\u1919\u1917"+
		"\3\2\2\2\u191a\u191d\3\2\2\2\u191b\u1919\3\2\2\2\u191b\u191c\3\2\2\2\u191c"+
		"\u1920\3\2\2\2\u191d\u191b\3\2\2\2\u191e\u191f\7\u00bd\2\2\u191f\u1921"+
		"\7\u026e\2\2\u1920\u191e\3\2\2\2\u1920\u1921\3\2\2\2\u1921\u1925\3\2\2"+
		"\2\u1922\u1923\7j\2\2\u1923\u1924\7G\2\2\u1924\u1926\7\u008b\2\2\u1925"+
		"\u1922\3\2\2\2\u1925\u1926\3\2\2\2\u1926\u1927\3\2\2\2\u1927\u1929\7\b"+
		"\2\2\u1928\u192a\5\b\5\2\u1929\u1928\3\2\2\2\u192a\u192b\3\2\2\2\u192b"+
		"\u1929\3\2\2\2\u192b\u192c\3\2\2\2\u192c\u01df\3\2\2\2\u192d\u1930\7\u0132"+
		"\2\2\u192e\u1930\5\u02ce\u0168\2\u192f\u192d\3\2\2\2\u192f\u192e\3\2\2"+
		"\2\u1930\u01e1\3\2\2\2\u1931\u1932\t8\2\2\u1932\u01e3\3\2\2\2\u1933\u1936"+
		"\7#\2\2\u1934\u1935\7x\2\2\u1935\u1937\7\5\2\2\u1936\u1934\3\2\2\2\u1936"+
		"\u1937\3\2\2\2\u1937\u193a\3\2\2\2\u1938\u193a\7\5\2\2\u1939\u1933\3\2"+
		"\2\2\u1939\u1938\3\2\2\2\u193a\u193b\3\2\2\2\u193b\u193c\7\u00ac\2\2\u193c"+
		"\u193d\5\u03d4\u01eb\2\u193d\u1941\7p\2\2\u193e\u193f\7\4\2\2\u193f\u1942"+
		"\7\u0302\2\2\u1940\u1942\7+\2\2\u1941\u193e\3\2\2\2\u1941\u1940\3\2\2"+
		"\2\u1942\u194c\3\2\2\2\u1943\u1944\7\u00bd\2\2\u1944\u1949\5\u01e0\u00f1"+
		"\2\u1945\u1946\7\u034c\2\2\u1946\u1948\5\u01e0\u00f1\2\u1947\u1945\3\2"+
		"\2\2\u1948\u194b\3\2\2\2\u1949\u1947\3\2\2\2\u1949\u194a\3\2\2\2\u194a"+
		"\u194d\3\2\2\2\u194b\u1949\3\2\2\2\u194c\u1943\3\2\2\2\u194c\u194d\3\2"+
		"\2\2\u194d\u194e\3\2\2\2\u194e\u194f\t9\2\2\u194f\u1954\5\u01e6\u00f4"+
		"\2\u1950\u1951\7\u034c\2\2\u1951\u1953\5\u01e2\u00f2\2\u1952\u1950\3\2"+
		"\2\2\u1953\u1956\3\2\2\2\u1954\u1952\3\2\2\2\u1954\u1955\3\2\2\2\u1955"+
		"\u1957\3\2\2\2\u1956\u1954\3\2\2\2\u1957\u1959\7\b\2\2\u1958\u195a\5\b"+
		"\5\2\u1959\u1958\3\2\2\2\u195a\u195b\3\2\2\2\u195b\u1959\3\2\2\2\u195b"+
		"\u195c\3\2\2\2\u195c\u01e5\3\2\2\2\u195d\u195e\5\u0412\u020a\2\u195e\u01e7"+
		"\3\2\2\2\u195f\u1962\7#\2\2\u1960\u1961\7x\2\2\u1961\u1963\7\5\2\2\u1962"+
		"\u1960\3\2\2\2\u1962\u1963\3\2\2\2\u1963\u1966\3\2\2\2\u1964\u1966\7\5"+
		"\2\2\u1965\u195f\3\2\2\2\u1965\u1964\3\2\2\2\u1966\u1967\3\2\2\2\u1967"+
		"\u1968\7M\2\2\u1968\u1976\5\u03d6\u01ec\2\u1969\u196a\7\u034a\2\2\u196a"+
		"\u196f\5\u01f0\u00f9\2\u196b\u196c\7\u034c\2\2\u196c\u196e\5\u01f0\u00f9"+
		"\2\u196d\u196b\3\2\2\2\u196e\u1971\3\2\2\2\u196f\u196d\3\2\2\2\u196f\u1970"+
		"\3\2\2\2\u1970\u1972\3\2\2\2\u1971\u196f\3\2\2\2\u1972\u1973\7\u034b\2"+
		"\2\u1973\u1977\3\2\2\2\u1974\u1975\7\u034a\2\2\u1975\u1977\7\u034b\2\2"+
		"\u1976\u1969\3\2\2\2\u1976\u1974\3\2\2\2\u1977\u197b\3\2\2\2\u1978\u197c"+
		"\5\u01ea\u00f6\2\u1979\u197c\5\u01ec\u00f7\2\u197a\u197c\5\u01ee\u00f8"+
		"\2\u197b\u1978\3\2\2\2\u197b\u1979\3\2\2\2\u197b\u197a\3\2\2\2\u197c\u197e"+
		"\3\2\2\2\u197d\u197f\7\u034d\2\2\u197e\u197d\3\2\2\2\u197e\u197f\3\2\2"+
		"\2\u197f\u01e9\3\2\2\2\u1980\u1981\7\u02f6\2\2\u1981\u198b\7\u00a4\2\2"+
		"\u1982\u1983\7\u00bd\2\2\u1983\u1988\5\u01f4\u00fb\2\u1984\u1985\7\u034c"+
		"\2\2\u1985\u1987\5\u01f4\u00fb\2\u1986\u1984\3\2\2\2\u1987\u198a\3\2\2"+
		"\2\u1988\u1986\3\2\2\2\u1988\u1989\3\2\2\2\u1989\u198c\3\2\2\2\u198a\u1988"+
		"\3\2\2\2\u198b\u1982\3\2\2\2\u198b\u198c\3\2\2\2\u198c\u198e\3\2\2\2\u198d"+
		"\u198f\7\b\2\2\u198e\u198d\3\2\2\2\u198e\u198f\3\2\2\2\u198f\u1990\3\2"+
		"\2\2\u1990\u1996\7\u008e\2\2\u1991\u1992\7\u034a\2\2\u1992\u1993\5\u01c6"+
		"\u00e4\2\u1993\u1994\7\u034b\2\2\u1994\u1997\3\2\2\2\u1995\u1997\5\u01c6"+
		"\u00e4\2\u1996\u1991\3\2\2\2\u1996\u1995\3\2\2\2\u1997\u01eb\3\2\2\2\u1998"+
		"\u1999\7\u02f6\2\2\u1999\u199a\7\u0331\2\2\u199a\u19a4\5\u02d2\u016a\2"+
		"\u199b\u199c\7\u00bd\2\2\u199c\u19a1\5\u01f4\u00fb\2\u199d\u199e\7\u034c"+
		"\2\2\u199e\u19a0\5\u01f4\u00fb\2\u199f\u199d\3\2\2\2\u19a0\u19a3\3\2\2"+
		"\2\u19a1\u199f\3\2\2\2\u19a1\u19a2\3\2\2\2\u19a2\u19a5\3\2\2\2\u19a3\u19a1"+
		"\3\2\2\2\u19a4\u199b\3\2\2\2\u19a4\u19a5\3\2\2\2\u19a5\u19a7\3\2\2\2\u19a6"+
		"\u19a8\7\b\2\2\u19a7\u19a6\3\2\2\2\u19a7\u19a8\3\2\2\2\u19a8\u19a9\3\2"+
		"\2\2\u19a9\u19ad\7\r\2\2\u19aa\u19ac\5\b\5\2\u19ab\u19aa\3\2\2\2\u19ac"+
		"\u19af\3\2\2\2\u19ad\u19ab\3\2\2\2\u19ad\u19ae\3\2\2\2\u19ae\u19b0\3\2"+
		"\2\2\u19af\u19ad\3\2\2\2\u19b0\u19b2\7\u008e\2\2\u19b1\u19b3\7\u034d\2"+
		"\2\u19b2\u19b1\3\2\2\2\u19b2\u19b3\3\2\2\2\u19b3\u19b4\3\2\2\2\u19b4\u19b6"+
		"\7<\2\2\u19b5\u19b7\7\u034d\2\2\u19b6\u19b5\3\2\2\2\u19b6\u19b7\3\2\2"+
		"\2\u19b7\u01ed\3\2\2\2\u19b8\u19b9\7\u02f6\2\2\u19b9\u19c3\5\u0406\u0204"+
		"\2\u19ba\u19bb\7\u00bd\2\2\u19bb\u19c0\5\u01f4\u00fb\2\u19bc\u19bd\7\u034c"+
		"\2\2\u19bd\u19bf\5\u01f4\u00fb\2\u19be\u19bc\3\2\2\2\u19bf\u19c2\3\2\2"+
		"\2\u19c0\u19be\3\2\2\2\u19c0\u19c1\3\2\2\2\u19c1\u19c4\3\2\2\2\u19c2\u19c0"+
		"\3\2\2\2\u19c3\u19ba\3\2\2\2\u19c3\u19c4\3\2\2\2\u19c4\u19c6\3\2\2\2\u19c5"+
		"\u19c7\7\b\2\2\u19c6\u19c5\3\2\2\2\u19c6\u19c7\3\2\2\2\u19c7\u19c8\3\2"+
		"\2\2\u19c8\u19cc\7\r\2\2\u19c9\u19cb\5\b\5\2\u19ca\u19c9\3\2\2\2\u19cb"+
		"\u19ce\3\2\2\2\u19cc\u19ca\3\2\2\2\u19cc\u19cd\3\2\2\2\u19cd\u19cf\3\2"+
		"\2\2\u19ce\u19cc\3\2\2\2\u19cf\u19d0\7\u008e\2\2\u19d0\u19d2\5\u02fa\u017e"+
		"\2\u19d1\u19d3\7\u034d\2\2\u19d2\u19d1\3\2\2\2\u19d2\u19d3\3\2\2\2\u19d3"+
		"\u19d4\3\2\2\2\u19d4\u19d5\7<\2\2\u19d5\u01ef\3\2\2\2\u19d6\u19d8\7\u0331"+
		"\2\2\u19d7\u19d9\7\b\2\2\u19d8\u19d7\3\2\2\2\u19d8\u19d9\3\2\2\2\u19d9"+
		"\u19dd\3\2\2\2\u19da\u19db\5\u0410\u0209\2\u19db\u19dc\7\u0345\2\2\u19dc"+
		"\u19de\3\2\2\2\u19dd\u19da\3\2\2\2\u19dd\u19de\3\2\2\2\u19de\u19df\3\2"+
		"\2\2\u19df\u19e1\5\u0406\u0204\2\u19e0\u19e2\7\u00b7\2\2\u19e1\u19e0\3"+
		"\2\2\2\u19e1\u19e2\3\2\2\2\u19e2\u19e5\3\2\2\2\u19e3\u19e4\7\u0338\2\2"+
		"\u19e4\u19e6\5\u0408\u0205\2\u19e5\u19e3\3\2\2\2\u19e5\u19e6\3\2\2\2\u19e6"+
		"\u19e8\3\2\2\2\u19e7\u19e9\t:\2\2\u19e8\u19e7\3\2\2\2\u19e8\u19e9\3\2"+
		"\2\2\u19e9\u01f1\3\2\2\2\u19ea\u19ee\7\u0132\2\2\u19eb\u19ee\7\u01ee\2"+
		"\2\u19ec\u19ee\5\u02ce\u0168\2\u19ed\u19ea\3\2\2\2\u19ed\u19eb\3\2\2\2"+
		"\u19ed\u19ec\3\2\2\2\u19ee\u01f3\3\2\2\2\u19ef\u19fc\7\u0132\2\2\u19f0"+
		"\u19fc\7\u0209\2\2\u19f1\u19f2\7\u02f6\2\2\u19f2\u19f3\7k\2\2\u19f3\u19f4"+
		"\7p\2\2\u19f4\u19f5\7k\2\2\u19f5\u19fc\7\u0168\2\2\u19f6\u19f7\7\u027d"+
		"\2\2\u19f7\u19f8\7p\2\2\u19f8\u19f9\7k\2\2\u19f9\u19fc\7\u0168\2\2\u19fa"+
		"\u19fc\5\u02ce\u0168\2\u19fb\u19ef\3\2\2\2\u19fb\u19f0\3\2\2\2\u19fb\u19f1"+
		"\3\2\2\2\u19fb\u19f6\3\2\2\2\u19fb\u19fa\3\2\2\2\u19fc\u01f5\3\2\2\2\u19fd"+
		"\u19fe\7#\2\2\u19fe\u19ff\7\u00a2\2\2\u19ff\u1a00\5\u0410\u0209\2\u1a00"+
		"\u1a01\7p\2\2\u1a01\u1a02\5\u03d2\u01ea\2\u1a02\u1a03\7\u034a\2\2\u1a03"+
		"\u1a04\5\u03e6\u01f4\2\u1a04\u1a17\7\u034b\2\2\u1a05\u1a0b\7\u00bd\2\2"+
		"\u1a06\u1a0c\7\u014f\2\2\u1a07\u1a08\7\u0208\2\2\u1a08\u1a09\7\u0332\2"+
		"\2\u1a09\u1a0c\t;\2\2\u1a0a\u1a0c\7\u022a\2\2\u1a0b\u1a06\3\2\2\2\u1a0b"+
		"\u1a07\3\2\2\2\u1a0b\u1a0a\3\2\2\2\u1a0c\u1a0f\3\2\2\2\u1a0d\u1a0e\7\u034c"+
		"\2\2\u1a0e\u1a10\7\u01b2\2\2\u1a0f\u1a0d\3\2\2\2\u1a0f\u1a10\3\2\2\2\u1a10"+
		"\u1a15\3\2\2\2\u1a11\u1a12\7\u034c\2\2\u1a12\u1a13\7\u0166\2\2\u1a13\u1a14"+
		"\7\u0338\2\2\u1a14\u1a16\5\u03ea\u01f6\2\u1a15\u1a11\3\2\2\2\u1a15\u1a16"+
		"\3\2\2\2\u1a16\u1a18\3\2\2\2\u1a17\u1a05\3\2\2\2\u1a17\u1a18\3\2\2\2\u1a18"+
		"\u1a1a\3\2\2\2\u1a19\u1a1b\7\u034d\2\2\u1a1a\u1a19\3\2\2\2\u1a1a\u1a1b"+
		"\3\2\2\2\u1a1b\u01f7\3\2\2\2\u1a1c\u1a1e\7\u00b2\2\2\u1a1d\u1a1f\t<\2"+
		"\2\u1a1e\u1a1d\3\2\2\2\u1a1e\u1a1f\3\2\2\2\u1a1f\u1a20\3\2\2\2\u1a20\u1a21"+
		"\7\u00a2\2\2\u1a21\u1a23\5\u03d0\u01e9\2\u1a22\u1a24\5\u0410\u0209\2\u1a23"+
		"\u1a22\3\2\2\2\u1a23\u1a24\3\2\2\2\u1a24\u1a28\3\2\2\2\u1a25\u1a26\7\u0253"+
		"\2\2\u1a26\u1a27\7\u0332\2\2\u1a27\u1a29\7\u00b6\2\2\u1a28\u1a25\3\2\2"+
		"\2\u1a28\u1a29\3\2\2\2\u1a29\u01f9\3\2\2\2\u1a2a\u1a2b\7#\2\2\u1a2b\u1a2c"+
		"\7\u00a4\2\2\u1a2c\u1a2d\5\u03d2\u01ea\2\u1a2d\u1a2e\7\u034a\2\2\u1a2e"+
		"\u1a35\5\u02da\u016e\2\u1a2f\u1a31\7\u034c\2\2\u1a30\u1a2f\3\2\2\2\u1a30"+
		"\u1a31\3\2\2\2\u1a31\u1a32\3\2\2\2\u1a32\u1a34\5\u01fc\u00ff\2\u1a33\u1a30"+
		"\3\2\2\2\u1a34\u1a37\3\2\2\2\u1a35\u1a33\3\2\2\2\u1a35\u1a36\3\2\2\2\u1a36"+
		"\u1a39\3\2\2\2\u1a37\u1a35\3\2\2\2\u1a38\u1a3a\7\u034c\2\2\u1a39\u1a38"+
		"\3\2\2\2\u1a39\u1a3a\3\2\2\2\u1a3a\u1a3b\3\2\2\2\u1a3b\u1a3e\7\u034b\2"+
		"\2\u1a3c\u1a3d\7\u0181\2\2\u1a3d\u1a3f\5\u0412\u020a\2\u1a3e\u1a3c\3\2"+
		"\2\2\u1a3e\u1a3f\3\2\2\2\u1a3f\u1a43\3\2\2\2\u1a40\u1a42\5\u01fe\u0100"+
		"\2\u1a41\u1a40\3\2\2\2\u1a42\u1a45\3\2\2\2\u1a43\u1a41\3\2\2\2\u1a43\u1a44"+
		"\3\2\2\2\u1a44\u1a49\3\2\2\2\u1a45\u1a43\3\2\2\2\u1a46\u1a47\7p\2\2\u1a47"+
		"\u1a4a\5\u0410\u0209\2\u1a48\u1a4a\7/\2\2\u1a49\u1a46\3\2\2\2\u1a49\u1a48"+
		"\3\2\2\2\u1a49\u1a4a\3\2\2\2\u1a4a\u1a4e\3\2\2\2\u1a4b\u1a4c\7\u023d\2"+
		"\2\u1a4c\u1a4f\5\u0410\u0209\2\u1a4d\u1a4f\7/\2\2\u1a4e\u1a4b\3\2\2\2"+
		"\u1a4e\u1a4d\3\2\2\2\u1a4e\u1a4f\3\2\2\2\u1a4f\u1a51\3\2\2\2\u1a50\u1a52"+
		"\7\u034d\2\2\u1a51\u1a50\3\2\2\2\u1a51\u1a52\3\2\2\2\u1a52\u01fb\3\2\2"+
		"\2\u1a53\u1a54\7X\2\2\u1a54\u1a56\5\u0410\u0209\2\u1a55\u1a57\t=\2\2\u1a56"+
		"\u1a55\3\2\2\2\u1a56\u1a57\3\2\2\2\u1a57\u1a58\3\2\2\2\u1a58\u1a59\7\u034a"+
		"\2\2\u1a59\u1a5a\5\u03e0\u01f1\2\u1a5a\u1a5c\7\u034b\2\2\u1a5b\u1a5d\5"+
		"\u02ea\u0176\2\u1a5c\u1a5b\3\2\2\2\u1a5c\u1a5d\3\2\2\2\u1a5d\u1a60\3\2"+
		"\2\2\u1a5e\u1a5f\7p\2\2\u1a5f\u1a61\5\u0410\u0209\2\u1a60\u1a5e\3\2\2"+
		"\2\u1a60\u1a61\3\2\2\2\u1a61\u01fd\3\2\2\2\u1a62\u1a76\7\u00bd\2\2\u1a63"+
		"\u1a64\7\u034a\2\2\u1a64\u1a69\5\u02ec\u0177\2\u1a65\u1a66\7\u034c\2\2"+
		"\u1a66\u1a68\5\u02ec\u0177\2\u1a67\u1a65\3\2\2\2\u1a68\u1a6b\3\2\2\2\u1a69"+
		"\u1a67\3\2\2\2\u1a69\u1a6a\3\2\2\2\u1a6a\u1a6c\3\2\2\2\u1a6b\u1a69\3\2"+
		"\2\2\u1a6c\u1a6d\7\u034b\2\2\u1a6d\u1a77\3\2\2\2\u1a6e\u1a73\5\u02ec\u0177"+
		"\2\u1a6f\u1a70\7\u034c\2\2\u1a70\u1a72\5\u02ec\u0177\2\u1a71\u1a6f\3\2"+
		"\2\2\u1a72\u1a75\3\2\2\2\u1a73\u1a71\3\2\2\2\u1a73\u1a74\3\2\2\2\u1a74"+
		"\u1a77\3\2\2\2\u1a75\u1a73\3\2\2\2\u1a76\u1a63\3\2\2\2\u1a76\u1a6e\3\2"+
		"\2\2\u1a77\u01ff\3\2\2\2\u1a78\u1a79\7#\2\2\u1a79\u1a7a\7\u00b8\2\2\u1a7a"+
		"\u1a7f\5\u03d4\u01eb\2\u1a7b\u1a7c\7\u034a\2\2\u1a7c\u1a7d\5\u03e6\u01f4"+
		"\2\u1a7d\u1a7e\7\u034b\2\2\u1a7e\u1a80\3\2\2\2\u1a7f\u1a7b\3\2\2\2\u1a7f"+
		"\u1a80\3\2\2\2\u1a80\u1a8a\3\2\2\2\u1a81\u1a82\7\u00bd\2\2\u1a82\u1a87"+
		"\5\u0202\u0102\2\u1a83\u1a84\7\u034c\2\2\u1a84\u1a86\5\u0202\u0102\2\u1a85"+
		"\u1a83\3\2\2\2\u1a86\u1a89\3\2\2\2\u1a87\u1a85\3\2\2\2\u1a87\u1a88\3\2"+
		"\2\2\u1a88\u1a8b\3\2\2\2\u1a89\u1a87\3\2\2\2\u1a8a\u1a81\3\2\2\2\u1a8a"+
		"\u1a8b\3\2\2\2\u1a8b\u1a8c\3\2\2\2\u1a8c\u1a8d\7\b\2\2\u1a8d\u1a91\5\u01c6"+
		"\u00e4\2\u1a8e\u1a8f\7\u00bd\2\2\u1a8f\u1a90\7\25\2\2\u1a90\u1a92\7w\2"+
		"\2\u1a91\u1a8e\3\2\2\2\u1a91\u1a92\3\2\2\2\u1a92\u1a94\3\2\2\2\u1a93\u1a95"+
		"\7\u034d\2\2\u1a94\u1a93\3\2\2\2\u1a94\u1a95\3\2\2\2\u1a95\u0201\3\2\2"+
		"\2\u1a96\u1a97\t>\2\2\u1a97\u0203\3\2\2\2\u1a98\u1a99\7\5\2\2\u1a99\u1a9a"+
		"\7\u00a4\2\2\u1a9a\u1ac6\5\u03d2\u01ea\2\u1a9b\u1a9c\7\u009e\2\2\u1a9c"+
		"\u1a9d\7\u034a\2\2\u1a9d\u1a9e\7\u0182\2\2\u1a9e\u1a9f\7\u0338\2\2\u1a9f"+
		"\u1aa0\t?\2\2\u1aa0\u1ac7\7\u034b\2\2\u1aa1\u1aa2\7\3\2\2\u1aa2\u1ac7"+
		"\5\u02da\u016e\2\u1aa3\u1aa4\7\5\2\2\u1aa4\u1aa5\7\33\2\2\u1aa5\u1ac7"+
		"\5\u02de\u0170\2\u1aa6\u1aa7\79\2\2\u1aa7\u1aa8\7\33\2\2\u1aa8\u1ac7\5"+
		"\u0410\u0209\2\u1aa9\u1aaa\79\2\2\u1aaa\u1aab\7\36\2\2\u1aab\u1ac7\5\u0410"+
		"\u0209\2\u1aac\u1aad\7\u00bd\2\2\u1aad\u1aae\7\25\2\2\u1aae\u1aaf\7\3"+
		"\2\2\u1aaf\u1ab0\7\36\2\2\u1ab0\u1ab1\5\u0410\u0209\2\u1ab1\u1ab2\7H\2"+
		"\2\u1ab2\u1ab3\7_\2\2\u1ab3\u1ab4\7\u034a\2\2\u1ab4\u1ab5\5\u03e6\u01f4"+
		"\2\u1ab5\u1ab6\7\u034b\2\2\u1ab6\u1ab7\7\u008a\2\2\u1ab7\u1ab8\5\u03d2"+
		"\u01ea\2\u1ab8\u1ab9\7\u034a\2\2\u1ab9\u1aba\5\u03e6\u01f4\2\u1aba\u1abb"+
		"\7\u034b\2\2\u1abb\u1ac7\3\2\2\2\u1abc\u1abd\7\25\2\2\u1abd\u1abe\7\36"+
		"\2\2\u1abe\u1ac7\5\u0410\u0209\2\u1abf\u1ac0\t\27\2\2\u1ac0\u1ac2\7\u00ac"+
		"\2\2\u1ac1\u1ac3\5\u0410\u0209\2\u1ac2\u1ac1\3\2\2\2\u1ac2\u1ac3\3\2\2"+
		"\2\u1ac3\u1ac7\3\2\2\2\u1ac4\u1ac5\7\u01ec\2\2\u1ac5\u1ac7\5\u01fe\u0100"+
		"\2\u1ac6\u1a9b\3\2\2\2\u1ac6\u1aa1\3\2\2\2\u1ac6\u1aa3\3\2\2\2\u1ac6\u1aa6"+
		"\3\2\2\2\u1ac6\u1aa9\3\2\2\2\u1ac6\u1aac\3\2\2\2\u1ac6\u1abc\3\2\2\2\u1ac6"+
		"\u1abf\3\2\2\2\u1ac6\u1ac4\3\2\2\2\u1ac7\u1ac9\3\2\2\2\u1ac8\u1aca\7\u034d"+
		"\2\2\u1ac9\u1ac8\3\2\2\2\u1ac9\u1aca\3\2\2\2\u1aca\u0205\3\2\2\2\u1acb"+
		"\u1acc\7\5\2\2\u1acc\u1acf\7+\2\2\u1acd\u1ad0\5\u0410\u0209\2\u1ace\u1ad0"+
		"\7%\2\2\u1acf\u1acd\3\2\2\2\u1acf\u1ace\3\2\2\2\u1ad0\u1add\3\2\2\2\u1ad1"+
		"\u1ad2\7\u01a2\2\2\u1ad2\u1ad3\7\u01a5\2\2\u1ad3\u1ad4\7\u0338\2\2\u1ad4"+
		"\u1ade\5\u0410\u0209\2\u1ad5\u1ad6\7\32\2\2\u1ad6\u1ade\5\u0410\u0209"+
		"\2\u1ad7\u1ad8\7\u009e\2\2\u1ad8\u1adb\5\u0208\u0105\2\u1ad9\u1ada\7\u00bd"+
		"\2\2\u1ada\u1adc\5\u024e\u0128\2\u1adb\u1ad9\3\2\2\2\u1adb\u1adc\3\2\2"+
		"\2\u1adc\u1ade\3\2\2\2\u1add\u1ad1\3\2\2\2\u1add\u1ad5\3\2\2\2\u1add\u1ad7"+
		"\3\2\2\2\u1ade\u1ae0\3\2\2\2\u1adf\u1ae1\7\u034d\2\2\u1ae0\u1adf\3\2\2"+
		"\2\u1ae0\u1ae1\3\2\2\2\u1ae1\u0207\3\2\2\2\u1ae2\u1afa\5\u020a\u0106\2"+
		"\u1ae3\u1afa\5\u020c\u0107\2\u1ae4\u1afa\5\u0210\u0109\2\u1ae5\u1afa\5"+
		"\u0212\u010a\2\u1ae6\u1afa\5\u0216\u010c\2\u1ae7\u1afa\5\u0230\u0119\2"+
		"\u1ae8\u1afa\5\u0232\u011a\2\u1ae9\u1afa\5\u0234\u011b\2\u1aea\u1afa\5"+
		"\u0236\u011c\2\u1aeb\u1afa\5\u0238\u011d\2\u1aec\u1afa\5\u023a\u011e\2"+
		"\u1aed\u1afa\5\u023c\u011f\2\u1aee\u1aef\7\u0145\2\2\u1aef\u1afa\5\u03c2"+
		"\u01e2\2\u1af0\u1afa\5\u023e\u0120\2\u1af1\u1afa\5\u0240\u0121\2\u1af2"+
		"\u1afa\5\u0242\u0122\2\u1af3\u1afa\5\u0244\u0123\2\u1af4\u1afa\5\u0246"+
		"\u0124\2\u1af5\u1afa\5\u0248\u0125\2\u1af6\u1afa\5\u024a\u0126\2\u1af7"+
		"\u1afa\5\u024c\u0127\2\u1af8\u1afa\5\u024e\u0128\2\u1af9\u1ae2\3\2\2\2"+
		"\u1af9\u1ae3\3\2\2\2\u1af9\u1ae4\3\2\2\2\u1af9\u1ae5\3\2\2\2\u1af9\u1ae6"+
		"\3\2\2\2\u1af9\u1ae7\3\2\2\2\u1af9\u1ae8\3\2\2\2\u1af9\u1ae9\3\2\2\2\u1af9"+
		"\u1aea\3\2\2\2\u1af9\u1aeb\3\2\2\2\u1af9\u1aec\3\2\2\2\u1af9\u1aed\3\2"+
		"\2\2\u1af9\u1aee\3\2\2\2\u1af9\u1af0\3\2\2\2\u1af9\u1af1\3\2\2\2\u1af9"+
		"\u1af2\3\2\2\2\u1af9\u1af3\3\2\2\2\u1af9\u1af4\3\2\2\2\u1af9\u1af5\3\2"+
		"\2\2\u1af9\u1af6\3\2\2\2\u1af9\u1af7\3\2\2\2\u1af9\u1af8\3\2\2\2\u1afa"+
		"\u0209\3\2\2\2\u1afb\u1afc\7\u00dd\2\2\u1afc\u1b0d\5\u03ea\u01f6\2\u1afd"+
		"\u1afe\7\u00de\2\2\u1afe\u1b0d\7n\2\2\u1aff\u1b04\7p\2\2\u1b00\u1b01\7"+
		"\u0166\2\2\u1b01\u1b02\7\u0338\2\2\u1b02\u1b05\7p\2\2\u1b03\u1b05\7n\2"+
		"\2\u1b04\u1b00\3\2\2\2\u1b04\u1b03\3\2\2\2\u1b05\u1b0d\3\2\2\2\u1b06\u1b07"+
		"\7\u00df\2\2\u1b07\u1b0d\5\u03ea\u01f6\2\u1b08\u1b09\7\u00e0\2\2\u1b09"+
		"\u1b0d\5\u03ea\u01f6\2\u1b0a\u1b0b\7\u00e1\2\2\u1b0b\u1b0d\t\t\2\2\u1b0c"+
		"\u1afb\3\2\2\2\u1b0c\u1afd\3\2\2\2\u1b0c\u1aff\3\2\2\2\u1b0c\u1b06\3\2"+
		"\2\2\u1b0c\u1b08\3\2\2\2\u1b0c\u1b0a\3\2\2\2\u1b0d\u020b\3\2\2\2\u1b0e"+
		"\u1b0f\7\u00f6\2\2\u1b0f\u1b1f\7\u0338\2\2\u1b10\u1b20\7n\2\2\u1b11\u1b1c"+
		"\7p\2\2\u1b12\u1b17\5\u020e\u0108\2\u1b13\u1b14\7\u034c\2\2\u1b14\u1b16"+
		"\5\u020e\u0108\2\u1b15\u1b13\3\2\2\2\u1b16\u1b19\3\2\2\2\u1b17\u1b15\3"+
		"\2\2\2\u1b17\u1b18\3\2\2\2\u1b18\u1b1b\3\2\2\2\u1b19\u1b17\3\2\2\2\u1b1a"+
		"\u1b12\3\2\2\2\u1b1b\u1b1e\3\2\2\2\u1b1c\u1b1a\3\2\2\2\u1b1c\u1b1d\3\2"+
		"\2\2\u1b1d\u1b20\3\2\2\2\u1b1e\u1b1c\3\2\2\2\u1b1f\u1b10\3\2\2\2\u1b1f"+
		"\u1b11\3\2\2\2\u1b20\u020d\3\2\2\2\u1b21\u1b22\7\u00dc\2\2\u1b22\u1b23"+
		"\7\u0338\2\2\u1b23\u1b28\5\u03ea\u01f6\2\u1b24\u1b25\7\u00f5\2\2\u1b25"+
		"\u1b26\7\u0338\2\2\u1b26\u1b28\t@\2\2\u1b27\u1b21\3\2\2\2\u1b27\u1b24"+
		"\3\2\2\2\u1b28\u020f\3\2\2\2\u1b29\u1b2a\7\u0287\2\2\u1b2a\u1b2b\7\u0338"+
		"\2\2\u1b2b\u1b2c\t\65\2\2\u1b2c\u0211\3\2\2\2\u1b2d\u1b2e\7\u010c\2\2"+
		"\u1b2e\u1b32\5\u03ea\u01f6\2\u1b2f\u1b30\7\u010d\2\2\u1b30\u1b32\tA\2"+
		"\2\u1b31\u1b2d\3\2\2\2\u1b31\u1b2f\3\2\2\2\u1b32\u0213\3\2\2\2\u1b33\u1b34"+
		"\7\5\2\2\u1b34\u1b35\7\u0298\2\2\u1b35\u1b38\5\u0410\u0209\2\u1b36\u1b37"+
		"\7\n\2\2\u1b37\u1b39\5\u0410\u0209\2\u1b38\u1b36\3\2\2\2\u1b38\u1b39\3"+
		"\2\2\2\u1b39\u1b41\3\2\2\2\u1b3a\u1b3b\7\u0311\2\2\u1b3b\u1b3f\7\u0338"+
		"\2\2\u1b3c\u1b40\7\u0314\2\2\u1b3d\u1b40\7\u0317\2\2\u1b3e\u1b40\7\u0128"+
		"\2\2\u1b3f\u1b3c\3\2\2\2\u1b3f\u1b3d\3\2\2\2\u1b3f\u1b3e\3\2\2\2\u1b40"+
		"\u1b42\3\2\2\2\u1b41\u1b3a\3\2\2\2\u1b41\u1b42\3\2\2\2\u1b42\u1b43\3\2"+
		"\2\2\u1b43\u1b44\7\b\2\2\u1b44\u1b45\7\u031c\2\2\u1b45\u1b46\7\u034a\2"+
		"\2\u1b46\u1b47\7\u02bb\2\2\u1b47\u1b48\7\u0338\2\2\u1b48\u1b4d\7\u0332"+
		"\2\2\u1b49\u1b4a\7\u034c\2\2\u1b4a\u1b4b\7\u02ba\2\2\u1b4b\u1b4c\7\u0338"+
		"\2\2\u1b4c\u1b4e\tB\2\2\u1b4d\u1b49\3\2\2\2\u1b4d\u1b4e\3\2\2\2\u1b4e"+
		"\u1b4f\3\2\2\2\u1b4f\u1bbd\7\u034b\2\2\u1b50\u1bbe\7\u024a\2\2\u1b51\u1b52"+
		"\7G\2\2\u1b52\u1b53\7\u0304\2\2\u1b53\u1b54\7\u034a\2\2\u1b54\u1b55\7"+
		"\u0272\2\2\u1b55\u1b66\7\u0338\2\2\u1b56\u1b58\7\u0326\2\2\u1b57\u1b59"+
		"\tC\2\2\u1b58\u1b57\3\2\2\2\u1b58\u1b59\3\2\2\2\u1b59\u1b5c\3\2\2\2\u1b5a"+
		"\u1b5b\7\u027e\2\2\u1b5b\u1b5d\5\u0410\u0209\2\u1b5c\u1b5a\3\2\2\2\u1b5c"+
		"\u1b5d\3\2\2\2\u1b5d\u1b67\3\2\2\2\u1b5e\u1b5f\7\u027e\2\2\u1b5f\u1b61"+
		"\5\u0410\u0209\2\u1b60\u1b62\7\u0326\2\2\u1b61\u1b60\3\2\2\2\u1b61\u1b62"+
		"\3\2\2\2\u1b62\u1b64\3\2\2\2\u1b63\u1b65\tC\2\2\u1b64\u1b63\3\2\2\2\u1b64"+
		"\u1b65\3\2\2\2\u1b65\u1b67\3\2\2\2\u1b66\u1b56\3\2\2\2\u1b66\u1b5e\3\2"+
		"\2\2\u1b67\u1b79\3\2\2\2\u1b68\u1b6a\7\u034c\2\2\u1b69\u1b68\3\2\2\2\u1b69"+
		"\u1b6a\3\2\2\2\u1b6a\u1b6b\3\2\2\2\u1b6b\u1b6c\7\u0132\2\2\u1b6c\u1b6d"+
		"\7\u0338\2\2\u1b6d\u1b77\tD\2\2\u1b6e\u1b75\7\u00cd\2\2\u1b6f\u1b76\7"+
		"\u0269\2\2\u1b70\u1b76\7\u01e5\2\2\u1b71\u1b72\7\u0269\2\2\u1b72\u1b76"+
		"\7\u01e5\2\2\u1b73\u1b74\7\u01e5\2\2\u1b74\u1b76\7\u0269\2\2\u1b75\u1b6f"+
		"\3\2\2\2\u1b75\u1b70\3\2\2\2\u1b75\u1b71\3\2\2\2\u1b75\u1b73\3\2\2\2\u1b76"+
		"\u1b78\3\2\2\2\u1b77\u1b6e\3\2\2\2\u1b77\u1b78\3\2\2\2\u1b78\u1b7a\3\2"+
		"\2\2\u1b79\u1b69\3\2\2\2\u1b79\u1b7a\3\2\2\2\u1b7a\u1b81\3\2\2\2\u1b7b"+
		"\u1b7d\7\u034c\2\2\u1b7c\u1b7b\3\2\2\2\u1b7c\u1b7d\3\2\2\2\u1b7d\u1b7e"+
		"\3\2\2\2\u1b7e\u1b7f\7\u02cb\2\2\u1b7f\u1b80\7\u0338\2\2\u1b80\u1b82\t"+
		"E\2\2\u1b81\u1b7c\3\2\2\2\u1b81\u1b82\3\2\2\2\u1b82\u1b89\3\2\2\2\u1b83"+
		"\u1b85\7\u034c\2\2\u1b84\u1b83\3\2\2\2\u1b84\u1b85\3\2\2\2\u1b85\u1b86"+
		"\3\2\2\2\u1b86\u1b87\7\u02cc\2\2\u1b87\u1b88\7\u0338\2\2\u1b88\u1b8a\7"+
		"\u0332\2\2\u1b89\u1b84\3\2\2\2\u1b89\u1b8a\3\2\2\2\u1b8a\u1b8b\3\2\2\2"+
		"\u1b8b\u1bbe\7\u034b\2\2\u1b8c\u1b8d\7G\2\2\u1b8d\u1b8e\7\u0291\2\2\u1b8e"+
		"\u1b8f\7\u034a\2\2\u1b8f\u1b90\7\u0272\2\2\u1b90\u1ba1\7\u0338\2\2\u1b91"+
		"\u1b93\7\u0326\2\2\u1b92\u1b94\tC\2\2\u1b93\u1b92\3\2\2\2\u1b93\u1b94"+
		"\3\2\2\2\u1b94\u1b97\3\2\2\2\u1b95\u1b96\7\u027e\2\2\u1b96\u1b98\5\u0410"+
		"\u0209\2\u1b97\u1b95\3\2\2\2\u1b97\u1b98\3\2\2\2\u1b98\u1ba2\3\2\2\2\u1b99"+
		"\u1b9a\7\u027e\2\2\u1b9a\u1b9c\5\u0410\u0209\2\u1b9b\u1b9d\7\u0326\2\2"+
		"\u1b9c\u1b9b\3\2\2\2\u1b9c\u1b9d\3\2\2\2\u1b9d\u1b9f\3\2\2\2\u1b9e\u1ba0"+
		"\tC\2\2\u1b9f\u1b9e\3\2\2\2\u1b9f\u1ba0\3\2\2\2\u1ba0\u1ba2\3\2\2\2\u1ba1"+
		"\u1b91\3\2\2\2\u1ba1\u1b99\3\2\2\2\u1ba2\u1bb4\3\2\2\2\u1ba3\u1ba5\7\u034c"+
		"\2\2\u1ba4\u1ba3\3\2\2\2\u1ba4\u1ba5\3\2\2\2\u1ba5\u1ba6\3\2\2\2\u1ba6"+
		"\u1ba7\7\u0132\2\2\u1ba7\u1ba8\7\u0338\2\2\u1ba8\u1bb2\tD\2\2\u1ba9\u1bb0"+
		"\7\u00cd\2\2\u1baa\u1bb1\7\u0269\2\2\u1bab\u1bb1\7\u01e5\2\2\u1bac\u1bad"+
		"\7\u0269\2\2\u1bad\u1bb1\7\u01e5\2\2\u1bae\u1baf\7\u01e5\2\2\u1baf\u1bb1"+
		"\7\u0269\2\2\u1bb0\u1baa\3\2\2\2\u1bb0\u1bab\3\2\2\2\u1bb0\u1bac\3\2\2"+
		"\2\u1bb0\u1bae\3\2\2\2\u1bb1\u1bb3\3\2\2\2\u1bb2\u1ba9\3\2\2\2\u1bb2\u1bb3"+
		"\3\2\2\2\u1bb3\u1bb5\3\2\2\2\u1bb4\u1ba4\3\2\2\2\u1bb4\u1bb5\3\2\2\2\u1bb5"+
		"\u1bb7\3\2\2\2\u1bb6\u1bb8\7\u034c\2\2\u1bb7\u1bb6\3\2\2\2\u1bb7\u1bb8"+
		"\3\2\2\2\u1bb8\u1bb9\3\2\2\2\u1bb9\u1bba\7\u02f8\2\2\u1bba\u1bbb\7\u0338"+
		"\2\2\u1bbb\u1bbc\tF\2\2\u1bbc\u1bbe\7\u034b\2\2\u1bbd\u1b50\3\2\2\2\u1bbd"+
		"\u1b51\3\2\2\2\u1bbd\u1b8c\3\2\2\2\u1bbe\u0215\3\2\2\2\u1bbf\u1bc0\5\u0218"+
		"\u010d\2\u1bc0\u0217\3\2\2\2\u1bc1\u1bc2\5\u021a\u010e\2\u1bc2\u1bc3\5"+
		"\u0220\u0111\2\u1bc3\u1bc8\3\2\2\2\u1bc4\u1bc5\5\u021c\u010f\2\u1bc5\u1bc6"+
		"\5\u0222\u0112\2\u1bc6\u1bc8\3\2\2\2\u1bc7\u1bc1\3\2\2\2\u1bc7\u1bc4\3"+
		"\2\2\2\u1bc8\u0219\3\2\2\2\u1bc9\u1bca\7\u01ca\2\2\u1bca\u021b\3\2\2\2"+
		"\u1bcb\u1bcc\7\u0328\2\2\u1bcc\u021d\3\2\2\2\u1bcd\u1bce\7\u0338\2\2\u1bce"+
		"\u021f\3\2\2\2\u1bcf\u1bd0\5\u021e\u0110\2\u1bd0\u1bd1\5\u0226\u0114\2"+
		"\u1bd1\u1bdc\3\2\2\2\u1bd2\u1bdc\7\u02a1\2\2\u1bd3\u1bdc\7\u02a6\2\2\u1bd4"+
		"\u1bdc\7n\2\2\u1bd5\u1bdc\7\u02f4\2\2\u1bd6\u1bd7\7\u02fe\2\2\u1bd7\u1bdc"+
		"\tG\2\2\u1bd8\u1bdc\7\u0235\2\2\u1bd9\u1bda\7\u0241\2\2\u1bda\u1bdc\7"+
		"\u0332\2\2\u1bdb\u1bcf\3\2\2\2\u1bdb\u1bd2\3\2\2\2\u1bdb\u1bd3\3\2\2\2"+
		"\u1bdb\u1bd4\3\2\2\2\u1bdb\u1bd5\3\2\2\2\u1bdb\u1bd6\3\2\2\2\u1bdb\u1bd8"+
		"\3\2\2\2\u1bdb\u1bd9\3\2\2\2\u1bdc\u0221\3\2\2\2\u1bdd\u1bde\5\u021e\u0110"+
		"\2\u1bde\u1bdf\5\u0224\u0113\2\u1bdf\u1be2\3\2\2\2\u1be0\u1be2\7n\2\2"+
		"\u1be1\u1bdd\3\2\2\2\u1be1\u1be0\3\2\2\2\u1be2\u0223\3\2\2\2\u1be3\u1be4"+
		"\5\u0226\u0114\2\u1be4\u0225\3\2\2\2\u1be5\u1be6\5\u022a\u0116\2\u1be6"+
		"\u1be7\5\u022e\u0118\2\u1be7\u1be8\5\u0228\u0115\2\u1be8\u1be9\5\u022c"+
		"\u0117\2\u1be9\u0227\3\2\2\2\u1bea\u1beb\7\u034e\2\2\u1beb\u0229\3\2\2"+
		"\2\u1bec\u1bed\7\u031c\2\2\u1bed\u1bee\7\u034e\2\2\u1bee\u1bef\78\2\2"+
		"\u1bef\u022b\3\2\2\2\u1bf0\u1bf1\7\u0332\2\2\u1bf1\u022d\3\2\2\2\u1bf2"+
		"\u1bf3\5\u0410\u0209\2\u1bf3\u1bf4\7\u0345\2\2\u1bf4\u1bf5\5\u022e\u0118"+
		"\2\u1bf5\u1bfd\3\2\2\2\u1bf6\u1bf7\5\u0410\u0209\2\u1bf7\u1bf8\7\u0345"+
		"\2\2\u1bf8\u1bfb\3\2\2\2\u1bf9\u1bfb\5\u0410\u0209\2\u1bfa\u1bf6\3\2\2"+
		"\2\u1bfa\u1bf9\3\2\2\2\u1bfb\u1bfd\3\2\2\2\u1bfc\u1bf2\3\2\2\2\u1bfc\u1bfa"+
		"\3\2\2\2\u1bfd\u022f\3\2\2\2\u1bfe\u1bff\7\u010f\2\2\u1bff\u1c00\5\u03ea"+
		"\u01f6\2\u1c00\u0231\3\2\2\2\u1c01\u1c02\7\u0132\2\2\u1c02\u1c03\5\u03ea"+
		"\u01f6\2\u1c03\u0233\3\2\2\2\u1c04\u1c05\tH\2\2\u1c05\u0235\3\2\2\2\u1c06"+
		"\u1c07\tI\2\2\u1c07\u0237\3\2\2\2\u1c08\u1c09\tJ\2\2\u1c09\u0239\3\2\2"+
		"\2\u1c0a\u1c0b\7\u011c\2\2\u1c0b\u1c0c\7\u0338\2\2\u1c0c\u1c0d\tK\2\2"+
		"\u1c0d\u023b\3\2\2\2\u1c0e\u1c0f\7\u0115\2\2\u1c0f\u1c28\5\u03ea\u01f6"+
		"\2\u1c10\u1c11\7\u0248\2\2\u1c11\u1c28\5\u03ea\u01f6\2\u1c12\u1c13\7\u011a"+
		"\2\2\u1c13\u1c16\7\u0338\2\2\u1c14\u1c17\5\u0410\u0209\2\u1c15\u1c17\7"+
		"\u0334\2\2\u1c16\u1c14\3\2\2\2\u1c16\u1c15\3\2\2\2\u1c17\u1c28\3\2\2\2"+
		"\u1c18\u1c19\7\u0119\2\2\u1c19\u1c1c\7\u0338\2\2\u1c1a\u1c1d\5\u0410\u0209"+
		"\2\u1c1b\u1c1d\7\u0334\2\2\u1c1c\u1c1a\3\2\2\2\u1c1c\u1c1b\3\2\2\2\u1c1d"+
		"\u1c28\3\2\2\2\u1c1e\u1c1f\7\u01a6\2\2\u1c1f\u1c20\7\u0338\2\2\u1c20\u1c28"+
		"\t\t\2\2\u1c21\u1c22\7\u0245\2\2\u1c22\u1c23\7\u0338\2\2\u1c23\u1c28\t"+
		"\t\2\2\u1c24\u1c25\7\u024b\2\2\u1c25\u1c26\7\u0338\2\2\u1c26\u1c28\7\u0332"+
		"\2\2\u1c27\u1c0e\3\2\2\2\u1c27\u1c10\3\2\2\2\u1c27\u1c12\3\2\2\2\u1c27"+
		"\u1c18\3\2\2\2\u1c27\u1c1e\3\2\2\2\u1c27\u1c21\3\2\2\2\u1c27\u1c24\3\2"+
		"\2\2\u1c28\u023d\3\2\2\2\u1c29\u1c32\7\u015a\2\2\u1c2a\u1c2b\7\u00e2\2"+
		"\2\u1c2b\u1c2c\7P\2\2\u1c2c\u1c2d\7\u0338\2\2\u1c2d\u1c30\5\u0410\u0209"+
		"\2\u1c2e\u1c30\7n\2\2\u1c2f\u1c2a\3\2\2\2\u1c2f\u1c2e\3\2\2\2\u1c30\u1c33"+
		"\3\2\2\2\u1c31\u1c33\tL\2\2\u1c32\u1c2f\3\2\2\2\u1c32\u1c31\3\2\2\2\u1c33"+
		"\u023f\3\2\2\2\u1c34\u1c35\7\u01a0\2\2\u1c35\u1c36\t\t\2\2\u1c36\u0241"+
		"\3\2\2\2\u1c37\u1c38\7\u01c7\2\2\u1c38\u1c39\tM\2\2\u1c39\u0243\3\2\2"+
		"\2\u1c3a\u1c3b\7\u01ef\2\2\u1c3b\u1c41\tN\2\2\u1c3c\u1c3d\7\u0244\2\2"+
		"\u1c3d\u1c41\5\u03ea\u01f6\2\u1c3e\u1c3f\7\u01c6\2\2\u1c3f\u1c41\tO\2"+
		"\2\u1c40\u1c3a\3\2\2\2\u1c40\u1c3c\3\2\2\2\u1c40\u1c3e\3\2\2\2\u1c41\u0245"+
		"\3\2\2\2\u1c42\u1c49\7\u0130\2\2\u1c43\u1c49\7\u0127\2\2\u1c44\u1c49\7"+
		"\u01a8\2\2\u1c45\u1c49\7\u0134\2\2\u1c46\u1c47\7\u015e\2\2\u1c47\u1c49"+
		"\5\u03ea\u01f6\2\u1c48\u1c42\3\2\2\2\u1c48\u1c43\3\2\2\2\u1c48\u1c44\3"+
		"\2\2\2\u1c48\u1c45\3\2\2\2\u1c48\u1c46\3\2\2\2\u1c49\u0247\3\2\2\2\u1c4a"+
		"\u1c4b\7\u00cf\2\2\u1c4b\u1c50\5\u03ea\u01f6\2\u1c4c\u1c4d\7\u01e7\2\2"+
		"\u1c4d\u1c50\t\t\2\2\u1c4e\u1c50\t\t\2\2\u1c4f\u1c4a\3\2\2\2\u1c4f\u1c4c"+
		"\3\2\2\2\u1c4f\u1c4e\3\2\2\2\u1c50\u0249\3\2\2\2\u1c51\u1c52\7\u00d1\2"+
		"\2\u1c52\u1c67\5\u03ea\u01f6\2\u1c53\u1c54\7\u00d2\2\2\u1c54\u1c67\5\u03ea"+
		"\u01f6\2\u1c55\u1c56\7\u00d3\2\2\u1c56\u1c67\5\u03ea\u01f6\2\u1c57\u1c58"+
		"\7\u00d4\2\2\u1c58\u1c67\5\u03ea\u01f6\2\u1c59\u1c5a\7\u00d7\2\2\u1c5a"+
		"\u1c67\5\u03ea\u01f6\2\u1c5b\u1c5c\7\u00fd\2\2\u1c5c\u1c5d\7\u0338\2\2"+
		"\u1c5d\u1c67\7\u0332\2\2\u1c5e\u1c5f\7\u00ff\2\2\u1c5f\u1c67\5\u03ea\u01f6"+
		"\2\u1c60\u1c61\7\u01b8\2\2\u1c61\u1c67\5\u03ea\u01f6\2\u1c62\u1c63\7\u01e1"+
		"\2\2\u1c63\u1c67\5\u03ea\u01f6\2\u1c64\u1c65\7\u01f0\2\2\u1c65\u1c67\5"+
		"\u03ea\u01f6\2\u1c66\u1c51\3\2\2\2\u1c66\u1c53\3\2\2\2\u1c66\u1c55\3\2"+
		"\2\2\u1c66\u1c57\3\2\2\2\u1c66\u1c59\3\2\2\2\u1c66\u1c5b\3\2\2\2\u1c66"+
		"\u1c5e\3\2\2\2\u1c66\u1c60\3\2\2\2\u1c66\u1c62\3\2\2\2\u1c66\u1c64\3\2"+
		"\2\2\u1c67\u024b\3\2\2\2\u1c68\u1c69\7\u023b\2\2\u1c69\u1c6a\7\u0338\2"+
		"\2\u1c6a\u1c6b\7\u0332\2\2\u1c6b\u1c6c\tP\2\2\u1c6c\u024d\3\2\2\2\u1c6d"+
		"\u1c6e\7\u0092\2\2\u1c6e\u1c6f\7\u00cb\2\2\u1c6f\u1c74\7\u0332\2\2\u1c70"+
		"\u1c71\7\u0092\2\2\u1c71\u1c74\7\u0162\2\2\u1c72\u1c74\7\u01ad\2\2\u1c73"+
		"\u1c6d\3\2\2\2\u1c73\u1c70\3\2\2\2\u1c73\u1c72\3\2\2\2\u1c74\u024f\3\2"+
		"\2\2\u1c75\u1c76\79\2\2\u1c76\u1c79\7X\2\2\u1c77\u1c78\7V\2\2\u1c78\u1c7a"+
		"\7A\2\2\u1c79\u1c77\3\2\2\2\u1c79\u1c7a\3\2\2\2\u1c7a\u1c8b\3\2\2\2\u1c7b"+
		"\u1c80\5\u0252\u012a\2\u1c7c\u1c7d\7\u034c\2\2\u1c7d\u1c7f\5\u0252\u012a"+
		"\2\u1c7e\u1c7c\3\2\2\2\u1c7f\u1c82\3\2\2\2\u1c80\u1c7e\3\2\2\2\u1c80\u1c81"+
		"\3\2\2\2\u1c81\u1c8c\3\2\2\2\u1c82\u1c80\3\2\2\2\u1c83\u1c88\5\u0254\u012b"+
		"\2\u1c84\u1c85\7\u034c\2\2\u1c85\u1c87\5\u0254\u012b\2\u1c86\u1c84\3\2"+
		"\2\2\u1c87\u1c8a\3\2\2\2\u1c88\u1c86\3\2\2\2\u1c88\u1c89\3\2\2\2\u1c89"+
		"\u1c8c\3\2\2\2\u1c8a\u1c88\3\2\2\2\u1c8b\u1c7b\3\2\2\2\u1c8b\u1c83\3\2"+
		"\2\2\u1c8c\u1c8e\3\2\2\2\u1c8d\u1c8f\7\u034d\2\2\u1c8e\u1c8d\3\2\2\2\u1c8e"+
		"\u1c8f\3\2\2\2\u1c8f\u0251\3\2\2\2\u1c90\u1c91\5\u0410\u0209\2\u1c91\u1c92"+
		"\7p\2\2\u1c92\u1c93\5\u03d0\u01e9\2\u1c93\u0253\3\2\2\2\u1c94\u1c95\5"+
		"\u0410\u0209\2\u1c95\u1c96\7\u0345\2\2\u1c96\u1c98\3\2\2\2\u1c97\u1c94"+
		"\3\2\2\2\u1c97\u1c98\3\2\2\2\u1c98\u1c99\3\2\2\2\u1c99\u1c9a\5\u0410\u0209"+
		"\2\u1c9a\u1c9b\7\u0345\2\2\u1c9b\u1c9c\5\u0410\u0209\2\u1c9c\u0255\3\2"+
		"\2\2\u1c9d\u1c9e\79\2\2\u1c9e\u1ca1\t\67\2\2\u1c9f\u1ca0\7V\2\2\u1ca0"+
		"\u1ca2\7A\2\2\u1ca1\u1c9f\3\2\2\2\u1ca1\u1ca2\3\2\2\2\u1ca2\u1ca3\3\2"+
		"\2\2\u1ca3\u1ca8\5\u03d6\u01ec\2\u1ca4\u1ca5\7\u034c\2\2\u1ca5\u1ca7\5"+
		"\u03d6\u01ec\2\u1ca6\u1ca4\3\2\2\2\u1ca7\u1caa\3\2\2\2\u1ca8\u1ca6\3\2"+
		"\2\2\u1ca8\u1ca9\3\2\2\2\u1ca9\u1cac\3\2\2\2\u1caa\u1ca8\3\2\2\2\u1cab"+
		"\u1cad\7\u034d\2\2\u1cac\u1cab\3\2\2\2\u1cac\u1cad\3\2\2\2\u1cad\u0257"+
		"\3\2\2\2\u1cae\u1cb1\5\u025a\u012e\2\u1caf\u1cb1\5\u025c\u012f\2\u1cb0"+
		"\u1cae\3\2\2\2\u1cb0\u1caf\3\2\2\2\u1cb1\u0259\3\2\2\2\u1cb2\u1cb3\79"+
		"\2\2\u1cb3\u1cb6\7\u00ac\2\2\u1cb4\u1cb5\7V\2\2\u1cb5\u1cb7\7A\2\2\u1cb6"+
		"\u1cb4\3\2\2\2\u1cb6\u1cb7\3\2\2\2\u1cb7\u1cb8\3\2\2\2\u1cb8\u1cbd\5\u03d4"+
		"\u01eb\2\u1cb9\u1cba\7\u034c\2\2\u1cba\u1cbc\5\u03d4\u01eb\2\u1cbb\u1cb9"+
		"\3\2\2\2\u1cbc\u1cbf\3\2\2\2\u1cbd\u1cbb\3\2\2\2\u1cbd\u1cbe\3\2\2\2\u1cbe"+
		"\u1cc1\3\2\2\2\u1cbf\u1cbd\3\2\2\2\u1cc0\u1cc2\7\u034d\2\2\u1cc1\u1cc0"+
		"\3\2\2\2\u1cc1\u1cc2\3\2\2\2\u1cc2\u025b\3\2\2\2\u1cc3\u1cc4\79\2\2\u1cc4"+
		"\u1cc7\7\u00ac\2\2\u1cc5\u1cc6\7V\2\2\u1cc6\u1cc8\7A\2\2\u1cc7\u1cc5\3"+
		"\2\2\2\u1cc7\u1cc8\3\2\2\2\u1cc8\u1cc9\3\2\2\2\u1cc9\u1cce\5\u03d4\u01eb"+
		"\2\u1cca\u1ccb\7\u034c\2\2\u1ccb\u1ccd\5\u03d4\u01eb\2\u1ccc\u1cca\3\2"+
		"\2\2\u1ccd\u1cd0\3\2\2\2\u1cce\u1ccc\3\2\2\2\u1cce\u1ccf\3\2\2\2\u1ccf"+
		"\u1cd1\3\2\2\2\u1cd0\u1cce\3\2\2\2\u1cd1\u1cd5\7p\2\2\u1cd2\u1cd6\7+\2"+
		"\2\u1cd3\u1cd4\7\4\2\2\u1cd4\u1cd6\7\u0302\2\2\u1cd5\u1cd2\3\2\2\2\u1cd5"+
		"\u1cd3\3\2\2\2\u1cd6\u1cd8\3\2\2\2\u1cd7\u1cd9\7\u034d\2\2\u1cd8\u1cd7"+
		"\3\2\2\2\u1cd8\u1cd9\3\2\2\2\u1cd9\u025d\3\2\2\2\u1cda\u1cdb\79\2\2\u1cdb"+
		"\u1cde\7M\2\2\u1cdc\u1cdd\7V\2\2\u1cdd\u1cdf\7A\2\2\u1cde\u1cdc\3\2\2"+
		"\2\u1cde\u1cdf\3\2\2\2\u1cdf\u1ce0\3\2\2\2\u1ce0\u1ce5\5\u03d6\u01ec\2"+
		"\u1ce1\u1ce2\7\u034c\2\2\u1ce2\u1ce4\5\u03d6\u01ec\2\u1ce3\u1ce1\3\2\2"+
		"\2\u1ce4\u1ce7\3\2\2\2\u1ce5\u1ce3\3\2\2\2\u1ce5\u1ce6\3\2\2\2\u1ce6\u1ce9"+
		"\3\2\2\2\u1ce7\u1ce5\3\2\2\2\u1ce8\u1cea\7\u034d\2\2\u1ce9\u1ce8\3\2\2"+
		"\2\u1ce9\u1cea\3\2\2\2\u1cea\u025f\3\2\2\2\u1ceb\u1cec\79\2\2\u1cec\u1cf6"+
		"\7\u00a2\2\2\u1ced\u1cef\7\u034c\2\2\u1cee\u1ced\3\2\2\2\u1cee\u1cef\3"+
		"\2\2\2\u1cef\u1cf3\3\2\2\2\u1cf0\u1cf1\5\u03d2\u01ea\2\u1cf1\u1cf2\7\u0345"+
		"\2\2\u1cf2\u1cf4\3\2\2\2\u1cf3\u1cf0\3\2\2\2\u1cf3\u1cf4\3\2\2\2\u1cf4"+
		"\u1cf5\3\2\2\2\u1cf5\u1cf7\5\u0410\u0209\2\u1cf6\u1cee\3\2\2\2\u1cf7\u1cf8"+
		"\3\2\2\2\u1cf8\u1cf6\3\2\2\2\u1cf8\u1cf9\3\2\2\2\u1cf9\u1cfa\3\2\2\2\u1cfa"+
		"\u1cfb\7\u034d\2\2\u1cfb\u0261\3\2\2\2\u1cfc\u1cfd\79\2\2\u1cfd\u1d00"+
		"\7\u00a4\2\2\u1cfe\u1cff\7V\2\2\u1cff\u1d01\7A\2\2\u1d00\u1cfe\3\2\2\2"+
		"\u1d00\u1d01\3\2\2\2\u1d01\u1d02\3\2\2\2\u1d02\u1d04\5\u03d2\u01ea\2\u1d03"+
		"\u1d05\7\u034d\2\2\u1d04\u1d03\3\2\2\2\u1d04\u1d05\3\2\2\2\u1d05\u0263"+
		"\3\2\2\2\u1d06\u1d07\79\2\2\u1d07\u1d0a\7\u00b8\2\2\u1d08\u1d09\7V\2\2"+
		"\u1d09\u1d0b\7A\2\2\u1d0a\u1d08\3\2\2\2\u1d0a\u1d0b\3\2\2\2\u1d0b\u1d0c"+
		"\3\2\2\2\u1d0c\u1d11\5\u03d4\u01eb\2\u1d0d\u1d0e\7\u034c\2\2\u1d0e\u1d10"+
		"\5\u03d4\u01eb\2\u1d0f\u1d0d\3\2\2\2\u1d10\u1d13\3\2\2\2\u1d11\u1d0f\3"+
		"\2\2\2\u1d11\u1d12\3\2\2\2\u1d12\u1d15\3\2\2\2\u1d13\u1d11\3\2\2\2\u1d14"+
		"\u1d16\7\u034d\2\2\u1d15\u1d14\3\2\2\2\u1d15\u1d16\3\2\2\2\u1d16\u0265"+
		"\3\2\2\2\u1d17\u1d18\7#\2\2\u1d18\u1d19\7\u024c\2\2\u1d19\u1d1e\5\u03d4"+
		"\u01eb\2\u1d1a\u1d1b\7K\2\2\u1d1b\u1d1c\5\u0406\u0204\2\u1d1c\u1d1d\5"+
		"\u0408\u0205\2\u1d1d\u1d1f\3\2\2\2\u1d1e\u1d1a\3\2\2\2\u1d1e\u1d1f\3\2"+
		"\2\2\u1d1f\u1d26\3\2\2\2\u1d20\u1d21\7\b\2\2\u1d21\u1d22\7\u00a4\2\2\u1d22"+
		"\u1d23\7\u034a\2\2\u1d23\u1d24\5\u02da\u016e\2\u1d24\u1d25\7\u034b\2\2"+
		"\u1d25\u1d27\3\2\2\2\u1d26\u1d20\3\2\2\2\u1d26\u1d27\3\2\2\2\u1d27\u0267"+
		"\3\2\2\2\u1d28\u1d29\79\2\2\u1d29\u1d2c\7\u024c\2\2\u1d2a\u1d2b\7V\2\2"+
		"\u1d2b\u1d2d\7A\2\2\u1d2c\u1d2a\3\2\2\2\u1d2c\u1d2d\3\2\2\2\u1d2d\u1d2e"+
		"\3\2\2\2\u1d2e\u1d2f\5\u03d4\u01eb\2\u1d2f\u0269\3\2\2\2\u1d30\u1d33\5"+
		"\u026c\u0137\2\u1d31\u1d33\5\u026e\u0138\2\u1d32\u1d30\3\2\2\2\u1d32\u1d31"+
		"\3\2\2\2\u1d33\u026b\3\2\2\2\u1d34\u1d35\7s\2\2\u1d35\u1d36\7\u034a\2"+
		"\2\u1d36\u1d37\5\u0410\u0209\2\u1d37\u1d38\7\u034c\2\2\u1d38\u1d39\7\u0334"+
		"\2\2\u1d39\u1d3a\7\u034b\2\2\u1d3a\u026d\3\2\2\2\u1d3b\u1d3c\7r\2\2\u1d3c"+
		"\u1d3d\7\u034a\2\2\u1d3d\u1d3e\7\u0334\2\2\u1d3e\u1d3f\7\u034c\2\2\u1d3f"+
		"\u1d40\7\u0334\2\2\u1d40\u1d41\7\u034b\2\2\u1d41\u1d43\7\u0345\2\2\u1d42"+
		"\u1d44\5\u0410\u0209\2\u1d43\u1d42\3\2\2\2\u1d43\u1d44\3\2\2\2\u1d44\u1d45"+
		"\3\2\2\2\u1d45\u1d47\7\u0345\2\2\u1d46\u1d48\5\u0410\u0209\2\u1d47\u1d46"+
		"\3\2\2\2\u1d47\u1d48\3\2\2\2\u1d48\u1d49\3\2\2\2\u1d49\u1d4a\7\u0345\2"+
		"\2\u1d4a\u1d4b\5\u0410\u0209\2\u1d4b\u026f\3\2\2\2\u1d4c\u1d4d\7.\2\2"+
		"\u1d4d\u1d4f\7\u0331\2\2\u1d4e\u1d50\7\b\2\2\u1d4f\u1d4e\3\2\2\2\u1d4f"+
		"\u1d50\3\2\2\2\u1d50\u1d51\3\2\2\2\u1d51\u1d53\5\u02d2\u016a\2\u1d52\u1d54"+
		"\7\u034d\2\2\u1d53\u1d52\3\2\2\2\u1d53\u1d54\3\2\2\2\u1d54\u1d7a\3\2\2"+
		"\2\u1d55\u1d56\7.\2\2\u1d56\u1d5b\5\u02d0\u0169\2\u1d57\u1d58\7\u034c"+
		"\2\2\u1d58\u1d5a\5\u02d0\u0169\2\u1d59\u1d57\3\2\2\2\u1d5a\u1d5d\3\2\2"+
		"\2\u1d5b\u1d59\3\2\2\2\u1d5b\u1d5c\3\2\2\2\u1d5c\u1d5f\3\2\2\2\u1d5d\u1d5b"+
		"\3\2\2\2\u1d5e\u1d60\7\u034d\2\2\u1d5f\u1d5e\3\2\2\2\u1d5f\u1d60\3\2\2"+
		"\2\u1d60\u1d7a\3\2\2\2\u1d61\u1d62\7.\2\2\u1d62\u1d64\7\u0331\2\2\u1d63"+
		"\u1d65\7\b\2\2\u1d64\u1d63\3\2\2\2\u1d64\u1d65\3\2\2\2\u1d65\u1d66\3\2"+
		"\2\2\u1d66\u1d68\5\u02d6\u016c\2\u1d67\u1d69\7\u034d\2\2\u1d68\u1d67\3"+
		"\2\2\2\u1d68\u1d69\3\2\2\2\u1d69\u1d7a\3\2\2\2\u1d6a\u1d6b\7\u00bd\2\2"+
		"\u1d6b\u1d6c\7\u0263\2\2\u1d6c\u1d6d\7\u034a\2\2\u1d6d\u1d72\5\u0272\u013a"+
		"\2\u1d6e\u1d6f\7\u034c\2\2\u1d6f\u1d71\5\u0272\u013a\2\u1d70\u1d6e\3\2"+
		"\2\2\u1d71\u1d74\3\2\2\2\u1d72\u1d70\3\2\2\2\u1d72\u1d73\3\2\2\2\u1d73"+
		"\u1d75\3\2\2\2\u1d74\u1d72\3\2\2\2\u1d75\u1d77\7\u034b\2\2\u1d76\u1d78"+
		"\7\u034d\2\2\u1d77\u1d76\3\2\2\2\u1d77\u1d78\3\2\2\2\u1d78\u1d7a\3\2\2"+
		"\2\u1d79\u1d4c\3\2\2\2\u1d79\u1d55\3\2\2\2\u1d79\u1d61\3\2\2\2\u1d79\u1d6a"+
		"\3\2\2\2\u1d7a\u0271\3\2\2\2\u1d7b\u1d7c\7\u0334\2\2\u1d7c\u1d7d\7\b\2"+
		"\2\u1d7d\u1d81\5\u0410\u0209\2\u1d7e\u1d7f\7/\2\2\u1d7f\u1d81\7\u0334"+
		"\2\2\u1d80\u1d7b\3\2\2\2\u1d80\u1d7e\3\2\2\2\u1d81\u0273\3\2\2\2\u1d82"+
		"\u1d84\7\27\2\2\u1d83\u1d85\7\u0154\2\2\u1d84\u1d83\3\2\2\2\u1d84\u1d85"+
		"\3\2\2\2\u1d85\u1d86\3\2\2\2\u1d86\u1d88\5\u03e8\u01f5\2\u1d87\u1d89\7"+
		"\u034d\2\2\u1d88\u1d87\3\2\2\2\u1d88\u1d89\3\2\2\2\u1d89\u1da0\3\2\2\2"+
		"\u1d8a\u1d8c\7-\2\2\u1d8b\u1d8d\7\u0154\2\2\u1d8c\u1d8b\3\2\2\2\u1d8c"+
		"\u1d8d\3\2\2\2\u1d8d\u1d8f\3\2\2\2\u1d8e\u1d90\7*\2\2\u1d8f\u1d8e\3\2"+
		"\2\2\u1d8f\u1d90\3\2\2\2\u1d90\u1d91\3\2\2\2\u1d91\u1d93\5\u03e8\u01f5"+
		"\2\u1d92\u1d94\7\u034d\2\2\u1d93\u1d92\3\2\2\2\u1d93\u1d94\3\2\2\2\u1d94"+
		"\u1da0\3\2\2\2\u1d95\u1da0\5\u02ee\u0178\2\u1d96\u1da0\5\u02f4\u017b\2"+
		"\u1d97\u1d99\7q\2\2\u1d98\u1d9a\7\u0154\2\2\u1d99\u1d98\3\2\2\2\u1d99"+
		"\u1d9a\3\2\2\2\u1d9a\u1d9b\3\2\2\2\u1d9b\u1d9d\5\u03e8\u01f5\2\u1d9c\u1d9e"+
		"\7\u034d\2\2\u1d9d\u1d9c\3\2\2\2\u1d9d\u1d9e\3\2\2\2\u1d9e\u1da0\3\2\2"+
		"\2\u1d9f\u1d82\3\2\2\2\u1d9f\u1d8a\3\2\2\2\u1d9f\u1d95\3\2\2\2\u1d9f\u1d96"+
		"\3\2\2\2\u1d9f\u1d97\3\2\2\2\u1da0\u0275\3\2\2\2\u1da1\u1da2\7\f\2\2\u1da2"+
		"\u1da3\7+\2\2\u1da3\u1db0\5\u0410\u0209\2\u1da4\u1dad\7\u02ed\2\2\u1da5"+
		"\u1da7\7\u034c\2\2\u1da6\u1da5\3\2\2\2\u1da6\u1da7\3\2\2\2\u1da7\u1da8"+
		"\3\2\2\2\u1da8\u1da9\tQ\2\2\u1da9\u1daa\7\u0338\2\2\u1daa\u1dac\7\u0334"+
		"\2\2\u1dab\u1da6\3\2\2\2\u1dac\u1daf\3\2\2\2\u1dad\u1dab\3\2\2\2\u1dad"+
		"\u1dae\3\2\2\2\u1dae\u1db1\3\2\2\2\u1daf\u1dad\3\2\2\2\u1db0\u1da4\3\2"+
		"\2\2\u1db0\u1db1\3\2\2\2\u1db1\u1dba\3\2\2\2\u1db2\u1db4\7\u034c\2\2\u1db3"+
		"\u1db2\3\2\2\2\u1db3\u1db4\3\2\2\2\u1db4\u1db5\3\2\2\2\u1db5\u1db6\tQ"+
		"\2\2\u1db6\u1db7\7\u0338\2\2\u1db7\u1db9\7\u0334\2\2\u1db8\u1db3\3\2\2"+
		"\2\u1db9\u1dbc\3\2\2\2\u1dba\u1db8\3\2\2\2\u1dba\u1dbb\3\2\2\2\u1dbb\u1dd4"+
		"\3\2\2\2\u1dbc\u1dba\3\2\2\2\u1dbd\u1dc2\7\u00a8\2\2\u1dbe\u1dc0\7\u034c"+
		"\2\2\u1dbf\u1dbe\3\2\2\2\u1dbf\u1dc0\3\2\2\2\u1dc0\u1dc1\3\2\2\2\u1dc1"+
		"\u1dc3\5\u0410\u0209\2\u1dc2\u1dbf\3\2\2\2\u1dc3\u1dc4\3\2\2\2\u1dc4\u1dc2"+
		"\3\2\2\2\u1dc4\u1dc5\3\2\2\2\u1dc5\u1dd5\3\2\2\2\u1dc6\u1dd0\7\u00a8\2"+
		"\2\u1dc7\u1dc9\7\u034c\2\2\u1dc8\u1dc7\3\2\2\2\u1dc8\u1dc9\3\2\2\2\u1dc9"+
		"\u1dca\3\2\2\2\u1dca\u1dcb\tR\2\2\u1dcb\u1dce\7\u0338\2\2\u1dcc\u1dcf"+
		"\7\u0334\2\2\u1dcd\u1dcf\5\u0410\u0209\2\u1dce\u1dcc\3\2\2\2\u1dce\u1dcd"+
		"\3\2\2\2\u1dcf\u1dd1\3\2\2\2\u1dd0\u1dc8\3\2\2\2\u1dd1\u1dd2\3\2\2\2\u1dd2"+
		"\u1dd0\3\2\2\2\u1dd2\u1dd3\3\2\2\2\u1dd3\u1dd5\3\2\2\2\u1dd4\u1dbd\3\2"+
		"\2\2\u1dd4\u1dc6\3\2\2\2\u1dd5\u1df7\3\2\2\2\u1dd6\u1dd7\7\u02ce\2\2\u1dd7"+
		"\u1ddc\7\u00a8\2\2\u1dd8\u1dda\7\u034c\2\2\u1dd9\u1dd8\3\2\2\2\u1dd9\u1dda"+
		"\3\2\2\2\u1dda\u1ddb\3\2\2\2\u1ddb\u1ddd\5\u0410\u0209\2\u1ddc\u1dd9\3"+
		"\2\2\2\u1ddd\u1dde\3\2\2\2\u1dde\u1ddc\3\2\2\2\u1dde\u1ddf\3\2\2\2\u1ddf"+
		"\u1de1\3\2\2\2\u1de0\u1dd6\3\2\2\2\u1de1\u1de2\3\2\2\2\u1de2\u1de0\3\2"+
		"\2\2\u1de2\u1de3\3\2\2\2\u1de3\u1df8\3\2\2\2\u1de4\u1de5\7\u02ce\2\2\u1de5"+
		"\u1def\7\u00a8\2\2\u1de6\u1de8\7\u034c\2\2\u1de7\u1de6\3\2\2\2\u1de7\u1de8"+
		"\3\2\2\2\u1de8\u1de9\3\2\2\2\u1de9\u1dea\tR\2\2\u1dea\u1ded\7\u0338\2"+
		"\2\u1deb\u1dee\7\u0334\2\2\u1dec\u1dee\5\u0410\u0209\2\u1ded\u1deb\3\2"+
		"\2\2\u1ded\u1dec\3\2\2\2\u1dee\u1df0\3\2\2\2\u1def\u1de7\3\2\2\2\u1df0"+
		"\u1df1\3\2\2\2\u1df1\u1def\3\2\2\2\u1df1\u1df2\3\2\2\2\u1df2\u1df4\3\2"+
		"\2\2\u1df3\u1de4\3\2\2\2\u1df4\u1df5\3\2\2\2\u1df5\u1df3\3\2\2\2\u1df5"+
		"\u1df6\3\2\2\2\u1df6\u1df8\3\2\2\2\u1df7\u1de0\3\2\2\2\u1df7\u1df3\3\2"+
		"\2\2\u1df7\u1df8\3\2\2\2\u1df8\u1e99\3\2\2\2\u1df9\u1e96\7\u00bd\2\2\u1dfa"+
		"\u1dfc\7\u034c\2\2\u1dfb\u1dfa\3\2\2\2\u1dfb\u1dfc\3\2\2\2\u1dfc\u1dfd"+
		"\3\2\2\2\u1dfd\u1e95\7\u0295\2\2\u1dfe\u1e00\7\u034c\2\2\u1dff\u1dfe\3"+
		"\2\2\2\u1dff\u1e00\3\2\2\2\u1e00\u1e01\3\2\2\2\u1e01\u1e95\7\u028d\2\2"+
		"\u1e02\u1e04\7\u034c\2\2\u1e03\u1e02\3\2\2\2\u1e03\u1e04\3\2\2\2\u1e04"+
		"\u1e05\3\2\2\2\u1e05\u1e95\tS\2\2\u1e06\u1e08\7\u034c\2\2\u1e07\u1e06"+
		"\3\2\2\2\u1e07\u1e08\3\2\2\2\u1e08\u1e09\3\2\2\2\u1e09\u1e0a\7\u0121\2"+
		"\2\u1e0a\u1e0d\7\u0338\2\2\u1e0b\u1e0e\7\u0334\2\2\u1e0c\u1e0e\5\u0410"+
		"\u0209\2\u1e0d\u1e0b\3\2\2\2\u1e0d\u1e0c\3\2\2\2\u1e0e\u1e95\3\2\2\2\u1e0f"+
		"\u1e11\7\u034c\2\2\u1e10\u1e0f\3\2\2\2\u1e10\u1e11\3\2\2\2\u1e11\u1e12"+
		"\3\2\2\2\u1e12\u1e13\7\u01a5\2\2\u1e13\u1e14\7\u0338\2\2\u1e14\u1e95\5"+
		"\u0410\u0209\2\u1e15\u1e17\7\u034c\2\2\u1e16\u1e15\3\2\2\2\u1e16\u1e17"+
		"\3\2\2\2\u1e17\u1e18\3\2\2\2\u1e18\u1e95\7\u0109\2\2\u1e19\u1e1b\7\u034c"+
		"\2\2\u1e1a\u1e19\3\2\2\2\u1e1a\u1e1b\3\2\2\2\u1e1b\u1e1c\3\2\2\2\u1e1c"+
		"\u1e95\7\u02a4\2\2\u1e1d\u1e1f\7\u034c\2\2\u1e1e\u1e1d\3\2\2\2\u1e1e\u1e1f"+
		"\3\2\2\2\u1e1f\u1e2c\3\2\2\2\u1e20\u1e21\7\u029e\2\2\u1e21\u1e24\7\u0338"+
		"\2\2\u1e22\u1e25\7\u0334\2\2\u1e23\u1e25\5\u0410\u0209\2\u1e24\u1e22\3"+
		"\2\2\2\u1e24\u1e23\3\2\2\2\u1e25\u1e2d\3\2\2\2\u1e26\u1e27\7\u02f5\2\2"+
		"\u1e27\u1e2a\7\u0338\2\2\u1e28\u1e2b\7\u0332\2\2\u1e29\u1e2b\5\u0410\u0209"+
		"\2\u1e2a\u1e28\3\2\2\2\u1e2a\u1e29\3\2\2\2\u1e2b\u1e2d\3\2\2\2\u1e2c\u1e20"+
		"\3\2\2\2\u1e2c\u1e26\3\2\2\2\u1e2d\u1e95\3\2\2\2\u1e2e\u1e30\7\u034c\2"+
		"\2\u1e2f\u1e2e\3\2\2\2\u1e2f\u1e30\3\2\2\2\u1e30\u1e31\3\2\2\2\u1e31\u1e95"+
		"\tT\2\2\u1e32\u1e34\7\u034c\2\2\u1e33\u1e32\3\2\2\2\u1e33\u1e34\3\2\2"+
		"\2\u1e34\u1e35\3\2\2\2\u1e35\u1e95\tU\2\2\u1e36\u1e38\7\u034c\2\2\u1e37"+
		"\u1e36\3\2\2\2\u1e37\u1e38\3\2\2\2\u1e38\u1e39\3\2\2\2\u1e39\u1e95\tV"+
		"\2\2\u1e3a\u1e3c\7\u034c\2\2\u1e3b\u1e3a\3\2\2\2\u1e3b\u1e3c\3\2\2\2\u1e3c"+
		"\u1e3d\3\2\2\2\u1e3d\u1e3e\7\u02c7\2\2\u1e3e\u1e41\7\u0338\2\2\u1e3f\u1e42"+
		"\7\u0334\2\2\u1e40\u1e42\5\u0410\u0209\2\u1e41\u1e3f\3\2\2\2\u1e41\u1e40"+
		"\3\2\2\2\u1e42\u1e95\3\2\2\2\u1e43\u1e45\7\u034c\2\2\u1e44\u1e43\3\2\2"+
		"\2\u1e44\u1e45\3\2\2\2\u1e45\u1e46\3\2\2\2\u1e46\u1e47\7\u02c8\2\2\u1e47"+
		"\u1e48\7\u0338\2\2\u1e48\u1e95\7\u0334\2\2\u1e49\u1e4b\7\u034c\2\2\u1e4a"+
		"\u1e49\3\2\2\2\u1e4a\u1e4b\3\2\2\2\u1e4b\u1e4c\3\2\2\2\u1e4c\u1e4d\7\u0278"+
		"\2\2\u1e4d\u1e50\7\u0338\2\2\u1e4e\u1e51\7\u0332\2\2\u1e4f\u1e51\5\u0410"+
		"\u0209\2\u1e50\u1e4e\3\2\2\2\u1e50\u1e4f\3\2\2\2\u1e51\u1e95\3\2\2\2\u1e52"+
		"\u1e54\7\u034c\2\2\u1e53\u1e52\3\2\2\2\u1e53\u1e54\3\2\2\2\u1e54\u1e55"+
		"\3\2\2\2\u1e55\u1e56\7\u027b\2\2\u1e56\u1e59\7\u0338\2\2\u1e57\u1e5a\7"+
		"\u0332\2\2\u1e58\u1e5a\5\u0410\u0209\2\u1e59\u1e57\3\2\2\2\u1e59\u1e58"+
		"\3\2\2\2\u1e5a\u1e95\3\2\2\2\u1e5b\u1e5d\7\u034c\2\2\u1e5c\u1e5b\3\2\2"+
		"\2\u1e5c\u1e5d\3\2\2\2\u1e5d\u1e5e\3\2\2\2\u1e5e\u1e5f\7\u02c1\2\2\u1e5f"+
		"\u1e62\7\u0338\2\2\u1e60\u1e63\7\u0332\2\2\u1e61\u1e63\5\u0410\u0209\2"+
		"\u1e62\u1e60\3\2\2\2\u1e62\u1e61\3\2\2\2\u1e63\u1e95\3\2\2\2\u1e64\u1e66"+
		"\7\u034c\2\2\u1e65\u1e64\3\2\2\2\u1e65\u1e66\3\2\2\2\u1e66\u1e67\3\2\2"+
		"\2\u1e67\u1e95\tW\2\2\u1e68\u1e6a\7\u034c\2\2\u1e69\u1e68\3\2\2\2\u1e69"+
		"\u1e6a\3\2\2\2\u1e6a\u1e6b\3\2\2\2\u1e6b\u1e95\tX\2\2\u1e6c\u1e6e\7\u034c"+
		"\2\2\u1e6d\u1e6c\3\2\2\2\u1e6d\u1e6e\3\2\2\2\u1e6e\u1e6f\3\2\2\2\u1e6f"+
		"\u1e95\7\u02f3\2\2\u1e70\u1e72\7\u034c\2\2\u1e71\u1e70\3\2\2\2\u1e71\u1e72"+
		"\3\2\2\2\u1e72\u1e73\3\2\2\2\u1e73\u1e76\7\u0312\2\2\u1e74\u1e75\7\u0338"+
		"\2\2\u1e75\u1e77\7\u0332\2\2\u1e76\u1e74\3\2\2\2\u1e76\u1e77\3\2\2\2\u1e77"+
		"\u1e95\3\2\2\2\u1e78\u1e7a\7\u034c\2\2\u1e79\u1e78\3\2\2\2\u1e79\u1e7a"+
		"\3\2\2\2\u1e7a\u1e7b\3\2\2\2\u1e7b\u1e95\tY\2\2\u1e7c\u1e7e\7\u034c\2"+
		"\2\u1e7d\u1e7c\3\2\2\2\u1e7d\u1e7e\3\2\2\2\u1e7e\u1e7f\3\2\2\2\u1e7f\u1e95"+
		"\tZ\2\2\u1e80\u1e82\7\u034c\2\2\u1e81\u1e80\3\2\2\2\u1e81\u1e82\3\2\2"+
		"\2\u1e82\u1e83\3\2\2\2\u1e83\u1e84\7\u0132\2\2\u1e84\u1e85\7\u034a\2\2"+
		"\u1e85\u1e86\7\u00cd\2\2\u1e86\u1e87\7\u0338\2\2\u1e87\u1e88\t[\2\2\u1e88"+
		"\u1e89\7\u034c\2\2\u1e89\u1e8a\7\u0302\2\2\u1e8a\u1e8b\7\u027e\2\2\u1e8b"+
		"\u1e92\7\u0338\2\2\u1e8c\u1e93\5\u0410\u0209\2\u1e8d\u1e8e\7\u0302\2\2"+
		"\u1e8e\u1e8f\7\u0270\2\2\u1e8f\u1e90\7_\2\2\u1e90\u1e91\7\u0338\2\2\u1e91"+
		"\u1e93\5\u0410\u0209\2\u1e92\u1e8c\3\2\2\2\u1e92\u1e8d\3\2\2\2\u1e93\u1e95"+
		"\3\2\2\2\u1e94\u1dfb\3\2\2\2\u1e94\u1dff\3\2\2\2\u1e94\u1e03\3\2\2\2\u1e94"+
		"\u1e07\3\2\2\2\u1e94\u1e10\3\2\2\2\u1e94\u1e16\3\2\2\2\u1e94\u1e1a\3\2"+
		"\2\2\u1e94\u1e1e\3\2\2\2\u1e94\u1e2f\3\2\2\2\u1e94\u1e33\3\2\2\2\u1e94"+
		"\u1e37\3\2\2\2\u1e94\u1e3b\3\2\2\2\u1e94\u1e44\3\2\2\2\u1e94\u1e4a\3\2"+
		"\2\2\u1e94\u1e53\3\2\2\2\u1e94\u1e5c\3\2\2\2\u1e94\u1e65\3\2\2\2\u1e94"+
		"\u1e69\3\2\2\2\u1e94\u1e6d\3\2\2\2\u1e94\u1e71\3\2\2\2\u1e94\u1e79\3\2"+
		"\2\2\u1e94\u1e7d\3\2\2\2\u1e94\u1e81\3\2\2\2\u1e95\u1e98\3\2\2\2\u1e96"+
		"\u1e94\3\2\2\2\u1e96\u1e97\3\2\2\2\u1e97\u1e9a\3\2\2\2\u1e98\u1e96\3\2"+
		"\2\2\u1e99\u1df9\3\2\2\2\u1e99\u1e9a\3\2\2\2\u1e9a\u0277\3\2\2\2\u1e9b"+
		"\u1e9c\7\f\2\2\u1e9c\u1e9d\7\u02bd\2\2\u1e9d\u1eb5\5\u0410\u0209\2\u1e9e"+
		"\u1ea3\7\u00a8\2\2\u1e9f\u1ea1\7\u034c\2\2\u1ea0\u1e9f\3\2\2\2\u1ea0\u1ea1"+
		"\3\2\2\2\u1ea1\u1ea2\3\2\2\2\u1ea2\u1ea4\5\u0410\u0209\2\u1ea3\u1ea0\3"+
		"\2\2\2\u1ea4\u1ea5\3\2\2\2\u1ea5\u1ea3\3\2\2\2\u1ea5\u1ea6\3\2\2\2\u1ea6"+
		"\u1eb6\3\2\2\2\u1ea7\u1eb1\7\u00a8\2\2\u1ea8\u1eaa\7\u034c\2\2\u1ea9\u1ea8"+
		"\3\2\2\2\u1ea9\u1eaa\3\2\2\2\u1eaa\u1eab\3\2\2\2\u1eab\u1eac\tR\2\2\u1eac"+
		"\u1eaf\7\u0338\2\2\u1ead\u1eb0\7\u0334\2\2\u1eae\u1eb0\5\u0410\u0209\2"+
		"\u1eaf\u1ead\3\2\2\2\u1eaf\u1eae\3\2\2\2\u1eb0\u1eb2\3\2\2\2\u1eb1\u1ea9"+
		"\3\2\2\2\u1eb2\u1eb3\3\2\2\2\u1eb3\u1eb1\3\2\2\2\u1eb3\u1eb4\3\2\2\2\u1eb4"+
		"\u1eb6\3\2\2\2\u1eb5\u1e9e\3\2\2\2\u1eb5\u1ea7\3\2\2\2\u1eb6\u1ed8\3\2"+
		"\2\2\u1eb7\u1eb8\7\u02ce\2\2\u1eb8\u1ebd\7\u00a8\2\2\u1eb9\u1ebb\7\u034c"+
		"\2\2\u1eba\u1eb9\3\2\2\2\u1eba\u1ebb\3\2\2\2\u1ebb\u1ebc\3\2\2\2\u1ebc"+
		"\u1ebe\5\u0410\u0209\2\u1ebd\u1eba\3\2\2\2\u1ebe\u1ebf\3\2\2\2\u1ebf\u1ebd"+
		"\3\2\2\2\u1ebf\u1ec0\3\2\2\2\u1ec0\u1ec2\3\2\2\2\u1ec1\u1eb7\3\2\2\2\u1ec2"+
		"\u1ec3\3\2\2\2\u1ec3\u1ec1\3\2\2\2\u1ec3\u1ec4\3\2\2\2\u1ec4\u1ed9\3\2"+
		"\2\2\u1ec5\u1ec6\7\u02ce\2\2\u1ec6\u1ed0\7\u00a8\2\2\u1ec7\u1ec9\7\u034c"+
		"\2\2\u1ec8\u1ec7\3\2\2\2\u1ec8\u1ec9\3\2\2\2\u1ec9\u1eca\3\2\2\2\u1eca"+
		"\u1ecb\tR\2\2\u1ecb\u1ece\7\u0338\2\2\u1ecc\u1ecf\7\u0334\2\2\u1ecd\u1ecf"+
		"\5\u0410\u0209\2\u1ece\u1ecc\3\2\2\2\u1ece\u1ecd\3\2\2\2\u1ecf\u1ed1\3"+
		"\2\2\2\u1ed0\u1ec8\3\2\2\2\u1ed1\u1ed2\3\2\2\2\u1ed2\u1ed0\3\2\2\2\u1ed2"+
		"\u1ed3\3\2\2\2\u1ed3\u1ed5\3\2\2\2\u1ed4\u1ec5\3\2\2\2\u1ed5\u1ed6\3\2"+
		"\2\2\u1ed6\u1ed4\3\2\2\2\u1ed6\u1ed7\3\2\2\2\u1ed7\u1ed9\3\2\2\2\u1ed8"+
		"\u1ec1\3\2\2\2\u1ed8\u1ed4\3\2\2\2\u1ed8\u1ed9\3\2\2\2\u1ed9\u1f87\3\2"+
		"\2\2\u1eda\u1f84\7\u00bd\2\2\u1edb\u1edd\7\u034c\2\2\u1edc\u1edb\3\2\2"+
		"\2\u1edc\u1edd\3\2\2\2\u1edd\u1ede\3\2\2\2\u1ede\u1f83\7\u0295\2\2\u1edf"+
		"\u1ee1\7\u034c\2\2\u1ee0\u1edf\3\2\2\2\u1ee0\u1ee1\3\2\2\2\u1ee1\u1ee2"+
		"\3\2\2\2\u1ee2\u1f83\7\u028d\2\2\u1ee3\u1ee5\7\u034c\2\2\u1ee4\u1ee3\3"+
		"\2\2\2\u1ee4\u1ee5\3\2\2\2\u1ee5\u1ee6\3\2\2\2\u1ee6\u1f83\tS\2\2\u1ee7"+
		"\u1ee9\7\u034c\2\2\u1ee8\u1ee7\3\2\2\2\u1ee8\u1ee9\3\2\2\2\u1ee9\u1eea"+
		"\3\2\2\2\u1eea\u1eeb\7\u0121\2\2\u1eeb\u1eee\7\u0338\2\2\u1eec\u1eef\7"+
		"\u0334\2\2\u1eed\u1eef\5\u0410\u0209\2\u1eee\u1eec\3\2\2\2\u1eee\u1eed"+
		"\3\2\2\2\u1eef\u1f83\3\2\2\2\u1ef0\u1ef2\7\u034c\2\2\u1ef1\u1ef0\3\2\2"+
		"\2\u1ef1\u1ef2\3\2\2\2\u1ef2\u1ef3\3\2\2\2\u1ef3\u1ef4\7\u01a5\2\2\u1ef4"+
		"\u1ef5\7\u0338\2\2\u1ef5\u1f83\5\u0410\u0209\2\u1ef6\u1ef8\7\u034c\2\2"+
		"\u1ef7\u1ef6\3\2\2\2\u1ef7\u1ef8\3\2\2\2\u1ef8\u1ef9\3\2\2\2\u1ef9\u1f83"+
		"\7\u0109\2\2\u1efa\u1efc\7\u034c\2\2\u1efb\u1efa\3\2\2\2\u1efb\u1efc\3"+
		"\2\2\2\u1efc\u1efd\3\2\2\2\u1efd\u1f83\7\u02a4\2\2\u1efe\u1f00\7\u034c"+
		"\2\2\u1eff\u1efe\3\2\2\2\u1eff\u1f00\3\2\2\2\u1f00\u1f0d\3\2\2\2\u1f01"+
		"\u1f02\7\u029e\2\2\u1f02\u1f05\7\u0338\2\2\u1f03\u1f06\7\u0334\2\2\u1f04"+
		"\u1f06\5\u0410\u0209\2\u1f05\u1f03\3\2\2\2\u1f05\u1f04\3\2\2\2\u1f06\u1f0e"+
		"\3\2\2\2\u1f07\u1f08\7\u02f5\2\2\u1f08\u1f0b\7\u0338\2\2\u1f09\u1f0c\7"+
		"\u0332\2\2\u1f0a\u1f0c\5\u0410\u0209\2\u1f0b\u1f09\3\2\2\2\u1f0b\u1f0a"+
		"\3\2\2\2\u1f0c\u1f0e\3\2\2\2\u1f0d\u1f01\3\2\2\2\u1f0d\u1f07\3\2\2\2\u1f0e"+
		"\u1f83\3\2\2\2\u1f0f\u1f11\7\u034c\2\2\u1f10\u1f0f\3\2\2\2\u1f10\u1f11"+
		"\3\2\2\2\u1f11\u1f12\3\2\2\2\u1f12\u1f83\tT\2\2\u1f13\u1f15\7\u034c\2"+
		"\2\u1f14\u1f13\3\2\2\2\u1f14\u1f15\3\2\2\2\u1f15\u1f16\3\2\2\2\u1f16\u1f83"+
		"\tU\2\2\u1f17\u1f19\7\u034c\2\2\u1f18\u1f17\3\2\2\2\u1f18\u1f19\3\2\2"+
		"\2\u1f19\u1f1a\3\2\2\2\u1f1a\u1f83\tV\2\2\u1f1b\u1f1d\7\u034c\2\2\u1f1c"+
		"\u1f1b\3\2\2\2\u1f1c\u1f1d\3\2\2\2\u1f1d\u1f1e\3\2\2\2\u1f1e\u1f1f\7\u02c7"+
		"\2\2\u1f1f\u1f22\7\u0338\2\2\u1f20\u1f23\7\u0334\2\2\u1f21\u1f23\5\u0410"+
		"\u0209\2\u1f22\u1f20\3\2\2\2\u1f22\u1f21\3\2\2\2\u1f23\u1f83\3\2\2\2\u1f24"+
		"\u1f26\7\u034c\2\2\u1f25\u1f24\3\2\2\2\u1f25\u1f26\3\2\2\2\u1f26\u1f27"+
		"\3\2\2\2\u1f27\u1f28\7\u02c8\2\2\u1f28\u1f29\7\u0338\2\2\u1f29\u1f83\7"+
		"\u0334\2\2\u1f2a\u1f2c\7\u034c\2\2\u1f2b\u1f2a\3\2\2\2\u1f2b\u1f2c\3\2"+
		"\2\2\u1f2c\u1f2d\3\2\2\2\u1f2d\u1f2e\7\u0278\2\2\u1f2e\u1f31\7\u0338\2"+
		"\2\u1f2f\u1f32\7\u0332\2\2\u1f30\u1f32\5\u0410\u0209\2\u1f31\u1f2f\3\2"+
		"\2\2\u1f31\u1f30\3\2\2\2\u1f32\u1f83\3\2\2\2\u1f33\u1f35\7\u034c\2\2\u1f34"+
		"\u1f33\3\2\2\2\u1f34\u1f35\3\2\2\2\u1f35\u1f36\3\2\2\2\u1f36\u1f37\7\u027b"+
		"\2\2\u1f37\u1f3a\7\u0338\2\2\u1f38\u1f3b\7\u0332\2\2\u1f39\u1f3b\5\u0410"+
		"\u0209\2\u1f3a\u1f38\3\2\2\2\u1f3a\u1f39\3\2\2\2\u1f3b\u1f83\3\2\2\2\u1f3c"+
		"\u1f3e\7\u034c\2\2\u1f3d\u1f3c\3\2\2\2\u1f3d\u1f3e\3\2\2\2\u1f3e\u1f3f"+
		"\3\2\2\2\u1f3f\u1f40\7\u02c1\2\2\u1f40\u1f43\7\u0338\2\2\u1f41\u1f44\7"+
		"\u0332\2\2\u1f42\u1f44\5\u0410\u0209\2\u1f43\u1f41\3\2\2\2\u1f43\u1f42"+
		"\3\2\2\2\u1f44\u1f83\3\2\2\2\u1f45\u1f47\7\u034c\2\2\u1f46\u1f45\3\2\2"+
		"\2\u1f46\u1f47\3\2\2\2\u1f47\u1f48\3\2\2\2\u1f48\u1f83\tW\2\2\u1f49\u1f4b"+
		"\7\u034c\2\2\u1f4a\u1f49\3\2\2\2\u1f4a\u1f4b\3\2\2\2\u1f4b\u1f4c\3\2\2"+
		"\2\u1f4c\u1f83\tX\2\2\u1f4d\u1f4f\7\u034c\2\2\u1f4e\u1f4d\3\2\2\2\u1f4e"+
		"\u1f4f\3\2\2\2\u1f4f\u1f50\3\2\2\2\u1f50\u1f83\7\u02f3\2\2\u1f51\u1f53"+
		"\7\u034c\2\2\u1f52\u1f51\3\2\2\2\u1f52\u1f53\3\2\2\2\u1f53\u1f54\3\2\2"+
		"\2\u1f54\u1f57\7\u0312\2\2\u1f55\u1f56\7\u0338\2\2\u1f56\u1f58\7\u0332"+
		"\2\2\u1f57\u1f55\3\2\2\2\u1f57\u1f58\3\2\2\2\u1f58\u1f83\3\2\2\2\u1f59"+
		"\u1f5b\7\u034c\2\2\u1f5a\u1f59\3\2\2\2\u1f5a\u1f5b\3\2\2\2\u1f5b\u1f5c"+
		"\3\2\2\2\u1f5c\u1f83\tY\2\2\u1f5d\u1f5f\7\u034c\2\2\u1f5e\u1f5d\3\2\2"+
		"\2\u1f5e\u1f5f\3\2\2\2\u1f5f\u1f60\3\2\2\2\u1f60\u1f83\tZ\2\2\u1f61\u1f63"+
		"\7\u034c\2\2\u1f62\u1f61\3\2\2\2\u1f62\u1f63\3\2\2\2\u1f63\u1f68\3\2\2"+
		"\2\u1f64\u1f69\7\u01b3\2\2\u1f65\u1f66\7\u0227\2\2\u1f66\u1f67\7\u0338"+
		"\2\2\u1f67\u1f69\7\u0334\2\2\u1f68\u1f64\3\2\2\2\u1f68\u1f65\3\2\2\2\u1f69"+
		"\u1f83\3\2\2\2\u1f6a\u1f6c\7\u034c\2\2\u1f6b\u1f6a\3\2\2\2\u1f6b\u1f6c"+
		"\3\2\2\2\u1f6c\u1f6d\3\2\2\2\u1f6d\u1f83\7\u01ac\2\2\u1f6e\u1f70\7\u034c"+
		"\2\2\u1f6f\u1f6e\3\2\2\2\u1f6f\u1f70\3\2\2\2\u1f70\u1f71\3\2\2\2\u1f71"+
		"\u1f72\7\u0132\2\2\u1f72\u1f73\7\u034a\2\2\u1f73\u1f74\7\u00cd\2\2\u1f74"+
		"\u1f75\7\u0338\2\2\u1f75\u1f76\t[\2\2\u1f76\u1f77\7\u034c\2\2\u1f77\u1f78"+
		"\7\u0302\2\2\u1f78\u1f79\7\u027e\2\2\u1f79\u1f80\7\u0338\2\2\u1f7a\u1f81"+
		"\5\u0410\u0209\2\u1f7b\u1f7c\7\u0302\2\2\u1f7c\u1f7d\7\u0270\2\2\u1f7d"+
		"\u1f7e\7_\2\2\u1f7e\u1f7f\7\u0338\2\2\u1f7f\u1f81\5\u0410\u0209\2\u1f80"+
		"\u1f7a\3\2\2\2\u1f80\u1f7b\3\2\2\2\u1f81\u1f83\3\2\2\2\u1f82\u1edc\3\2"+
		"\2\2\u1f82\u1ee0\3\2\2\2\u1f82\u1ee4\3\2\2\2\u1f82\u1ee8\3\2\2\2\u1f82"+
		"\u1ef1\3\2\2\2\u1f82\u1ef7\3\2\2\2\u1f82\u1efb\3\2\2\2\u1f82\u1eff\3\2"+
		"\2\2\u1f82\u1f10\3\2\2\2\u1f82\u1f14\3\2\2\2\u1f82\u1f18\3\2\2\2\u1f82"+
		"\u1f1c\3\2\2\2\u1f82\u1f25\3\2\2\2\u1f82\u1f2b\3\2\2\2\u1f82\u1f34\3\2"+
		"\2\2\u1f82\u1f3d\3\2\2\2\u1f82\u1f46\3\2\2\2\u1f82\u1f4a\3\2\2\2\u1f82"+
		"\u1f4e\3\2\2\2\u1f82\u1f52\3\2\2\2\u1f82\u1f5a\3\2\2\2\u1f82\u1f5e\3\2"+
		"\2\2\u1f82\u1f62\3\2\2\2\u1f82\u1f6b\3\2\2\2\u1f82\u1f6f\3\2\2\2\u1f83"+
		"\u1f86\3\2\2\2\u1f84\u1f82\3\2\2\2\u1f84\u1f85\3\2\2\2\u1f85\u1f88\3\2"+
		"\2\2\u1f86\u1f84\3\2\2\2\u1f87\u1eda\3\2\2\2\u1f87\u1f88\3\2\2\2\u1f88"+
		"\u0279\3\2\2\2\u1f89\u1f8a\7\f\2\2\u1f8a\u1f8b\7\u027e\2\2\u1f8b\u1f8c"+
		"\5\u0410\u0209\2\u1f8c\u1f8d\7\u00a8\2\2\u1f8d\u1f8e\7E\2\2\u1f8e\u1f8f"+
		"\7\u0338\2\2\u1f8f\u1faf\7\u0334\2\2\u1f90\u1f91\7\u00bd\2\2\u1f91\u1f92"+
		"\7\u01d7\2\2\u1f92\u1f93\7_\2\2\u1f93\u1faa\7\u034a\2\2\u1f94\u1f96\7"+
		"\u034c\2\2\u1f95\u1f94\3\2\2\2\u1f95\u1f96\3\2\2\2\u1f96\u1f97\3\2\2\2"+
		"\u1f97\u1f98\7E\2\2\u1f98\u1f99\7\u0338\2\2\u1f99\u1fab\7\u0334\2\2\u1f9a"+
		"\u1f9c\7\u034c\2\2\u1f9b\u1f9a\3\2\2\2\u1f9b\u1f9c\3\2\2\2\u1f9c\u1f9d"+
		"\3\2\2\2\u1f9d\u1f9e\7\u0132\2\2\u1f9e\u1f9f\7\22\2\2\u1f9f\u1fa0\7\u02e0"+
		"\2\2\u1fa0\u1fa1\7\u0338\2\2\u1fa1\u1fab\7\u0334\2\2\u1fa2\u1fa4\7\u034c"+
		"\2\2\u1fa3\u1fa2\3\2\2\2\u1fa3\u1fa4\3\2\2\2\u1fa4\u1fa5\3\2\2\2\u1fa5"+
		"\u1fa6\7\u0117\2\2\u1fa6\u1fa7\7\22\2\2\u1fa7\u1fa8\7\u02e0\2\2\u1fa8"+
		"\u1fa9\7\u0338\2\2\u1fa9\u1fab\7\u0334\2\2\u1faa\u1f95\3\2\2\2\u1faa\u1f9b"+
		"\3\2\2\2\u1faa\u1fa3\3\2\2\2\u1fab\u1fac\3\2\2\2\u1fac\u1faa\3\2\2\2\u1fac"+
		"\u1fad\3\2\2\2\u1fad\u1fae\3\2\2\2\u1fae\u1fb0\7\u034b\2\2\u1faf\u1f90"+
		"\3\2\2\2\u1faf\u1fb0\3\2\2\2\u1fb0\u027b\3\2\2\2\u1fb1\u1fb2\7\f\2\2\u1fb2"+
		"\u1fb3\7\u02bf\2\2\u1fb3\u1fb4\7_\2\2\u1fb4\u1fb5\7\u00a8\2\2\u1fb5\u1fb6"+
		"\7E\2\2\u1fb6\u1fb7\7\u0338\2\2\u1fb7\u1fb8\7\u0334\2\2\u1fb8\u1fb9\7"+
		"\u0132\2\2\u1fb9\u1fba\7\22\2\2\u1fba\u1fbb\7\u02e0\2\2\u1fbb\u1fbc\7"+
		"\u0338\2\2\u1fbc\u1fbd\7\u0334\2\2\u1fbd\u027d\3\2\2\2\u1fbe\u1fbf\7\f"+
		"\2\2\u1fbf\u1fc0\7\u0303\2\2\u1fc0\u1fc1\7\u02bf\2\2\u1fc1\u1fc2\7_\2"+
		"\2\u1fc2\u1fc3\7\u00a8\2\2\u1fc3\u1fc4\7E\2\2\u1fc4\u1fc5\7\u0338\2\2"+
		"\u1fc5\u1fc6\7\u0334\2\2\u1fc6\u1fc7\7\u0132\2\2\u1fc7\u1fc8\7\22\2\2"+
		"\u1fc8\u1fc9\7\u02e0\2\2\u1fc9\u1fca\7\u0338\2\2\u1fca\u1fcb\7\u0334\2"+
		"\2\u1fcb\u027f\3\2\2\2\u1fcc\u1fd0\7`\2\2\u1fcd\u1fd1\5\u0282\u0142\2"+
		"\u1fce\u1fd1\5\u0284\u0143\2\u1fcf\u1fd1\5\u0286\u0144\2\u1fd0\u1fcd\3"+
		"\2\2\2\u1fd0\u1fce\3\2\2\2\u1fd0\u1fcf\3\2\2\2\u1fd1\u0281\3\2\2\2\u1fd2"+
		"\u1fd5\t\30\2\2\u1fd3\u1fd5\7\u0252\2\2\u1fd4\u1fd2\3\2\2\2\u1fd4\u1fd3"+
		"\3\2\2\2\u1fd5\u1fd8\3\2\2\2\u1fd6\u1fd7\7\u00bd\2\2\u1fd7\u1fd9\7\u022c"+
		"\2\2\u1fd8\u1fd6\3\2\2\2\u1fd8\u1fd9\3\2\2\2\u1fd9\u0283\3\2\2\2\u1fda"+
		"\u1fdb\7\u01de\2\2\u1fdb\u1fdc\7\u02d9\2\2\u1fdc\u1fdf\7\u0233\2\2\u1fdd"+
		"\u1fe0\7\4\2\2\u1fde\u1fe0\7\u0332\2\2\u1fdf\u1fdd\3\2\2\2\u1fdf\u1fde"+
		"\3\2\2\2\u1fe0\u0285\3\2\2\2\u1fe1\u1fe2\7\u0312\2\2\u1fe2\u1fe3\7\u016e"+
		"\2\2\u1fe3\u1fe4\7\u0332\2\2\u1fe4\u0287\3\2\2\2\u1fe5\u1fe6\7@\2\2\u1fe6"+
		"\u1fe8\5\u028c\u0147\2\u1fe7\u1fe9\7\u034d\2\2\u1fe8\u1fe7\3\2\2\2\u1fe8"+
		"\u1fe9\3\2\2\2\u1fe9\u0289\3\2\2\2\u1fea\u1ff3\5\u03da\u01ee\2\u1feb\u1ff0"+
		"\5\u028e\u0148\2\u1fec\u1fed\7\u034c\2\2\u1fed\u1fef\5\u028e\u0148\2\u1fee"+
		"\u1fec\3\2\2\2\u1fef\u1ff2\3\2\2\2\u1ff0\u1fee\3\2\2\2\u1ff0\u1ff1\3\2"+
		"\2\2\u1ff1\u1ff4\3\2\2\2\u1ff2\u1ff0\3\2\2\2\u1ff3\u1feb\3\2\2\2\u1ff3"+
		"\u1ff4\3\2\2\2\u1ff4\u1ff6\3\2\2\2\u1ff5\u1ff7\7\u034d\2\2\u1ff6\u1ff5"+
		"\3\2\2\2\u1ff6\u1ff7\3\2\2\2\u1ff7\u028b\3\2\2\2\u1ff8\u1ff9\7\u0331\2"+
		"\2\u1ff9\u1ffb\7\u0338\2\2\u1ffa\u1ff8\3\2\2\2\u1ffa\u1ffb\3\2\2\2\u1ffb"+
		"\u1ffe\3\2\2\2\u1ffc\u1fff\5\u03da\u01ee\2\u1ffd\u1fff\5\u0296\u014c\2"+
		"\u1ffe\u1ffc\3\2\2\2\u1ffe\u1ffd\3\2\2\2\u1fff\u2001\3\2\2\2\u2000\u2002"+
		"\5\u028e\u0148\2\u2001\u2000\3\2\2\2\u2001\u2002\3\2\2\2\u2002\u2016\3"+
		"\2\2\2\u2003\u2004\7\u034a\2\2\u2004\u2009\5\u0296\u014c\2\u2005\u2006"+
		"\7\u0352\2\2\u2006\u2008\5\u0296\u014c\2\u2007\u2005\3\2\2\2\u2008\u200b"+
		"\3\2\2\2\u2009\u2007\3\2\2\2\u2009\u200a\3\2\2\2\u200a\u200c\3\2\2\2\u200b"+
		"\u2009\3\2\2\2\u200c\u2013\7\u034b\2\2\u200d\u200f\7\b\2\2\u200e\u200d"+
		"\3\2\2\2\u200e\u200f\3\2\2\2\u200f\u2010\3\2\2\2\u2010\u2011\t\\\2\2\u2011"+
		"\u2012\7\u0338\2\2\u2012\u2014\7\u0334\2\2\u2013\u200e\3\2\2\2\u2013\u2014"+
		"\3\2\2\2\u2014\u2016\3\2\2\2\u2015\u1ffa\3\2\2\2\u2015\u2003\3\2\2\2\u2016"+
		"\u028d\3\2\2\2\u2017\u201c\5\u0292\u014a\2\u2018\u2019\7\u034c\2\2\u2019"+
		"\u201b\5\u028e\u0148\2\u201a\u2018\3\2\2\2\u201b\u201e\3\2\2\2\u201c\u201a"+
		"\3\2\2\2\u201c\u201d\3\2\2\2\u201d\u2028\3\2\2\2\u201e\u201c\3\2\2\2\u201f"+
		"\u2024\5\u0290\u0149\2\u2020\u2021\7\u034c\2\2\u2021\u2023\5\u0290\u0149"+
		"\2\u2022\u2020\3\2\2\2\u2023\u2026\3\2\2\2\u2024\u2022\3\2\2\2\u2024\u2025"+
		"\3\2\2\2\u2025\u2028\3\2\2\2\u2026\u2024\3\2\2\2\u2027\u2017\3\2\2\2\u2027"+
		"\u201f\3\2\2\2\u2028\u028f\3\2\2\2\u2029\u202a\7\u0331\2\2\u202a\u202b"+
		"\7\u0338\2\2\u202b\u202c\5\u0294\u014b\2\u202c\u0291\3\2\2\2\u202d\u202e"+
		"\5\u0294\u014b\2\u202e\u0293\3\2\2\2\u202f\u2038\5\u040a\u0206\2\u2030"+
		"\u2032\7\u0331\2\2\u2031\u2033\t]\2\2\u2032\u2031\3\2\2\2\u2032\u2033"+
		"\3\2\2\2\u2033\u2038\3\2\2\2\u2034\u2038\5\u0410\u0209\2\u2035\u2038\7"+
		"/\2\2\u2036\u2038\7k\2\2\u2037\u202f\3\2\2\2\u2037\u2030\3\2\2\2\u2037"+
		"\u2034\3\2\2\2\u2037\u2035\3\2\2\2\u2037\u2036\3\2\2\2\u2038\u0295\3\2"+
		"\2\2\u2039\u203a\t\3\2\2\u203a\u0297\3\2\2\2\u203b\u203d\5\u02ce\u0168"+
		"\2\u203c\u203e\7\u034d\2\2\u203d\u203c\3\2\2\2\u203d\u203e\3\2\2\2\u203e"+
		"\u2077\3\2\2\2\u203f\u204b\7O\2\2\u2040\u2042\7\4\2\2\u2041\u2043\7\u01d9"+
		"\2\2\u2042\u2041\3\2\2\2\u2042\u2043\3\2\2\2\u2043\u204c\3\2\2\2\u2044"+
		"\u2049\5\u02b4\u015b\2\u2045\u2046\7\u034a\2\2\u2046\u2047\5\u03e6\u01f4"+
		"\2\u2047\u2048\7\u034b\2\2\u2048\u204a\3\2\2\2\u2049\u2045\3\2\2\2\u2049"+
		"\u204a\3\2\2\2\u204a\u204c\3\2\2\2\u204b\u2040\3\2\2\2\u204b\u2044\3\2"+
		"\2\2\u204c\u204f\3\2\2\2\u204d\u204e\7p\2\2\u204e\u2050\5\u03d2\u01ea"+
		"\2\u204f\u204d\3\2\2\2\u204f\u2050\3\2\2\2\u2050\u2051\3\2\2\2\u2051\u2052"+
		"\7\u00a8\2\2\u2052\u2057\5\u029a\u014e\2\u2053\u2054\7\u034c\2\2\u2054"+
		"\u2056\5\u029a\u014e\2\u2055\u2053\3\2\2\2\u2056\u2059\3\2\2\2\u2057\u2055"+
		"\3\2\2\2\u2057\u2058\3\2\2\2\u2058\u205d\3\2\2\2\u2059\u2057\3\2\2\2\u205a"+
		"\u205b\7\u00bd\2\2\u205b\u205c\7O\2\2\u205c\u205e\7w\2\2\u205d\u205a\3"+
		"\2\2\2\u205d\u205e\3\2\2\2\u205e\u2061\3\2\2\2\u205f\u2060\7\b\2\2\u2060"+
		"\u2062\5\u029a\u014e\2\u2061\u205f\3\2\2\2\u2061\u2062\3\2\2\2\u2062\u2064"+
		"\3\2\2\2\u2063\u2065\7\u034d\2\2\u2064\u2063\3\2\2\2\u2064\u2065\3\2\2"+
		"\2\u2065\u2077\3\2\2\2\u2066\u206d\7\u008f\2\2\u2067\u2068\7\u034a\2\2"+
		"\u2068\u2069\7\u00bd\2\2\u2069\u206a\7\u0102\2\2\u206a\u206b\7\u0338\2"+
		"\2\u206b\u206c\7\u0331\2\2\u206c\u206e\7\u034b\2\2\u206d\u2067\3\2\2\2"+
		"\u206d\u206e\3\2\2\2\u206e\u2070\3\2\2\2\u206f\u2071\7\u034d\2\2\u2070"+
		"\u206f\3\2\2\2\u2070\u2071\3\2\2\2\u2071\u2077\3\2\2\2\u2072\u2077\5\u02a6"+
		"\u0154\2\u2073\u2077\5\u02a8\u0155\2\u2074\u2077\5\u02aa\u0156\2\u2075"+
		"\u2077\5\u029c\u014f\2\u2076\u203b\3\2\2\2\u2076\u203f\3\2\2\2\u2076\u2066"+
		"\3\2\2\2\u2076\u2072\3\2\2\2\u2076\u2073\3\2\2\2\u2076\u2074\3\2\2\2\u2076"+
		"\u2075\3\2\2\2\u2077\u0299\3\2\2\2\u2078\u207c\3\2\2\2\u2079\u207c\5\u0410"+
		"\u0209\2\u207a\u207c\7\u0084\2\2\u207b\u2078\3\2\2\2\u207b\u2079\3\2\2"+
		"\2\u207b\u207a\3\2\2\2\u207c\u029b\3\2\2\2\u207d\u207e\7#\2\2\u207e\u207f"+
		"\7\u027e\2\2\u207f\u2082\5\u0410\u0209\2\u2080\u2081\7\n\2\2\u2081\u2083"+
		"\5\u0410\u0209\2\u2082\u2080\3\2\2\2\u2082\u2083\3\2\2\2\u2083\u2087\3"+
		"\2\2\2\u2084\u2085\7K\2\2\u2085\u2088\5\u029e\u0150\2\u2086\u2088\5\u02a2"+
		"\u0152\2\u2087\u2084\3\2\2\2\u2087\u2086\3\2\2\2\u2088\u208f\3\2\2\2\u2089"+
		"\u208a\7\u00c5\2\2\u208a\u208b\7G\2\2\u208b\u208c\7\r\2\2\u208c\u208d"+
		"\7\u0124\2\2\u208d\u208e\7\u0338\2\2\u208e\u2090\t\t\2\2\u208f\u2089\3"+
		"\2\2\2\u208f\u2090\3\2\2\2\u2090\u029d\3\2\2\2\u2091\u2092\7\u00d8\2\2"+
		"\u2092\u20a3\5\u0410\u0209\2\u2093\u2095\7\u0136\2\2\u2094\u2093\3\2\2"+
		"\2\u2094\u2095\3\2\2\2\u2095\u2096\3\2\2\2\u2096\u2097\7E\2\2\u2097\u2098"+
		"\7\u0338\2\2\u2098\u20a0\7\u0334\2\2\u2099\u209a\7\u00bd\2\2\u209a\u209b"+
		"\7\u01d7\2\2\u209b\u209c\7_\2\2\u209c\u209d\7\u034a\2\2\u209d\u209e\5"+
		"\u02a0\u0151\2\u209e\u209f\7\u034b\2\2\u209f\u20a1\3\2\2\2\u20a0\u2099"+
		"\3\2\2\2\u20a0\u20a1\3\2\2\2\u20a1\u20a3\3\2\2\2\u20a2\u2091\3\2\2\2\u20a2"+
		"\u2094\3\2\2\2\u20a3\u029f\3\2\2\2\u20a4\u20a5\t^\2\2\u20a5\u20a6\7\u0338"+
		"\2\2\u20a6\u20ad\7\u0334\2\2\u20a7\u20a8\7\u034c\2\2\u20a8\u20a9\t_\2"+
		"\2\u20a9\u20aa\7\22\2\2\u20aa\u20ab\7\u02e0\2\2\u20ab\u20ac\7\u0338\2"+
		"\2\u20ac\u20ae\7\u0334\2\2\u20ad\u20a7\3\2\2\2\u20ad\u20ae\3\2\2\2\u20ae"+
		"\u02a1\3\2\2\2\u20af\u20b0\7\u0132\2\2\u20b0\u20b1\7\22\2\2\u20b1\u20b2"+
		"\7\u02e0\2\2\u20b2\u20b3\7\u0338\2\2\u20b3\u20b5\7\u0334\2\2\u20b4\u20af"+
		"\3\2\2\2\u20b4\u20b5\3\2\2\2\u20b5\u20b6\3\2\2\2\u20b6\u20b7\7\u00bd\2"+
		"\2\u20b7\u20b8\7\u0232\2\2\u20b8\u20b9\7\u0338\2\2\u20b9\u20be\7\u0334"+
		"\2\2\u20ba\u20bb\7\u034c\2\2\u20bb\u20bd\5\u02a4\u0153\2\u20bc\u20ba\3"+
		"\2\2\2\u20bd\u20c0\3\2\2\2\u20be\u20bc\3\2\2\2\u20be\u20bf\3\2\2\2\u20bf"+
		"\u02a3\3\2\2\2\u20c0\u20be\3\2\2\2\u20c1\u20c2\t`\2\2\u20c2\u20c3\7\u0338"+
		"\2\2\u20c3\u20c4\7\u0334\2\2\u20c4\u02a5\3\2\2\2\u20c5\u20c6\7q\2\2\u20c6"+
		"\u20c7\7\u0236\2\2\u20c7\u20c8\7_\2\2\u20c8\u20c9\5\u0410\u0209\2\u20c9"+
		"\u20ca\7\u0117\2\2\u20ca\u20cb\7\22\2\2\u20cb\u20cc\5\u02b2\u015a\2\u20cc"+
		"\u20d6\3\2\2\2\u20cd\u20ce\7q\2\2\u20ce\u20cf\7\u02bf\2\2\u20cf\u20d0"+
		"\7_\2\2\u20d0\u20d1\7\u0117\2\2\u20d1\u20d2\7\22\2\2\u20d2\u20d3\7\u02e0"+
		"\2\2\u20d3\u20d4\7\u0338\2\2\u20d4\u20d6\7\u0334\2\2\u20d5\u20c5\3\2\2"+
		"\2\u20d5\u20cd\3\2\2\2\u20d6\u02a7\3\2\2\2\u20d7\u20d8\7\27\2\2\u20d8"+
		"\u20d9\7\u0236\2\2\u20d9\u20da\7_\2\2\u20da\u20e3\5\u0410\u0209\2\u20db"+
		"\u20dc\7\27\2\2\u20dc\u20dd\7\4\2\2\u20dd\u20de\7\u0236\2\2\u20de\u20e3"+
		"\7\u0174\2\2\u20df\u20e0\7\27\2\2\u20e0\u20e1\7\u02bf\2\2\u20e1\u20e3"+
		"\7_\2\2\u20e2\u20d7\3\2\2\2\u20e2\u20db\3\2\2\2\u20e2\u20df\3\2\2\2\u20e3"+
		"\u02a9\3\2\2\2\u20e4\u20e5\7#\2\2\u20e5\u20e6\7\u02bf\2\2\u20e6\u20e7"+
		"\7_\2\2\u20e7\u20e8\7\u0132\2\2\u20e8\u20e9\7\22\2\2\u20e9\u20ea\7\u02e0"+
		"\2\2\u20ea\u20eb\7\u0338\2\2\u20eb\u2108\7\u0334\2\2\u20ec\u20ed\7#\2"+
		"\2\u20ed\u20ee\7\u0236\2\2\u20ee\u20ef\7_\2\2\u20ef\u20f2\5\u0410\u0209"+
		"\2\u20f0\u20f1\7\n\2\2\u20f1\u20f3\5\u0410\u0209\2\u20f2\u20f0\3\2\2\2"+
		"\u20f2\u20f3\3\2\2\2\u20f3\u20f7\3\2\2\2\u20f4\u20f5\7K\2\2\u20f5\u20f6"+
		"\7\u01dc\2\2\u20f6\u20f8\5\u0410\u0209\2\u20f7\u20f4\3\2\2\2\u20f7\u20f8"+
		"\3\2\2\2\u20f8\u20f9\3\2\2\2\u20f9\u2103\7\u00bd\2\2\u20fa\u20ff\5\u02ac"+
		"\u0157\2\u20fb\u20fc\7\u0132\2\2\u20fc\u20fd\7\22\2\2\u20fd\u20ff\5\u02b0"+
		"\u0159\2\u20fe\u20fa\3\2\2\2\u20fe\u20fb\3\2\2\2\u20ff\u2101\3\2\2\2\u2100"+
		"\u2102\7\u034c\2\2\u2101\u2100\3\2\2\2\u2101\u2102\3\2\2\2\u2102\u2104"+
		"\3\2\2\2\u2103\u20fe\3\2\2\2\u2104\u2105\3\2\2\2\u2105\u2103\3\2\2\2\u2105"+
		"\u2106\3\2\2\2\u2106\u2108\3\2\2\2\u2107\u20e4\3\2\2\2\u2107\u20ec\3\2"+
		"\2\2\u2108\u02ab\3\2\2\2\u2109\u210a\7\u0173\2\2\u210a\u210b\7\u0338\2"+
		"\2\u210b\u2119\7\u0334\2\2\u210c\u210d\7\u00cd\2\2\u210d\u210e\7\u0338"+
		"\2\2\u210e\u2119\5\u02ae\u0158\2\u210f\u2110\7\u0160\2\2\u2110\u2111\7"+
		"\u0338\2\2\u2111\u2119\7\u0334\2\2\u2112\u2113\7\u01dd\2\2\u2113\u2114"+
		"\7\u0338\2\2\u2114\u2119\7\u0334\2\2\u2115\u2116\7\u0108\2\2\u2116\u2117"+
		"\7\u0338\2\2\u2117\u2119\t\f\2\2\u2118\u2109\3\2\2\2\u2118\u210c\3\2\2"+
		"\2\u2118\u210f\3\2\2\2\u2118\u2112\3\2\2\2\u2118\u2115\3\2\2\2\u2119\u02ad"+
		"\3\2\2\2\u211a\u211b\t\61\2\2\u211b\u02af\3\2\2\2\u211c\u211d\7\u027e"+
		"\2\2\u211d\u2128\5\u0410\u0209\2\u211e\u211f\7\u0270\2\2\u211f\u2120\7"+
		"_\2\2\u2120\u2128\5\u0410\u0209\2\u2121\u2122\7\u0236\2\2\u2122\u2123"+
		"\7_\2\2\u2123\u2128\5\u0410\u0209\2\u2124\u2125\7\u02e0\2\2\u2125\u2126"+
		"\7\u0338\2\2\u2126\u2128\7\u0334\2\2\u2127\u211c\3\2\2\2\u2127\u211e\3"+
		"\2\2\2\u2127\u2121\3\2\2\2\u2127\u2124\3\2\2\2\u2128\u02b1\3\2\2\2\u2129"+
		"\u212a\7\u027e\2\2\u212a\u212f\5\u0410\u0209\2\u212b\u212c\7\u00bd\2\2"+
		"\u212c\u212d\7\u02e0\2\2\u212d\u212e\7\u0338\2\2\u212e\u2130\7\u0334\2"+
		"\2\u212f\u212b\3\2\2\2\u212f\u2130\3\2\2\2\u2130\u2141\3\2\2\2\u2131\u2132"+
		"\7\u0270\2\2\u2132\u2133\7_\2\2\u2133\u2138\5\u0410\u0209\2\u2134\u2135"+
		"\7\u00bd\2\2\u2135\u2136\7\u02e0\2\2\u2136\u2137\7\u0338\2\2\u2137\u2139"+
		"\7\u0334\2\2\u2138\u2134\3\2\2\2\u2138\u2139\3\2\2\2\u2139\u2141\3\2\2"+
		"\2\u213a\u213b\7\u0236\2\2\u213b\u213c\7_\2\2\u213c\u2141\5\u0410\u0209"+
		"\2\u213d\u213e\7\u02e0\2\2\u213e\u213f\7\u0338\2\2\u213f\u2141\7\u0334"+
		"\2\2\u2140\u2129\3\2\2\2\u2140\u2131\3\2\2\2\u2140\u213a\3\2\2\2\u2140"+
		"\u213d\3\2\2\2\u2141\u02b3\3\2\2\2\u2142\u215d\7@\2\2\u2143\u2144\7\u00b8"+
		"\2\2\u2144\u215d\5\u0410\u0209\2\u2145\u2146\7\u023a\2\2\u2146\u215d\5"+
		"\u0410\u0209\2\u2147\u2149\7\u0101\2\2\u2148\u214a\5\u0410\u0209\2\u2149"+
		"\u2148\3\2\2\2\u2149\u214a\3\2\2\2\u214a\u215d\3\2\2\2\u214b\u214c\7#"+
		"\2\2\u214c\u215d\ta\2\2\u214d\u215d\7\u021f\2\2\u214e\u215d\7\u0163\2"+
		"\2\u214f\u215d\7\u0099\2\2\u2150\u215d\7\u008a\2\2\u2151\u215d\7Z\2\2"+
		"\u2152\u215a\7\5\2\2\u2153\u2155\7\7\2\2\u2154\u2153\3\2\2\2\u2154\u2155"+
		"\3\2\2\2\u2155\u2158\3\2\2\2\u2156\u2159\5\u0410\u0209\2\u2157\u2159\7"+
		"+\2\2\u2158\u2156\3\2\2\2\u2158\u2157\3\2\2\2\u2159\u215b\3\2\2\2\u215a"+
		"\u2154\3\2\2\2\u215a\u215b\3\2\2\2\u215b\u215d\3\2\2\2\u215c\u2142\3\2"+
		"\2\2\u215c\u2143\3\2\2\2\u215c\u2145\3\2\2\2\u215c\u2147\3\2\2\2\u215c"+
		"\u214b\3\2\2\2\u215c\u214d\3\2\2\2\u215c\u214e\3\2\2\2\u215c\u214f\3\2"+
		"\2\2\u215c\u2150\3\2\2\2\u215c\u2151\3\2\2\2\u215c\u2152\3\2\2\2\u215d"+
		"\u02b5\3\2\2\2\u215e\u215f\7\u009e\2\2\u215f\u2162\7\u0331\2\2\u2160\u2161"+
		"\7\u0345\2\2\u2161\u2163\5\u0410\u0209\2\u2162\u2160\3\2\2\2\u2162\u2163"+
		"\3\2\2\2\u2163\u2164\3\2\2\2\u2164\u2165\7\u0338\2\2\u2165\u2167\5\u02fa"+
		"\u017e\2\u2166\u2168\7\u034d\2\2\u2167\u2166\3\2\2\2\u2167\u2168\3\2\2"+
		"\2\u2168\u2186\3\2\2\2\u2169\u216a\7\u009e\2\2\u216a\u216b\7\u0331\2\2"+
		"\u216b\u216c\5\u0416\u020c\2\u216c\u216e\5\u02fa\u017e\2\u216d\u216f\7"+
		"\u034d\2\2\u216e\u216d\3\2\2\2\u216e\u216f\3\2\2\2\u216f\u2186\3\2\2\2"+
		"\u2170\u2171\7\u009e\2\2\u2171\u2172\7\u0331\2\2\u2172\u2173\7\u0338\2"+
		"\2\u2173\u2174\7*\2\2\u2174\u217f\5\u02f0\u0179\2\u2175\u217d\7G\2\2\u2176"+
		"\u2177\7\u0087\2\2\u2177\u217e\7\u01be\2\2\u2178\u217b\7\u00b2\2\2\u2179"+
		"\u217a\7m\2\2\u217a\u217c\5\u03e6\u01f4\2\u217b\u2179\3\2\2\2\u217b\u217c"+
		"\3\2\2\2\u217c\u217e\3\2\2\2\u217d\u2176\3\2\2\2\u217d\u2178\3\2\2\2\u217e"+
		"\u2180\3\2\2\2\u217f\u2175\3\2\2\2\u217f\u2180\3\2\2\2\u2180\u2182\3\2"+
		"\2\2\u2181\u2183\7\u034d\2\2\u2182\u2181\3\2\2\2\u2182\u2183\3\2\2\2\u2183"+
		"\u2186\3\2\2\2\u2184\u2186\5\u02f6\u017c\2\u2185\u215e\3\2\2\2\u2185\u2169"+
		"\3\2\2\2\u2185\u2170\3\2\2\2\u2185\u2184\3\2\2\2\u2186\u02b7\3\2\2\2\u2187"+
		"\u2188\7\r\2\2\u2188\u2189\7\65\2\2\u2189\u218c\tb\2\2\u218a\u218d\5\u0410"+
		"\u0209\2\u218b\u218d\7\u0331\2\2\u218c\u218a\3\2\2\2\u218c\u218b\3\2\2"+
		"\2\u218c\u218d\3\2\2\2\u218d\u218f\3\2\2\2\u218e\u2190\7\u034d\2\2\u218f"+
		"\u218e\3\2\2\2\u218f\u2190\3\2\2\2\u2190\u21d9\3\2\2\2\u2191\u2192\7\r"+
		"\2\2\u2192\u219c\tb\2\2\u2193\u2196\5\u0410\u0209\2\u2194\u2196\7\u0331"+
		"\2\2\u2195\u2193\3\2\2\2\u2195\u2194\3\2\2\2\u2196\u219a\3\2\2\2\u2197"+
		"\u2198\7\u00bd\2\2\u2198\u2199\7\u0187\2\2\u2199\u219b\7\u0334\2\2\u219a"+
		"\u2197\3\2\2\2\u219a\u219b\3\2\2\2\u219b\u219d\3\2\2\2\u219c\u2195\3\2"+
		"\2\2\u219c\u219d\3\2\2\2\u219d\u219f\3\2\2\2\u219e\u21a0\7\u034d\2\2\u219f"+
		"\u219e\3\2\2\2\u219f\u21a0\3\2\2\2\u21a0\u21d9\3\2\2\2\u21a1\u21a2\7\34"+
		"\2\2\u21a2\u21af\tb\2\2\u21a3\u21a6\5\u0410\u0209\2\u21a4\u21a6\7\u0331"+
		"\2\2\u21a5\u21a3\3\2\2\2\u21a5\u21a4\3\2\2\2\u21a6\u21ad\3\2\2\2\u21a7"+
		"\u21a8\7\u00bd\2\2\u21a8\u21a9\7\u034a\2\2\u21a9\u21aa\7\u011c\2\2\u21aa"+
		"\u21ab\7\u0338\2\2\u21ab\u21ac\t\t\2\2\u21ac\u21ae\7\u034b\2\2\u21ad\u21a7"+
		"\3\2\2\2\u21ad\u21ae\3\2\2\2\u21ae\u21b0\3\2\2\2\u21af\u21a5\3\2\2\2\u21af"+
		"\u21b0\3\2\2\2\u21b0\u21b2\3\2\2\2\u21b1\u21b3\7\u034d\2\2\u21b2\u21b1"+
		"\3\2\2\2\u21b2\u21b3\3\2\2\2\u21b3\u21d9\3\2\2\2\u21b4\u21b6\7\34\2\2"+
		"\u21b5\u21b7\7\u025f\2\2\u21b6\u21b5\3\2\2\2\u21b6\u21b7\3\2\2\2\u21b7"+
		"\u21b9\3\2\2\2\u21b8\u21ba\7\u034d\2\2\u21b9\u21b8\3\2\2\2\u21b9\u21ba"+
		"\3\2\2\2\u21ba\u21d9\3\2\2\2\u21bb\u21bc\7\34\2\2\u21bc\u21d9\5\u0410"+
		"\u0209\2\u21bd\u21be\7\u0092\2\2\u21be\u21d9\5\u0410\u0209\2\u21bf\u21c0"+
		"\7\u0092\2\2\u21c0\u21c3\tb\2\2\u21c1\u21c4\5\u0410\u0209\2\u21c2\u21c4"+
		"\7\u0331\2\2\u21c3\u21c1\3\2\2\2\u21c3\u21c2\3\2\2\2\u21c3\u21c4\3\2\2"+
		"\2\u21c4\u21c6\3\2\2\2\u21c5\u21c7\7\u034d\2\2\u21c6\u21c5\3\2\2\2\u21c6"+
		"\u21c7\3\2\2\2\u21c7\u21d9\3\2\2\2\u21c8\u21ca\7\u0092\2\2\u21c9\u21cb"+
		"\7\u025f\2\2\u21ca\u21c9\3\2\2\2\u21ca\u21cb\3\2\2\2\u21cb\u21cd\3\2\2"+
		"\2\u21cc\u21ce\7\u034d\2\2\u21cd\u21cc\3\2\2\2\u21cd\u21ce\3\2\2\2\u21ce"+
		"\u21d9\3\2\2\2\u21cf\u21d0\7\u0096\2\2\u21d0\u21d3\tb\2\2\u21d1\u21d4"+
		"\5\u0410\u0209\2\u21d2\u21d4\7\u0331\2\2\u21d3\u21d1\3\2\2\2\u21d3\u21d2"+
		"\3\2\2\2\u21d3\u21d4\3\2\2\2\u21d4\u21d6\3\2\2\2\u21d5\u21d7\7\u034d\2"+
		"\2\u21d6\u21d5\3\2\2\2\u21d6\u21d7\3\2\2\2\u21d7\u21d9\3\2\2\2\u21d8\u2187"+
		"\3\2\2\2\u21d8\u2191\3\2\2\2\u21d8\u21a1\3\2\2\2\u21d8\u21b4\3\2\2\2\u21d8"+
		"\u21bb\3\2\2\2\u21d8\u21bd\3\2\2\2\u21d8\u21bf\3\2\2\2\u21d8\u21c8\3\2"+
		"\2\2\u21d8\u21cf\3\2\2\2\u21d9\u02b9\3\2\2\2\u21da\u21dc\7\u0155\2\2\u21db"+
		"\u21dd\7\u0332\2\2\u21dc\u21db\3\2\2\2\u21dc\u21dd\3\2\2\2\u21dd\u02bb"+
		"\3\2\2\2\u21de\u21e0\7\u0156\2\2\u21df\u21e1\7\u0332\2\2\u21e0\u21df\3"+
		"\2\2\2\u21e0\u21e1\3\2\2\2\u21e1\u02bd\3\2\2\2\u21e2\u21e3\7\u00b4\2\2"+
		"\u21e3\u21e5\5\u0410\u0209\2\u21e4\u21e6\7\u034d\2\2\u21e5\u21e4\3\2\2"+
		"\2\u21e5\u21e6\3\2\2\2\u21e6\u02bf\3\2\2\2\u21e7\u21e9\7\u009f\2\2\u21e8"+
		"\u21ea\7\u0334\2\2\u21e9\u21e8\3\2\2\2\u21e9\u21ea\3\2\2\2\u21ea\u02c1"+
		"\3\2\2\2\u21eb\u21ee\7\u0089\2\2\u21ec\u21ed\7\u00bd\2\2\u21ed\u21ef\7"+
		"\u01c4\2\2\u21ee\u21ec\3\2\2\2\u21ee\u21ef\3\2\2\2\u21ef\u02c3\3\2\2\2"+
		"\u21f0\u21f3\7\u00a0\2\2\u21f1\u21f2\7\u00bd\2\2\u21f2\u21f4\7\u01b4\2"+
		"\2\u21f3\u21f1\3\2\2\2\u21f3\u21f4\3\2\2\2\u21f4\u02c5\3\2\2\2\u21f5\u21f6"+
		"\7,\2\2\u21f6\u2200\7\u0307\2\2\u21f7\u21f8\7\u034a\2\2\u21f8\u21f9\7"+
		"\u0223\2\2\u21f9\u21fd\7\u0338\2\2\u21fa\u21fe\5\u0306\u0184\2\u21fb\u21fe"+
		"\5\u0410\u0209\2\u21fc\u21fe\7/\2\2\u21fd\u21fa\3\2\2\2\u21fd\u21fb\3"+
		"\2\2\2\u21fd\u21fc\3\2\2\2\u21fe\u21ff\3\2\2\2\u21ff\u2201\7\u034b\2\2"+
		"\u2200\u21f7\3\2\2\2\u2200\u2201\3\2\2\2\u2201\u2203\3\2\2\2\u2202\u2204"+
		"\7\u034d\2\2\u2203\u2202\3\2\2\2\u2203\u2204\3\2\2\2\u2204\u02c7\3\2\2"+
		"\2\u2205\u2206\7,\2\2\u2206\u220b\5\u02ca\u0166\2\u2207\u2208\7\u034a"+
		"\2\2\u2208\u2209\5\u03aa\u01d6\2\u2209\u220a\7\u034b\2\2\u220a\u220c\3"+
		"\2\2\2\u220b\u2207\3\2\2\2\u220b\u220c\3\2\2\2\u220c\u220f\3\2\2\2\u220d"+
		"\u220e\7\u00bd\2\2\u220e\u2210\5\u02cc\u0167\2\u220f\u220d\3\2\2\2\u220f"+
		"\u2210\3\2\2\2\u2210\u2212\3\2\2\2\u2211\u2213\7\u034d\2\2\u2212\u2211"+
		"\3\2\2\2\u2212\u2213\3\2\2\2\u2213\u02c9\3\2\2\2\u2214\u2217\5\u0412\u020a"+
		"\2\u2215\u2217\5\u040e\u0208\2\u2216\u2214\3\2\2\2\u2216\u2215\3\2\2\2"+
		"\u2217\u02cb\3\2\2\2\u2218\u221b\5\u0412\u020a\2\u2219\u221a\7\u034c\2"+
		"\2\u221a\u221c\5\u0412\u020a\2\u221b\u2219\3\2\2\2\u221b\u221c\3\2\2\2"+
		"\u221c\u02cd\3\2\2\2\u221d\u221e\7@\2\2\u221e\u221f\7\b\2\2\u221f\u2220"+
		"\tc\2\2\u2220\u02cf\3\2\2\2\u2221\u2223\7\u0331\2\2\u2222\u2224\7\b\2"+
		"\2\u2223\u2222\3\2\2\2\u2223\u2224\3\2\2\2\u2224\u2225\3\2\2\2\u2225\u2228"+
		"\5\u0406\u0204\2\u2226\u2227\7\u0338\2\2\u2227\u2229\5\u02fa\u017e\2\u2228"+
		"\u2226\3\2\2\2\u2228\u2229\3\2\2\2\u2229\u02d1\3\2\2\2\u222a\u222b\7\u00a4"+
		"\2\2\u222b\u222c\7\u034a\2\2\u222c\u2233\5\u02da\u016e\2\u222d\u222f\7"+
		"\u034c\2\2\u222e\u222d\3\2\2\2\u222e\u222f\3\2\2\2\u222f\u2230\3\2\2\2"+
		"\u2230\u2232\5\u02d4\u016b\2\u2231\u222e\3\2\2\2\u2232\u2235\3\2\2\2\u2233"+
		"\u2231\3\2\2\2\u2233\u2234\3\2\2\2\u2234\u2236\3\2\2\2\u2235\u2233\3\2"+
		"\2\2\u2236\u2237\7\u034b\2\2\u2237\u02d3\3\2\2\2\u2238\u2239\7\u0080\2"+
		"\2\u2239\u223d\7_\2\2\u223a\u223b\7X\2\2\u223b\u223d\5\u0410\u0209\2\u223c"+
		"\u2238\3\2\2\2\u223c\u223a\3\2\2\2\u223d\u223f\3\2\2\2\u223e\u2240\td"+
		"\2\2\u223f\u223e\3\2\2\2\u223f\u2240\3\2\2\2\u2240\u2243\3\2\2\2\u2241"+
		"\u2243\7\u00b0\2\2\u2242\u223c\3\2\2\2\u2242\u2241\3\2\2\2\u2243\u2244"+
		"\3\2\2\2\u2244\u2245\7\u034a\2\2\u2245\u2246\5\u03e0\u01f1\2\u2246\u2247"+
		"\7\u034b\2\2\u2247\u224e\3\2\2\2\u2248\u2249\7\25\2\2\u2249\u224a\7\u034a"+
		"\2\2\u224a\u224b\5\u0312\u018a\2\u224b\u224c\7\u034b\2\2\u224c\u224e\3"+
		"\2\2\2\u224d\u2242\3\2\2\2\u224d\u2248\3\2\2\2\u224e\u02d5\3\2\2\2\u224f"+
		"\u2250\7\u0261\2\2\u2250\u2252\7\u034a\2\2\u2251\u2253\te\2\2\u2252\u2251"+
		"\3\2\2\2\u2252\u2253\3\2\2\2\u2253\u2254\3\2\2\2\u2254\u2255\5\u02d8\u016d"+
		"\2\u2255\u2256\7\u034b\2\2\u2256\u02d7\3\2\2\2\u2257\u2258\7\u0333\2\2"+
		"\u2258\u2259\7\u0345\2\2\u2259\u225a\7\u0333\2\2\u225a\u02d9\3\2\2\2\u225b"+
		"\u2262\5\u02dc\u016f\2\u225c\u225e\7\u034c\2\2\u225d\u225c\3\2\2\2\u225d"+
		"\u225e\3\2\2\2\u225e\u225f\3\2\2\2\u225f\u2261\5\u02dc\u016f\2\u2260\u225d"+
		"\3\2\2\2\u2261\u2264\3\2\2\2\u2262\u2260\3\2\2\2\u2262\u2263\3\2\2\2\u2263"+
		"\u02db\3\2\2\2\u2264\u2262\3\2\2\2\u2265\u2269\5\u02de\u0170\2\u2266\u2269"+
		"\5\u02e0\u0171\2\u2267\u2269\5\u02e4\u0173\2\u2268\u2265\3\2\2\2\u2268"+
		"\u2266\3\2\2\2\u2268\u2267\3\2\2\2\u2269\u02dd\3\2\2\2\u226a\u2271\5\u0410"+
		"\u0209\2\u226b\u2272\5\u0406\u0204\2\u226c\u226d\7\b\2\2\u226d\u226f\5"+
		"\u02fa\u017e\2\u226e\u2270\7\u02e5\2\2\u226f\u226e\3\2\2\2\u226f\u2270"+
		"\3\2\2\2\u2270\u2272\3\2\2\2\u2271\u226b\3\2\2\2\u2271\u226c\3\2\2\2\u2272"+
		"\u2275\3\2\2\2\u2273\u2274\7\32\2\2\u2274\u2276\5\u0410\u0209\2\u2275"+
		"\u2273\3\2\2\2\u2275\u2276\3\2\2\2\u2276\u2278\3\2\2\2\u2277\u2279\5\u03ee"+
		"\u01f8\2\u2278\u2277\3\2\2\2\u2278\u2279\3\2\2\2\u2279\u228f\3\2\2\2\u227a"+
		"\u227b\7\36\2\2\u227b\u227d\5\u0410\u0209\2\u227c\u227a\3\2\2\2\u227c"+
		"\u227d\3\2\2\2\u227d\u227e\3\2\2\2\u227e\u2280\5\u03f0\u01f9\2\u227f\u2281"+
		"\5\u03f0\u01f9\2\u2280\u227f\3\2\2\2\u2280\u2281\3\2\2\2\u2281\u2290\3"+
		"\2\2\2\u2282\u2288\7S\2\2\u2283\u2284\7\u034a\2\2\u2284\u2285\7\u0332"+
		"\2\2\u2285\u2286\7\u034c\2\2\u2286\u2287\7\u0332\2\2\u2287\u2289\7\u034b"+
		"\2\2\u2288\u2283\3\2\2\2\u2288\u2289\3\2\2\2\u2289\u228d\3\2\2\2\u228a"+
		"\u228b\7j\2\2\u228b\u228c\7G\2\2\u228c\u228e\7\u008b\2\2\u228d\u228a\3"+
		"\2\2\2\u228d\u228e\3\2\2\2\u228e\u2290\3\2\2\2\u228f\u227c\3\2\2\2\u228f"+
		"\u2282\3\2\2\2\u228f\u2290\3\2\2\2\u2290\u2292\3\2\2\2\u2291\u2293\7\u0094"+
		"\2\2\u2292\u2291\3\2\2\2\u2292\u2293\3\2\2\2\u2293\u2297\3\2\2\2\u2294"+
		"\u2296\5\u02e2\u0172\2\u2295\u2294\3\2\2\2\u2296\u2299\3\2\2\2\u2297\u2295"+
		"\3\2\2\2\u2297\u2298\3\2\2\2\u2298\u02df\3\2\2\2\u2299\u2297\3\2\2\2\u229a"+
		"\u229b\5\u0410\u0209\2\u229b\u229c\tf\2\2\u229c\u22a0\5\u02fa\u017e\2"+
		"\u229d\u22a1\7\u0188\2\2\u229e\u229f\7j\2\2\u229f\u22a1\7\u0188\2\2\u22a0"+
		"\u229d\3\2\2\2\u22a0\u229e\3\2\2\2\u22a0\u22a1\3\2\2\2\u22a1\u02e1\3\2"+
		"\2\2\u22a2\u22a3\7\36\2\2\u22a3\u22a5\5\u0410\u0209\2\u22a4\u22a2\3\2"+
		"\2\2\u22a4\u22a5\3\2\2\2\u22a5\u22cb\3\2\2\2\u22a6\u22a7\7\u0080\2\2\u22a7"+
		"\u22aa\7_\2\2\u22a8\u22aa\7\u00b0\2\2\u22a9\u22a6\3\2\2\2\u22a9\u22a8"+
		"\3\2\2\2\u22aa\u22ac\3\2\2\2\u22ab\u22ad\5\u03ec\u01f7\2\u22ac\u22ab\3"+
		"\2\2\2\u22ac\u22ad\3\2\2\2\u22ad\u22af\3\2\2\2\u22ae\u22b0\5\u02ea\u0176"+
		"\2\u22af\u22ae\3\2\2\2\u22af\u22b0\3\2\2\2\u22b0\u22cc\3\2\2\2\u22b1\u22b5"+
		"\7\25\2\2\u22b2\u22b3\7j\2\2\u22b3\u22b4\7G\2\2\u22b4\u22b6\7\u008b\2"+
		"\2\u22b5\u22b2\3\2\2\2\u22b5\u22b6\3\2\2\2\u22b6\u22b7\3\2\2\2\u22b7\u22b8"+
		"\7\u034a\2\2\u22b8\u22b9\5\u0312\u018a\2\u22b9\u22ba\7\u034b\2\2\u22ba"+
		"\u22cc\3\2\2\2\u22bb\u22bc\7H\2\2\u22bc\u22be\7_\2\2\u22bd\u22bb\3\2\2"+
		"\2\u22bd\u22be\3\2\2\2\u22be\u22bf\3\2\2\2\u22bf\u22c0\7\u008a\2\2\u22c0"+
		"\u22c1\5\u03d2\u01ea\2\u22c1\u22c2\7\u034a\2\2\u22c2\u22c3\5\u03e6\u01f4"+
		"\2\u22c3\u22c5\7\u034b\2\2\u22c4\u22c6\5\u02e6\u0174\2\u22c5\u22c4\3\2"+
		"\2\2\u22c5\u22c6\3\2\2\2\u22c6\u22c8\3\2\2\2\u22c7\u22c9\5\u02e8\u0175"+
		"\2\u22c8\u22c7\3\2\2\2\u22c8\u22c9\3\2\2\2\u22c9\u22cc\3\2\2\2\u22ca\u22cc"+
		"\5\u03ee\u01f8\2\u22cb\u22a9\3\2\2\2\u22cb\u22b1\3\2\2\2\u22cb\u22bd\3"+
		"\2\2\2\u22cb\u22ca\3\2\2\2\u22cc\u02e3\3\2\2\2\u22cd\u22ce\7\36\2\2\u22ce"+
		"\u22d0\5\u0410\u0209\2\u22cf\u22cd\3\2\2\2\u22cf\u22d0\3\2\2\2\u22d0\u2311"+
		"\3\2\2\2\u22d1\u22d2\7\u0080\2\2\u22d2\u22d5\7_\2\2\u22d3\u22d5\7\u00b0"+
		"\2\2\u22d4\u22d1\3\2\2\2\u22d4\u22d3\3\2\2\2\u22d5\u22d7\3\2\2\2\u22d6"+
		"\u22d8\5\u03ec\u01f7\2\u22d7\u22d6\3\2\2\2\u22d7\u22d8\3\2\2\2\u22d8\u22d9"+
		"\3\2\2\2\u22d9\u22da\7\u034a\2\2\u22da\u22db\5\u03e0\u01f1\2\u22db\u22dd"+
		"\7\u034b\2\2\u22dc\u22de\5\u02ea\u0176\2\u22dd\u22dc\3\2\2\2\u22dd\u22de"+
		"\3\2\2\2\u22de\u22e1\3\2\2\2\u22df\u22e0\7p\2\2\u22e0\u22e2\5\u0410\u0209"+
		"\2\u22e1\u22df\3\2\2\2\u22e1\u22e2\3\2\2\2\u22e2\u2312\3\2\2\2\u22e3\u22e7"+
		"\7\25\2\2\u22e4\u22e5\7j\2\2\u22e5\u22e6\7G\2\2\u22e6\u22e8\7\u008b\2"+
		"\2\u22e7\u22e4\3\2\2\2\u22e7\u22e8\3\2\2\2\u22e8\u22e9";
	private static final String _serializedATNSegment4 =
		"\3\2\2\2\u22e9\u22ea\7\u034a\2\2\u22ea\u22eb\5\u0312\u018a\2\u22eb\u22ec"+
		"\7\u034b\2\2\u22ec\u2312\3\2\2\2\u22ed\u22ef\7/\2\2\u22ee\u22f0\7\u034a"+
		"\2\2\u22ef\u22ee\3\2\2\2\u22ef\u22f0\3\2\2\2\u22f0\u22f5\3\2\2\2\u22f1"+
		"\u22f6\7\u0334\2\2\u22f2\u22f6\7\u0352\2\2\u22f3\u22f6\5\u0376\u01bc\2"+
		"\u22f4\u22f6\7\u0332\2\2\u22f5\u22f1\3\2\2\2\u22f5\u22f2\3\2\2\2\u22f5"+
		"\u22f3\3\2\2\2\u22f5\u22f4\3\2\2\2\u22f6\u22f7\3\2\2\2\u22f7\u22f5\3\2"+
		"\2\2\u22f7\u22f8\3\2\2\2\u22f8\u22fa\3\2\2\2\u22f9\u22fb\7\u034b\2\2\u22fa"+
		"\u22f9\3\2\2\2\u22fa\u22fb\3\2\2\2\u22fb\u22fc\3\2\2\2\u22fc\u22fd\7G"+
		"\2\2\u22fd\u2312\5\u0410\u0209\2\u22fe\u22ff\7H\2\2\u22ff\u2300\7_\2\2"+
		"\u2300\u2301\7\u034a\2\2\u2301\u2302\5\u03e6\u01f4\2\u2302\u2303\7\u034b"+
		"\2\2\u2303\u2304\7\u008a\2\2\u2304\u2309\5\u03d2\u01ea\2\u2305\u2306\7"+
		"\u034a\2\2\u2306\u2307\5\u03e6\u01f4\2\u2307\u2308\7\u034b\2\2\u2308\u230a"+
		"\3\2\2\2\u2309\u2305\3\2\2\2\u2309\u230a\3\2\2\2\u230a\u230c\3\2\2\2\u230b"+
		"\u230d\5\u02e6\u0174\2\u230c\u230b\3\2\2\2\u230c\u230d\3\2\2\2\u230d\u230f"+
		"\3\2\2\2\u230e\u2310\5\u02e8\u0175\2\u230f\u230e\3\2\2\2\u230f\u2310\3"+
		"\2\2\2\u2310\u2312\3\2\2\2\u2311\u22d4\3\2\2\2\u2311\u22e3\3\2\2\2\u2311"+
		"\u22ed\3\2\2\2\u2311\u22fe\3\2\2\2\u2312\u02e5\3\2\2\2\u2313\u2314\7p"+
		"\2\2\u2314\u231c\7\60\2\2\u2315\u2316\7\u01ab\2\2\u2316\u231d\7\u00c3"+
		"\2\2\u2317\u231d\7\23\2\2\u2318\u2319\7\u009e\2\2\u2319\u231d\7k\2\2\u231a"+
		"\u231b\7\u009e\2\2\u231b\u231d\7/\2\2\u231c\u2315\3\2\2\2\u231c\u2317"+
		"\3\2\2\2\u231c\u2318\3\2\2\2\u231c\u231a\3\2\2\2\u231d\u02e7\3\2\2\2\u231e"+
		"\u231f\7p\2\2\u231f\u2327\7\u00b2\2\2\u2320\u2321\7\u01ab\2\2\u2321\u2328"+
		"\7\u00c3\2\2\u2322\u2328\7\23\2\2\u2323\u2324\7\u009e\2\2\u2324\u2328"+
		"\7k\2\2\u2325\u2326\7\u009e\2\2\u2326\u2328\7/\2\2\u2327\u2320\3\2\2\2"+
		"\u2327\u2322\3\2\2\2\u2327\u2323\3\2\2\2\u2327\u2325\3\2\2\2\u2328\u02e9"+
		"\3\2\2\2\u2329\u232a\7\u00bd\2\2\u232a\u232b\7\u034a\2\2\u232b\u2330\5"+
		"\u02ec\u0177\2\u232c\u232d\7\u034c\2\2\u232d\u232f\5\u02ec\u0177\2\u232e"+
		"\u232c\3\2\2\2\u232f\u2332\3\2\2\2\u2330\u232e\3\2\2\2\u2330\u2331\3\2"+
		"\2\2\u2331\u2333\3\2\2\2\u2332\u2330\3\2\2\2\u2333\u2334\7\u034b\2\2\u2334"+
		"\u02eb\3\2\2\2\u2335\u2338\5\u0412\u020a\2\u2336\u2338\5\u040e\u0208\2"+
		"\u2337\u2335\3\2\2\2\u2337\u2336\3\2\2\2\u2338\u2339\3\2\2\2\u2339\u233e"+
		"\7\u0338\2\2\u233a\u233f\5\u0412\u020a\2\u233b\u233f\5\u040e\u0208\2\u233c"+
		"\u233f\5\u03ea\u01f6\2\u233d\u233f\7\u0332\2\2\u233e\u233a\3\2\2\2\u233e"+
		"\u233b\3\2\2\2\u233e\u233c\3\2\2\2\u233e\u233d\3\2\2\2\u233f\u02ed\3\2"+
		"\2\2\u2340\u2341\7.\2\2\u2341\u2361\5\u03e8\u01f5\2\u2342\u234c\7*\2\2"+
		"\u2343\u234a\5\u02f0\u0179\2\u2344\u2345\7G\2\2\u2345\u2348\7\u00b2\2"+
		"\2\u2346\u2347\7m\2\2\u2347\u2349\5\u03e6\u01f4\2\u2348\u2346\3\2\2\2"+
		"\u2348\u2349\3\2\2\2\u2349\u234b\3\2\2\2\u234a\u2344\3\2\2\2\u234a\u234b"+
		"\3\2\2\2\u234b\u234d\3\2\2\2\u234c\u2343\3\2\2\2\u234c\u234d\3\2\2\2\u234d"+
		"\u2362\3\2\2\2\u234e\u2350\tg\2\2\u234f\u234e\3\2\2\2\u234f\u2350\3\2"+
		"\2\2\u2350\u2352\3\2\2\2\u2351\u2353\7\u020b\2\2\u2352\u2351\3\2\2\2\u2352"+
		"\u2353\3\2\2\2\u2353\u2354\3\2\2\2\u2354\u2355\7*\2\2\u2355\u2356\7G\2"+
		"\2\u2356\u235f\5\u01c6\u00e4\2\u2357\u235d\7G\2\2\u2358\u2359\7\u0087"+
		"\2\2\u2359\u235e\7\u01be\2\2\u235a\u235e\7\u00b2\2\2\u235b\u235c\7m\2"+
		"\2\u235c\u235e\5\u03e6\u01f4\2\u235d\u2358\3\2\2\2\u235d\u235a\3\2\2\2"+
		"\u235d\u235b\3\2\2\2\u235e\u2360\3\2\2\2\u235f\u2357\3\2\2\2\u235f\u2360"+
		"\3\2\2\2\u2360\u2362\3\2\2\2\u2361\u2342\3\2\2\2\u2361\u234f\3\2\2\2\u2362"+
		"\u2364\3\2\2\2\u2363\u2365\7\u034d\2\2\u2364\u2363\3\2\2\2\u2364\u2365"+
		"\3\2\2\2\u2365\u02ef\3\2\2\2\u2366\u2368\5\u02f2\u017a\2\u2367\u2366\3"+
		"\2\2\2\u2368\u236b\3\2\2\2\u2369\u2367\3\2\2\2\u2369\u236a\3\2\2\2\u236a"+
		"\u236c\3\2\2\2\u236b\u2369\3\2\2\2\u236c\u236d\7G\2\2\u236d\u236e\5\u01c6"+
		"\u00e4\2\u236e\u02f1\3\2\2\2\u236f\u2375\tA\2\2\u2370\u2375\th\2\2\u2371"+
		"\u2375\ti\2\2\u2372\u2375\tj\2\2\u2373\u2375\7\u024d\2\2\u2374\u236f\3"+
		"\2\2\2\u2374\u2370\3\2\2\2\u2374\u2371\3\2\2\2\u2374\u2372\3\2\2\2\u2374"+
		"\u2373\3\2\2\2\u2375\u02f3\3\2\2\2\u2376\u2380\7D\2\2\u2377\u237e\7\u01aa"+
		"\2\2\u2378\u237e\7\u01d4\2\2\u2379\u237e\7\u0147\2\2\u237a\u237e\7\u0177"+
		"\2\2\u237b\u237c\tk\2\2\u237c\u237e\5\u02fa\u017e\2\u237d\u2377\3\2\2"+
		"\2\u237d\u2378\3\2\2\2\u237d\u2379\3\2\2\2\u237d\u237a\3\2\2\2\u237d\u237b"+
		"\3\2\2\2\u237d\u237e\3\2\2\2\u237e\u237f\3\2\2\2\u237f\u2381\7K\2\2\u2380"+
		"\u237d\3\2\2\2\u2380\u2381\3\2\2\2\u2381\u2383\3\2\2\2\u2382\u2384\7\u0154"+
		"\2\2\u2383\u2382\3\2\2\2\u2383\u2384\3\2\2\2\u2384\u2385\3\2\2\2\u2385"+
		"\u238f\5\u03e8\u01f5\2\u2386\u2387\7\\\2\2\u2387\u238c\7\u0331\2\2\u2388"+
		"\u2389\7\u034c\2\2\u2389\u238b\7\u0331\2\2\u238a\u2388\3\2\2\2\u238b\u238e"+
		"\3\2\2\2\u238c\u238a\3\2\2\2\u238c\u238d\3\2\2\2\u238d\u2390\3\2\2\2\u238e"+
		"\u238c\3\2\2\2\u238f\u2386\3\2\2\2\u238f\u2390\3\2\2\2\u2390\u2392\3\2"+
		"\2\2\u2391\u2393\7\u034d\2\2\u2392\u2391\3\2\2\2\u2392\u2393\3\2\2\2\u2393"+
		"\u02f5\3\2\2\2\u2394\u2395\7\u009e\2\2\u2395\u2399\5\u0410\u0209\2\u2396"+
		"\u239a\5\u0410\u0209\2\u2397\u239a\5\u02f8\u017d\2\u2398\u239a\5\u03ea"+
		"\u01f6\2\u2399\u2396\3\2\2\2\u2399\u2397\3\2\2\2\u2399\u2398\3\2\2\2\u239a"+
		"\u239c\3\2\2\2\u239b\u239d\7\u034d\2\2\u239c\u239b\3\2\2\2\u239c\u239d"+
		"\3\2\2\2\u239d\u23ca\3\2\2\2\u239e\u239f\7\u009e\2\2\u239f\u23a0\7\u00a2"+
		"\2\2\u23a0\u23a1\tl\2\2\u23a1\u23a3\5\u03ea\u01f6\2\u23a2\u23a4\7\u034d"+
		"\2\2\u23a3\u23a2\3\2\2\2\u23a3\u23a4\3\2\2\2\u23a4\u23ca\3\2\2\2\u23a5"+
		"\u23a6\7\u009e\2\2\u23a6\u23a7\7\u0093\2\2\u23a7\u23a9\t\2\2\2\u23a8\u23aa"+
		"\7\u034d\2\2\u23a9\u23a8\3\2\2\2\u23a9\u23aa\3\2\2\2\u23aa\u23ca\3\2\2"+
		"\2\u23ab\u23ac\7\u009e\2\2\u23ac\u23ad\7\u00ab\2\2\u23ad\u23ae\7\u016d"+
		"\2\2\u23ae\u23b8\7\u017a\2\2\u23af\u23b0\7\u0087\2\2\u23b0\u23b9\7\u024f"+
		"\2\2\u23b1\u23b2\7\u0087\2\2\u23b2\u23b9\7\u00fc\2\2\u23b3\u23b4\7\u01f6"+
		"\2\2\u23b4\u23b9\7\u0087\2\2\u23b5\u23b9\7\u0225\2\2\u23b6\u23b9\7\u021b"+
		"\2\2\u23b7\u23b9\7\u0332\2\2\u23b8\u23af\3\2\2\2\u23b8\u23b1\3\2\2\2\u23b8"+
		"\u23b3\3\2\2\2\u23b8\u23b5\3\2\2\2\u23b8\u23b6\3\2\2\2\u23b8\u23b7\3\2"+
		"\2\2\u23b9\u23bb\3\2\2\2\u23ba\u23bc\7\u034d\2\2\u23bb\u23ba\3\2\2\2\u23bb"+
		"\u23bc\3\2\2\2\u23bc\u23ca\3\2\2\2\u23bd\u23be\7\u009e\2\2\u23be\u23bf"+
		"\7T\2\2\u23bf\u23c0\5\u03d2\u01ea\2\u23c0\u23c2\5\u03ea\u01f6\2\u23c1"+
		"\u23c3\7\u034d\2\2\u23c2\u23c1\3\2\2\2\u23c2\u23c3\3\2\2\2\u23c3\u23ca"+
		"\3\2\2\2\u23c4\u23c5\7\u009e\2\2\u23c5\u23c6\tm\2\2\u23c6\u23ca\5\u03ea"+
		"\u01f6\2\u23c7\u23c8\7\u009e\2\2\u23c8\u23ca\5\u038c\u01c7\2\u23c9\u2394"+
		"\3\2\2\2\u23c9\u239e\3\2\2\2\u23c9\u23a5\3\2\2\2\u23c9\u23ab\3\2\2\2\u23c9"+
		"\u23bd\3\2\2\2\u23c9\u23c4\3\2\2\2\u23c9\u23c7\3\2\2\2\u23ca\u02f7\3\2"+
		"\2\2\u23cb\u23ce\5\u040a\u0206\2\u23cc\u23ce\7\u0331\2\2\u23cd\u23cb\3"+
		"\2\2\2\u23cd\u23cc\3\2\2\2\u23ce\u02f9\3\2\2\2\u23cf\u23d0\b\u017e\1\2"+
		"\u23d0\u23d8\5\u02fe\u0180\2\u23d1\u23d8\5\u0376\u01bc\2\u23d2\u23d8\5"+
		"\u0300\u0181\2\u23d3\u23d8\5\u03de\u01f0\2\u23d4\u23d8\5\u0304\u0183\2"+
		"\u23d5\u23d8\5\u0302\u0182\2\u23d6\u23d8\5\u03b4\u01db\2\u23d7\u23cf\3"+
		"\2\2\2\u23d7\u23d1\3\2\2\2\u23d7\u23d2\3\2\2\2\u23d7\u23d3\3\2\2\2\u23d7"+
		"\u23d4\3\2\2\2\u23d7\u23d5\3\2\2\2\u23d7\u23d6\3\2\2\2\u23d8\u23ee\3\2"+
		"\2\2\u23d9\u23da\f\6\2\2\u23da\u23db\tn\2\2\u23db\u23ed\5\u02fa\u017e"+
		"\7\u23dc\u23dd\f\5\2\2\u23dd\u23de\to\2\2\u23de\u23ed\5\u02fa\u017e\6"+
		"\u23df\u23e0\f\f\2\2\u23e0\u23e5\7\u0345\2\2\u23e1\u23e6\5\u0382\u01c2"+
		"\2\u23e2\u23e6\5\u0386\u01c4\2\u23e3\u23e6\5\u038a\u01c6\2\u23e4\u23e6"+
		"\5\u038e\u01c8\2\u23e5\u23e1\3\2\2\2\u23e5\u23e2\3\2\2\2\u23e5\u23e3\3"+
		"\2\2\2\u23e5\u23e4\3\2\2\2\u23e6\u23ed\3\2\2\2\u23e7\u23e8\f\13\2\2\u23e8"+
		"\u23e9\7\32\2\2\u23e9\u23ed\5\u0410\u0209\2\u23ea\u23eb\f\4\2\2\u23eb"+
		"\u23ed\5\u02fc\u017f\2\u23ec\u23d9\3\2\2\2\u23ec\u23dc\3\2\2\2\u23ec\u23df"+
		"\3\2\2\2\u23ec\u23e7\3\2\2\2\u23ec\u23ea\3\2\2\2\u23ed\u23f0\3\2\2\2\u23ee"+
		"\u23ec\3\2\2\2\u23ee\u23ef\3\2\2\2\u23ef\u02fb\3\2\2\2\u23f0\u23ee\3\2"+
		"\2\2\u23f1\u23f2\7\u00c1\2\2\u23f2\u23f3\7\u0240\2\2\u23f3\u23f4\7\u0266"+
		"\2\2\u23f4\u23f5\5\u02fa\u017e\2\u23f5\u02fd\3\2\2\2\u23f6\u23fb\7/\2"+
		"\2\u23f7\u23fb\7k\2\2\u23f8\u23fb\7\u0331\2\2\u23f9\u23fb\5\u040a\u0206"+
		"\2\u23fa\u23f6\3\2\2\2\u23fa\u23f7\3\2\2\2\u23fa\u23f8\3\2\2\2\u23fa\u23f9"+
		"\3\2\2\2\u23fb\u02ff\3\2\2\2\u23fc\u23fd\7\24\2\2\u23fd\u23ff\5\u02fa"+
		"\u017e\2\u23fe\u2400\5\u0392\u01ca\2\u23ff\u23fe\3\2\2\2\u2400\u2401\3"+
		"\2\2\2\u2401\u23ff\3\2\2\2\u2401\u2402\3\2\2\2\u2402\u2405\3\2\2\2\u2403"+
		"\u2404\7;\2\2\u2404\u2406\5\u02fa\u017e\2\u2405\u2403\3\2\2\2\u2405\u2406"+
		"\3\2\2\2\u2406\u2407\3\2\2\2\u2407\u2408\7<\2\2\u2408\u2416\3\2\2\2\u2409"+
		"\u240b\7\24\2\2\u240a\u240c\5\u0394\u01cb\2\u240b\u240a\3\2\2\2\u240c"+
		"\u240d\3\2\2\2\u240d\u240b\3\2\2\2\u240d\u240e\3\2\2\2\u240e\u2411\3\2"+
		"\2\2\u240f\u2410\7;\2\2\u2410\u2412\5\u02fa\u017e\2\u2411\u240f\3\2\2"+
		"\2\u2411\u2412\3\2\2\2\u2412\u2413\3\2\2\2\u2413\u2414\7<\2\2\u2414\u2416"+
		"\3\2\2\2\u2415\u23fc\3\2\2\2\u2415\u2409\3\2\2\2\u2416\u0301\3\2\2\2\u2417"+
		"\u2418\7\u0354\2\2\u2418\u241c\5\u02fa\u017e\2\u2419\u241a\tp\2\2\u241a"+
		"\u241c\5\u02fa\u017e\2\u241b\u2417\3\2\2\2\u241b\u2419\3\2\2\2\u241c\u0303"+
		"\3\2\2\2\u241d\u241e\7\u034a\2\2\u241e\u241f\5\u02fa\u017e\2\u241f\u2420"+
		"\7\u034b\2\2\u2420\u2426\3\2\2\2\u2421\u2422\7\u034a\2\2\u2422\u2423\5"+
		"\u0308\u0185\2\u2423\u2424\7\u034b\2\2\u2424\u2426\3\2\2\2\u2425\u241d"+
		"\3\2\2\2\u2425\u2421\3\2\2\2\u2426\u0305\3\2\2\2\u2427\u2430\7k\2\2\u2428"+
		"\u2430\5\u040a\u0206\2\u2429\u2430\5\u0376\u01bc\2\u242a\u2430\7\u0331"+
		"\2\2\u242b\u242c\7\u034a\2\2\u242c\u242d\5\u0306\u0184\2\u242d\u242e\7"+
		"\u034b\2\2\u242e\u2430\3\2\2\2\u242f\u2427\3\2\2\2\u242f\u2428\3\2\2\2"+
		"\u242f\u2429\3\2\2\2\u242f\u242a\3\2\2\2\u242f\u242b\3\2\2\2\u2430\u0307"+
		"\3\2\2\2\u2431\u2432\5\u01c8\u00e5\2\u2432\u0309\3\2\2\2\u2433\u2434\7"+
		"\u00bd\2\2\u2434\u2439\5\u030c\u0187\2\u2435\u2436\7\u034c\2\2\u2436\u2438"+
		"\5\u030c\u0187\2\u2437\u2435\3\2\2\2\u2438\u243b\3\2\2\2\u2439\u2437\3"+
		"\2\2\2\u2439\u243a\3\2\2\2\u243a\u030b\3\2\2\2\u243b\u2439\3\2\2\2\u243c"+
		"\u2441\5\u0410\u0209\2\u243d\u243e\7\u034a\2\2\u243e\u243f\5\u03e6\u01f4"+
		"\2\u243f\u2440\7\u034b\2\2\u2440\u2442\3\2\2\2\u2441\u243d\3\2\2\2\u2441"+
		"\u2442\3\2\2\2\u2442\u2443\3\2\2\2\u2443\u2444\7\b\2\2\u2444\u2445\7\u034a"+
		"\2\2\u2445\u2446\5\u01c8\u00e5\2\u2446\u2447\7\u034b\2\2\u2447\u030d\3"+
		"\2\2\2\u2448\u2449\7\u0331\2\2\u2449\u244a\7\u0338\2\2\u244a\u244d\5\u03de"+
		"\u01f0\2\u244b\u244e\7\u0338\2\2\u244c\u244e\5\u0416\u020c\2\u244d\u244b"+
		"\3\2\2\2\u244d\u244c\3\2\2\2\u244e\u244f\3\2\2\2\u244f\u2450\5\u02fa\u017e"+
		"\2\u2450\u2462\3\2\2\2\u2451\u2454\5\u03de\u01f0\2\u2452\u2454\7\u0331"+
		"\2\2\u2453\u2451\3\2\2\2\u2453\u2452\3\2\2\2\u2454\u2457\3\2\2\2\u2455"+
		"\u2458\7\u0338\2\2\u2456\u2458\5\u0416\u020c\2\u2457\u2455\3\2\2\2\u2457"+
		"\u2456\3\2\2\2\u2458\u2459\3\2\2\2\u2459\u2462\5\u02fa\u017e\2\u245a\u245b"+
		"\5\u0410\u0209\2\u245b\u245c\7\u0345\2\2\u245c\u245d\5\u0410\u0209\2\u245d"+
		"\u245e\7\u034a\2\2\u245e\u245f\5\u03aa\u01d6\2\u245f\u2460\7\u034b\2\2"+
		"\u2460\u2462\3\2\2\2\u2461\u2448\3\2\2\2\u2461\u2453\3\2\2\2\u2461\u245a"+
		"\3\2\2\2\u2462\u030f\3\2\2\2\u2463\u2466\5\u03de\u01f0\2\u2464\u2466\7"+
		"\u0331\2\2\u2465\u2463\3\2\2\2\u2465\u2464\3\2\2\2\u2466\u2469\3\2\2\2"+
		"\u2467\u246a\7\u0338\2\2\u2468\u246a\5\u0416\u020c\2\u2469\u2467\3\2\2"+
		"\2\u2469\u2468\3\2\2\2\u246a\u246b\3\2\2\2\u246b\u2474\5\u02fa\u017e\2"+
		"\u246c\u246d\5\u0410\u0209\2\u246d\u246e\7\u0345\2\2\u246e\u246f\5\u0410"+
		"\u0209\2\u246f\u2470\7\u034a\2\2\u2470\u2471\5\u03aa\u01d6\2\u2471\u2472"+
		"\7\u034b\2\2\u2472\u2474\3\2\2\2\u2473\u2465\3\2\2\2\u2473\u246c\3\2\2"+
		"\2\u2474\u0311\3\2\2\2\u2475\u247a\5\u0314\u018b\2\u2476\u2477\t\35\2"+
		"\2\u2477\u2479\5\u0314\u018b\2\u2478\u2476\3\2\2\2\u2479\u247c\3\2\2\2"+
		"\u247a\u2478\3\2\2\2\u247a\u247b\3\2\2\2\u247b\u0313\3\2\2\2\u247c\u247a"+
		"\3\2\2\2\u247d\u247f\7j\2\2\u247e\u247d\3\2\2\2\u247f\u2482\3\2\2\2\u2480"+
		"\u247e\3\2\2\2\u2480\u2481\3\2\2\2\u2481\u2483\3\2\2\2\u2482\u2480\3\2"+
		"\2\2\u2483\u248f\5\u0316\u018c\2\u2484\u2486\7j\2\2\u2485\u2484\3\2\2"+
		"\2\u2486\u2489\3\2\2\2\u2487\u2485\3\2\2\2\u2487\u2488\3\2\2\2\u2488\u248a"+
		"\3\2\2\2\u2489\u2487\3\2\2\2\u248a\u248b\7\u034a\2\2\u248b\u248c\5\u0312"+
		"\u018a\2\u248c\u248d\7\u034b\2\2\u248d\u248f\3\2\2\2\u248e\u2480\3\2\2"+
		"\2\u248e\u2487\3\2\2\2\u248f\u0315\3\2\2\2\u2490\u2491\7A\2\2\u2491\u2492"+
		"\7\u034a\2\2\u2492\u2493\5\u0308\u0185\2\u2493\u2494\7\u034b\2\2\u2494"+
		"\u24ce\3\2\2\2\u2495\u24ce\5\u037a\u01be\2\u2496\u2497\5\u02fa\u017e\2"+
		"\u2497\u2498\5\u0414\u020b\2\u2498\u2499\5\u02fa\u017e\2\u2499\u24ce\3"+
		"\2\2\2\u249a\u249b\5\u02fa\u017e\2\u249b\u249c\5\u0414\u020b\2\u249c\u249d"+
		"\tq\2\2\u249d\u249e\7\u034a\2\2\u249e\u249f\5\u0308\u0185\2\u249f\u24a0"+
		"\7\u034b\2\2\u24a0\u24ce\3\2\2\2\u24a1\u24a5\5\u02fa\u017e\2\u24a2\u24a4"+
		"\7j\2\2\u24a3\u24a2\3\2\2\2\u24a4\u24a7\3\2\2\2\u24a5\u24a3\3\2\2\2\u24a5"+
		"\u24a6\3\2\2\2\u24a6\u24a8\3\2\2\2\u24a7\u24a5\3\2\2\2\u24a8\u24a9\7\16"+
		"\2\2\u24a9\u24aa\5\u02fa\u017e\2\u24aa\u24ab\7\6\2\2\u24ab\u24ac\5\u02fa"+
		"\u017e\2\u24ac\u24ce\3\2\2\2\u24ad\u24b1\5\u02fa\u017e\2\u24ae\u24b0\7"+
		"j\2\2\u24af\u24ae\3\2\2\2\u24b0\u24b3\3\2\2\2\u24b1\u24af\3\2\2\2\u24b1"+
		"\u24b2\3\2\2\2\u24b2\u24b4\3\2\2\2\u24b3\u24b1\3\2\2\2\u24b4\u24b5\7W"+
		"\2\2\u24b5\u24b8\7\u034a\2\2\u24b6\u24b9\5\u0308\u0185\2\u24b7\u24b9\5"+
		"\u03aa\u01d6\2\u24b8\u24b6\3\2\2\2\u24b8\u24b7\3\2\2\2\u24b9\u24ba\3\2"+
		"\2\2\u24ba\u24bb\7\u034b\2\2\u24bb\u24ce\3\2\2\2\u24bc\u24c0\5\u02fa\u017e"+
		"\2\u24bd\u24bf\7j\2\2\u24be\u24bd\3\2\2\2\u24bf\u24c2\3\2\2\2\u24c0\u24be"+
		"\3\2\2\2\u24c0\u24c1\3\2\2\2\u24c1\u24c3\3\2\2\2\u24c2\u24c0\3\2\2\2\u24c3"+
		"\u24c4\7b\2\2\u24c4\u24c7\5\u02fa\u017e\2\u24c5\u24c6\7>\2\2\u24c6\u24c8"+
		"\5\u02fa\u017e\2\u24c7\u24c5\3\2\2\2\u24c7\u24c8\3\2\2\2\u24c8\u24ce\3"+
		"\2\2\2\u24c9\u24ca\5\u02fa\u017e\2\u24ca\u24cb\7]\2\2\u24cb\u24cc\5\u03ee"+
		"\u01f8\2\u24cc\u24ce\3\2\2\2\u24cd\u2490\3\2\2\2\u24cd\u2495\3\2\2\2\u24cd"+
		"\u2496\3\2\2\2\u24cd\u249a\3\2\2\2\u24cd\u24a1\3\2\2\2\u24cd\u24ad\3\2"+
		"\2\2\u24cd\u24bc\3\2\2\2\u24cd\u24c9\3\2\2\2\u24ce\u0317\3\2\2\2\u24cf"+
		"\u24d5\5\u031c\u018f\2\u24d0\u24d1\7\u034a\2\2\u24d1\u24d2\5\u0318\u018d"+
		"\2\u24d2\u24d3\7\u034b\2\2\u24d3\u24d5\3\2\2\2\u24d4\u24cf\3\2\2\2\u24d4"+
		"\u24d0\3\2\2\2\u24d5\u24e0\3\2\2\2\u24d6\u24d8\5\u031c\u018f\2\u24d7\u24d9"+
		"\5\u0324\u0193\2\u24d8\u24d7\3\2\2\2\u24d8\u24d9\3\2\2\2\u24d9\u24db\3"+
		"\2\2\2\u24da\u24dc\5\u031a\u018e\2\u24db\u24da\3\2\2\2\u24dc\u24dd\3\2"+
		"\2\2\u24dd\u24db\3\2\2\2\u24dd\u24de\3\2\2\2\u24de\u24e0\3\2\2\2\u24df"+
		"\u24d4\3\2\2\2\u24df\u24d6\3\2\2\2\u24e0\u0319\3\2\2\2\u24e1\u24e3\7\u00af"+
		"\2\2\u24e2\u24e4\7\4\2\2\u24e3\u24e2\3\2\2\2\u24e3\u24e4\3\2\2\2\u24e4"+
		"\u24e8\3\2\2\2\u24e5\u24e8\7?\2\2\u24e6\u24e8\7[\2\2\u24e7\u24e1\3\2\2"+
		"\2\u24e7\u24e5\3\2\2\2\u24e7\u24e6\3\2\2\2\u24e8\u24ee\3\2\2\2\u24e9\u24ef"+
		"\5\u031c\u018f\2\u24ea\u24eb\7\u034a\2\2\u24eb\u24ec\5\u0318\u018d\2\u24ec"+
		"\u24ed\7\u034b\2\2\u24ed\u24ef\3\2\2\2\u24ee\u24e9\3\2\2\2\u24ee\u24ea"+
		"\3\2\2\2\u24ef\u031b\3\2\2\2\u24f0\u24f2\7\u0099\2\2\u24f1\u24f3\tr\2"+
		"\2\u24f2\u24f1\3\2\2\2\u24f2\u24f3\3\2\2\2\u24f3\u24f5\3\2\2\2\u24f4\u24f6"+
		"\5\u031e\u0190\2\u24f5\u24f4\3\2\2\2\u24f5\u24f6\3\2\2\2\u24f6\u24f7\3"+
		"\2\2\2\u24f7\u24fa\5\u0334\u019b\2\u24f8\u24f9\7\\\2\2\u24f9\u24fb\5\u03d2"+
		"\u01ea\2\u24fa\u24f8\3\2\2\2\u24fa\u24fb\3\2\2\2\u24fb\u24fe\3\2\2\2\u24fc"+
		"\u24fd\7K\2\2\u24fd\u24ff\5\u0342\u01a2\2\u24fe\u24fc\3\2\2\2\u24fe\u24ff"+
		"\3\2\2\2\u24ff\u2502\3\2\2\2\u2500\u2501\7\u00bb\2\2\u2501\u2503\5\u0312"+
		"\u018a\2\u2502\u2500\3\2\2\2\u2502\u2503\3\2\2\2\u2503\u2511\3\2\2\2\u2504"+
		"\u2505\7P\2\2\u2505\u2507\7\22\2\2\u2506\u2508\7\4\2\2\u2507\u2506\3\2"+
		"\2\2\u2507\u2508\3\2\2\2\u2508\u2509\3\2\2\2\u2509\u250e\5\u032c\u0197"+
		"\2\u250a\u250b\7\u034c\2\2\u250b\u250d\5\u032c\u0197\2\u250c\u250a\3\2"+
		"\2\2\u250d\u2510\3\2\2\2\u250e\u250c\3\2\2\2\u250e\u250f\3\2\2\2\u250f"+
		"\u2512\3\2\2\2\u2510\u250e\3\2\2\2\u2511\u2504\3\2\2\2\u2511\u2512\3\2"+
		"\2\2\u2512\u2515\3\2\2\2\u2513\u2514\7Q\2\2\u2514\u2516\5\u0312\u018a"+
		"\2\u2515\u2513\3\2\2\2\u2515\u2516\3\2\2\2\u2516\u031d\3\2\2\2\u2517\u251a"+
		"\7\u00a9\2\2\u2518\u251b\5\u0320\u0191\2\u2519\u251b\5\u0322\u0192\2\u251a"+
		"\u2518\3\2\2\2\u251a\u2519\3\2\2\2\u251b\u251e\3\2\2\2\u251c\u251d\7\u00bd"+
		"\2\2\u251d\u251f\7\u023f\2\2\u251e\u251c\3\2\2\2\u251e\u251f\3\2\2\2\u251f"+
		"\u031f\3\2\2\2\u2520\u2521\ts\2\2\u2521\u2528\7|\2\2\u2522\u2523\7\u034a"+
		"\2\2\u2523\u2524\5\u02fa\u017e\2\u2524\u2525\7\u034b\2\2\u2525\u2526\7"+
		"|\2\2\u2526\u2528\3\2\2\2\u2527\u2520\3\2\2\2\u2527\u2522\3\2\2\2\u2528"+
		"\u0321\3\2\2\2\u2529\u252f\7\u0332\2\2\u252a\u252b\7\u034a\2\2\u252b\u252c"+
		"\5\u02fa\u017e\2\u252c\u252d\7\u034b\2\2\u252d\u252f\3\2\2\2\u252e\u2529"+
		"\3\2\2\2\u252e\u252a\3\2\2\2\u252f\u0323\3\2\2\2\u2530\u2531\7y\2\2\u2531"+
		"\u2532\7\22\2\2\u2532\u2537\5\u032a\u0196\2\u2533\u2534\7\u034c\2\2\u2534"+
		"\u2536\5\u032a\u0196\2\u2535\u2533\3\2\2\2\u2536\u2539\3\2\2\2\u2537\u2535"+
		"\3\2\2\2\u2537\u2538\3\2\2\2\u2538\u2545\3\2\2\2\u2539\u2537\3\2\2\2\u253a"+
		"\u253b\7\u01bb\2\2\u253b\u253c\5\u02fa\u017e\2\u253c\u2543\tt\2\2\u253d"+
		"\u253e\7D\2\2\u253e\u253f\tu\2\2\u253f\u2540\5\u02fa\u017e\2\u2540\u2541"+
		"\tt\2\2\u2541\u2542\7\u01be\2\2\u2542\u2544\3\2\2\2\u2543\u253d\3\2\2"+
		"\2\u2543\u2544\3\2\2\2\u2544\u2546\3\2\2\2\u2545\u253a\3\2\2\2\u2545\u2546"+
		"\3\2\2\2\u2546\u0325\3\2\2\2\u2547\u2548\7G\2\2\u2548\u25a4\7\20\2\2\u2549"+
		"\u254a\7G\2\2\u254a\u2552\7\u0261\2\2\u254b\u254f\7\u0086\2\2\u254c\u254d"+
		"\7\u034a\2\2\u254d\u254e\7\u0334\2\2\u254e\u2550\7\u034b\2\2\u254f\u254c"+
		"\3\2\2\2\u254f\u2550\3\2\2\2\u2550\u2553\3\2\2\2\u2551\u2553\7\u00db\2"+
		"\2\u2552\u254b\3\2\2\2\u2552\u2551\3\2\2\2\u2553\u2557\3\2\2\2\u2554\u2556"+
		"\5\u0328\u0195\2\u2555\u2554\3\2\2\2\u2556\u2559\3\2\2\2\u2557\u2555\3"+
		"\2\2\2\u2557\u2558\3\2\2\2\u2558\u2564\3\2\2\2\u2559\u2557\3\2\2\2\u255a"+
		"\u2562\7\u034c\2\2\u255b\u2563\7\u0262\2\2\u255c\u2560\7\u0264\2\2\u255d"+
		"\u255e\7\u034a\2\2\u255e\u255f\7\u0334\2\2\u255f\u2561\7\u034b\2\2\u2560"+
		"\u255d\3\2\2\2\u2560\u2561\3\2\2\2\u2561\u2563\3\2\2\2\u2562\u255b\3\2"+
		"\2\2\u2562\u255c\3\2\2\2\u2563\u2565\3\2\2\2\u2564\u255a\3\2\2\2\u2564"+
		"\u2565\3\2\2\2\u2565\u256b\3\2\2\2\u2566\u2567\7\u034c\2\2\u2567\u2569"+
		"\7\u012c\2\2\u2568\u256a\tv\2\2\u2569\u2568\3\2\2\2\u2569\u256a\3\2\2"+
		"\2\u256a\u256c\3\2\2\2\u256b\u2566\3\2\2\2\u256b\u256c\3\2\2\2\u256c\u25a4"+
		"\3\2\2\2\u256d\u256e\7G\2\2\u256e\u256f\7\u0261\2\2\u256f\u2573\7\u013a"+
		"\2\2\u2570\u2572\5\u0328\u0195\2\u2571\u2570\3\2\2\2\u2572\u2575\3\2\2"+
		"\2\u2573\u2571\3\2\2\2\u2573\u2574\3\2\2\2\u2574\u2578\3\2\2\2\u2575\u2573"+
		"\3\2\2\2\u2576\u2577\7\u034c\2\2\u2577\u2579\7\u0262\2\2\u2578\u2576\3"+
		"\2\2\2\u2578\u2579\3\2\2\2\u2579\u25a4\3\2\2\2\u257a\u257b\7G\2\2\u257b"+
		"\u257c\7\u0261\2\2\u257c\u2580\7\u01cb\2\2\u257d\u257e\7\u034a\2\2\u257e"+
		"\u257f\7\u0334\2\2\u257f\u2581\7\u034b\2\2\u2580\u257d\3\2\2\2\u2580\u2581"+
		"\3\2\2\2\u2581\u2585\3\2\2\2\u2582\u2584\5\u0328\u0195\2\u2583\u2582\3"+
		"\2\2\2\u2584\u2587\3\2\2\2\u2585\u2583\3\2\2\2\u2585\u2586\3\2\2\2\u2586"+
		"\u258d\3\2\2\2\u2587\u2585\3\2\2\2\u2588\u2589\7\u034c\2\2\u2589\u258b"+
		"\7\u012c\2\2\u258a\u258c\tv\2\2\u258b\u258a\3\2\2\2\u258b\u258c\3\2\2"+
		"\2\u258c\u258e\3\2\2\2\u258d\u2588\3\2\2\2\u258d\u258e\3\2\2\2\u258e\u25a4"+
		"\3\2\2\2\u258f\u2590\7G\2\2\u2590\u2591\7\u016f\2\2\u2591\u2599\tw\2\2"+
		"\u2592\u2593\7\u034c\2\2\u2593\u2597\7\u0202\2\2\u2594\u2595\7\u034a\2"+
		"\2\u2595\u2596\7\u0334\2\2\u2596\u2598\7\u034b\2\2\u2597\u2594\3\2\2\2"+
		"\u2597\u2598\3\2\2\2\u2598\u259a\3\2\2\2\u2599\u2592\3\2\2\2\u2599\u259a"+
		"\3\2\2\2\u259a\u259d\3\2\2\2\u259b\u259c\7\u034c\2\2\u259c\u259e\7\u0165"+
		"\2\2\u259d\u259b\3\2\2\2\u259d\u259e\3\2\2\2\u259e\u25a1\3\2\2\2\u259f"+
		"\u25a0\7\u034c\2\2\u25a0\u25a2\7\u025e\2\2\u25a1\u259f\3\2\2\2\u25a1\u25a2"+
		"\3\2\2\2\u25a2\u25a4\3\2\2\2\u25a3\u2547\3\2\2\2\u25a3\u2549\3\2\2\2\u25a3"+
		"\u256d\3\2\2\2\u25a3\u257a\3\2\2\2\u25a3\u258f\3\2\2\2\u25a4\u0327\3\2"+
		"\2\2\u25a5\u25ae\7\u034c\2\2\u25a6\u25af\7\u00e8\2\2\u25a7\u25af\7\u024c"+
		"\2\2\u25a8\u25ac\7\u0202\2\2\u25a9\u25aa\7\u034a\2\2\u25aa\u25ab\7\u0334"+
		"\2\2\u25ab\u25ad\7\u034b\2\2\u25ac\u25a9\3\2\2\2\u25ac\u25ad\3\2\2\2\u25ad"+
		"\u25af\3\2\2\2\u25ae\u25a6\3\2\2\2\u25ae\u25a7\3\2\2\2\u25ae\u25a8\3\2"+
		"\2\2\u25af\u0329\3\2\2\2\u25b0\u25b3\5\u02fa\u017e\2\u25b1\u25b4\7\t\2"+
		"\2\u25b2\u25b4\7\62\2\2\u25b3\u25b1\3\2\2\2\u25b3\u25b2\3\2\2\2\u25b3"+
		"\u25b4\3\2\2\2\u25b4\u032b\3\2\2\2\u25b5\u25b6\5\u02fa\u017e\2\u25b6\u032d"+
		"\3\2\2\2\u25b7\u25b8\7w\2\2\u25b8\u25b9\7\u034a\2\2\u25b9\u25be\5\u0330"+
		"\u0199\2\u25ba\u25bb\7\u034c\2\2\u25bb\u25bd\5\u0330\u0199\2\u25bc\u25ba"+
		"\3\2\2\2\u25bd\u25c0\3\2\2\2\u25be\u25bc\3\2\2\2\u25be\u25bf\3\2\2\2\u25bf"+
		"\u25c1\3\2\2\2\u25c0\u25be\3\2\2\2\u25c1\u25c2\7\u034b\2\2\u25c2\u032f"+
		"\3\2\2\2\u25c3\u25c4\7\u013f\2\2\u25c4\u25f1\7\u0332\2\2\u25c5\u25c6\t"+
		"x\2\2\u25c6\u25f1\7P\2\2\u25c7\u25c8\ty\2\2\u25c8\u25f1\7\u00af\2\2\u25c9"+
		"\u25ca\tz\2\2\u25ca\u25f1\7^\2\2\u25cb\u25cc\7\u0138\2\2\u25cc\u25f1\7"+
		"\u025b\2\2\u25cd\u25ce\7\u014a\2\2\u25ce\u25f1\7y\2\2\u25cf\u25f1\7\u0161"+
		"\2\2\u25d0\u25d1\7\u0171\2\2\u25d1\u25f1\7~\2\2\u25d2\u25d3\7\u0172\2"+
		"\2\u25d3\u25f1\7~\2\2\u25d4\u25d5\7\u0192\2\2\u25d5\u25f1\7\u0332\2\2"+
		"\u25d6\u25d7\7\u0193\2\2\u25d7\u25f1\7\u0332\2\2\u25d8\u25d9\7\u01c1\2"+
		"\2\u25d9\u25da\7G\2\2\u25da\u25db\7\u034a\2\2\u25db\u25e0\5\u0332\u019a"+
		"\2\u25dc\u25dd\7\u034c\2\2\u25dd\u25df\5\u0332\u019a\2\u25de\u25dc\3\2"+
		"\2\2\u25df\u25e2\3\2\2\2\u25e0\u25de\3\2\2\2\u25e0\u25e1\3\2\2\2\u25e1"+
		"\u25e3\3\2\2\2\u25e2\u25e0\3\2\2\2\u25e3\u25e4\7\u034b\2\2\u25e4\u25f1"+
		"\3\2\2\2\u25e5\u25e6\7\u01c1\2\2\u25e6\u25e7\7G\2\2\u25e7\u25f1\7\u0250"+
		"\2\2\u25e8\u25e9\7\u01c7\2\2\u25e9\u25f1\tM\2\2\u25ea\u25f1\7\u01ee\2"+
		"\2\u25eb\u25ec\7\u0201\2\2\u25ec\u25f1\7~\2\2\u25ed\u25ee\7\u00b4\2\2"+
		"\u25ee\u25ef\7~\2\2\u25ef\u25f1\7\u0334\2\2\u25f0\u25c3\3\2\2\2\u25f0"+
		"\u25c5\3\2\2\2\u25f0\u25c7\3\2\2\2\u25f0\u25c9\3\2\2\2\u25f0\u25cb\3\2"+
		"\2\2\u25f0\u25cd\3\2\2\2\u25f0\u25cf\3\2\2\2\u25f0\u25d0\3\2\2\2\u25f0"+
		"\u25d2\3\2\2\2\u25f0\u25d4\3\2\2\2\u25f0\u25d6\3\2\2\2\u25f0\u25d8\3\2"+
		"\2\2\u25f0\u25e5\3\2\2\2\u25f0\u25e8\3\2\2\2\u25f0\u25ea\3\2\2\2\u25f0"+
		"\u25eb\3\2\2\2\u25f0\u25ed\3\2\2\2\u25f1\u0331\3\2\2\2\u25f2\u25f9\7\u0331"+
		"\2\2\u25f3\u25fa\7\u0250\2\2\u25f4\u25f7\7\u0338\2\2\u25f5\u25f8\5\u040a"+
		"\u0206\2\u25f6\u25f8\7k\2\2\u25f7\u25f5\3\2\2\2\u25f7\u25f6\3\2\2\2\u25f8"+
		"\u25fa\3\2\2\2\u25f9\u25f3\3\2\2\2\u25f9\u25f4\3\2\2\2\u25fa\u0333\3\2"+
		"\2\2\u25fb\u2600\5\u0340\u01a1\2\u25fc\u25fd\7\u034c\2\2\u25fd\u25ff\5"+
		"\u0340\u01a1\2\u25fe\u25fc\3\2\2\2\u25ff\u2602\3\2\2\2\u2600\u25fe\3\2"+
		"\2\2\u2600\u2601\3\2\2\2\u2601\u0335\3\2\2\2\u2602\u2600\3\2\2\2\u2603"+
		"\u2604\7\u034a\2\2\u2604\u2609\5\u0296\u014c\2\u2605\u2606\7\u034c\2\2"+
		"\u2606\u2608\5\u0296\u014c\2\u2607\u2605\3\2\2\2\u2608\u260b\3\2\2\2\u2609"+
		"\u2607\3\2\2\2\u2609\u260a\3\2\2\2\u260a\u260c\3\2\2\2\u260b\u2609\3\2"+
		"\2\2\u260c\u260d\7\u034b\2\2\u260d\u0337\3\2\2\2\u260e\u260f\5\u03d2\u01ea"+
		"\2\u260f\u2610\7\u0345\2\2\u2610\u2612\3\2\2\2\u2611\u260e\3\2\2\2\u2611"+
		"\u2612\3\2\2\2\u2612\u2613\3\2\2\2\u2613\u2614\7\u034f\2\2\u2614\u0339"+
		"\3\2\2\2\u2615\u261c\5\u03de\u01f0\2\u2616\u2617\7\u0349\2\2\u2617\u261c"+
		"\7S\2\2\u2618\u2619\7\u0349\2\2\u2619\u261c\7\u0206\2\2\u261a\u261c\7"+
		"k\2\2\u261b\u2615\3\2\2\2\u261b\u2616\3\2\2\2\u261b\u2618\3\2\2\2\u261b"+
		"\u261a\3\2\2\2\u261c\u261e\3\2\2\2\u261d\u261f\5\u0396\u01cc\2\u261e\u261d"+
		"\3\2\2\2\u261e\u261f\3\2\2\2\u261f\u033b\3\2\2\2\u2620\u2621\5\u0410\u0209"+
		"\2\u2621\u2622\7\u0345\2\2\u2622\u2623\5\u0410\u0209\2\u2623\u2625\5\u0336"+
		"\u019c\2\u2624\u2626\5\u0396\u01cc\2\u2625\u2624\3\2\2\2\u2625\u2626\3"+
		"\2\2\2\u2626\u2632\3\2\2\2\u2627\u2628\5\u0410\u0209\2\u2628\u2629\7\u034e"+
		"\2\2\u2629\u262a\7\u034e\2\2\u262a\u262c\5\u0410\u0209\2\u262b\u262d\5"+
		"\u0336\u019c\2\u262c\u262b\3\2\2\2\u262c\u262d\3\2\2\2\u262d\u262f\3\2"+
		"\2\2\u262e\u2630\5\u0396\u01cc\2\u262f\u262e\3\2\2\2\u262f\u2630\3\2\2"+
		"\2\u2630\u2632\3\2\2\2\u2631\u2620\3\2\2\2\u2631\u2627\3\2\2\2\u2632\u033d"+
		"\3\2\2\2\u2633\u2634\5\u03a6\u01d4\2\u2634\u2635\7\u0338\2\2\u2635\u2636"+
		"\5\u02fa\u017e\2\u2636\u263c\3\2\2\2\u2637\u2639\5\u02fa\u017e\2\u2638"+
		"\u263a\5\u0396\u01cc\2\u2639\u2638\3\2\2\2\u2639\u263a\3\2\2\2\u263a\u263c"+
		"\3\2\2\2\u263b\u2633\3\2\2\2\u263b\u2637\3\2\2\2\u263c\u033f\3\2\2\2\u263d"+
		"\u2648\5\u0338\u019d\2\u263e\u2648\5\u033a\u019e\2\u263f\u2648\5\u033c"+
		"\u019f\2\u2640\u2643\7\u0331\2\2\u2641\u2644\5\u0416\u020c\2\u2642\u2644"+
		"\7\u0338\2\2\u2643\u2641\3\2\2\2\u2643\u2642\3\2\2\2\u2644\u2645\3\2\2"+
		"\2\u2645\u2648\5\u02fa\u017e\2\u2646\u2648\5\u033e\u01a0\2\u2647\u263d"+
		"\3\2\2\2\u2647\u263e\3\2\2\2\u2647\u263f\3\2\2\2\u2647\u2640\3\2\2\2\u2647"+
		"\u2646\3\2\2\2\u2648\u0341\3\2\2\2\u2649\u264e\5\u0344\u01a3\2\u264a\u264b"+
		"\7\u034c\2\2\u264b\u264d\5\u0344\u01a3\2\u264c\u264a\3\2\2\2\u264d\u2650"+
		"\3\2\2\2\u264e\u264c\3\2\2\2\u264e\u264f\3\2\2\2\u264f\u0343\3\2\2\2\u2650"+
		"\u264e\3\2\2\2\u2651\u2657\5\u0346\u01a4\2\u2652\u2653\7\u034a\2\2\u2653"+
		"\u2654\5\u0346\u01a4\2\u2654\u2655\7\u034b\2\2\u2655\u2657\3\2\2\2\u2656"+
		"\u2651\3\2\2\2\u2656\u2652\3\2\2\2\u2657\u0345\3\2\2\2\u2658\u265c\5\u0348"+
		"\u01a5\2\u2659\u265b\5\u035c\u01af\2\u265a\u2659\3\2\2\2\u265b\u265e\3"+
		"\2\2\2\u265c\u265a\3\2\2\2\u265c\u265d\3\2\2\2\u265d\u0347\3\2\2\2\u265e"+
		"\u265c\3\2\2\2\u265f\u2661\5\u036e\u01b8\2\u2660\u2662\5\u0398\u01cd\2"+
		"\u2661\u2660\3\2\2\2\u2661\u2662\3\2\2\2\u2662\u269c\3\2\2\2\u2663\u2665"+
		"\5\u03d0\u01e9\2\u2664\u2666\5\u0398\u01cd\2\u2665\u2664\3\2\2\2\u2665"+
		"\u2666\3\2\2\2\u2666\u269c\3\2\2\2\u2667\u2669\5\u0370\u01b9\2\u2668\u266a"+
		"\5\u0398\u01cd\2\u2669\u2668\3\2\2\2\u2669\u266a\3\2\2\2\u266a\u269c\3"+
		"\2\2\2\u266b\u266c\7\u034a\2\2\u266c\u266d\5\u0374\u01bb\2\u266d\u2672"+
		"\7\u034b\2\2\u266e\u2670\5\u0398\u01cd\2\u266f\u2671\5\u03a4\u01d3\2\u2670"+
		"\u266f\3\2\2\2\u2670\u2671\3\2\2\2\u2671\u2673\3\2\2\2\u2672\u266e\3\2"+
		"\2\2\u2672\u2673\3\2\2\2\u2673\u269c\3\2\2\2\u2674\u2676\5\u0356\u01ac"+
		"\2\u2675\u2677\5\u0398\u01cd\2\u2676\u2675\3\2\2\2\u2676\u2677\3\2\2\2"+
		"\u2677\u269c\3\2\2\2\u2678\u267d\5\u0376\u01bc\2\u2679\u267b\5\u0398\u01cd"+
		"\2\u267a\u267c\5\u03a4\u01d3\2\u267b\u267a\3\2\2\2\u267b\u267c\3\2\2\2"+
		"\u267c\u267e\3\2\2\2\u267d\u2679\3\2\2\2\u267d\u267e\3\2\2\2\u267e\u269c"+
		"\3\2\2\2\u267f\u2681\7\u0331\2\2\u2680\u2682\5\u0398\u01cd\2\u2681\u2680"+
		"\3\2\2\2\u2681\u2682\3\2\2\2\u2682\u269c\3\2\2\2\u2683\u2688\5\u0390\u01c9"+
		"\2\u2684\u2686\5\u0398\u01cd\2\u2685\u2687\5\u03a4\u01d3\2\u2686\u2685"+
		"\3\2\2\2\u2686\u2687\3\2\2\2\u2687\u2689\3\2\2\2\u2688\u2684\3\2\2\2\u2688"+
		"\u2689\3\2\2\2\u2689\u269c\3\2\2\2\u268a\u268b\7\u0331\2\2\u268b\u268c"+
		"\7\u0345\2\2\u268c\u2691\5\u0376\u01bc\2\u268d\u268f\5\u0398\u01cd\2\u268e"+
		"\u2690\5\u03a4\u01d3\2\u268f\u268e\3\2\2\2\u268f\u2690\3\2\2\2\u2690\u2692"+
		"\3\2\2\2\u2691\u268d\3\2\2\2\u2691\u2692\3\2\2\2\u2692\u269c\3\2\2\2\u2693"+
		"\u269c\5\u034a\u01a6\2\u2694\u269c\5\u034c\u01a7\2\u2695\u2696\7\u034e"+
		"\2\2\u2696\u2697\7\u034e\2\2\u2697\u2699\5\u0376\u01bc\2\u2698\u269a\5"+
		"\u0398\u01cd\2\u2699\u2698\3\2\2\2\u2699\u269a\3\2\2\2\u269a\u269c\3\2"+
		"\2\2\u269b\u265f\3\2\2\2\u269b\u2663\3\2\2\2\u269b\u2667\3\2\2\2\u269b"+
		"\u266b\3\2\2\2\u269b\u2674\3\2\2\2\u269b\u2678\3\2\2\2\u269b\u267f\3\2"+
		"\2\2\u269b\u2683\3\2\2\2\u269b\u268a\3\2\2\2\u269b\u2693\3\2\2\2\u269b"+
		"\u2694\3\2\2\2\u269b\u2695\3\2\2\2\u269c\u0349\3\2\2\2\u269d\u269e\7v"+
		"\2\2\u269e\u269f\7\u034a\2\2\u269f\u26a0\5\u02fa\u017e\2\u26a0\u26a1\7"+
		"\u034c\2\2\u26a1\u26a4\5\u02fa\u017e\2\u26a2\u26a3\7\u034c\2\2\u26a3\u26a5"+
		"\5\u02fa\u017e\2\u26a4\u26a2\3\2\2\2\u26a4\u26a5\3\2\2\2\u26a5\u26a6\3"+
		"\2\2\2\u26a6\u26ac\7\u034b\2\2\u26a7\u26a8\7\u00bd\2\2\u26a8\u26a9\7\u034a"+
		"\2\2\u26a9\u26aa\5\u0352\u01aa\2\u26aa\u26ab\7\u034b\2\2\u26ab\u26ad\3"+
		"\2\2\2\u26ac\u26a7\3\2\2\2\u26ac\u26ad\3\2\2\2\u26ad\u26af\3\2\2\2\u26ae"+
		"\u26b0\5\u0398\u01cd\2\u26af\u26ae\3\2\2\2\u26af\u26b0\3\2\2\2\u26b0\u034b"+
		"\3\2\2\2\u26b1\u26b2\7u\2\2\u26b2\u26b3\7\u034a\2\2\u26b3\u26b6\5\u02fa"+
		"\u017e\2\u26b4\u26b5\7\u034c\2\2\u26b5\u26b7\5\u02fa\u017e\2\u26b6\u26b4"+
		"\3\2\2\2\u26b6\u26b7\3\2\2\2\u26b7\u26b8\3\2\2\2\u26b8\u26be\7\u034b\2"+
		"\2\u26b9\u26ba\7\u00bd\2\2\u26ba\u26bb\7\u034a\2\2\u26bb\u26bc\5\u034e"+
		"\u01a8\2\u26bc\u26bd\7\u034b\2\2\u26bd\u26bf\3\2\2\2\u26be\u26b9\3\2\2"+
		"\2\u26be\u26bf\3\2\2\2\u26bf\u26c1\3\2\2\2\u26c0\u26c2\5\u0398\u01cd\2"+
		"\u26c1\u26c0\3\2\2\2\u26c1\u26c2\3\2\2\2\u26c2\u034d\3\2\2\2\u26c3\u26c8"+
		"\5\u0350\u01a9\2\u26c4\u26c5\7\u034c\2\2\u26c5\u26c7\5\u0350\u01a9\2\u26c6"+
		"\u26c4\3\2\2\2\u26c7\u26ca\3\2\2\2\u26c8\u26c6\3\2\2\2\u26c8\u26c9\3\2"+
		"\2\2\u26c9\u034f\3\2\2\2\u26ca\u26c8\3\2\2\2\u26cb\u26ce\5\u0354\u01ab"+
		"\2\u26cc\u26cd\7\b\2\2\u26cd\u26cf\7\u016f\2\2\u26ce\u26cc\3\2\2\2\u26ce"+
		"\u26cf\3\2\2\2\u26cf\u0351\3\2\2\2\u26d0\u26d5\5\u0354\u01ab\2\u26d1\u26d2"+
		"\7\u034c\2\2\u26d2\u26d4\5\u0354\u01ab\2\u26d3\u26d1\3\2\2\2\u26d4\u26d7"+
		"\3\2\2\2\u26d5\u26d3\3\2\2\2\u26d5\u26d6\3\2\2\2\u26d6\u0353\3\2\2\2\u26d7"+
		"\u26d5\3\2\2\2\u26d8\u26d9\5\u0410\u0209\2\u26d9\u26db\5\u0406\u0204\2"+
		"\u26da\u26dc\7\u0334\2\2\u26db\u26da\3\2\2\2\u26db\u26dc\3\2\2\2\u26dc"+
		"\u0355\3\2\2\2\u26dd\u26e0\5\u0358\u01ad\2\u26de\u26e0\5\u035a\u01ae\2"+
		"\u26df\u26dd\3\2\2\2\u26df\u26de\3\2\2\2\u26e0\u0357\3\2\2\2\u26e1\u26e2"+
		"\7\u027f\2\2\u26e2\u26e3\7\u034a\2\2\u26e3\u26e4\7\u0280\2\2\u26e4\u26e5"+
		"\5\u03d2\u01ea\2\u26e5\u26e6\7\u034c\2\2\u26e6\u26e7\t{\2\2\u26e7\u26e8"+
		"\7\u034b\2\2\u26e8\u0359\3\2\2\2\u26e9\u26ea\7\u027f\2\2\u26ea\u26eb\7"+
		"\u034a\2\2\u26eb\u26ec\7\u0368\2\2\u26ec\u26ed\5\u03d2\u01ea\2\u26ed\u26ee"+
		"\7\u034c\2\2\u26ee\u26ef\5\u036c\u01b7\2\u26ef\u26f0\7\u034c\2\2\u26f0"+
		"\u26f1\5\u0334\u019b\2\u26f1\u26f2\7\u034b\2\2\u26f2\u035b\3\2\2\2\u26f3"+
		"\u26f9\5\u035e\u01b0\2\u26f4\u26f9\5\u0360\u01b1\2\u26f5\u26f9\5\u0362"+
		"\u01b2\2\u26f6\u26f9\5\u0364\u01b3\2\u26f7\u26f9\5\u0366\u01b4\2\u26f8"+
		"\u26f3\3\2\2\2\u26f8\u26f4\3\2\2\2\u26f8\u26f5\3\2\2\2\u26f8\u26f6\3\2"+
		"\2\2\u26f8\u26f7\3\2\2\2\u26f9\u035d\3\2\2\2\u26fa\u26fc\7Y\2\2\u26fb"+
		"\u26fa\3\2\2\2\u26fb\u26fc\3\2\2\2\u26fc\u2702\3\2\2\2\u26fd\u26ff\t|"+
		"\2\2\u26fe\u2700\7z\2\2\u26ff\u26fe\3\2\2\2\u26ff\u2700\3\2\2\2\u2700"+
		"\u2702\3\2\2\2\u2701\u26fb\3\2\2\2\u2701\u26fd\3\2\2\2\u2702\u2704\3\2"+
		"\2\2\u2703\u2705\t}\2\2\u2704\u2703\3\2\2\2\u2704\u2705\3\2\2\2\u2705"+
		"\u2706\3\2\2\2\u2706\u2707\7^\2\2\u2707\u2708\5\u0344\u01a3\2\u2708\u2709"+
		"\7p\2\2\u2709\u270a\5\u0312\u018a\2\u270a\u035f\3\2\2\2\u270b\u270c\7"+
		"$\2\2\u270c\u270d\7^\2\2\u270d\u270e\5\u0344\u01a3\2\u270e\u0361\3\2\2"+
		"\2\u270f\u2710\t~\2\2\u2710\u2711\7\u00d6\2\2\u2711\u2712\5\u0344\u01a3"+
		"\2\u2712\u0363\3\2\2\2\u2713\u2714\7}\2\2\u2714\u2715\5\u0368\u01b5\2"+
		"\u2715\u2716\5\u0398\u01cd\2\u2716\u0365\3\2\2\2\u2717\u2718\7\u00b1\2"+
		"\2\u2718\u2719\5\u036a\u01b6\2\u2719\u271a\5\u0398\u01cd\2\u271a\u0367"+
		"\3\2\2\2\u271b\u271c\7\u034a\2\2\u271c\u271d\5\u03ae\u01d8\2\u271d\u271e"+
		"\7G\2\2\u271e\u271f\5\u03de\u01f0\2\u271f\u2720\7W\2\2\u2720\u2721\5\u03a4"+
		"\u01d3\2\u2721\u2722\7\u034b\2\2\u2722\u0369\3\2\2\2\u2723\u2724\7\u034a"+
		"\2\2\u2724\u2725\5\u02fa\u017e\2\u2725\u2726\7G\2\2\u2726\u2727\5\u03de"+
		"\u01f0\2\u2727\u2728\7W\2\2\u2728\u2729\7\u034a\2\2\u2729\u272a\5\u036c"+
		"\u01b7\2\u272a\u272b\7\u034b\2\2\u272b\u272c\7\u034b\2\2\u272c\u036b\3"+
		"\2\2\2\u272d\u2732\5\u03de\u01f0\2\u272e\u272f\7\u034c\2\2\u272f\u2731"+
		"\5\u03de\u01f0\2\u2730\u272e\3\2\2\2\u2731\u2734\3\2\2\2\u2732\u2730\3"+
		"\2\2\2\u2732\u2733\3\2\2\2\u2733\u036d\3\2\2\2\u2734\u2732\3\2\2\2\u2735"+
		"\u2737\5\u03d2\u01ea\2\u2736\u2738\5\u039c\u01cf\2\u2737\u2736\3\2\2\2"+
		"\u2737\u2738\3\2\2\2\u2738\u036f\3\2\2\2\u2739\u273a\7t\2\2\u273a\u273b"+
		"\7\u034a\2\2\u273b\u273c\7\u0334\2\2\u273c\u273d\7\u034c\2\2\u273d\u273e"+
		"\7\u0334\2\2\u273e\u273f\7\u034c\2\2\u273f\u2740\7\u0334\2\2\u2740\u2754"+
		"\7\u034b\2\2\u2741\u2742\7t\2\2\u2742\u2743\7\u034a\2\2\u2743\u2744\7"+
		"\21\2\2\u2744\u2745\7\u0334\2\2\u2745\u274f\7\u034c\2\2\u2746\u274b\5"+
		"\u0372\u01ba\2\u2747\u2748\7\u034c\2\2\u2748\u274a\5\u0372\u01ba\2\u2749"+
		"\u2747\3\2\2\2\u274a\u274d\3\2\2\2\u274b\u2749\3\2\2\2\u274b\u274c\3\2"+
		"\2\2\u274c\u2750\3\2\2\2\u274d\u274b\3\2\2\2\u274e\u2750\5\u0410\u0209"+
		"\2\u274f\u2746\3\2\2\2\u274f\u274e\3\2\2\2\u2750\u2751\3\2\2\2\u2751\u2752"+
		"\7\u034b\2\2\u2752\u2754\3\2\2\2\u2753\u2739\3\2\2\2\u2753\u2741\3\2\2"+
		"\2\u2754\u0371\3\2\2\2\u2755\u2756\5\u0410\u0209\2\u2756\u2757\7\u0338"+
		"\2\2\u2757\u2758\t\30\2\2\u2758\u0373\3\2\2\2\u2759\u2764\5\u0308\u0185"+
		"\2\u275a\u275b\7\u034a\2\2\u275b\u275c\5\u0308\u0185\2\u275c\u275d\7\u034b"+
		"\2\2\u275d\u2764\3\2\2\2\u275e\u2764\5\u03a8\u01d5\2\u275f\u2760\7\u034a"+
		"\2\2\u2760\u2761\5\u03a8\u01d5\2\u2761\u2762\7\u034b\2\2\u2762\u2764\3"+
		"\2\2\2\u2763\u2759\3\2\2\2\u2763\u275a\3\2\2\2\u2763\u275e\3\2\2\2\u2763"+
		"\u275f\3\2\2\2\u2764\u0375\3\2\2\2\u2765\u2772\5\u03ac\u01d7\2\u2766\u2772"+
		"\5\u03ae\u01d8\2\u2767\u2772\5\u03b0\u01d9\2\u2768\u2769\5\u03f2\u01fa"+
		"\2\u2769\u276b\7\u034a\2\2\u276a\u276c\5\u03aa\u01d6\2\u276b\u276a\3\2"+
		"\2\2\u276b\u276c\3\2\2\2\u276c\u276d\3\2\2\2\u276d\u276e\7\u034b\2\2\u276e"+
		"\u2772\3\2\2\2\u276f\u2772\5\u037c\u01bf\2\u2770\u2772\5\u0378\u01bd\2"+
		"\u2771\u2765\3\2\2\2\u2771\u2766\3\2\2\2\u2771\u2767\3\2\2\2\u2771\u2768"+
		"\3\2\2\2\u2771\u276f\3\2\2\2\u2771\u2770\3\2\2\2\u2772\u0377\3\2\2\2\u2773"+
		"\u2774\t\177\2\2\u2774\u2775\7\u034a\2\2\u2775\u2776\5\u03d2\u01ea\2\u2776"+
		"\u2784\7\u034c\2\2\u2777\u2785\5\u03de\u01f0\2\u2778\u2779\7\u034a\2\2"+
		"\u2779\u277e\5\u03de\u01f0\2\u277a\u277b\7\u034c\2\2\u277b\u277d\5\u03de"+
		"\u01f0\2\u277c\u277a\3\2\2\2\u277d\u2780\3\2\2\2\u277e\u277c\3\2\2\2\u277e"+
		"\u277f\3\2\2\2\u277f\u2781\3\2\2\2\u2780\u277e\3\2\2\2\u2781\u2782\7\u034b"+
		"\2\2\u2782\u2785\3\2\2\2\u2783\u2785\7\u034f\2\2\u2784\u2777\3\2\2\2\u2784"+
		"\u2778\3\2\2\2\u2784\u2783\3\2\2\2\u2785\u2786\3\2\2\2\u2786\u2787\7\u034c"+
		"\2\2\u2787\u278b\5\u02fa\u017e\2\u2788\u2789\7\u034c\2\2\u2789\u278a\7"+
		"\u02b6\2\2\u278a\u278c\5\u02fa\u017e\2\u278b\u2788\3\2\2\2\u278b\u278c"+
		"\3\2\2\2\u278c\u278f\3\2\2\2\u278d\u278e\7\u034c\2\2\u278e\u2790\5\u02fa"+
		"\u017e\2\u278f\u278d\3\2\2\2\u278f\u2790\3\2\2\2\u2790\u2791\3\2\2\2\u2791"+
		"\u2792\7\u034b\2\2\u2792\u27b8\3\2\2\2\u2793\u2794\t\u0080\2\2\u2794\u2795"+
		"\7\u034a\2\2\u2795\u2796\5\u03d2\u01ea\2\u2796\u27a4\7\u034c\2\2\u2797"+
		"\u27a5\5\u03de\u01f0\2\u2798\u2799\7\u034a\2\2\u2799\u279e\5\u03de\u01f0"+
		"\2\u279a\u279b\7\u034c\2\2\u279b\u279d\5\u03de\u01f0\2\u279c\u279a\3\2"+
		"\2\2\u279d\u27a0\3\2\2\2\u279e\u279c\3\2\2\2\u279e\u279f\3\2\2\2\u279f"+
		"\u27a1\3\2\2\2\u27a0\u279e\3\2\2\2\u27a1\u27a2\7\u034b\2\2\u27a2\u27a5"+
		"\3\2\2\2\u27a3\u27a5\7\u034f\2\2\u27a4\u2797\3\2\2\2\u27a4\u2798\3\2\2"+
		"\2\u27a4\u27a3\3\2\2\2\u27a5\u27a6\3\2\2\2\u27a6\u27a7\7\u034c\2\2\u27a7"+
		"\u27a8\5\u02fa\u017e\2\u27a8\u27a9\7\u034b\2\2\u27a9\u27b8\3\2\2\2\u27aa"+
		"\u27ab\7\u009b\2\2\u27ab\u27ac\7\u034a\2\2\u27ac\u27ad\5\u03d2\u01ea\2"+
		"\u27ad\u27ae\7\u034c\2\2\u27ae\u27af\5\u03de\u01f0\2\u27af\u27b0\7\u034c"+
		"\2\2\u27b0\u27b1\5\u02fa\u017e\2\u27b1\u27b2\7\u034c\2\2\u27b2\u27b3\5"+
		"\u03de\u01f0\2\u27b3\u27b4\7\u034c\2\2\u27b4\u27b5\5\u02fa\u017e\2\u27b5"+
		"\u27b6\7\u034b\2\2\u27b6\u27b8\3\2\2\2\u27b7\u2773\3\2\2\2\u27b7\u2793"+
		"\3\2\2\2\u27b7\u27aa\3\2\2\2\u27b8\u0379\3\2\2\2\u27b9\u27ba\7\37\2\2"+
		"\u27ba\u27cf\7\u034a\2\2\u27bb\u27d0\5\u03de\u01f0\2\u27bc\u27bd\7\u034a"+
		"\2\2\u27bd\u27c2\5\u03de\u01f0\2\u27be\u27bf\7\u034c\2\2\u27bf\u27c1\5"+
		"\u03de\u01f0\2\u27c0\u27be\3\2\2\2\u27c1\u27c4\3\2\2\2\u27c2\u27c0\3\2"+
		"\2\2\u27c2\u27c3\3\2\2\2\u27c3\u27c5\3\2\2\2\u27c4\u27c2\3\2\2\2\u27c5"+
		"\u27c6\7\u034b\2\2\u27c6\u27d0\3\2\2\2\u27c7\u27d0\7\u034f\2\2\u27c8\u27c9"+
		"\7\u01db\2\2\u27c9\u27ca\7\u034a\2\2\u27ca\u27cb\5\u03de\u01f0\2\u27cb"+
		"\u27cc\7\u034c\2\2\u27cc\u27cd\5\u02fa\u017e\2\u27cd\u27ce\7\u034b\2\2"+
		"\u27ce\u27d0\3\2\2\2\u27cf\u27bb\3\2\2\2\u27cf\u27bc\3\2\2\2\u27cf\u27c7"+
		"\3\2\2\2\u27cf\u27c8\3\2\2\2\u27d0\u27d1\3\2\2\2\u27d1\u27d2\7\u034c\2"+
		"\2\u27d2\u27d3\5\u02fa\u017e\2\u27d3\u27d4\7\u034b\2\2\u27d4\u27f2\3\2"+
		"\2\2\u27d5\u27d6\7I\2\2\u27d6\u27d7\7\u034a\2\2\u27d7\u27d8\5\u03d2\u01ea"+
		"\2\u27d8\u27e6\7\u034c\2\2\u27d9\u27e7\5\u03de\u01f0\2\u27da\u27db\7\u034a"+
		"\2\2\u27db\u27e0\5\u03de\u01f0\2\u27dc\u27dd\7\u034c\2\2\u27dd\u27df\5"+
		"\u03de\u01f0\2\u27de\u27dc\3\2\2\2\u27df\u27e2\3\2\2\2\u27e0\u27de\3\2"+
		"\2\2\u27e0\u27e1\3\2\2\2\u27e1\u27e3\3\2\2\2\u27e2\u27e0\3\2\2\2\u27e3"+
		"\u27e4\7\u034b\2\2\u27e4\u27e7\3\2\2\2\u27e5\u27e7\7\u034f\2\2\u27e6\u27d9"+
		"\3\2\2\2\u27e6\u27da\3\2\2\2\u27e6\u27e5\3\2\2\2\u27e7\u27e8\3\2\2\2\u27e8"+
		"\u27e9\7\u034c\2\2\u27e9\u27ed\5\u02fa\u017e\2\u27ea\u27eb\7\u034c\2\2"+
		"\u27eb\u27ec\7\u02b6\2\2\u27ec\u27ee\5\u02fa\u017e\2\u27ed\u27ea\3\2\2"+
		"\2\u27ed\u27ee\3\2\2\2\u27ee\u27ef\3\2\2\2\u27ef\u27f0\7\u034b\2\2\u27f0"+
		"\u27f2\3\2\2\2\u27f1\u27b9\3\2\2\2\u27f1\u27d5\3\2\2\2\u27f2\u037b\3\2"+
		"\2\2\u27f3\u27f4\7\u00e9\2\2\u27f4\u27f5\7\u034a\2\2\u27f5\u27f6\7\u034f"+
		"\2\2\u27f6\u2886\7\u034b\2\2\u27f7\u27f8\7\u00f1\2\2\u27f8\u27f9\7\u034a"+
		"\2\2\u27f9\u27fa\5\u02fa\u017e\2\u27fa\u27fb\7\b\2\2\u27fb\u27fc\5\u0406"+
		"\u0204\2\u27fc\u27fd\7\u034b\2\2\u27fd\u2886\3\2\2\2\u27fe\u27ff\7\u00f2"+
		"\2\2\u27ff\u2800\7\u034a\2\2\u2800\u2801\5\u02fa\u017e\2\u2801\u2802\7"+
		"\b\2\2\u2802\u2803\5\u0406\u0204\2\u2803\u2804\7\u034b\2\2\u2804\u2886"+
		"\3\2\2\2\u2805\u2806\7\"\2\2\u2806\u2807\7\u034a\2\2\u2807\u2808\5\u0406"+
		"\u0204\2\u2808\u2809\7\u034c\2\2\u2809\u280c\5\u02fa\u017e\2\u280a\u280b"+
		"\7\u034c\2\2\u280b\u280d\5\u02fa\u017e\2\u280c\u280a\3\2\2\2\u280c\u280d"+
		"\3\2\2\2\u280d\u280e\3\2\2\2\u280e\u280f\7\u034b\2\2\u280f\u2886\3\2\2"+
		"\2\u2810\u2811\7\u00f7\2\2\u2811\u2812\7\u034a\2\2\u2812\u2813\7\u034f"+
		"\2\2\u2813\u2886\7\u034b\2\2\u2814\u2815\7\31\2\2\u2815\u2816\7\u034a"+
		"\2\2\u2816\u2817\5\u03aa\u01d6\2\u2817\u2818\7\u034b\2\2\u2818\u2886\3"+
		"\2\2\2\u2819\u2886\7(\2\2\u281a\u2886\7)\2\2\u281b\u281c\7\u0110\2\2\u281c"+
		"\u281d\7\u034a\2\2\u281d\u281e\7\u0333\2\2\u281e\u281f\7\u034c\2\2\u281f"+
		"\u2820\5\u02fa\u017e\2\u2820\u2821\7\u034c\2\2\u2821\u2822\5\u02fa\u017e"+
		"\2\u2822\u2823\7\u034b\2\2\u2823\u2886\3\2\2\2\u2824\u2825\7\u0111\2\2"+
		"\u2825\u2826\7\u034a\2\2\u2826\u2827\7\u0333\2\2\u2827\u2828\7\u034c\2"+
		"\2\u2828\u2829\5\u02fa\u017e\2\u2829\u282a\7\u034c\2\2\u282a\u282b\5\u02fa"+
		"\u017e\2\u282b\u282c\7\u034b\2\2\u282c\u2886\3\2\2\2\u282d\u282e\7\u0112"+
		"\2\2\u282e\u282f\7\u034a\2\2\u282f\u2830\7\u0333\2\2\u2830\u2831\7\u034c"+
		"\2\2\u2831\u2832\5\u02fa\u017e\2\u2832\u2833\7\u034b\2\2\u2833\u2886\3"+
		"\2\2\2\u2834\u2835\7\u0113\2\2\u2835\u2836\7\u034a\2\2\u2836\u2837\7\u0333"+
		"\2\2\u2837\u2838\7\u034c\2\2\u2838\u2839\5\u02fa\u017e\2\u2839\u283a\7"+
		"\u034b\2\2\u283a\u2886\3\2\2\2\u283b\u283c\7\u0152\2\2\u283c\u283d\7\u034a"+
		"\2\2\u283d\u2886\7\u034b\2\2\u283e\u283f\7\u0153\2\2\u283f\u2840\7\u034a"+
		"\2\2\u2840\u2886\7\u034b\2\2\u2841\u2842\7S\2\2\u2842\u2843\7\u034a\2"+
		"\2\u2843\u2846\5\u0406\u0204\2\u2844\u2845\7\u034c\2\2\u2845\u2847\7\u0332"+
		"\2\2\u2846\u2844\3\2\2\2\u2846\u2847\3\2\2\2\u2847\u284a\3\2\2\2\u2848"+
		"\u2849\7\u034c\2\2\u2849\u284b\7\u0332\2\2\u284a\u2848\3\2\2\2\u284a\u284b"+
		"\3\2\2\2\u284b\u284c\3\2\2\2\u284c\u284d\7\u034b\2\2\u284d\u2886\3\2\2"+
		"\2\u284e\u284f\7\u019a\2\2\u284f\u2850\7\u034a\2\2\u2850\u2886\7\u034b"+
		"\2\2\u2851\u2852\7l\2\2\u2852\u2853\7\u034a\2\2\u2853\u2854\5\u02fa\u017e"+
		"\2\u2854\u2855\7\u034c\2\2\u2855\u2856\5\u02fa\u017e\2\u2856\u2857\7\u034b"+
		"\2\2\u2857\u2886\3\2\2\2\u2858\u2859\7\u0231\2\2\u2859\u285a\7\u034a\2"+
		"\2\u285a\u285b\5\u02fa\u017e\2\u285b\u285c\7\u034c\2\2\u285c\u285d\7\u0332"+
		"\2\2\u285d\u285e\7\u034c\2\2\u285e\u285f\7\u0332\2\2\u285f\u2860\7\u034c"+
		"\2\2\u2860\u2861\5\u02fa\u017e\2\u2861\u2862\7\u034b\2\2\u2862\u2886\3"+
		"\2\2\2\u2863\u2886\7\u009d\2\2\u2864\u2886\7\u00a3\2\2\u2865\u2886\7\u00b5"+
		"\2\2\u2866\u2867\7\u02b2\2\2\u2867\u2868\7\u034a\2\2\u2868\u2869\5\u02fa"+
		"\u017e\2\u2869\u286a\7\u034c\2\2\u286a\u286b\5\u02fa\u017e\2\u286b\u286c"+
		"\7\u034b\2\2\u286c\u2886\3\2\2\2\u286d\u2886\5\u037e\u01c0\2\u286e\u286f"+
		"\7\u02ab\2\2\u286f\u2870\7\u034a\2\2\u2870\u2871\5\u0312\u018a\2\u2871"+
		"\u2872\7\u034c\2\2\u2872\u2873\5\u02fa\u017e\2\u2873\u2874\7\u034c\2\2"+
		"\u2874\u2875\5\u02fa\u017e\2\u2875\u2876\7\u034b\2\2\u2876\u2886\3\2\2"+
		"\2\u2877\u2878\7\u0230\2\2\u2878\u2879\7\u034a\2\2\u2879\u287a\5\u02fa"+
		"\u017e\2\u287a\u287b\7\u034c\2\2\u287b\u287c\5\u02fa\u017e\2\u287c\u2883"+
		"\7\u034b\2\2\u287d\u287e\7\u00be\2\2\u287e\u287f\7P\2\2\u287f\u2880\7"+
		"\u034a\2\2\u2880\u2881\5\u0324\u0193\2\u2881\u2882\7\u034b\2\2\u2882\u2884"+
		"\3\2\2\2\u2883\u287d\3\2\2\2\u2883\u2884\3\2\2\2\u2884\u2886\3\2\2\2\u2885"+
		"\u27f3\3\2\2\2\u2885\u27f7\3\2\2\2\u2885\u27fe\3\2\2\2\u2885\u2805\3\2"+
		"\2\2\u2885\u2810\3\2\2\2\u2885\u2814\3\2\2\2\u2885\u2819\3\2\2\2\u2885"+
		"\u281a\3\2\2\2\u2885\u281b\3\2\2\2\u2885\u2824\3\2\2\2\u2885\u282d\3\2"+
		"\2\2\u2885\u2834\3\2\2\2\u2885\u283b\3\2\2\2\u2885\u283e\3\2\2\2\u2885"+
		"\u2841\3\2\2\2\u2885\u284e\3\2\2\2\u2885\u2851\3\2\2\2\u2885\u2858\3\2"+
		"\2\2\u2885\u2863\3\2\2\2\u2885\u2864\3\2\2\2\u2885\u2865\3\2\2\2\u2885"+
		"\u2866\3\2\2\2\u2885\u286d\3\2\2\2\u2885\u286e\3\2\2\2\u2885\u2877\3\2"+
		"\2\2\u2886\u037d\3\2\2\2\u2887\u288c\5\u0380\u01c1\2\u2888\u288c\5\u0384"+
		"\u01c3\2\u2889\u288c\5\u0388\u01c5\2\u288a\u288c\5\u038c\u01c7\2\u288b"+
		"\u2887\3\2\2\2\u288b\u2888\3\2\2\2\u288b\u2889\3\2\2\2\u288b\u288a\3\2"+
		"\2\2\u288c\u037f\3\2\2\2\u288d\u2896\7\u0331\2\2\u288e\u2896\5\u0410\u0209"+
		"\2\u288f\u2896\7\u029b\2\2\u2890\u2896\5\u0384\u01c3\2\u2891\u2892\7\u034a"+
		"\2\2\u2892\u2893\5\u0308\u0185\2\u2893\u2894\7\u034b\2\2\u2894\u2896\3"+
		"\2\2\2\u2895\u288d\3\2\2\2\u2895\u288e\3\2\2\2\u2895\u288f\3\2\2\2\u2895"+
		"\u2890\3\2\2\2\u2895\u2891\3\2\2\2\u2896\u2897\3\2\2\2\u2897\u2898\7\u0345"+
		"\2\2\u2898\u2899\5\u0382\u01c2\2\u2899\u0381\3\2\2\2\u289a\u289b\7\u0256"+
		"\2\2\u289b\u289c\7\u034a\2\2\u289c\u289d\7\u0334\2\2\u289d\u289e\7\u034c"+
		"\2\2\u289e\u289f\7\u0334\2\2\u289f\u28a0\7\u034b\2\2\u28a0\u0383\3\2\2"+
		"\2\u28a1\u28a9\7\u0331\2\2\u28a2\u28a9\5\u0410\u0209\2\u28a3\u28a9\5\u03d0"+
		"\u01e9\2\u28a4\u28a5\7\u034a\2\2\u28a5\u28a6\5\u0308\u0185\2\u28a6\u28a7"+
		"\7\u034b\2\2\u28a7\u28a9\3\2\2\2\u28a8\u28a1\3\2\2\2\u28a8\u28a2\3\2\2"+
		"\2\u28a8\u28a3\3\2\2\2\u28a8\u28a4\3\2\2\2\u28a9\u28aa\3\2\2\2\u28aa\u28ab"+
		"\7\u0345\2\2\u28ab\u28ac\5\u0386\u01c4\2\u28ac\u0385\3\2\2\2\u28ad\u28ae"+
		"\7\u01de\2\2\u28ae\u28af\7\u034a\2\2\u28af\u28b0\7\u0334\2\2\u28b0\u28b1"+
		"\7\u034b\2\2\u28b1\u0387\3\2\2\2\u28b2\u28b9\7\u0331\2\2\u28b3\u28b9\5"+
		"\u0410\u0209\2\u28b4\u28b5\7\u034a\2\2\u28b5\u28b6\5\u0308\u0185\2\u28b6"+
		"\u28b7\7\u034b\2\2\u28b7\u28b9\3\2\2\2\u28b8\u28b2\3\2\2\2\u28b8\u28b3"+
		"\3\2\2\2\u28b8\u28b4\3\2\2\2\u28b9\u28ba\3\2\2\2\u28ba\u28bb\7\u0345\2"+
		"\2\u28bb\u28bc\5\u038a\u01c6\2\u28bc\u0389\3\2\2\2\u28bd\u28be\7\u0137"+
		"\2\2\u28be\u28bf\7\u034a\2\2\u28bf\u28c0\7\u0334\2\2\u28c0\u28c1\7\u034b"+
		"\2\2\u28c1\u038b\3\2\2\2\u28c2\u28c9\7\u0331\2\2\u28c3\u28c9\5\u0410\u0209"+
		"\2\u28c4\u28c5\7\u034a\2\2\u28c5\u28c6\5\u0308\u0185\2\u28c6\u28c7\7\u034b"+
		"\2\2\u28c7\u28c9\3\2\2\2\u28c8\u28c2\3\2\2\2\u28c8\u28c3\3\2\2\2\u28c8"+
		"\u28c4\3\2\2\2\u28c9\u28ca\3\2\2\2\u28ca\u28cb\7\u0345\2\2\u28cb\u28cc"+
		"\5\u038e\u01c8\2\u28cc\u038d\3\2\2\2\u28cd\u28ce\7\u01a2\2\2\u28ce\u28cf"+
		"\7\u034a\2\2\u28cf\u28d0\7\u0334\2\2\u28d0\u28d1\7\u034b\2\2\u28d1\u038f"+
		"\3\2\2\2\u28d2\u28d9\7\u0331\2\2\u28d3\u28d9\5\u0410\u0209\2\u28d4\u28d5"+
		"\7\u034a\2\2\u28d5\u28d6\5\u0308\u0185\2\u28d6\u28d7\7\u034b\2\2\u28d7"+
		"\u28d9\3\2\2\2\u28d8\u28d2\3\2\2\2\u28d8\u28d3\3\2\2\2\u28d8\u28d4\3\2"+
		"\2\2\u28d9\u28da\3\2\2\2\u28da\u28db\7\u0345\2\2\u28db\u28dc\7\u01af\2"+
		"\2\u28dc\u28dd\7\u034a\2\2\u28dd\u28de\7\u0334\2\2\u28de\u28df\7\u034b"+
		"\2\2\u28df\u0391\3\2\2\2\u28e0\u28e1\7\u00ba\2\2\u28e1\u28e2\5\u02fa\u017e"+
		"\2\u28e2\u28e3\7\u00a7\2\2\u28e3\u28e4\5\u02fa\u017e\2\u28e4\u0393\3\2"+
		"\2\2\u28e5\u28e6\7\u00ba\2\2\u28e6\u28e7\5\u0312\u018a\2\u28e7\u28e8\7"+
		"\u00a7\2\2\u28e8\u28e9\5\u02fa\u017e\2\u28e9\u0395\3\2\2\2\u28ea\u28ec"+
		"\7\b\2\2\u28eb\u28ea\3\2\2\2\u28eb\u28ec\3\2\2\2\u28ec\u28ed\3\2\2\2\u28ed"+
		"\u28ee\5\u03a6\u01d4\2\u28ee\u0397\3\2\2\2\u28ef\u28f1\7\b\2\2\u28f0\u28ef"+
		"\3\2\2\2\u28f0\u28f1\3\2\2\2\u28f1\u28f2\3\2\2\2\u28f2\u28f3\5\u039a\u01ce"+
		"\2\u28f3\u0399\3\2\2\2\u28f4\u28f6\5\u0410\u0209\2\u28f5\u28f7\5\u039c"+
		"\u01cf\2\u28f6\u28f5\3\2\2\2\u28f6\u28f7\3\2\2\2\u28f7\u039b\3\2\2\2\u28f8"+
		"\u28fa\7\u00bd\2\2\u28f9\u28f8\3\2\2\2\u28f9\u28fa\3\2\2\2\u28fa\u28fb"+
		"\3\2\2\2\u28fb\u28fc\7\u034a\2\2\u28fc\u2903\5\u03a0\u01d1\2\u28fd\u28ff"+
		"\7\u034c\2\2\u28fe\u28fd\3\2\2\2\u28fe\u28ff\3\2\2\2\u28ff\u2900\3\2\2"+
		"\2\u2900\u2902\5\u03a0\u01d1\2\u2901\u28fe\3\2\2\2\u2902\u2905\3\2\2\2"+
		"\u2903\u2901\3\2\2\2\u2903\u2904\3\2\2\2\u2904\u2906\3\2\2\2\u2905\u2903"+
		"\3\2\2\2\u2906\u2907\7\u034b\2\2\u2907\u039d\3\2\2\2\u2908\u2909\7\u00bd"+
		"\2\2\u2909\u290a\7\u034a\2\2\u290a\u2911\5\u03a0\u01d1\2\u290b\u290d\7"+
		"\u034c\2\2\u290c\u290b\3\2\2\2\u290c\u290d\3\2\2\2\u290d\u290e\3\2\2\2"+
		"\u290e\u2910\5\u03a0\u01d1\2\u290f\u290c\3\2\2\2\u2910\u2913\3\2\2\2\u2911"+
		"\u290f\3\2\2\2\u2911\u2912\3\2\2\2\u2912\u2914\3\2\2\2\u2913\u2911\3\2"+
		"\2\2\u2914\u2915\7\u034b\2\2\u2915\u039f\3\2\2\2\u2916\u2918\7\u01b0\2"+
		"\2\u2917\u2916\3\2\2\2\u2917\u2918\3\2\2\2\u2918\u294a\3\2\2\2\u2919\u292d"+
		"\7X\2\2\u291a\u291b\7\u034a\2\2\u291b\u2920\5\u03a2\u01d2\2\u291c\u291d"+
		"\7\u034c\2\2\u291d\u291f\5\u03a2\u01d2\2\u291e\u291c\3\2\2\2\u291f\u2922"+
		"\3\2\2\2\u2920\u291e\3\2\2\2\u2920\u2921\3\2\2\2\u2921\u2923\3\2\2\2\u2922"+
		"\u2920\3\2\2\2\u2923\u2924\7\u034b\2\2\u2924\u292e\3\2\2\2\u2925\u292a"+
		"\5\u03a2\u01d2\2\u2926\u2927\7\u034c\2\2\u2927\u2929\5\u03a2\u01d2\2\u2928"+
		"\u2926\3\2\2\2\u2929\u292c\3\2\2\2\u292a\u2928\3\2\2\2\u292a\u292b\3\2"+
		"\2\2\u292b\u292e\3\2\2\2\u292c\u292a\3\2\2\2\u292d\u291a\3\2\2\2\u292d"+
		"\u2925\3\2\2\2\u292e\u294b\3\2\2\2\u292f\u2930\7X\2\2\u2930\u2931\7\u0338"+
		"\2\2\u2931\u294b\5\u03a2\u01d2\2\u2932\u2941\7\u02a5\2\2\u2933\u2934\7"+
		"\u034a\2\2\u2934\u2935\5\u03a2\u01d2\2\u2935\u2936\7\u034a\2\2\u2936\u293b"+
		"\7\u0333\2\2\u2937\u2938\7\u034c\2\2\u2938\u293a\7\u0333\2\2\u2939\u2937"+
		"\3\2\2\2\u293a\u293d\3\2\2\2\u293b\u2939\3\2\2\2\u293b\u293c\3\2\2\2\u293c"+
		"\u293e\3\2\2\2\u293d\u293b\3\2\2\2\u293e\u293f\7\u034b\2\2\u293f\u2940"+
		"\7\u034b\2\2\u2940\u2942\3\2\2\2\u2941\u2933\3\2\2\2\u2941\u2942\3\2\2"+
		"\2\u2942\u294b\3\2\2\2\u2943\u294b\7\u021b\2\2\u2944\u294b\7\u0225\2\2"+
		"\u2945\u2946\7\u0226\2\2\u2946\u2947\7\u0338\2\2\u2947\u294b\7\u0332\2"+
		"\2\u2948\u294b\7R\2\2\u2949\u294b\7\u0333\2\2\u294a\u2919\3\2\2\2\u294a"+
		"\u292f\3\2\2\2\u294a\u2932\3\2\2\2\u294a\u2943\3\2\2\2\u294a\u2944\3\2"+
		"\2\2\u294a\u2945\3\2\2\2\u294a\u2948\3\2\2\2\u294a\u2949\3\2\2\2\u294b"+
		"\u03a1\3\2\2\2\u294c\u294f\5\u0410\u0209\2\u294d\u294f\7\u0332\2\2\u294e"+
		"\u294c\3\2\2\2\u294e\u294d\3\2\2\2\u294f\u03a3\3\2\2\2\u2950\u2951\7\u034a"+
		"\2\2\u2951\u2956\5\u03a6\u01d4\2\u2952\u2953\7\u034c\2\2\u2953\u2955\5"+
		"\u03a6\u01d4\2\u2954\u2952\3\2\2\2\u2955\u2958\3\2\2\2\u2956\u2954\3\2"+
		"\2\2\u2956\u2957\3\2\2\2\u2957\u2959\3\2\2\2\u2958\u2956\3\2\2\2\u2959"+
		"\u295a\7\u034b\2\2\u295a\u03a5\3\2\2\2\u295b\u295e\5\u0410\u0209\2\u295c"+
		"\u295e\7\u0334\2\2\u295d\u295b\3\2\2\2\u295d\u295c\3\2\2\2\u295e\u03a7"+
		"\3\2\2\2\u295f\u2960\7\u00b6\2\2\u2960\u2961\7\u034a\2\2\u2961\u2962\5"+
		"\u03aa\u01d6\2\u2962\u296a\7\u034b\2\2\u2963\u2964\7\u034c\2\2\u2964\u2965"+
		"\7\u034a\2\2\u2965\u2966\5\u03aa\u01d6\2\u2966\u2967\7\u034b\2\2\u2967"+
		"\u2969\3\2\2\2\u2968\u2963\3\2\2\2\u2969\u296c\3\2\2\2\u296a\u2968\3\2"+
		"\2\2\u296a\u296b\3\2\2\2\u296b\u03a9\3\2\2\2\u296c\u296a\3\2\2\2\u296d"+
		"\u2972\5\u02fa\u017e\2\u296e\u296f\7\u034c\2\2\u296f\u2971\5\u02fa\u017e"+
		"\2\u2970\u296e\3\2\2\2\u2971\u2974\3\2\2\2\u2972\u2970\3\2\2\2\u2972\u2973"+
		"\3\2\2\2\u2973\u03ab\3\2\2\2\u2974\u2972\3\2\2\2\u2975\u2976\t\u0081\2"+
		"\2\u2976\u2977\7\u034a\2\2\u2977\u2978\7\u034b\2\2\u2978\u2980\5\u03b4"+
		"\u01db\2\u2979\u297a\7\u01b5\2\2\u297a\u297b\7\u034a\2\2\u297b\u297c\5"+
		"\u02fa\u017e\2\u297c\u297d\7\u034b\2\2\u297d\u297e\5\u03b4\u01db\2\u297e"+
		"\u2980\3\2\2\2\u297f\u2975\3\2\2\2\u297f\u2979\3\2\2\2\u2980\u03ad\3\2"+
		"\2\2\u2981\u2982\t\u0082\2\2\u2982\u2983\7\u034a\2\2\u2983\u2984\5\u03b2"+
		"\u01da\2\u2984\u2986\7\u034b\2\2\u2985\u2987\5\u03b4\u01db\2\u2986\u2985"+
		"\3\2\2\2\u2986\u2987\3\2\2\2\u2987\u29a2\3\2\2\2\u2988\u2989\t\u0083\2"+
		"\2\u2989\u298c\7\u034a\2\2\u298a\u298d\7\u034f\2\2\u298b\u298d\5\u03b2"+
		"\u01da\2\u298c\u298a\3\2\2\2\u298c\u298b\3\2\2\2\u298d\u298e\3\2\2\2\u298e"+
		"\u2990\7\u034b\2\2\u298f\u2991\5\u03b4\u01db\2\u2990\u298f\3\2\2\2\u2990"+
		"\u2991\3\2\2\2\u2991\u29a2\3\2\2\2\u2992\u2993\7\u00f8\2\2\u2993\u2994"+
		"\7\u034a\2\2\u2994\u2995\5\u03b2\u01da\2\u2995\u2996\7\u034b\2\2\u2996"+
		"\u29a2\3\2\2\2\u2997\u2998\7\u0158\2\2\u2998\u2999\7\u034a\2\2\u2999\u299a"+
		"\5\u02fa\u017e\2\u299a\u299b\7\u034b\2\2\u299b\u29a2\3\2\2\2\u299c\u299d"+
		"\7\u0159\2\2\u299d\u299e\7\u034a\2\2\u299e\u299f\5\u03aa\u01d6\2\u299f"+
		"\u29a0\7\u034b\2\2\u29a0\u29a2\3\2\2\2\u29a1\u2981\3\2\2\2\u29a1\u2988"+
		"\3\2\2\2\u29a1\u2992\3\2\2\2\u29a1\u2997\3\2\2\2\u29a1\u299c\3\2\2\2\u29a2"+
		"\u03af\3\2\2\2\u29a3\u29a4\t\u0084\2\2\u29a4\u29a5\7\u034a\2\2\u29a5\u29a6"+
		"\5\u02fa\u017e\2\u29a6\u29a7\7\u034b\2\2\u29a7\u29a8\5\u03b4\u01db\2\u29a8"+
		"\u29dc\3\2\2\2\u29a9\u29aa\t\u0085\2\2\u29aa\u29ab\7\u034a\2\2\u29ab\u29b2"+
		"\5\u02fa\u017e\2\u29ac\u29ad\7\u034c\2\2\u29ad\u29b0\5\u02fa\u017e\2\u29ae"+
		"\u29af\7\u034c\2\2\u29af\u29b1\5\u02fa\u017e\2\u29b0\u29ae\3\2\2\2\u29b0"+
		"\u29b1\3\2\2\2\u29b1\u29b3\3\2\2\2\u29b2\u29ac\3\2\2\2\u29b2\u29b3\3\2"+
		"\2\2\u29b3\u29b4\3\2\2\2\u29b4\u29b5\7\u034b\2\2\u29b5\u29b6\5\u03b4\u01db"+
		"\2\u29b6\u29dc\3\2\2\2\u29b7\u29b8\t\u0086\2\2\u29b8\u29b9\7\u034a\2\2"+
		"\u29b9\u29ba\7\u034b\2\2\u29ba\u29bb\7{\2\2\u29bb\u29bf\7\u034a\2\2\u29bc"+
		"\u29bd\7\u01c8\2\2\u29bd\u29be\7\22\2\2\u29be\u29c0\5\u03aa\u01d6\2\u29bf"+
		"\u29bc\3\2\2\2\u29bf\u29c0\3\2\2\2\u29c0\u29c1\3\2\2\2\u29c1\u29c2\5\u0324"+
		"\u0193\2\u29c2\u29c3\7\u034b\2\2\u29c3\u29dc\3\2\2\2\u29c4\u29c5\t\u0087"+
		"\2\2\u29c5\u29c6\7\u034a\2\2\u29c6\u29c7\5\u02fa\u017e\2\u29c7\u29c8\7"+
		"\u034b\2\2\u29c8\u29c9\7\u00be\2\2\u29c9\u29ca\7P\2\2\u29ca\u29cb\7\u034a"+
		"\2\2\u29cb\u29cc\7y\2\2\u29cc\u29cd\7\22\2\2\u29cd\u29cf\5\u02fa\u017e"+
		"\2\u29ce\u29d0\t\u0088\2\2\u29cf\u29ce\3\2\2\2\u29cf\u29d0\3\2\2\2\u29d0"+
		"\u29d1\3\2\2\2\u29d1\u29d2\7\u034b\2\2\u29d2\u29d3\7{\2\2\u29d3\u29d7"+
		"\7\u034a\2\2\u29d4\u29d5\7\u01c8\2\2\u29d5\u29d6\7\22\2\2\u29d6\u29d8"+
		"\5\u03aa\u01d6\2\u29d7\u29d4\3\2\2\2\u29d7\u29d8\3\2\2\2\u29d8\u29d9\3"+
		"\2\2\2\u29d9\u29da\7\u034b\2\2\u29da\u29dc\3\2\2\2\u29db\u29a3\3\2\2\2"+
		"\u29db\u29a9\3\2\2\2\u29db\u29b7\3\2\2\2\u29db\u29c4\3\2\2\2\u29dc\u03b1"+
		"\3\2\2\2\u29dd\u29df\tr\2\2\u29de\u29dd\3\2\2\2\u29de\u29df\3\2\2\2\u29df"+
		"\u29e0\3\2\2\2\u29e0\u29e1\5\u02fa\u017e\2\u29e1\u03b3\3\2\2\2\u29e2\u29e3"+
		"\7{\2\2\u29e3\u29e7\7\u034a\2\2\u29e4\u29e5\7\u01c8\2\2\u29e5\u29e6\7"+
		"\22\2\2\u29e6\u29e8\5\u03aa\u01d6\2\u29e7\u29e4\3\2\2\2\u29e7\u29e8\3"+
		"\2\2\2\u29e8\u29ea\3\2\2\2\u29e9\u29eb\5\u0324\u0193\2\u29ea\u29e9\3\2"+
		"\2\2\u29ea\u29eb\3\2\2\2\u29eb\u29ed\3\2\2\2\u29ec\u29ee\5\u03b6\u01dc"+
		"\2\u29ed\u29ec\3\2\2\2\u29ed\u29ee\3\2\2\2\u29ee\u29ef\3\2\2\2\u29ef\u29f0"+
		"\7\u034b\2\2\u29f0\u03b5\3\2\2\2\u29f1\u29f2\t\u0089\2\2\u29f2\u29f3\5"+
		"\u03b8\u01dd\2\u29f3\u03b7\3\2\2\2\u29f4\u29fb\5\u03bc\u01df\2\u29f5\u29f6"+
		"\7\16\2\2\u29f6\u29f7\5\u03ba\u01de\2\u29f7\u29f8\7\6\2\2\u29f8\u29f9"+
		"\5\u03ba\u01de\2\u29f9\u29fb\3\2\2\2\u29fa\u29f4\3\2\2\2\u29fa\u29f5\3"+
		"\2\2\2\u29fb\u03b9\3\2\2\2\u29fc\u29ff\5\u03bc\u01df\2\u29fd\u29ff\5\u03be"+
		"\u01e0\2\u29fe\u29fc\3\2\2\2\u29fe\u29fd\3\2\2\2\u29ff\u03bb\3\2\2\2\u2a00"+
		"\u2a01\7\u024e\2\2\u2a01\u2a07\7\u01d2\2\2\u2a02\u2a03\7\u0332\2\2\u2a03"+
		"\u2a07\7\u01d2\2\2\u2a04\u2a05\7%\2\2\u2a05\u2a07\7\u0204\2\2\u2a06\u2a00"+
		"\3\2\2\2\u2a06\u2a02\3\2\2\2\u2a06\u2a04\3\2\2\2\u2a07\u03bd\3\2\2\2\u2a08"+
		"\u2a09\7\u024e\2\2\u2a09\u2a0d\7\u0149\2\2\u2a0a\u2a0b\7\u0332\2\2\u2a0b"+
		"\u2a0d\7\u0149\2\2\u2a0c\u2a08\3\2\2\2\u2a0c\u2a0a\3\2\2\2\u2a0d\u03bf"+
		"\3\2\2\2\u2a0e\u2a0f\7\u0145\2\2\u2a0f\u2a14\5\u03c2\u01e2\2\u2a10\u2a11"+
		"\7\u034c\2\2\u2a11\u2a13\5\u03c2\u01e2\2\u2a12\u2a10\3\2\2\2\u2a13\u2a16"+
		"\3\2\2\2\u2a14\u2a12\3\2\2\2\u2a14\u2a15\3\2\2\2\u2a15\u2a31\3\2\2\2\u2a16"+
		"\u2a14\3\2\2\2\u2a17\u2a18\7\u011a\2\2\u2a18\u2a1b\7\u0338\2\2\u2a19\u2a1c"+
		"\5\u0410\u0209\2\u2a1a\u2a1c\7\u0334\2\2\u2a1b\u2a19\3\2\2\2\u2a1b\u2a1a"+
		"\3\2\2\2\u2a1c\u2a31\3\2\2\2\u2a1d\u2a1e\7\u0119\2\2\u2a1e\u2a21\7\u0338"+
		"\2\2\u2a1f\u2a22\5\u0410\u0209\2\u2a20\u2a22\7\u0334\2\2\u2a21\u2a1f\3"+
		"\2\2\2\u2a21\u2a20\3\2\2\2\u2a22\u2a31\3\2\2\2\u2a23\u2a24\7\u01a6\2\2"+
		"\u2a24\u2a25\7\u0338\2\2\u2a25\u2a31\t\t\2\2\u2a26\u2a27\7\u0245\2\2\u2a27"+
		"\u2a28\7\u0338\2\2\u2a28\u2a31\t\t\2\2\u2a29\u2a2a\7\u024b\2\2\u2a2a\u2a2b"+
		"\7\u0338\2\2\u2a2b\u2a31\7\u0332\2\2\u2a2c\u2a2d\7\u0115\2\2\u2a2d\u2a31"+
		"\t\t\2\2\u2a2e\u2a2f\7\u0248\2\2\u2a2f\u2a31\t\t\2\2\u2a30\u2a0e\3\2\2"+
		"\2\u2a30\u2a17\3\2\2\2\u2a30\u2a1d\3\2\2\2\u2a30\u2a23\3\2\2\2\u2a30\u2a26"+
		"\3\2\2\2\u2a30\u2a29\3\2\2\2\u2a30\u2a2c\3\2\2\2\u2a30\u2a2e\3\2\2\2\u2a31"+
		"\u03c1\3\2\2\2\u2a32\u2a39\7\u034a\2\2\u2a33\u2a34\7\u01b1\2\2\u2a34\u2a35"+
		"\7\u0338\2\2\u2a35\u2a3a\t\u008a\2\2\u2a36\u2a37\7\u0125\2\2\u2a37\u2a38"+
		"\7\u0338\2\2\u2a38\u2a3a\7\u0334\2\2\u2a39\u2a33\3\2\2\2\u2a39\u2a36\3"+
		"\2\2\2\u2a3a\u2a3b\3\2\2\2\u2a3b\u2a3c\7\u034b\2\2\u2a3c\u03c3\3\2\2\2"+
		"\u2a3d\u2a40\5\u03c6\u01e4\2\u2a3e\u2a40\5\u03c8\u01e5\2\u2a3f\u2a3d\3"+
		"\2\2\2\u2a3f\u2a3e\3\2\2\2\u2a40\u03c5\3\2\2\2\u2a41\u2a42\7\u0141\2\2"+
		"\u2a42\u2a45\5\u0410\u0209\2\u2a43\u2a44\7\37\2\2\u2a44\u2a46\7\u0145"+
		"\2\2\u2a45\u2a43\3\2\2\2\u2a45\u2a46\3\2\2\2\u2a46\u2a48\3\2\2\2\u2a47"+
		"\u2a49\7/\2\2\u2a48\u2a47\3\2\2\2\u2a48\u2a49\3\2\2\2\u2a49\u2a4c\3\2"+
		"\2\2\u2a4a\u2a4b\7\37\2\2\u2a4b\u2a4d\7\u0197\2\2\u2a4c\u2a4a\3\2\2\2"+
		"\u2a4c\u2a4d\3\2\2\2\u2a4d\u2a4e\3\2\2\2\u2a4e\u2a53\5\u03c8\u01e5\2\u2a4f"+
		"\u2a50\7\u034c\2\2\u2a50\u2a52\5\u03c8\u01e5\2\u2a51\u2a4f\3\2\2\2\u2a52"+
		"\u2a55\3\2\2\2\u2a53\u2a51\3\2\2\2\u2a53\u2a54\3\2\2\2\u2a54\u03c7\3\2"+
		"\2\2\u2a55\u2a53\3\2\2\2\u2a56\u2a57\7\u034a\2\2\u2a57\u2a58\7\u01a5\2"+
		"\2\u2a58\u2a5b\7\u0338\2\2\u2a59\u2a5c\5\u0410\u0209\2\u2a5a\u2a5c\7\u0334"+
		"\2\2\u2a5b\u2a59\3\2\2\2\u2a5b\u2a5a\3\2\2\2\u2a5c\u2a5e\3\2\2\2\u2a5d"+
		"\u2a5f\7\u034c\2\2\u2a5e\u2a5d\3\2\2\2\u2a5e\u2a5f\3\2\2\2\u2a5f\u2a60"+
		"\3\2\2\2\u2a60\u2a61\7\u0143\2\2\u2a61\u2a62\7\u0338\2\2\u2a62\u2a64\7"+
		"\u0334\2\2\u2a63\u2a65\7\u034c\2\2\u2a64\u2a63\3\2\2\2\u2a64\u2a65\3\2"+
		"\2\2\u2a65\u2a6c\3\2\2\2\u2a66\u2a67\7\u0223\2\2\u2a67\u2a68\7\u0338\2"+
		"\2\u2a68\u2a6a\5\u0418\u020d\2\u2a69\u2a6b\7\u034c\2\2\u2a6a\u2a69\3\2"+
		"\2\2\u2a6a\u2a6b\3\2\2\2\u2a6b\u2a6d\3\2\2\2\u2a6c\u2a66\3\2\2\2\u2a6c"+
		"\u2a6d\3\2\2\2\u2a6d\u2a77\3\2\2\2\u2a6e\u2a6f\7\u0194\2\2\u2a6f\u2a72"+
		"\7\u0338\2\2\u2a70\u2a73\5\u0418\u020d\2\u2a71\u2a73\7\u0251\2\2\u2a72"+
		"\u2a70\3\2\2\2\u2a72\u2a71\3\2\2\2\u2a73\u2a75\3\2\2\2\u2a74\u2a76\7\u034c"+
		"\2\2\u2a75\u2a74\3\2\2\2\u2a75\u2a76\3\2\2\2\u2a76\u2a78\3\2\2\2\u2a77"+
		"\u2a6e\3\2\2\2\u2a77\u2a78\3\2\2\2\u2a78\u2a7f\3\2\2\2\u2a79\u2a7a\7\u0142"+
		"\2\2\u2a7a\u2a7b\7\u0338\2\2\u2a7b\u2a7d\5\u0418\u020d\2\u2a7c\u2a7e\7"+
		"\u034c\2\2\u2a7d\u2a7c\3\2\2\2\u2a7d\u2a7e\3\2\2\2\u2a7e\u2a80\3\2\2\2"+
		"\u2a7f\u2a79\3\2\2\2\u2a7f\u2a80\3\2\2\2\u2a80\u2a81\3\2\2\2\u2a81\u2a82"+
		"\7\u034b\2\2\u2a82\u03c9\3\2\2\2\u2a83\u2a84\5\u0410\u0209\2\u2a84\u2a85"+
		"\7\u0345\2\2\u2a85\u2a86\5\u0410\u0209\2\u2a86\u2a87\7\u0345\2\2\u2a87"+
		"\u2a88\5\u0410\u0209\2\u2a88\u2a89\7\u0345\2\2\u2a89\u2a95\3\2\2\2\u2a8a"+
		"\u2a8b\5\u0410\u0209\2\u2a8b\u2a8d\7\u0345\2\2\u2a8c\u2a8e\5\u0410\u0209"+
		"\2\u2a8d\u2a8c\3\2\2\2\u2a8d\u2a8e\3\2\2\2\u2a8e\u2a8f\3\2\2\2\u2a8f\u2a90"+
		"\7\u0345\2\2\u2a90\u2a95\3\2\2\2\u2a91\u2a92\5\u0410\u0209\2\u2a92\u2a93"+
		"\7\u0345\2\2\u2a93\u2a95\3\2\2\2\u2a94\u2a83\3\2\2\2\u2a94\u2a8a\3\2\2"+
		"\2\u2a94\u2a91\3\2\2\2\u2a94\u2a95\3\2\2\2\u2a95\u2a96\3\2\2\2\u2a96\u2a97"+
		"\5\u0410\u0209\2\u2a97\u03cb\3\2\2\2\u2a98\u2a9e\5\u0410\u0209\2\u2a99"+
		"\u2a9a\5\u0410\u0209\2\u2a9a\u2a9b\7\u0345\2\2\u2a9b\u2a9c\5\u0410\u0209"+
		"\2\u2a9c\u2a9e\3\2\2\2\u2a9d\u2a98\3\2\2\2\u2a9d\u2a99\3\2\2\2\u2a9e\u03cd"+
		"\3\2\2\2\u2a9f\u2aa5\5\u0410\u0209\2\u2aa0\u2aa1\5\u0410\u0209\2\u2aa1"+
		"\u2aa2\7\u0345\2\2\u2aa2\u2aa3\5\u0410\u0209\2\u2aa3\u2aa5\3\2\2\2\u2aa4"+
		"\u2a9f\3\2\2\2\u2aa4\u2aa0\3\2\2\2\u2aa5\u03cf\3\2\2\2\u2aa6\u2aa7\5\u0410"+
		"\u0209\2\u2aa7\u2aa8\7\u0345\2\2\u2aa8\u2aa9\5\u0410\u0209\2\u2aa9\u2aaa"+
		"\7\u0345\2\2\u2aaa\u2aab\5\u0410\u0209\2\u2aab\u2aac\7\u0345\2\2\u2aac"+
		"\u2ab8\3\2\2\2\u2aad\u2aae\5\u0410\u0209\2\u2aae\u2ab0\7\u0345\2\2\u2aaf"+
		"\u2ab1\5\u0410\u0209\2\u2ab0\u2aaf\3\2\2\2\u2ab0\u2ab1\3\2\2\2\u2ab1\u2ab2"+
		"\3\2\2\2\u2ab2\u2ab3\7\u0345\2\2\u2ab3\u2ab8\3\2\2\2\u2ab4\u2ab5\5\u0410"+
		"\u0209\2\u2ab5\u2ab6\7\u0345\2\2\u2ab6\u2ab8\3\2\2\2\u2ab7\u2aa6\3\2\2"+
		"\2\u2ab7\u2aad\3\2\2\2\u2ab7\u2ab4\3\2\2\2\u2ab7\u2ab8\3\2\2\2\u2ab8\u2ab9"+
		"\3\2\2\2\u2ab9\u2aba\5\u0410\u0209\2\u2aba\u03d1\3\2\2\2\u2abb\u2abc\5"+
		"\u0410\u0209\2\u2abc\u2abe\7\u0345\2\2\u2abd\u2abf\5\u0410\u0209\2\u2abe"+
		"\u2abd\3\2\2\2\u2abe\u2abf\3\2\2\2\u2abf\u2ac0\3\2\2\2\u2ac0\u2ac1\7\u0345"+
		"\2\2\u2ac1\u2ac6\3\2\2\2\u2ac2\u2ac3\5\u0410\u0209\2\u2ac3\u2ac4\7\u0345"+
		"\2\2\u2ac4\u2ac6\3\2\2\2\u2ac5\u2abb\3\2\2\2\u2ac5\u2ac2\3\2\2\2\u2ac5"+
		"\u2ac6\3\2\2\2\u2ac6\u2ac7\3\2\2\2\u2ac7\u2ad6\5\u0410\u0209\2\u2ac8\u2ac9"+
		"\5\u0410\u0209\2\u2ac9\u2acb\7\u0345\2\2\u2aca\u2acc\5\u0410\u0209\2\u2acb"+
		"\u2aca\3\2\2\2\u2acb\u2acc\3\2\2\2\u2acc\u2acd\3\2\2\2\u2acd\u2ace\7\u0345"+
		"\2\2\u2ace\u2ad3\3\2\2\2\u2acf\u2ad0\5\u0410\u0209\2\u2ad0\u2ad1\7\u0345"+
		"\2\2\u2ad1\u2ad3\3\2\2\2\u2ad2\u2ac8\3\2\2\2\u2ad2\u2acf\3\2\2\2\u2ad2"+
		"\u2ad3\3\2\2\2\u2ad3\u2ad4\3\2\2\2\u2ad4\u2ad6\7\u0279\2\2\u2ad5\u2ac5"+
		"\3\2\2\2\u2ad5\u2ad2\3\2\2\2\u2ad6\u03d3\3\2\2\2\u2ad7\u2ad8\5\u0410\u0209"+
		"\2\u2ad8\u2ad9\7\u0345\2\2\u2ad9\u2adb\3\2\2\2\u2ada\u2ad7\3\2\2\2\u2ada"+
		"\u2adb\3\2\2\2\u2adb\u2adc\3\2\2\2\u2adc\u2add\5\u0410\u0209\2\u2add\u03d5"+
		"\3\2\2\2\u2ade\u2adf\5\u0410\u0209\2\u2adf\u2ae0\7\u0345\2\2\u2ae0\u2ae2"+
		"\3\2\2\2\u2ae1\u2ade\3\2\2\2\u2ae1\u2ae2\3\2\2\2\u2ae2\u2ae3\3\2\2\2\u2ae3"+
		"\u2ae4\5\u0410\u0209\2\u2ae4\u03d7\3\2\2\2\u2ae5\u2ae7\5\u0410\u0209\2"+
		"\u2ae6\u2ae5\3\2\2\2\u2ae6\u2ae7\3\2\2\2\u2ae7\u2ae8\3\2\2\2\u2ae8\u2aea"+
		"\7\u0345\2\2\u2ae9\u2aeb\5\u0410\u0209\2\u2aea\u2ae9\3\2\2\2\u2aea\u2aeb"+
		"\3\2\2\2\u2aeb\u2aec\3\2\2\2\u2aec\u2aed\7\u0345\2\2\u2aed\u2af0\5\u0410"+
		"\u0209\2\u2aee\u2af0\5\u03d6\u01ec\2\u2aef\u2ae6\3\2\2\2\u2aef\u2aee\3"+
		"\2\2\2\u2af0\u03d9\3\2\2\2\u2af1\u2af3\5\u0410\u0209\2\u2af2\u2af1\3\2"+
		"\2\2\u2af2\u2af3\3\2\2\2\u2af3\u2af4\3\2\2\2\u2af4\u2af6\7\u0345\2\2\u2af5"+
		"\u2af7\5\u0410\u0209\2\u2af6\u2af5\3\2\2\2\u2af6\u2af7\3\2\2\2\u2af7\u2af8"+
		"\3\2\2\2\u2af8\u2afa\7\u0345\2\2\u2af9\u2afb\5\u0410\u0209\2\u2afa\u2af9"+
		"\3\2\2\2\u2afa\u2afb\3\2\2\2\u2afb\u2afc\3\2\2\2\u2afc\u2afd\7\u0345\2"+
		"\2\u2afd\u2b00\5\u0410\u0209\2\u2afe\u2b00\5\u03d8\u01ed\2\u2aff\u2af2"+
		"\3\2\2\2\u2aff\u2afe\3\2\2\2\u2b00\u03db\3\2\2\2\u2b01\u2b04\5\u03d0\u01e9"+
		"\2\u2b02\u2b04\7\u0331\2\2\u2b03\u2b01\3\2\2\2\u2b03\u2b02\3\2\2\2\u2b04"+
		"\u03dd\3\2\2\2\u2b05\u2b07\5\u0410\u0209\2\u2b06\u2b05\3\2\2\2\u2b06\u2b07"+
		"\3\2\2\2\u2b07\u2b08\3\2\2\2\u2b08\u2b0a\7\u0345\2\2\u2b09\u2b0b\5\u0410"+
		"\u0209\2\u2b0a\u2b09\3\2\2\2\u2b0a\u2b0b\3\2\2\2\u2b0b\u2b0c\3\2\2\2\u2b0c"+
		"\u2b0e\7\u0345\2\2\u2b0d\u2b0f\5\u0410\u0209\2\u2b0e\u2b0d\3\2\2\2\u2b0e"+
		"\u2b0f\3\2\2\2\u2b0f\u2b10\3\2\2\2\u2b10\u2b11\7\u0345\2\2\u2b11\u2b22"+
		"\5\u0410\u0209\2\u2b12\u2b14\5\u0410\u0209\2\u2b13\u2b12\3\2\2\2\u2b13"+
		"\u2b14\3\2\2\2\u2b14\u2b15\3\2\2\2\u2b15\u2b17\7\u0345\2\2\u2b16\u2b18"+
		"\5\u0410\u0209\2\u2b17\u2b16\3\2\2\2\u2b17\u2b18\3\2\2\2\u2b18\u2b19\3"+
		"\2\2\2\u2b19\u2b1a\7\u0345\2\2\u2b1a\u2b22\5\u0410\u0209\2\u2b1b\u2b1d"+
		"\5\u0410\u0209\2\u2b1c\u2b1b\3\2\2\2\u2b1c\u2b1d\3\2\2\2\u2b1d\u2b1e\3"+
		"\2\2\2\u2b1e\u2b1f\7\u0345\2\2\u2b1f\u2b22\5\u0410\u0209\2\u2b20\u2b22"+
		"\5\u0410\u0209\2\u2b21\u2b06\3\2\2\2\u2b21\u2b13\3\2\2\2\u2b21\u2b1c\3"+
		"\2\2\2\u2b21\u2b20\3\2\2\2\u2b22\u03df\3\2\2\2\u2b23\u2b25\5\u0410\u0209"+
		"\2\u2b24\u2b26\t\u0088\2\2\u2b25\u2b24\3\2\2\2\u2b25\u2b26\3\2\2\2\u2b26"+
		"\u2b2e\3\2\2\2\u2b27\u2b28\7\u034c\2\2\u2b28\u2b2a\5\u0410\u0209\2\u2b29"+
		"\u2b2b\t\u0088\2\2\u2b2a\u2b29\3\2\2\2\u2b2a\u2b2b\3\2\2\2\u2b2b\u2b2d"+
		"\3\2\2\2\u2b2c\u2b27\3\2\2\2\u2b2d\u2b30\3\2\2\2\u2b2e\u2b2c\3\2\2\2\u2b2e"+
		"\u2b2f\3\2\2\2\u2b2f\u03e1\3\2\2\2\u2b30\u2b2e\3\2\2\2\u2b31\u2b36\5\u03e4"+
		"\u01f3\2\u2b32\u2b33\7\u034c\2\2\u2b33\u2b35\5\u03e4\u01f3\2\u2b34\u2b32"+
		"\3\2\2\2\u2b35\u2b38\3\2\2\2\u2b36\u2b34\3\2\2\2\u2b36\u2b37\3\2\2\2\u2b37"+
		"\u03e3\3\2\2\2\u2b38\u2b36\3\2\2\2\u2b39\u2b3b\5\u0410\u0209\2\u2b3a\u2b39"+
		"\3\2\2\2\u2b3a\u2b3b\3\2\2\2\u2b3b\u2b3c\3\2\2\2\u2b3c\u2b3e\7\u0345\2"+
		"\2\u2b3d\u2b3a\3\2\2\2\u2b3e\u2b41\3\2\2\2\u2b3f\u2b3d\3\2\2\2\u2b3f\u2b40"+
		"\3\2\2\2\u2b40\u2b42\3\2\2\2\u2b41\u2b3f\3\2\2\2\u2b42\u2b43\5\u0410\u0209"+
		"\2\u2b43\u03e5\3\2\2\2\u2b44\u2b49\5\u0410\u0209\2\u2b45\u2b46\7\u034c"+
		"\2\2\u2b46\u2b48\5\u0410\u0209\2\u2b47\u2b45\3\2\2\2\u2b48\u2b4b\3\2\2"+
		"\2\u2b49\u2b47\3\2\2\2\u2b49\u2b4a\3\2\2\2\u2b4a\u03e7\3\2\2\2\u2b4b\u2b49"+
		"\3\2\2\2\u2b4c\u2b4f\5\u0410\u0209\2\u2b4d\u2b4f\7\u0331\2\2\u2b4e\u2b4c"+
		"\3\2\2\2\u2b4e\u2b4d\3\2\2\2\u2b4f\u03e9\3\2\2\2\u2b50\u2b51\t\t\2\2\u2b51"+
		"\u03eb\3\2\2\2\u2b52\u2b53\td\2\2\u2b53\u03ed\3\2\2\2\u2b54\u2b56\7j\2"+
		"\2\u2b55\u2b54\3\2\2\2\u2b55\u2b56\3\2\2\2\u2b56\u2b57\3\2\2\2\u2b57\u2b58"+
		"\7k\2\2\u2b58\u03ef\3\2\2\2\u2b59\u2b65\5\u03ee\u01f8\2\u2b5a\u2b5b\7"+
		"/\2\2\u2b5b\u2b5e\5\u0306\u0184\2\u2b5c\u2b5d\7\32\2\2\u2b5d\u2b5f\5\u0410"+
		"\u0209\2\u2b5e\u2b5c\3\2\2\2\u2b5e\u2b5f\3\2\2\2\u2b5f\u2b62\3\2\2\2\u2b60"+
		"\u2b61\7\u00bd\2\2\u2b61\u2b63\7\u00b6\2\2\u2b62\u2b60\3\2\2\2\u2b62\u2b63"+
		"\3\2\2\2\u2b63\u2b65\3\2\2\2\u2b64\u2b59\3\2\2\2\u2b64\u2b5a\3\2\2\2\u2b65"+
		"\u03f1\3\2\2\2\u2b66\u2b6c\5\u03da\u01ee\2\u2b67\u2b6c\7\u0091\2\2\u2b68"+
		"\u2b6c\7a\2\2\u2b69\u2b6c\7\u00e9\2\2\u2b6a\u2b6c\7\u00f7\2\2\u2b6b\u2b66"+
		"\3\2\2\2\u2b6b\u2b67\3\2\2\2\u2b6b\u2b68\3\2\2\2\u2b6b\u2b69\3\2\2\2\u2b6b"+
		"\u2b6a\3\2\2\2\u2b6c\u03f3\3\2\2\2\u2b6d\u2b6e\7\r\2\2\u2b6e\u2b6f\7\u028c"+
		"\2\2\u2b6f\u2b70\7\u0242\2\2\u2b70\u2b71\7\u034a\2\2\u2b71\u2b72\7\u0331"+
		"\2\2\u2b72\u2b73\7\u034b\2\2\u2b73\u2b74\7\u0241\2\2\u2b74\u2b75\7\u0338"+
		"\2\2\u2b75\u2b77\5\u01ca\u00e6\2\u2b76\u2b78\7\u034d\2\2\u2b77\u2b76\3"+
		"\2\2\2\u2b77\u2b78\3\2\2\2\u2b78\u03f5\3\2\2\2\u2b79\u2b7a\7\r\2\2\u2b7a"+
		"\u2b7c\7\u0124\2\2\u2b7b\u2b7d\7\u028c\2\2\u2b7c\u2b7b\3\2\2\2\u2b7c\u2b7d"+
		"\3\2\2\2\u2b7d\u2b7e\3\2\2\2\u2b7e\u2b7f\7\u0331\2\2\u2b7f\u2b80\7K\2"+
		"\2\u2b80\u2b81\7\u0303\2\2\u2b81\u2b82\5\u03fa\u01fe\2\u2b82\u2b83\7\u00a8"+
		"\2\2\u2b83\u2b84\7\u0303\2\2\u2b84\u2b87\5\u03fa\u01fe\2\u2b85\u2b86\7"+
		"\u034c\2\2\u2b86\u2b88\7\u0334\2\2\u2b87\u2b85\3\2\2\2\u2b87\u2b88\3\2"+
		"\2\2\u2b88\u2b89\3\2\2\2\u2b89\u2b8a\7p\2\2\u2b8a\u2b8b\7\u028a\2\2\u2b8b"+
		"\u2ba2\5\u03f8\u01fd\2\u2b8c\u2b93\7\u00bd\2\2\u2b8d\u2b8e\t\u008b\2\2"+
		"\u2b8e\u2b8f\7\u0338\2\2\u2b8f\u2b91\7\u0331\2\2\u2b90\u2b92\7\u034c\2"+
		"\2\u2b91\u2b90\3\2\2\2\u2b91\u2b92\3\2\2\2\u2b92\u2b94\3\2\2\2\u2b93\u2b8d"+
		"\3\2\2\2\u2b93\u2b94\3\2\2\2\u2b94\u2b9b\3\2\2\2\u2b95\u2b96\7\u02b8\2"+
		"\2\u2b96\u2b97\7\u0338\2\2\u2b97\u2b99\t\2\2\2\u2b98\u2b9a\7\u034c\2\2"+
		"\u2b99\u2b98\3\2\2\2\u2b99\u2b9a\3\2\2\2\u2b9a\u2b9c\3\2\2\2\u2b9b\u2b95"+
		"\3\2\2\2\u2b9b\u2b9c\3\2\2\2\u2b9c\u2ba0\3\2\2\2\u2b9d\u2b9e\7\u0132\2"+
		"\2\u2b9e\u2b9f\7\u0338\2\2\u2b9f\u2ba1\t\t\2\2\u2ba0\u2b9d\3\2\2\2\u2ba0"+
		"\u2ba1\3\2\2\2\u2ba1\u2ba3\3\2\2\2\u2ba2\u2b8c\3\2\2\2\u2ba2\u2ba3\3\2"+
		"\2\2\u2ba3\u2ba5\3\2\2\2\u2ba4\u2ba6\7\u034d\2\2\u2ba5\u2ba4\3\2\2\2\u2ba5"+
		"\u2ba6\3\2\2\2\u2ba6\u03f7\3\2\2\2\u2ba7\u2baa\5\u0410\u0209\2\u2ba8\u2baa"+
		"\5\u02fa\u017e\2\u2ba9\u2ba7\3\2\2\2\u2ba9\u2ba8\3\2\2\2\u2baa\u03f9\3"+
		"\2\2\2\u2bab\u2bae\5\u0410\u0209\2\u2bac\u2bae\5\u02fa\u017e\2\u2bad\u2bab"+
		"\3\2\2\2\u2bad\u2bac\3\2\2\2\u2bae\u03fb\3\2\2\2\u2baf\u2bb0\7<\2\2\u2bb0"+
		"\u2bb1\7\u028c\2\2\u2bb1\u2bb3\7\u0331\2\2\u2bb2\u2bb4\7\u034d\2\2\u2bb3"+
		"\u2bb2\3\2\2\2\u2bb3\u2bb4\3\2\2\2\u2bb4\u2bc1\3\2\2\2\u2bb5\u2bbc\7\u00bd"+
		"\2\2\u2bb6\u2bb7\7\u0299\2\2\u2bb7\u2bb8\7\u0338\2\2\u2bb8\u2bb9\t\3\2"+
		"\2\u2bb9\u2bba\7\u0121\2\2\u2bba\u2bbb\7\u0338\2\2\u2bbb\u2bbd\t\3\2\2"+
		"\u2bbc\u2bb6\3\2\2\2\u2bbc\u2bbd\3\2\2\2\u2bbd\u2bbf\3\2\2\2\u2bbe\u2bc0"+
		"\7\u00f9\2\2\u2bbf\u2bbe\3\2\2\2\u2bbf\u2bc0\3\2\2\2\u2bc0\u2bc2\3\2\2"+
		"\2\u2bc1\u2bb5\3\2\2\2\u2bc1\u2bc2\3\2\2\2\u2bc2\u03fd\3\2\2\2\u2bc3\u2bc5"+
		"\7\u00b9\2\2\u2bc4\u2bc3\3\2\2\2\u2bc4\u2bc5\3\2\2\2\u2bc5\u2bc6\3\2\2"+
		"\2\u2bc6\u2bc7\7\u034a\2\2\u2bc7\u2bc8\5\u0400\u0201\2\u2bc8\u2bce\7\u034b"+
		"\2\2\u2bc9\u2bcb\7\u034c\2\2\u2bca\u2bc9\3\2\2\2\u2bca\u2bcb\3\2\2\2\u2bcb"+
		"\u2bcc\3\2\2\2\u2bcc\u2bcd\7\u0241\2\2\u2bcd\u2bcf\5\u01ca\u00e6\2\u2bce"+
		"\u2bca\3\2\2\2\u2bce\u2bcf\3\2\2\2\u2bcf\u2bd1\3\2\2\2\u2bd0\u2bd2\7\u034d"+
		"\2\2\u2bd1\u2bd0\3\2\2\2\u2bd1\u2bd2\3\2\2\2\u2bd2\u03ff\3\2\2\2\u2bd3"+
		"\u2bd4\7\u02a7\2\2\u2bd4\u2bd5\7\u028c\2\2\u2bd5\u2bd6\7P\2\2\u2bd6\u2bd7"+
		"\t\3\2\2\u2bd7\u2bd8\7K\2\2\u2bd8\u2bda\5\u0402\u0202\2\u2bd9\u2bdb\7"+
		"\u034d\2\2\u2bda\u2bd9\3\2\2\2\u2bda\u2bdb\3\2\2\2\u2bdb\u0401\3\2\2\2"+
		"\u2bdc\u2bdd\5\u0410\u0209\2\u2bdd\u2bde\7\u0345\2\2\u2bde\u2bdf\5\u0410"+
		"\u0209\2\u2bdf\u2be0\7\u0345\2\2\u2be0\u2be1\5\u0410\u0209\2\u2be1\u2be4"+
		"\3\2\2\2\u2be2\u2be4\5\u0410\u0209\2\u2be3\u2bdc\3\2\2\2\u2be3\u2be2\3"+
		"\2\2\2\u2be4\u0403\3\2\2\2\u2be5\u2be6\7\u0218\2\2\u2be6\u2be7\7p\2\2"+
		"\u2be7\u2be8\7\u028c\2\2\u2be8\u2be9\t\3\2\2\u2be9\u2bea\7\u0198\2\2\u2bea"+
		"\u2beb\7\u024c\2\2\u2beb\u2bef\5\u02fa\u017e\2\u2bec\u2bed\7\u034a\2\2"+
		"\u2bed\u2bee\t\3\2\2\u2bee\u2bf0\7\u034b\2\2\u2bef\u2bec\3\2\2\2\u2bef"+
		"\u2bf0\3\2\2\2\u2bf0\u2bf2\3\2\2\2\u2bf1\u2bf3\7\u034d\2\2\u2bf2\u2bf1"+
		"\3\2\2\2\u2bf2\u2bf3\3\2\2\2\u2bf3\u0405\3\2\2\2\u2bf4\u2bf5\t\u008c\2"+
		"\2\u2bf5\u2bf6\7\u034a\2\2\u2bf6\u2bf7\7\u0189\2\2\u2bf7\u2c13\7\u034b"+
		"\2\2\u2bf8\u2bf9\5\u0410\u0209\2\u2bf9\u2bfa\7\u034a\2\2\u2bfa\u2bfb\7"+
		"\u0332\2\2\u2bfb\u2bfc\7\u034c\2\2\u2bfc\u2bfd\7\u0332\2\2\u2bfd\u2bfe"+
		"\7\u034b\2\2\u2bfe\u2c13\3\2\2\2\u2bff\u2c00\5\u0410\u0209\2\u2c00\u2c01"+
		"\7\u034a\2\2\u2c01\u2c02\7\u0332\2\2\u2c02\u2c03\7\u034b\2\2\u2c03\u2c13"+
		"\3\2\2\2\u2c04\u2c05\5\u0410\u0209\2\u2c05\u2c0b\7S\2\2\u2c06\u2c07\7"+
		"\u034a\2\2\u2c07\u2c08\7\u0332\2\2\u2c08\u2c09\7\u034c\2\2\u2c09\u2c0a"+
		"\7\u0332\2\2\u2c0a\u2c0c\7\u034b\2\2\u2c0b\u2c06\3\2\2\2\u2c0b\u2c0c\3"+
		"\2\2\2\u2c0c\u2c13\3\2\2\2\u2c0d\u2c0f\7\66\2\2\u2c0e\u2c10\7\177\2\2"+
		"\u2c0f\u2c0e\3\2\2\2\u2c0f\u2c10\3\2\2\2\u2c10\u2c13\3\2\2\2\u2c11\u2c13"+
		"\5\u0410\u0209\2\u2c12\u2bf4\3\2\2\2\u2c12\u2bf8\3\2\2\2\u2c12\u2bff\3"+
		"\2\2\2\u2c12\u2c04\3\2\2\2\u2c12\u2c0d\3\2\2\2\u2c12\u2c11\3\2\2\2\u2c13"+
		"\u0407\3\2\2\2\u2c14\u2c18\7k\2\2\u2c15\u2c18\7/\2\2\u2c16\u2c18\5\u040a"+
		"\u0206\2\u2c17\u2c14\3\2\2\2\u2c17\u2c15\3\2\2\2\u2c17\u2c16\3\2\2\2\u2c18"+
		"\u0409\3\2\2\2\u2c19\u2c29\7\u0334\2\2\u2c1a\u2c29\7\u0335\2\2\u2c1b\u2c1d"+
		"\5\u040c\u0207\2\u2c1c\u2c1b\3\2\2\2\u2c1c\u2c1d\3\2\2\2\u2c1d\u2c1e\3"+
		"\2\2\2\u2c1e\u2c29\7\u0332\2\2\u2c1f\u2c21\5\u040c\u0207\2\u2c20\u2c1f"+
		"\3\2\2\2\u2c20\u2c21\3\2\2\2\u2c21\u2c22\3\2\2\2\u2c22\u2c29\t\u008d\2"+
		"\2\u2c23\u2c25\5\u040c\u0207\2\u2c24\u2c23\3\2\2\2\u2c24\u2c25\3\2\2\2"+
		"\u2c25\u2c26\3\2\2\2\u2c26\u2c27\7\u0349\2\2\u2c27\u2c29\t\u008e\2\2\u2c28"+
		"\u2c19\3\2\2\2\u2c28\u2c1a\3\2\2\2\u2c28\u2c1c\3\2\2\2\u2c28\u2c20\3\2"+
		"\2\2\u2c28\u2c24\3\2\2\2\u2c29\u040b\3\2\2\2\u2c2a\u2c2b\tp\2\2\u2c2b"+
		"\u040d\3\2\2\2\u2c2c\u2c2d\t\u008f\2\2\u2c2d\u040f\3\2\2\2\u2c2e\u2c33"+
		"\7\u0333\2\2\u2c2f\u2c33\7\u032e\2\2\u2c30\u2c33\7\u0330\2\2\u2c31\u2c33"+
		"\5\u040e\u0208\2\u2c32\u2c2e\3\2\2\2\u2c32\u2c2f\3\2\2\2\u2c32\u2c30\3"+
		"\2\2\2\u2c32\u2c31\3\2\2\2\u2c33\u0411\3\2\2\2\u2c34\u2c35\7\u0333\2\2"+
		"\u2c35\u0413\3\2\2\2\u2c36\u2c46\7\u0338\2\2\u2c37\u2c46\7\u0339\2\2\u2c38"+
		"\u2c46\7\u033a\2\2\u2c39\u2c3a\7\u033a\2\2\u2c3a\u2c46\7\u0338\2\2\u2c3b"+
		"\u2c3c\7\u0339\2\2\u2c3c\u2c46\7\u0338\2\2\u2c3d\u2c3e\7\u033a\2\2\u2c3e"+
		"\u2c46\7\u0339\2\2\u2c3f\u2c40\7\u033b\2\2\u2c40\u2c46\7\u0338\2\2\u2c41"+
		"\u2c42\7\u033b\2\2\u2c42\u2c46\7\u0339\2\2\u2c43\u2c44\7\u033b\2\2\u2c44"+
		"\u2c46\7\u033a\2\2\u2c45\u2c36\3\2\2\2\u2c45\u2c37\3\2\2\2\u2c45\u2c38"+
		"\3\2\2\2\u2c45\u2c39\3\2\2\2\u2c45\u2c3b\3\2\2\2\u2c45\u2c3d\3\2\2\2\u2c45"+
		"\u2c3f\3\2\2\2\u2c45\u2c41\3\2\2\2\u2c45\u2c43\3\2\2\2\u2c46\u0415\3\2"+
		"\2\2\u2c47\u2c48\t\u0090\2\2\u2c48\u0417\3\2\2\2\u2c49\u2c4b\7\u0332\2"+
		"\2\u2c4a\u2c4c\t\u0091\2\2\u2c4b\u2c4a\3\2\2\2\u2c4b\u2c4c\3\2\2\2\u2c4c"+
		"\u0419\3\2\2\2\u0640\u041d\u0425\u042a\u042e\u0434\u0436\u043b\u0442\u0446"+
		"\u044c\u0450\u0454\u0458\u045c\u0460\u0464\u0468\u046b\u0472\u0511\u0518"+
		"\u0526\u052a\u052f\u0534\u0538\u053c\u0541\u0546\u0548\u054c\u054f\u0556"+
		"\u0559\u0562\u0565\u0570\u0575\u057a\u057f\u0584\u058a\u058e\u0591\u0595"+
		"\u0598\u059b\u05a2\u05a6\u05a8\u05ad\u05b3\u05b7\u05c4\u05ca\u05cd\u05d6"+
		"\u05d9\u05ed\u05f5\u05fa\u05fd\u0602\u0605\u060a\u0612\u0617\u061a\u061f"+
		"\u0625\u062a\u063b\u063e\u0641\u0644\u0649\u0652\u0661\u0672\u067d\u0683"+
		"\u0692\u06a1\u06aa\u06ae\u06b3\u06b9\u06bf\u06c2\u06c7\u06cc\u06d4\u06de"+
		"\u06f1\u06f9\u0706\u0708\u0714\u0716\u071d\u0726\u072c\u0735\u0744\u074e"+
		"\u0758\u0780\u0797\u07bb\u07cd\u07d0\u07d5\u07d8\u07dd\u07e0\u07e5\u07e8"+
		"\u07ed\u07f0\u07f8\u07fb\u0803\u0810\u081b\u0820\u0824\u082a\u0841\u084d"+
		"\u0858\u085d\u0861\u0867\u0869\u0876\u088d\u0894\u089d\u08a2\u08a5\u08aa"+
		"\u08ad\u08b2\u08b7\u08d3\u08db\u08e1\u08e8\u08ea\u08f7\u08fe\u090d\u091f"+
		"\u0922\u0924\u0929\u092d\u0930\u0932\u0938\u093b\u093d\u0943\u0945\u095b"+
		"\u0963\u096b\u096d\u096f\u0978\u098d\u099a\u09a9\u09ad\u09d0\u09d3\u09d8"+
		"\u09ef\u09f2\u09f7\u0a11\u0a1f\u0a24\u0a2c\u0a31\u0a38\u0a4d\u0a72\u0a77"+
		"\u0a8a\u0a96\u0a99\u0a9e\u0aa1\u0aa7\u0ab6\u0abb\u0ac3\u0ac6\u0acb\u0ad0"+
		"\u0ad3\u0aeb\u0af2\u0af7\u0afc\u0b01\u0b03\u0b0a\u0b17\u0b1d\u0b22\u0b2a"+
		"\u0b3a\u0b41\u0b46\u0b4b\u0b4e\u0b54\u0b5a\u0b5f\u0b64\u0b69\u0b6c\u0b72"+
		"\u0b78\u0b83\u0b86\u0b90\u0b96\u0b9a\u0b9e\u0bbb\u0bc8\u0bce\u0bd8\u0bdb"+
		"\u0bef\u0bf3\u0bf7\u0bfc\u0c0b\u0c12\u0c1b\u0c23\u0c26\u0c2b\u0c30\u0c38"+
		"\u0c3e\u0c42\u0c48\u0c4d\u0c51\u0c58\u0c60\u0c68\u0c71\u0c76\u0c7a\u0c7d"+
		"\u0c81\u0c87\u0c8c\u0c94\u0c9c\u0ca2\u0ca8\u0cab\u0cb0\u0cb3\u0cba\u0cbc"+
		"\u0cbf\u0cc5\u0cc8\u0ccd\u0cd0\u0cd5\u0cd8\u0cdd\u0ce0\u0ce5\u0ce8\u0ceb"+
		"\u0cee\u0cf5\u0cf9\u0d00\u0d07\u0d0d\u0d1a\u0d1e\u0d23\u0d2d\u0d36\u0d3a"+
		"\u0d46\u0d4c\u0d51\u0d53\u0d67\u0d6b\u0d73\u0d7c\u0d82\u0d88\u0d90\u0d92"+
		"\u0d9c\u0da0\u0da3\u0da7\u0dac\u0db2\u0db5\u0db9\u0dc1\u0dc3\u0dc6\u0dce"+
		"\u0dd6\u0ddd\u0de4\u0de6\u0de8\u0ded\u0df3\u0df6\u0df8\u0dfa\u0dfd\u0e02"+
		"\u0e05\u0e0a\u0e19\u0e20\u0e27\u0e29\u0e2b\u0e30\u0e36\u0e39\u0e3b\u0e3d"+
		"\u0e40\u0e45\u0e48\u0e4d\u0e5a\u0e5f\u0e68\u0e6d\u0e73\u0e77\u0e7b\u0e8c"+
		"\u0e8e\u0e98\u0e9d\u0e9f\u0ea3\u0ea9\u0eb1\u0eb6\u0eb9\u0ec1\u0ec4\u0ec9"+
		"\u0ece\u0ed3\u0ed8\u0edd\u0ee2\u0ee6\u0eeb\u0ef6\u0efb\u0efe\u0f01\u0f06"+
		"\u0f09\u0f0e\u0f11\u0f16\u0f19\u0f1e\u0f21\u0f26\u0f29\u0f2e\u0f34\u0f39"+
		"\u0f3c\u0f41\u0f48\u0f4a\u0f50\u0f59\u0f5e\u0f60\u0f6c\u0f72\u0f7e\u0f81"+
		"\u0f86\u0f88\u0f92\u0f97\u0f99\u0f9d\u0fa3\u0fb5\u0fb7\u0fc6\u0fd8\u0fe0"+
		"\u0fea\u0ffa\u100f\u101a\u1020\u1029\u1032\u1038\u1041\u1046\u1049\u104e"+
		"\u1051\u1056\u1059\u1061\u1067\u106b\u1072\u1078\u107c\u107f\u1081\u1084"+
		"\u1089\u108c\u1091\u1094\u1099\u109c\u10a1\u10a4\u10b3\u10be\u10ca\u10d1"+
		"\u10d8\u10dc\u10e1\u10e4\u10e9\u10ec\u10f1\u10f4\u10fd\u1104\u1113\u1117"+
		"\u111c\u1127\u1131\u113d\u1143\u1145\u114d\u1156\u115b\u1166\u1169\u116d"+
		"\u1175\u1179\u117d\u1185\u118a\u1192\u1197\u119b\u119d\u11a2\u11ab\u11ae"+
		"\u11b3\u11ba\u11c0\u11c2\u11c7\u11cd\u11d3\u11d8\u11de\u11e5\u11ea\u11ef"+
		"\u11f4\u11f7\u11fb\u11ff\u1203\u1207\u120c\u1210\u1214\u121e\u1224\u122b"+
		"\u122e\u1234\u123a\u123f\u1241\u1247\u1249\u124e\u1254\u125a\u125f\u1261"+
		"\u1265\u1269\u126c\u127a\u127f\u1283\u1290\u1293\u1295\u129d\u12a7\u12ad"+
		"\u12b4\u12b7\u12bd\u12c3\u12c8\u12ca\u12d0\u12d2\u12d7\u12dd\u12e3\u12e9"+
		"\u12ee\u12f0\u12f4\u12f8\u12fb\u1309\u130e\u1312\u131f\u1322\u1324\u132c"+
		"\u1337\u1340\u1349\u1354\u135d\u1366\u1372\u1376\u137b\u137d\u137f\u1384"+
		"\u1388\u138d\u138f\u1391\u139f\u13a4\u13ba\u13d0\u13d5\u13e2\u13ea\u13fe"+
		"\u1401\u1407\u140f\u1416\u141b\u141f\u1423\u1426\u142d\u143f\u1441\u1455"+
		"\u145d\u1462\u1474\u1483\u1485\u148c\u1493\u1498\u149d\u14a3\u14a8\u14aa"+
		"\u14b1\u14b7\u14bd\u14c0\u14c6\u14d0\u14d3\u14da\u14dd\u14e2\u14e4\u14ec"+
		"\u14f0\u14f6\u14fb\u14fd\u1500\u1507\u150d\u1514\u1517\u151d\u1522\u1524"+
		"\u1527\u152f\u1535\u153c\u153f\u1545\u154a\u154c\u1554\u155c\u1562\u1567"+
		"\u1569\u1573\u1578\u1582\u1588\u1594\u1596\u159d\u15a3\u15a9\u15af\u15b4"+
		"\u15b6\u15bd\u15c5\u15cb\u15d9\u15db\u15de\u15e3\u15e5\u15f1\u15f7\u1605"+
		"\u1607\u160a\u160f\u1612\u1617\u1619\u1622\u1629\u162f\u1632\u1637\u163e"+
		"\u1640\u1646\u1648\u1650\u1652\u1658\u165a\u1660\u1662\u1669\u166c\u166e"+
		"\u1671\u1675\u1677\u1680\u1686\u168a\u1692\u1699\u169f\u16a1\u16ac\u16b1"+
		"\u16b7\u16bb\u16c5\u16cd\u16d9\u16dc\u16e4\u16e6\u16e9\u16ed\u16f0\u16f9"+
		"\u16fc\u16ff\u1707\u170d\u1714\u1718\u1723\u1729\u172b\u1734\u1738\u173f"+
		"\u1744\u1747\u174f\u1753\u1756\u175a\u175d\u1761\u1768\u176c\u176e\u1770"+
		"\u1773\u1776\u1779\u177f\u1782\u178a\u178c\u178f\u1793\u1796\u179c\u179f"+
		"\u17a3\u17a6\u17a9\u17b0\u17b3\u17ba\u17c0\u17c4\u17ce\u17d1\u17d4\u17da"+
		"\u17dd\u17e0\u17e3\u17e7\u17ea\u17f2\u17f4\u17f8\u17fb\u1803\u1807\u180b"+
		"\u1812\u1816\u1818\u181a\u181d\u1820\u1823\u182b\u1831\u1837\u1839\u183d"+
		"\u1840\u1845\u184a\u184d\u1855\u1859\u1860\u1863\u186c\u186f\u1873\u187b"+
		"\u187e\u1882\u1885\u1893\u1897\u189a\u189e\u18a1\u18a5\u18b5\u18b7\u18b9"+
		"\u18bc\u18bf\u18c4\u18c7\u18cd\u18d0\u18d7\u18db\u18dd\u18e5\u18e8\u18ec"+
		"\u18f2\u18f7\u18fc\u18ff\u190b\u190e\u1914\u191b\u1920\u1925\u192b\u192f"+
		"\u1936\u1939\u1941\u1949\u194c\u1954\u195b\u1962\u1965\u196f\u1976\u197b"+
		"\u197e\u1988\u198b\u198e\u1996\u19a1\u19a4\u19a7\u19ad\u19b2\u19b6\u19c0"+
		"\u19c3\u19c6\u19cc\u19d2\u19d8\u19dd\u19e1\u19e5\u19e8\u19ed\u19fb\u1a0b"+
		"\u1a0f\u1a15\u1a17\u1a1a\u1a1e\u1a23\u1a28\u1a30\u1a35\u1a39\u1a3e\u1a43"+
		"\u1a49\u1a4e\u1a51\u1a56\u1a5c\u1a60\u1a69\u1a73\u1a76\u1a7f\u1a87\u1a8a"+
		"\u1a91\u1a94\u1ac2\u1ac6\u1ac9\u1acf\u1adb\u1add\u1ae0\u1af9\u1b04\u1b0c"+
		"\u1b17\u1b1c\u1b1f\u1b27\u1b31\u1b38\u1b3f\u1b41\u1b4d\u1b58\u1b5c\u1b61"+
		"\u1b64\u1b66\u1b69\u1b75\u1b77\u1b79\u1b7c\u1b81\u1b84\u1b89\u1b93\u1b97"+
		"\u1b9c\u1b9f\u1ba1\u1ba4\u1bb0\u1bb2\u1bb4\u1bb7\u1bbd\u1bc7\u1bdb\u1be1"+
		"\u1bfa\u1bfc\u1c16\u1c1c\u1c27\u1c2f\u1c32\u1c40\u1c48\u1c4f\u1c66\u1c73"+
		"\u1c79\u1c80\u1c88\u1c8b\u1c8e\u1c97\u1ca1\u1ca8\u1cac\u1cb0\u1cb6\u1cbd"+
		"\u1cc1\u1cc7\u1cce\u1cd5\u1cd8\u1cde\u1ce5\u1ce9\u1cee\u1cf3\u1cf8\u1d00"+
		"\u1d04\u1d0a\u1d11\u1d15\u1d1e\u1d26\u1d2c\u1d32\u1d43\u1d47\u1d4f\u1d53"+
		"\u1d5b\u1d5f\u1d64\u1d68\u1d72\u1d77\u1d79\u1d80\u1d84\u1d88\u1d8c\u1d8f"+
		"\u1d93\u1d99\u1d9d\u1d9f\u1da6\u1dad\u1db0\u1db3\u1dba\u1dbf\u1dc4\u1dc8"+
		"\u1dce\u1dd2\u1dd4\u1dd9\u1dde\u1de2\u1de7\u1ded\u1df1\u1df5\u1df7\u1dfb"+
		"\u1dff\u1e03\u1e07\u1e0d\u1e10\u1e16\u1e1a\u1e1e\u1e24\u1e2a\u1e2c\u1e2f"+
		"\u1e33\u1e37\u1e3b\u1e41\u1e44\u1e4a\u1e50\u1e53\u1e59\u1e5c\u1e62\u1e65"+
		"\u1e69\u1e6d\u1e71\u1e76\u1e79\u1e7d\u1e81\u1e92\u1e94\u1e96\u1e99\u1ea0"+
		"\u1ea5\u1ea9\u1eaf\u1eb3\u1eb5\u1eba\u1ebf\u1ec3\u1ec8\u1ece\u1ed2\u1ed6"+
		"\u1ed8\u1edc\u1ee0\u1ee4\u1ee8\u1eee\u1ef1\u1ef7\u1efb\u1eff\u1f05\u1f0b"+
		"\u1f0d\u1f10\u1f14\u1f18\u1f1c\u1f22\u1f25\u1f2b\u1f31\u1f34\u1f3a\u1f3d"+
		"\u1f43\u1f46\u1f4a\u1f4e\u1f52\u1f57\u1f5a\u1f5e\u1f62\u1f68\u1f6b\u1f6f"+
		"\u1f80\u1f82\u1f84\u1f87\u1f95\u1f9b\u1fa3\u1faa\u1fac\u1faf\u1fd0\u1fd4"+
		"\u1fd8\u1fdf\u1fe8\u1ff0\u1ff3\u1ff6\u1ffa\u1ffe\u2001\u2009\u200e\u2013"+
		"\u2015\u201c\u2024\u2027\u2032\u2037\u203d\u2042\u2049\u204b\u204f\u2057"+
		"\u205d\u2061\u2064\u206d\u2070\u2076\u207b\u2082\u2087\u208f\u2094\u20a0"+
		"\u20a2\u20ad\u20b4\u20be\u20d5\u20e2\u20f2\u20f7\u20fe\u2101\u2105\u2107"+
		"\u2118\u2127\u212f\u2138\u2140\u2149\u2154\u2158\u215a\u215c\u2162\u2167"+
		"\u216e\u217b\u217d\u217f\u2182\u2185\u218c\u218f\u2195\u219a\u219c\u219f"+
		"\u21a5\u21ad\u21af\u21b2\u21b6\u21b9\u21c3\u21c6\u21ca\u21cd\u21d3\u21d6"+
		"\u21d8\u21dc\u21e0\u21e5\u21e9\u21ee\u21f3\u21fd\u2200\u2203\u220b\u220f"+
		"\u2212\u2216\u221b\u2223\u2228\u222e\u2233\u223c\u223f\u2242\u224d\u2252"+
		"\u225d\u2262\u2268\u226f\u2271\u2275\u2278\u227c\u2280\u2288\u228d\u228f"+
		"\u2292\u2297\u22a0\u22a4\u22a9\u22ac\u22af\u22b5\u22bd\u22c5\u22c8\u22cb"+
		"\u22cf\u22d4\u22d7\u22dd\u22e1\u22e7\u22ef\u22f5\u22f7\u22fa\u2309\u230c"+
		"\u230f\u2311\u231c\u2327\u2330\u2337\u233e\u2348\u234a\u234c\u234f\u2352"+
		"\u235d\u235f\u2361\u2364\u2369\u2374\u237d\u2380\u2383\u238c\u238f\u2392"+
		"\u2399\u239c\u23a3\u23a9\u23b8\u23bb\u23c2\u23c9\u23cd\u23d7\u23e5\u23ec"+
		"\u23ee\u23fa\u2401\u2405\u240d\u2411\u2415\u241b\u2425\u242f\u2439\u2441"+
		"\u244d\u2453\u2457\u2461\u2465\u2469\u2473\u247a\u2480\u2487\u248e\u24a5"+
		"\u24b1\u24b8\u24c0\u24c7\u24cd\u24d4\u24d8\u24dd\u24df\u24e3\u24e7\u24ee"+
		"\u24f2\u24f5\u24fa\u24fe\u2502\u2507\u250e\u2511\u2515\u251a\u251e\u2527"+
		"\u252e\u2537\u2543\u2545\u254f\u2552\u2557\u2560\u2562\u2564\u2569\u256b"+
		"\u2573\u2578\u2580\u2585\u258b\u258d\u2597\u2599\u259d\u25a1\u25a3\u25ac"+
		"\u25ae\u25b3\u25be\u25e0\u25f0\u25f7\u25f9\u2600\u2609\u2611\u261b\u261e"+
		"\u2625\u262c\u262f\u2631\u2639\u263b\u2643\u2647\u264e\u2656\u265c\u2661"+
		"\u2665\u2669\u2670\u2672\u2676\u267b\u267d\u2681\u2686\u2688\u268f\u2691"+
		"\u2699\u269b\u26a4\u26ac\u26af\u26b6\u26be\u26c1\u26c8\u26ce\u26d5\u26db"+
		"\u26df\u26f8\u26fb\u26ff\u2701\u2704\u2732\u2737\u274b\u274f\u2753\u2763"+
		"\u276b\u2771\u277e\u2784\u278b\u278f\u279e\u27a4\u27b7\u27c2\u27cf\u27e0"+
		"\u27e6\u27ed\u27f1\u280c\u2846\u284a\u2883\u2885\u288b\u2895\u28a8\u28b8"+
		"\u28c8\u28d8\u28eb\u28f0\u28f6\u28f9\u28fe\u2903\u290c\u2911\u2917\u2920"+
		"\u292a\u292d\u293b\u2941\u294a\u294e\u2956\u295d\u296a\u2972\u297f\u2986"+
		"\u298c\u2990\u29a1\u29b0\u29b2\u29bf\u29cf\u29d7\u29db\u29de\u29e7\u29ea"+
		"\u29ed\u29fa\u29fe\u2a06\u2a0c\u2a14\u2a1b\u2a21\u2a30\u2a39\u2a3f\u2a45"+
		"\u2a48\u2a4c\u2a53\u2a5b\u2a5e\u2a64\u2a6a\u2a6c\u2a72\u2a75\u2a77\u2a7d"+
		"\u2a7f\u2a8d\u2a94\u2a9d\u2aa4\u2ab0\u2ab7\u2abe\u2ac5\u2acb\u2ad2\u2ad5"+
		"\u2ada\u2ae1\u2ae6\u2aea\u2aef\u2af2\u2af6\u2afa\u2aff\u2b03\u2b06\u2b0a"+
		"\u2b0e\u2b13\u2b17\u2b1c\u2b21\u2b25\u2b2a\u2b2e\u2b36\u2b3a\u2b3f\u2b49"+
		"\u2b4e\u2b55\u2b5e\u2b62\u2b64\u2b6b\u2b77\u2b7c\u2b87\u2b91\u2b93\u2b99"+
		"\u2b9b\u2ba0\u2ba2\u2ba5\u2ba9\u2bad\u2bb3\u2bbc\u2bbf\u2bc1\u2bc4\u2bca"+
		"\u2bce\u2bd1\u2bda\u2be3\u2bef\u2bf2\u2c0b\u2c0f\u2c12\u2c17\u2c1c\u2c20"+
		"\u2c24\u2c28\u2c32\u2c45\u2c4b";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
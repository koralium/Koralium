<#
    Session["Count"] = 50;
#>
<#@ template hostspecific="true" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// <auto-generated />

using System;

namespace Koralium.SqlToExpression.Generated
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Major Code Smell", "S1118:Utility classes should not have public constructors", Justification = "Used for empty AnonType with no properties")]
    internal class AnonType
    {
        private static Type[] anonTypes = new Type[]
            {
                typeof(AnonType),
<#
    int count = (int)Session["Count"];

    for (int i = 1; i < count; i++)
    {
#>
                typeof(AnonType<<#= GenerateCommas(i - 1) #>>)<#= PrintComma(i, count) #>
<#
    }
#>
            };

        public static Type GetAnonType(params Type[] propertyTypes)
        {
            return anonTypes[propertyTypes.Length].MakeGenericType(propertyTypes);
        }
    }

<#
   
    
    //CREATE CLASSES
    for (int i = 1; i < count; i++) 
    {
        
#>
    internal class AnonType<<#= GenericParameters(i) #>> 
    {
<#
    //CREATE PARAMETERS
    for (int p = 0; p < i; p++) 
    {
#>
        public <#= GenericName(p) #> <#= PropertyName(p) #> { get; set; }
<#
    }
#>

        public override bool Equals(object obj)
        {
            if (obj is AnonType<<#= GenericParameters(i) #>> o)
            {
                return
<#
    for (int p = 0; p < i; p++)
    {
        if ((p + 1) < i) {
#>
                    Equals(<#= PropertyName(p) #>, o.<#= PropertyName(p) #>) &&
<#  
        }
        else 
        {
#>
                    Equals(<#= PropertyName(p) #>, o.<#= PropertyName(p) #>);
<#
        }
    }
#>
            }
            return false;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(
<#
    int maxCombine = Math.Min(8, i);
    for (int p = 0; p < maxCombine; p++)
    {
#>
                <#= PropertyName(p) #><#= PrintComma(p, maxCombine) #>
<#
    }
#>
            );
        }
    }

<#
    }
#>
}

<#+

    string GenerateCommas(int c) {
        string output = "";

        for (int i = 0; i < c; i++) {
            output += ",";
        }

        return output;
    }

    string PrintComma(int i, int max) {
        if ((i + 1) < max) {
            return ",";
        }
        return "";
    }

    string PropertyName(int i) {
        return $"P{i}";
    }

    string GenericName(int i) {
        return $"P_{i}";
    }

    string ParameterList(int c, int padding = 0) {
         List<string> parameters = new List<string>();

        for(int i = 0; i < c; i++) {
            parameters.Add(PropertyName(i));
        }

        string pad = "";

        for (int i = 0; i < padding; i++) {
            pad += " ";
        }

        return string.Join($"{pad},\r\n", parameters);
    }

    string GenericParameters(int c) {
        List<string> parameters = new List<string>();

        for(int i = 0; i < c; i++) {
            parameters.Add(GenericName(i));
        }

        return string.Join(", ", parameters);
    }
#>

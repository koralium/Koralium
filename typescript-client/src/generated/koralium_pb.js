/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.ArrayBlock', null, global);
goog.exportSymbol('proto.Block', null, global);
goog.exportSymbol('proto.BoolBlock', null, global);
goog.exportSymbol('proto.ColumnMetadata', null, global);
goog.exportSymbol('proto.Columns', null, global);
goog.exportSymbol('proto.DoubleBlock', null, global);
goog.exportSymbol('proto.FloatBlock', null, global);
goog.exportSymbol('proto.IndexMetadata', null, global);
goog.exportSymbol('proto.IndexRequest', null, global);
goog.exportSymbol('proto.Int32Block', null, global);
goog.exportSymbol('proto.Int64Block', null, global);
goog.exportSymbol('proto.KoraliumType', null, global);
goog.exportSymbol('proto.ObjectColumn', null, global);
goog.exportSymbol('proto.ObjectRefBlock', null, global);
goog.exportSymbol('proto.Objects', null, global);
goog.exportSymbol('proto.Page', null, global);
goog.exportSymbol('proto.Parameter', null, global);
goog.exportSymbol('proto.QueryRequest', null, global);
goog.exportSymbol('proto.Scalar', null, global);
goog.exportSymbol('proto.StringColumn', null, global);
goog.exportSymbol('proto.StringRefBlock', null, global);
goog.exportSymbol('proto.TableMetadata', null, global);
goog.exportSymbol('proto.TableMetadataResponse', null, global);
goog.exportSymbol('proto.TimestampBlock', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Page = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Page.repeatedFields_, null);
};
goog.inherits(proto.Page, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Page.displayName = 'proto.Page';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Page.repeatedFields_ = [2,3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Page.prototype.toObject = function(opt_includeInstance) {
  return proto.Page.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Page} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Page.toObject = function(includeInstance, msg) {
  var f, obj = {
    columns: (f = msg.getColumns()) && proto.Columns.toObject(includeInstance, f),
    stringsList: jspb.Message.toObjectList(msg.getStringsList(),
    proto.StringColumn.toObject, includeInstance),
    objectsList: jspb.Message.toObjectList(msg.getObjectsList(),
    proto.ObjectColumn.toObject, includeInstance),
    rowcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    metadataList: jspb.Message.toObjectList(msg.getMetadataList(),
    proto.ColumnMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Page}
 */
proto.Page.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Page;
  return proto.Page.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Page} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Page}
 */
proto.Page.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Columns;
      reader.readMessage(value,proto.Columns.deserializeBinaryFromReader);
      msg.setColumns(value);
      break;
    case 2:
      var value = new proto.StringColumn;
      reader.readMessage(value,proto.StringColumn.deserializeBinaryFromReader);
      msg.addStrings(value);
      break;
    case 3:
      var value = new proto.ObjectColumn;
      reader.readMessage(value,proto.ObjectColumn.deserializeBinaryFromReader);
      msg.addObjects(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRowcount(value);
      break;
    case 5:
      var value = new proto.ColumnMetadata;
      reader.readMessage(value,proto.ColumnMetadata.deserializeBinaryFromReader);
      msg.addMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Page.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Page.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Page} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Page.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumns();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Columns.serializeBinaryToWriter
    );
  }
  f = message.getStringsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.StringColumn.serializeBinaryToWriter
    );
  }
  f = message.getObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ObjectColumn.serializeBinaryToWriter
    );
  }
  f = message.getRowcount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getMetadataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ColumnMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional Columns columns = 1;
 * @return {?proto.Columns}
 */
proto.Page.prototype.getColumns = function() {
  return /** @type{?proto.Columns} */ (
    jspb.Message.getWrapperField(this, proto.Columns, 1));
};


/** @param {?proto.Columns|undefined} value */
proto.Page.prototype.setColumns = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Page.prototype.clearColumns = function() {
  this.setColumns(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Page.prototype.hasColumns = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated StringColumn strings = 2;
 * @return {!Array<!proto.StringColumn>}
 */
proto.Page.prototype.getStringsList = function() {
  return /** @type{!Array<!proto.StringColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.StringColumn, 2));
};


/** @param {!Array<!proto.StringColumn>} value */
proto.Page.prototype.setStringsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.StringColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StringColumn}
 */
proto.Page.prototype.addStrings = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.StringColumn, opt_index);
};


proto.Page.prototype.clearStringsList = function() {
  this.setStringsList([]);
};


/**
 * repeated ObjectColumn objects = 3;
 * @return {!Array<!proto.ObjectColumn>}
 */
proto.Page.prototype.getObjectsList = function() {
  return /** @type{!Array<!proto.ObjectColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ObjectColumn, 3));
};


/** @param {!Array<!proto.ObjectColumn>} value */
proto.Page.prototype.setObjectsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ObjectColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ObjectColumn}
 */
proto.Page.prototype.addObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ObjectColumn, opt_index);
};


proto.Page.prototype.clearObjectsList = function() {
  this.setObjectsList([]);
};


/**
 * optional uint32 rowCount = 4;
 * @return {number}
 */
proto.Page.prototype.getRowcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Page.prototype.setRowcount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated ColumnMetadata metadata = 5;
 * @return {!Array<!proto.ColumnMetadata>}
 */
proto.Page.prototype.getMetadataList = function() {
  return /** @type{!Array<!proto.ColumnMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ColumnMetadata, 5));
};


/** @param {!Array<!proto.ColumnMetadata>} value */
proto.Page.prototype.setMetadataList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ColumnMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ColumnMetadata}
 */
proto.Page.prototype.addMetadata = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ColumnMetadata, opt_index);
};


proto.Page.prototype.clearMetadataList = function() {
  this.setMetadataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Columns = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Columns.repeatedFields_, null);
};
goog.inherits(proto.Columns, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Columns.displayName = 'proto.Columns';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Columns.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Columns.prototype.toObject = function(opt_includeInstance) {
  return proto.Columns.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Columns} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Columns.toObject = function(includeInstance, msg) {
  var f, obj = {
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Columns}
 */
proto.Columns.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Columns;
  return proto.Columns.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Columns} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Columns}
 */
proto.Columns.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Block;
      reader.readMessage(value,proto.Block.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Columns.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Columns.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Columns} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Columns.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Block.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Block blocks = 1;
 * @return {!Array<!proto.Block>}
 */
proto.Columns.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Block, 1));
};


/** @param {!Array<!proto.Block>} value */
proto.Columns.prototype.setBlocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Block}
 */
proto.Columns.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Block, opt_index);
};


proto.Columns.prototype.clearBlocksList = function() {
  this.setBlocksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Block.repeatedFields_, proto.Block.oneofGroups_);
};
goog.inherits(proto.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Block.displayName = 'proto.Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Block.repeatedFields_ = [1];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Block.oneofGroups_ = [[2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.Block.BlockCase = {
  BLOCK_NOT_SET: 0,
  DOUBLES: 2,
  FLOATS: 3,
  INTS: 4,
  LONGS: 5,
  BOOLS: 6,
  TIMESTAMPS: 7,
  OBJECTS: 8,
  STRINGS: 9,
  ARRAYS: 10
};

/**
 * @return {proto.Block.BlockCase}
 */
proto.Block.prototype.getBlockCase = function() {
  return /** @type {proto.Block.BlockCase} */(jspb.Message.computeOneofCase(this, proto.Block.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    nullsList: jspb.Message.getRepeatedField(msg, 1),
    doubles: (f = msg.getDoubles()) && proto.DoubleBlock.toObject(includeInstance, f),
    floats: (f = msg.getFloats()) && proto.FloatBlock.toObject(includeInstance, f),
    ints: (f = msg.getInts()) && proto.Int32Block.toObject(includeInstance, f),
    longs: (f = msg.getLongs()) && proto.Int64Block.toObject(includeInstance, f),
    bools: (f = msg.getBools()) && proto.BoolBlock.toObject(includeInstance, f),
    timestamps: (f = msg.getTimestamps()) && proto.TimestampBlock.toObject(includeInstance, f),
    objects: (f = msg.getObjects()) && proto.ObjectRefBlock.toObject(includeInstance, f),
    strings: (f = msg.getStrings()) && proto.StringRefBlock.toObject(includeInstance, f),
    arrays: (f = msg.getArrays()) && proto.ArrayBlock.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Block;
  return proto.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Block}
 */
proto.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setNullsList(value);
      break;
    case 2:
      var value = new proto.DoubleBlock;
      reader.readMessage(value,proto.DoubleBlock.deserializeBinaryFromReader);
      msg.setDoubles(value);
      break;
    case 3:
      var value = new proto.FloatBlock;
      reader.readMessage(value,proto.FloatBlock.deserializeBinaryFromReader);
      msg.setFloats(value);
      break;
    case 4:
      var value = new proto.Int32Block;
      reader.readMessage(value,proto.Int32Block.deserializeBinaryFromReader);
      msg.setInts(value);
      break;
    case 5:
      var value = new proto.Int64Block;
      reader.readMessage(value,proto.Int64Block.deserializeBinaryFromReader);
      msg.setLongs(value);
      break;
    case 6:
      var value = new proto.BoolBlock;
      reader.readMessage(value,proto.BoolBlock.deserializeBinaryFromReader);
      msg.setBools(value);
      break;
    case 7:
      var value = new proto.TimestampBlock;
      reader.readMessage(value,proto.TimestampBlock.deserializeBinaryFromReader);
      msg.setTimestamps(value);
      break;
    case 8:
      var value = new proto.ObjectRefBlock;
      reader.readMessage(value,proto.ObjectRefBlock.deserializeBinaryFromReader);
      msg.setObjects(value);
      break;
    case 9:
      var value = new proto.StringRefBlock;
      reader.readMessage(value,proto.StringRefBlock.deserializeBinaryFromReader);
      msg.setStrings(value);
      break;
    case 10:
      var value = new proto.ArrayBlock;
      reader.readMessage(value,proto.ArrayBlock.deserializeBinaryFromReader);
      msg.setArrays(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNullsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getDoubles();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DoubleBlock.serializeBinaryToWriter
    );
  }
  f = message.getFloats();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.FloatBlock.serializeBinaryToWriter
    );
  }
  f = message.getInts();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Int32Block.serializeBinaryToWriter
    );
  }
  f = message.getLongs();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Int64Block.serializeBinaryToWriter
    );
  }
  f = message.getBools();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.BoolBlock.serializeBinaryToWriter
    );
  }
  f = message.getTimestamps();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.TimestampBlock.serializeBinaryToWriter
    );
  }
  f = message.getObjects();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.ObjectRefBlock.serializeBinaryToWriter
    );
  }
  f = message.getStrings();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.StringRefBlock.serializeBinaryToWriter
    );
  }
  f = message.getArrays();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ArrayBlock.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 nulls = 1;
 * @return {!Array<number>}
 */
proto.Block.prototype.getNullsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.Block.prototype.setNullsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.Block.prototype.addNulls = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Block.prototype.clearNullsList = function() {
  this.setNullsList([]);
};


/**
 * optional DoubleBlock doubles = 2;
 * @return {?proto.DoubleBlock}
 */
proto.Block.prototype.getDoubles = function() {
  return /** @type{?proto.DoubleBlock} */ (
    jspb.Message.getWrapperField(this, proto.DoubleBlock, 2));
};


/** @param {?proto.DoubleBlock|undefined} value */
proto.Block.prototype.setDoubles = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Block.oneofGroups_[0], value);
};


proto.Block.prototype.clearDoubles = function() {
  this.setDoubles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Block.prototype.hasDoubles = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FloatBlock floats = 3;
 * @return {?proto.FloatBlock}
 */
proto.Block.prototype.getFloats = function() {
  return /** @type{?proto.FloatBlock} */ (
    jspb.Message.getWrapperField(this, proto.FloatBlock, 3));
};


/** @param {?proto.FloatBlock|undefined} value */
proto.Block.prototype.setFloats = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.Block.oneofGroups_[0], value);
};


proto.Block.prototype.clearFloats = function() {
  this.setFloats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Block.prototype.hasFloats = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Int32Block ints = 4;
 * @return {?proto.Int32Block}
 */
proto.Block.prototype.getInts = function() {
  return /** @type{?proto.Int32Block} */ (
    jspb.Message.getWrapperField(this, proto.Int32Block, 4));
};


/** @param {?proto.Int32Block|undefined} value */
proto.Block.prototype.setInts = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.Block.oneofGroups_[0], value);
};


proto.Block.prototype.clearInts = function() {
  this.setInts(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Block.prototype.hasInts = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Int64Block longs = 5;
 * @return {?proto.Int64Block}
 */
proto.Block.prototype.getLongs = function() {
  return /** @type{?proto.Int64Block} */ (
    jspb.Message.getWrapperField(this, proto.Int64Block, 5));
};


/** @param {?proto.Int64Block|undefined} value */
proto.Block.prototype.setLongs = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.Block.oneofGroups_[0], value);
};


proto.Block.prototype.clearLongs = function() {
  this.setLongs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Block.prototype.hasLongs = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BoolBlock bools = 6;
 * @return {?proto.BoolBlock}
 */
proto.Block.prototype.getBools = function() {
  return /** @type{?proto.BoolBlock} */ (
    jspb.Message.getWrapperField(this, proto.BoolBlock, 6));
};


/** @param {?proto.BoolBlock|undefined} value */
proto.Block.prototype.setBools = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.Block.oneofGroups_[0], value);
};


proto.Block.prototype.clearBools = function() {
  this.setBools(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Block.prototype.hasBools = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional TimestampBlock timestamps = 7;
 * @return {?proto.TimestampBlock}
 */
proto.Block.prototype.getTimestamps = function() {
  return /** @type{?proto.TimestampBlock} */ (
    jspb.Message.getWrapperField(this, proto.TimestampBlock, 7));
};


/** @param {?proto.TimestampBlock|undefined} value */
proto.Block.prototype.setTimestamps = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.Block.oneofGroups_[0], value);
};


proto.Block.prototype.clearTimestamps = function() {
  this.setTimestamps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Block.prototype.hasTimestamps = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional ObjectRefBlock objects = 8;
 * @return {?proto.ObjectRefBlock}
 */
proto.Block.prototype.getObjects = function() {
  return /** @type{?proto.ObjectRefBlock} */ (
    jspb.Message.getWrapperField(this, proto.ObjectRefBlock, 8));
};


/** @param {?proto.ObjectRefBlock|undefined} value */
proto.Block.prototype.setObjects = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.Block.oneofGroups_[0], value);
};


proto.Block.prototype.clearObjects = function() {
  this.setObjects(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Block.prototype.hasObjects = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional StringRefBlock strings = 9;
 * @return {?proto.StringRefBlock}
 */
proto.Block.prototype.getStrings = function() {
  return /** @type{?proto.StringRefBlock} */ (
    jspb.Message.getWrapperField(this, proto.StringRefBlock, 9));
};


/** @param {?proto.StringRefBlock|undefined} value */
proto.Block.prototype.setStrings = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.Block.oneofGroups_[0], value);
};


proto.Block.prototype.clearStrings = function() {
  this.setStrings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Block.prototype.hasStrings = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ArrayBlock arrays = 10;
 * @return {?proto.ArrayBlock}
 */
proto.Block.prototype.getArrays = function() {
  return /** @type{?proto.ArrayBlock} */ (
    jspb.Message.getWrapperField(this, proto.ArrayBlock, 10));
};


/** @param {?proto.ArrayBlock|undefined} value */
proto.Block.prototype.setArrays = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.Block.oneofGroups_[0], value);
};


proto.Block.prototype.clearArrays = function() {
  this.setArrays(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Block.prototype.hasArrays = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DoubleBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DoubleBlock.repeatedFields_, null);
};
goog.inherits(proto.DoubleBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DoubleBlock.displayName = 'proto.DoubleBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DoubleBlock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DoubleBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.DoubleBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DoubleBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DoubleBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DoubleBlock}
 */
proto.DoubleBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DoubleBlock;
  return proto.DoubleBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DoubleBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DoubleBlock}
 */
proto.DoubleBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedDouble());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DoubleBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DoubleBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DoubleBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DoubleBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
};


/**
 * repeated double values = 1;
 * @return {!Array<number>}
 */
proto.DoubleBlock.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.DoubleBlock.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.DoubleBlock.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.DoubleBlock.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.FloatBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.FloatBlock.repeatedFields_, null);
};
goog.inherits(proto.FloatBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.FloatBlock.displayName = 'proto.FloatBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.FloatBlock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.FloatBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.FloatBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.FloatBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FloatBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedFloatingPointField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.FloatBlock}
 */
proto.FloatBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.FloatBlock;
  return proto.FloatBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.FloatBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.FloatBlock}
 */
proto.FloatBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.FloatBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.FloatBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.FloatBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.FloatBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float values = 1;
 * @return {!Array<number>}
 */
proto.FloatBlock.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/** @param {!Array<number>} value */
proto.FloatBlock.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.FloatBlock.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.FloatBlock.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Int32Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Int32Block.repeatedFields_, null);
};
goog.inherits(proto.Int32Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Int32Block.displayName = 'proto.Int32Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Int32Block.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Int32Block.prototype.toObject = function(opt_includeInstance) {
  return proto.Int32Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Int32Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int32Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Int32Block}
 */
proto.Int32Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Int32Block;
  return proto.Int32Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Int32Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Int32Block}
 */
proto.Int32Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Int32Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Int32Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Int32Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int32Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 values = 1;
 * @return {!Array<number>}
 */
proto.Int32Block.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.Int32Block.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.Int32Block.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Int32Block.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Int64Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Int64Block.repeatedFields_, null);
};
goog.inherits(proto.Int64Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Int64Block.displayName = 'proto.Int64Block';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Int64Block.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Int64Block.prototype.toObject = function(opt_includeInstance) {
  return proto.Int64Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Int64Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int64Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Int64Block}
 */
proto.Int64Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Int64Block;
  return proto.Int64Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Int64Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Int64Block}
 */
proto.Int64Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Int64Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Int64Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Int64Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int64Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 values = 1;
 * @return {!Array<number>}
 */
proto.Int64Block.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.Int64Block.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.Int64Block.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.Int64Block.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BoolBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BoolBlock.repeatedFields_, null);
};
goog.inherits(proto.BoolBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BoolBlock.displayName = 'proto.BoolBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BoolBlock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BoolBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.BoolBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BoolBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BoolBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BoolBlock}
 */
proto.BoolBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BoolBlock;
  return proto.BoolBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BoolBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BoolBlock}
 */
proto.BoolBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<boolean>} */ (reader.readPackedBool());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BoolBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BoolBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BoolBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BoolBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedBool(
      1,
      f
    );
  }
};


/**
 * repeated bool values = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array<boolean>}
 */
proto.BoolBlock.prototype.getValuesList = function() {
  return /** @type {!Array<boolean>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<boolean>} value */
proto.BoolBlock.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {boolean} value
 * @param {number=} opt_index
 */
proto.BoolBlock.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.BoolBlock.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimestampBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimestampBlock.repeatedFields_, null);
};
goog.inherits(proto.TimestampBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TimestampBlock.displayName = 'proto.TimestampBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimestampBlock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimestampBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.TimestampBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimestampBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimestampBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    google_protobuf_timestamp_pb.Timestamp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimestampBlock}
 */
proto.TimestampBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimestampBlock;
  return proto.TimestampBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimestampBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimestampBlock}
 */
proto.TimestampBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimestampBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimestampBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimestampBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimestampBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated google.protobuf.Timestamp values = 1;
 * @return {!Array<!proto.google.protobuf.Timestamp>}
 */
proto.TimestampBlock.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.google.protobuf.Timestamp>} */ (
    jspb.Message.getRepeatedWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {!Array<!proto.google.protobuf.Timestamp>} value */
proto.TimestampBlock.prototype.setValuesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.google.protobuf.Timestamp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.google.protobuf.Timestamp}
 */
proto.TimestampBlock.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.google.protobuf.Timestamp, opt_index);
};


proto.TimestampBlock.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ObjectRefBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ObjectRefBlock.repeatedFields_, null);
};
goog.inherits(proto.ObjectRefBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ObjectRefBlock.displayName = 'proto.ObjectRefBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ObjectRefBlock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ObjectRefBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.ObjectRefBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ObjectRefBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObjectRefBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    valuesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ObjectRefBlock}
 */
proto.ObjectRefBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ObjectRefBlock;
  return proto.ObjectRefBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ObjectRefBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ObjectRefBlock}
 */
proto.ObjectRefBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setValuesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ObjectRefBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ObjectRefBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ObjectRefBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObjectRefBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 values = 1;
 * @return {!Array<number>}
 */
proto.ObjectRefBlock.prototype.getValuesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.ObjectRefBlock.prototype.setValuesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.ObjectRefBlock.prototype.addValues = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.ObjectRefBlock.prototype.clearValuesList = function() {
  this.setValuesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StringRefBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StringRefBlock.repeatedFields_, null);
};
goog.inherits(proto.StringRefBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StringRefBlock.displayName = 'proto.StringRefBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StringRefBlock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StringRefBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.StringRefBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StringRefBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StringRefBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringidList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StringRefBlock}
 */
proto.StringRefBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StringRefBlock;
  return proto.StringRefBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StringRefBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StringRefBlock}
 */
proto.StringRefBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setStringidList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StringRefBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StringRefBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StringRefBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StringRefBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStringidList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
};


/**
 * repeated uint32 stringId = 1;
 * @return {!Array<number>}
 */
proto.StringRefBlock.prototype.getStringidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.StringRefBlock.prototype.setStringidList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.StringRefBlock.prototype.addStringid = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.StringRefBlock.prototype.clearStringidList = function() {
  this.setStringidList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ArrayBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ArrayBlock.repeatedFields_, null);
};
goog.inherits(proto.ArrayBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ArrayBlock.displayName = 'proto.ArrayBlock';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ArrayBlock.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ArrayBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.ArrayBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ArrayBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArrayBlock.toObject = function(includeInstance, msg) {
  var f, obj = {
    sizeList: jspb.Message.getRepeatedField(msg, 1),
    values: (f = msg.getValues()) && proto.Block.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ArrayBlock}
 */
proto.ArrayBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ArrayBlock;
  return proto.ArrayBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ArrayBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ArrayBlock}
 */
proto.ArrayBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setSizeList(value);
      break;
    case 2:
      var value = new proto.Block;
      reader.readMessage(value,proto.Block.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ArrayBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ArrayBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ArrayBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ArrayBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSizeList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Block.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 size = 1;
 * @return {!Array<number>}
 */
proto.ArrayBlock.prototype.getSizeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.ArrayBlock.prototype.setSizeList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.ArrayBlock.prototype.addSize = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.ArrayBlock.prototype.clearSizeList = function() {
  this.setSizeList([]);
};


/**
 * optional Block values = 2;
 * @return {?proto.Block}
 */
proto.ArrayBlock.prototype.getValues = function() {
  return /** @type{?proto.Block} */ (
    jspb.Message.getWrapperField(this, proto.Block, 2));
};


/** @param {?proto.Block|undefined} value */
proto.ArrayBlock.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ArrayBlock.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ArrayBlock.prototype.hasValues = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StringColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StringColumn.repeatedFields_, null);
};
goog.inherits(proto.StringColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StringColumn.displayName = 'proto.StringColumn';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StringColumn.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StringColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.StringColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StringColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StringColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stringsList: jspb.Message.getRepeatedField(msg, 2),
    clearprevious: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StringColumn}
 */
proto.StringColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StringColumn;
  return proto.StringColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StringColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StringColumn}
 */
proto.StringColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColumnid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addStrings(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClearprevious(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StringColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StringColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StringColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StringColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStringsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getClearprevious();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional uint32 columnId = 1;
 * @return {number}
 */
proto.StringColumn.prototype.getColumnid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.StringColumn.prototype.setColumnid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string strings = 2;
 * @return {!Array<string>}
 */
proto.StringColumn.prototype.getStringsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.StringColumn.prototype.setStringsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.StringColumn.prototype.addStrings = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.StringColumn.prototype.clearStringsList = function() {
  this.setStringsList([]);
};


/**
 * optional bool clearPrevious = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.StringColumn.prototype.getClearprevious = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.StringColumn.prototype.setClearprevious = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Objects = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Objects.repeatedFields_, null);
};
goog.inherits(proto.Objects, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Objects.displayName = 'proto.Objects';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Objects.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Objects.prototype.toObject = function(opt_includeInstance) {
  return proto.Objects.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Objects} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Objects.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.ObjectColumn.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Objects}
 */
proto.Objects.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Objects;
  return proto.Objects.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Objects} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Objects}
 */
proto.Objects.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ObjectColumn;
      reader.readMessage(value,proto.ObjectColumn.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Objects.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Objects.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Objects} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Objects.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ObjectColumn.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ObjectColumn columns = 1;
 * @return {!Array<!proto.ObjectColumn>}
 */
proto.Objects.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.ObjectColumn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ObjectColumn, 1));
};


/** @param {!Array<!proto.ObjectColumn>} value */
proto.Objects.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ObjectColumn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ObjectColumn}
 */
proto.Objects.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ObjectColumn, opt_index);
};


proto.Objects.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ObjectColumn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ObjectColumn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ObjectColumn.displayName = 'proto.ObjectColumn';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ObjectColumn.prototype.toObject = function(opt_includeInstance) {
  return proto.ObjectColumn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ObjectColumn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObjectColumn.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    objects: (f = msg.getObjects()) && proto.Columns.toObject(includeInstance, f),
    clearprevious: jspb.Message.getFieldWithDefault(msg, 3, false),
    count: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ObjectColumn}
 */
proto.ObjectColumn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ObjectColumn;
  return proto.ObjectColumn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ObjectColumn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ObjectColumn}
 */
proto.ObjectColumn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColumnid(value);
      break;
    case 2:
      var value = new proto.Columns;
      reader.readMessage(value,proto.Columns.deserializeBinaryFromReader);
      msg.setObjects(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClearprevious(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ObjectColumn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ObjectColumn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ObjectColumn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ObjectColumn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getObjects();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Columns.serializeBinaryToWriter
    );
  }
  f = message.getClearprevious();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 columnId = 1;
 * @return {number}
 */
proto.ObjectColumn.prototype.getColumnid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.ObjectColumn.prototype.setColumnid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Columns objects = 2;
 * @return {?proto.Columns}
 */
proto.ObjectColumn.prototype.getObjects = function() {
  return /** @type{?proto.Columns} */ (
    jspb.Message.getWrapperField(this, proto.Columns, 2));
};


/** @param {?proto.Columns|undefined} value */
proto.ObjectColumn.prototype.setObjects = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.ObjectColumn.prototype.clearObjects = function() {
  this.setObjects(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ObjectColumn.prototype.hasObjects = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool clearPrevious = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ObjectColumn.prototype.getClearprevious = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.ObjectColumn.prototype.setClearprevious = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional uint32 count = 4;
 * @return {number}
 */
proto.ObjectColumn.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.ObjectColumn.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.QueryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.QueryRequest.repeatedFields_, null);
};
goog.inherits(proto.QueryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.QueryRequest.displayName = 'proto.QueryRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.QueryRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.QueryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.QueryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.QueryRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    maxbatchsize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.Parameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.QueryRequest}
 */
proto.QueryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.QueryRequest;
  return proto.QueryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.QueryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.QueryRequest}
 */
proto.QueryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxbatchsize(value);
      break;
    case 3:
      var value = new proto.Parameter;
      reader.readMessage(value,proto.Parameter.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.QueryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.QueryRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.QueryRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.QueryRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaxbatchsize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Parameter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.QueryRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.QueryRequest.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 maxBatchSize = 2;
 * @return {number}
 */
proto.QueryRequest.prototype.getMaxbatchsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.QueryRequest.prototype.setMaxbatchsize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Parameter parameters = 3;
 * @return {!Array<!proto.Parameter>}
 */
proto.QueryRequest.prototype.getParametersList = function() {
  return /** @type{!Array<!proto.Parameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Parameter, 3));
};


/** @param {!Array<!proto.Parameter>} value */
proto.QueryRequest.prototype.setParametersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Parameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Parameter}
 */
proto.QueryRequest.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Parameter, opt_index);
};


proto.QueryRequest.prototype.clearParametersList = function() {
  this.setParametersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Scalar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Scalar.oneofGroups_);
};
goog.inherits(proto.Scalar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Scalar.displayName = 'proto.Scalar';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Scalar.oneofGroups_ = [[2,3,4,5,6,7,8]];

/**
 * @enum {number}
 */
proto.Scalar.ValueCase = {
  VALUE_NOT_SET: 0,
  DOUBLE: 2,
  FLOAT: 3,
  INT: 4,
  LONG: 5,
  BOOL: 6,
  TIMESTAMP: 7,
  STRING: 8
};

/**
 * @return {proto.Scalar.ValueCase}
 */
proto.Scalar.prototype.getValueCase = function() {
  return /** @type {proto.Scalar.ValueCase} */(jspb.Message.computeOneofCase(this, proto.Scalar.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Scalar.prototype.toObject = function(opt_includeInstance) {
  return proto.Scalar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Scalar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Scalar.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_double: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    pb_float: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    pb_int: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pb_long: jspb.Message.getFieldWithDefault(msg, 5, 0),
    bool: jspb.Message.getFieldWithDefault(msg, 6, false),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    string: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Scalar}
 */
proto.Scalar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Scalar;
  return proto.Scalar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Scalar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Scalar}
 */
proto.Scalar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDouble(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLong(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBool(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setString(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Scalar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Scalar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Scalar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Scalar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional double double = 2;
 * @return {number}
 */
proto.Scalar.prototype.getDouble = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Scalar.prototype.setDouble = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Scalar.oneofGroups_[0], value);
};


proto.Scalar.prototype.clearDouble = function() {
  jspb.Message.setOneofField(this, 2, proto.Scalar.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Scalar.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional float float = 3;
 * @return {number}
 */
proto.Scalar.prototype.getFloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Scalar.prototype.setFloat = function(value) {
  jspb.Message.setOneofField(this, 3, proto.Scalar.oneofGroups_[0], value);
};


proto.Scalar.prototype.clearFloat = function() {
  jspb.Message.setOneofField(this, 3, proto.Scalar.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Scalar.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 int = 4;
 * @return {number}
 */
proto.Scalar.prototype.getInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Scalar.prototype.setInt = function(value) {
  jspb.Message.setOneofField(this, 4, proto.Scalar.oneofGroups_[0], value);
};


proto.Scalar.prototype.clearInt = function() {
  jspb.Message.setOneofField(this, 4, proto.Scalar.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Scalar.prototype.hasInt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 long = 5;
 * @return {number}
 */
proto.Scalar.prototype.getLong = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Scalar.prototype.setLong = function(value) {
  jspb.Message.setOneofField(this, 5, proto.Scalar.oneofGroups_[0], value);
};


proto.Scalar.prototype.clearLong = function() {
  jspb.Message.setOneofField(this, 5, proto.Scalar.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Scalar.prototype.hasLong = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool bool = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Scalar.prototype.getBool = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.Scalar.prototype.setBool = function(value) {
  jspb.Message.setOneofField(this, 6, proto.Scalar.oneofGroups_[0], value);
};


proto.Scalar.prototype.clearBool = function() {
  jspb.Message.setOneofField(this, 6, proto.Scalar.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Scalar.prototype.hasBool = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional google.protobuf.Timestamp timestamp = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Scalar.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.Scalar.prototype.setTimestamp = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.Scalar.oneofGroups_[0], value);
};


proto.Scalar.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Scalar.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string string = 8;
 * @return {string}
 */
proto.Scalar.prototype.getString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Scalar.prototype.setString = function(value) {
  jspb.Message.setOneofField(this, 8, proto.Scalar.oneofGroups_[0], value);
};


proto.Scalar.prototype.clearString = function() {
  jspb.Message.setOneofField(this, 8, proto.Scalar.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Scalar.prototype.hasString = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Parameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Parameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Parameter.displayName = 'proto.Parameter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Parameter.prototype.toObject = function(opt_includeInstance) {
  return proto.Parameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Parameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Parameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.Scalar.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Parameter}
 */
proto.Parameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Parameter;
  return proto.Parameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Parameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Parameter}
 */
proto.Parameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Scalar;
      reader.readMessage(value,proto.Scalar.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Parameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Parameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Parameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Parameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Scalar.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Parameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Parameter.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Scalar value = 2;
 * @return {?proto.Scalar}
 */
proto.Parameter.prototype.getValue = function() {
  return /** @type{?proto.Scalar} */ (
    jspb.Message.getWrapperField(this, proto.Scalar, 2));
};


/** @param {?proto.Scalar|undefined} value */
proto.Parameter.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Parameter.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Parameter.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IndexRequest.repeatedFields_, null);
};
goog.inherits(proto.IndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IndexRequest.displayName = 'proto.IndexRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IndexRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.IndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    indexid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxbatchsize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    fieldsList: jspb.Message.getRepeatedField(msg, 4),
    records: (f = msg.getRecords()) && proto.Page.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IndexRequest}
 */
proto.IndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IndexRequest;
  return proto.IndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IndexRequest}
 */
proto.IndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTableid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndexid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxbatchsize(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    case 5:
      var value = new proto.Page;
      reader.readMessage(value,proto.Page.deserializeBinaryFromReader);
      msg.setRecords(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getIndexid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMaxbatchsize();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getRecords();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Page.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 tableId = 1;
 * @return {number}
 */
proto.IndexRequest.prototype.getTableid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IndexRequest.prototype.setTableid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 indexId = 2;
 * @return {number}
 */
proto.IndexRequest.prototype.getIndexid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IndexRequest.prototype.setIndexid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 maxBatchSize = 3;
 * @return {number}
 */
proto.IndexRequest.prototype.getMaxbatchsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IndexRequest.prototype.setMaxbatchsize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated string fields = 4;
 * @return {!Array<string>}
 */
proto.IndexRequest.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array<string>} value */
proto.IndexRequest.prototype.setFieldsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.IndexRequest.prototype.addFields = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.IndexRequest.prototype.clearFieldsList = function() {
  this.setFieldsList([]);
};


/**
 * optional Page records = 5;
 * @return {?proto.Page}
 */
proto.IndexRequest.prototype.getRecords = function() {
  return /** @type{?proto.Page} */ (
    jspb.Message.getWrapperField(this, proto.Page, 5));
};


/** @param {?proto.Page|undefined} value */
proto.IndexRequest.prototype.setRecords = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.IndexRequest.prototype.clearRecords = function() {
  this.setRecords(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IndexRequest.prototype.hasRecords = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TableMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TableMetadata.repeatedFields_, null);
};
goog.inherits(proto.TableMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TableMetadata.displayName = 'proto.TableMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TableMetadata.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TableMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.TableMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TableMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TableMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.ColumnMetadata.toObject, includeInstance),
    tableid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    indiciesList: jspb.Message.toObjectList(msg.getIndiciesList(),
    proto.IndexMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TableMetadata}
 */
proto.TableMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TableMetadata;
  return proto.TableMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TableMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TableMetadata}
 */
proto.TableMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.ColumnMetadata;
      reader.readMessage(value,proto.ColumnMetadata.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTableid(value);
      break;
    case 4:
      var value = new proto.IndexMetadata;
      reader.readMessage(value,proto.IndexMetadata.deserializeBinaryFromReader);
      msg.addIndicies(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TableMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TableMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TableMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TableMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ColumnMetadata.serializeBinaryToWriter
    );
  }
  f = message.getTableid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getIndiciesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.IndexMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.TableMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TableMetadata.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ColumnMetadata columns = 2;
 * @return {!Array<!proto.ColumnMetadata>}
 */
proto.TableMetadata.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.ColumnMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ColumnMetadata, 2));
};


/** @param {!Array<!proto.ColumnMetadata>} value */
proto.TableMetadata.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ColumnMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ColumnMetadata}
 */
proto.TableMetadata.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ColumnMetadata, opt_index);
};


proto.TableMetadata.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * optional int32 tableId = 3;
 * @return {number}
 */
proto.TableMetadata.prototype.getTableid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TableMetadata.prototype.setTableid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated IndexMetadata indicies = 4;
 * @return {!Array<!proto.IndexMetadata>}
 */
proto.TableMetadata.prototype.getIndiciesList = function() {
  return /** @type{!Array<!proto.IndexMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IndexMetadata, 4));
};


/** @param {!Array<!proto.IndexMetadata>} value */
proto.TableMetadata.prototype.setIndiciesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.IndexMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IndexMetadata}
 */
proto.TableMetadata.prototype.addIndicies = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.IndexMetadata, opt_index);
};


proto.TableMetadata.prototype.clearIndiciesList = function() {
  this.setIndiciesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IndexMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IndexMetadata.repeatedFields_, null);
};
goog.inherits(proto.IndexMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IndexMetadata.displayName = 'proto.IndexMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IndexMetadata.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IndexMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.IndexMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IndexMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IndexMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    indexid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.ColumnMetadata.toObject, includeInstance),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IndexMetadata}
 */
proto.IndexMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IndexMetadata;
  return proto.IndexMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IndexMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IndexMetadata}
 */
proto.IndexMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndexid(value);
      break;
    case 2:
      var value = new proto.ColumnMetadata;
      reader.readMessage(value,proto.ColumnMetadata.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IndexMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IndexMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IndexMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IndexMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndexid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ColumnMetadata.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 indexId = 1;
 * @return {number}
 */
proto.IndexMetadata.prototype.getIndexid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IndexMetadata.prototype.setIndexid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated ColumnMetadata columns = 2;
 * @return {!Array<!proto.ColumnMetadata>}
 */
proto.IndexMetadata.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.ColumnMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ColumnMetadata, 2));
};


/** @param {!Array<!proto.ColumnMetadata>} value */
proto.IndexMetadata.prototype.setColumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ColumnMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ColumnMetadata}
 */
proto.IndexMetadata.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ColumnMetadata, opt_index);
};


proto.IndexMetadata.prototype.clearColumnsList = function() {
  this.setColumnsList([]);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.IndexMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IndexMetadata.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ColumnMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ColumnMetadata.repeatedFields_, null);
};
goog.inherits(proto.ColumnMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ColumnMetadata.displayName = 'proto.ColumnMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ColumnMetadata.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ColumnMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.ColumnMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ColumnMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ColumnMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    columnid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    subcolumnsList: jspb.Message.toObjectList(msg.getSubcolumnsList(),
    proto.ColumnMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ColumnMetadata}
 */
proto.ColumnMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ColumnMetadata;
  return proto.ColumnMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ColumnMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ColumnMetadata}
 */
proto.ColumnMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setColumnid(value);
      break;
    case 3:
      var value = /** @type {!proto.KoraliumType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.ColumnMetadata;
      reader.readMessage(value,proto.ColumnMetadata.deserializeBinaryFromReader);
      msg.addSubcolumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ColumnMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ColumnMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ColumnMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ColumnMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getColumnid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSubcolumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ColumnMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ColumnMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ColumnMetadata.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 columnId = 2;
 * @return {number}
 */
proto.ColumnMetadata.prototype.getColumnid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.ColumnMetadata.prototype.setColumnid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional KoraliumType type = 3;
 * @return {!proto.KoraliumType}
 */
proto.ColumnMetadata.prototype.getType = function() {
  return /** @type {!proto.KoraliumType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.KoraliumType} value */
proto.ColumnMetadata.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated ColumnMetadata subColumns = 4;
 * @return {!Array<!proto.ColumnMetadata>}
 */
proto.ColumnMetadata.prototype.getSubcolumnsList = function() {
  return /** @type{!Array<!proto.ColumnMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ColumnMetadata, 4));
};


/** @param {!Array<!proto.ColumnMetadata>} value */
proto.ColumnMetadata.prototype.setSubcolumnsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ColumnMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ColumnMetadata}
 */
proto.ColumnMetadata.prototype.addSubcolumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ColumnMetadata, opt_index);
};


proto.ColumnMetadata.prototype.clearSubcolumnsList = function() {
  this.setSubcolumnsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TableMetadataResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TableMetadataResponse.repeatedFields_, null);
};
goog.inherits(proto.TableMetadataResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TableMetadataResponse.displayName = 'proto.TableMetadataResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TableMetadataResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TableMetadataResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TableMetadataResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TableMetadataResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TableMetadataResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablesList: jspb.Message.toObjectList(msg.getTablesList(),
    proto.TableMetadata.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TableMetadataResponse}
 */
proto.TableMetadataResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TableMetadataResponse;
  return proto.TableMetadataResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TableMetadataResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TableMetadataResponse}
 */
proto.TableMetadataResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TableMetadata;
      reader.readMessage(value,proto.TableMetadata.deserializeBinaryFromReader);
      msg.addTables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TableMetadataResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TableMetadataResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TableMetadataResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TableMetadataResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TableMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TableMetadata tables = 1;
 * @return {!Array<!proto.TableMetadata>}
 */
proto.TableMetadataResponse.prototype.getTablesList = function() {
  return /** @type{!Array<!proto.TableMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TableMetadata, 1));
};


/** @param {!Array<!proto.TableMetadata>} value */
proto.TableMetadataResponse.prototype.setTablesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TableMetadata=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TableMetadata}
 */
proto.TableMetadataResponse.prototype.addTables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TableMetadata, opt_index);
};


proto.TableMetadataResponse.prototype.clearTablesList = function() {
  this.setTablesList([]);
};


/**
 * @enum {number}
 */
proto.KoraliumType = {
  DOUBLE: 0,
  FLOAT: 1,
  INT32: 2,
  INT64: 3,
  BOOL: 4,
  STRING: 5,
  TIMESTAMP: 6,
  OBJECT: 7,
  ARRAY: 8
};

goog.object.extend(exports, proto);

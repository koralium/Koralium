/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ElasticSearchOptions', null, global);
goog.exportSymbol('proto.Format', null, global);
goog.exportSymbol('proto.RowLevelSecurityRequest', null, global);
goog.exportSymbol('proto.RowLevelSecurityResponse', null, global);
goog.exportSymbol('proto.SqlOptions', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RowLevelSecurityRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.RowLevelSecurityRequest.oneofGroups_);
};
goog.inherits(proto.RowLevelSecurityRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RowLevelSecurityRequest.displayName = 'proto.RowLevelSecurityRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.RowLevelSecurityRequest.oneofGroups_ = [[4,5]];

/**
 * @enum {number}
 */
proto.RowLevelSecurityRequest.FormatoptionsCase = {
  FORMATOPTIONS_NOT_SET: 0,
  SQLOPTIONS: 4,
  ELASTICSEARCHOPTIONS: 5
};

/**
 * @return {proto.RowLevelSecurityRequest.FormatoptionsCase}
 */
proto.RowLevelSecurityRequest.prototype.getFormatoptionsCase = function() {
  return /** @type {proto.RowLevelSecurityRequest.FormatoptionsCase} */(jspb.Message.computeOneofCase(this, proto.RowLevelSecurityRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RowLevelSecurityRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.RowLevelSecurityRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RowLevelSecurityRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RowLevelSecurityRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    format: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sqloptions: (f = msg.getSqloptions()) && proto.SqlOptions.toObject(includeInstance, f),
    elasticsearchoptions: (f = msg.getElasticsearchoptions()) && proto.ElasticSearchOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RowLevelSecurityRequest}
 */
proto.RowLevelSecurityRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RowLevelSecurityRequest;
  return proto.RowLevelSecurityRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RowLevelSecurityRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RowLevelSecurityRequest}
 */
proto.RowLevelSecurityRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    case 3:
      var value = /** @type {!proto.Format} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 4:
      var value = new proto.SqlOptions;
      reader.readMessage(value,proto.SqlOptions.deserializeBinaryFromReader);
      msg.setSqloptions(value);
      break;
    case 5:
      var value = new proto.ElasticSearchOptions;
      reader.readMessage(value,proto.ElasticSearchOptions.deserializeBinaryFromReader);
      msg.setElasticsearchoptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RowLevelSecurityRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RowLevelSecurityRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RowLevelSecurityRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RowLevelSecurityRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSqloptions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.SqlOptions.serializeBinaryToWriter
    );
  }
  f = message.getElasticsearchoptions();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ElasticSearchOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.RowLevelSecurityRequest.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RowLevelSecurityRequest.prototype.setTablename = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Format format = 3;
 * @return {!proto.Format}
 */
proto.RowLevelSecurityRequest.prototype.getFormat = function() {
  return /** @type {!proto.Format} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Format} value */
proto.RowLevelSecurityRequest.prototype.setFormat = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SqlOptions sqlOptions = 4;
 * @return {?proto.SqlOptions}
 */
proto.RowLevelSecurityRequest.prototype.getSqloptions = function() {
  return /** @type{?proto.SqlOptions} */ (
    jspb.Message.getWrapperField(this, proto.SqlOptions, 4));
};


/** @param {?proto.SqlOptions|undefined} value */
proto.RowLevelSecurityRequest.prototype.setSqloptions = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.RowLevelSecurityRequest.oneofGroups_[0], value);
};


proto.RowLevelSecurityRequest.prototype.clearSqloptions = function() {
  this.setSqloptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RowLevelSecurityRequest.prototype.hasSqloptions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ElasticSearchOptions elasticSearchOptions = 5;
 * @return {?proto.ElasticSearchOptions}
 */
proto.RowLevelSecurityRequest.prototype.getElasticsearchoptions = function() {
  return /** @type{?proto.ElasticSearchOptions} */ (
    jspb.Message.getWrapperField(this, proto.ElasticSearchOptions, 5));
};


/** @param {?proto.ElasticSearchOptions|undefined} value */
proto.RowLevelSecurityRequest.prototype.setElasticsearchoptions = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.RowLevelSecurityRequest.oneofGroups_[0], value);
};


proto.RowLevelSecurityRequest.prototype.clearElasticsearchoptions = function() {
  this.setElasticsearchoptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RowLevelSecurityRequest.prototype.hasElasticsearchoptions = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RowLevelSecurityResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RowLevelSecurityResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RowLevelSecurityResponse.displayName = 'proto.RowLevelSecurityResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RowLevelSecurityResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.RowLevelSecurityResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RowLevelSecurityResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RowLevelSecurityResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    filter: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RowLevelSecurityResponse}
 */
proto.RowLevelSecurityResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RowLevelSecurityResponse;
  return proto.RowLevelSecurityResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RowLevelSecurityResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RowLevelSecurityResponse}
 */
proto.RowLevelSecurityResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RowLevelSecurityResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RowLevelSecurityResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RowLevelSecurityResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RowLevelSecurityResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilter();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string filter = 1;
 * @return {string}
 */
proto.RowLevelSecurityResponse.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RowLevelSecurityResponse.prototype.setFilter = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SqlOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SqlOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SqlOptions.displayName = 'proto.SqlOptions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SqlOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.SqlOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SqlOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SqlOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablealias: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SqlOptions}
 */
proto.SqlOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SqlOptions;
  return proto.SqlOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SqlOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SqlOptions}
 */
proto.SqlOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablealias(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SqlOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SqlOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SqlOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SqlOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablealias();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tableAlias = 1;
 * @return {string}
 */
proto.SqlOptions.prototype.getTablealias = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SqlOptions.prototype.setTablealias = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ElasticSearchOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ElasticSearchOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ElasticSearchOptions.displayName = 'proto.ElasticSearchOptions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ElasticSearchOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.ElasticSearchOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ElasticSearchOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ElasticSearchOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    lowercasestringvalues: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ElasticSearchOptions}
 */
proto.ElasticSearchOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ElasticSearchOptions;
  return proto.ElasticSearchOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ElasticSearchOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ElasticSearchOptions}
 */
proto.ElasticSearchOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLowercasestringvalues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ElasticSearchOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ElasticSearchOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ElasticSearchOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ElasticSearchOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLowercasestringvalues();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool lowerCaseStringValues = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ElasticSearchOptions.prototype.getLowercasestringvalues = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.ElasticSearchOptions.prototype.setLowercasestringvalues = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.Format = {
  SQL: 0,
  ELASTICSEARCH: 1
};

goog.object.extend(exports, proto);
